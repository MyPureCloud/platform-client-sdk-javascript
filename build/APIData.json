{
  "deletealertingalert": {
    "operationId": "deletealertingalert",
    "functionName": "deleteAlertingAlert",
    "signature": "deleteAlertingAlert(alertId)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\n\n// Delete an alert\napiInstance.deleteAlertingAlert(alertId)\n  .then(() => {\n    console.log(\"deleteAlertingAlert returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAlertingAlert\");\n    console.error(err);\n  });"
  },
  "deletealertinginteractionstatsalert": {
    "operationId": "deletealertinginteractionstatsalert",
    "functionName": "deleteAlertingInteractionstatsAlert",
    "signature": "deleteAlertingInteractionstatsAlert(alertId)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\n\n// Delete an interaction stats alert\napiInstance.deleteAlertingInteractionstatsAlert(alertId)\n  .then(() => {\n    console.log(\"deleteAlertingInteractionstatsAlert returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAlertingInteractionstatsAlert\");\n    console.error(err);\n  });"
  },
  "deletealertinginteractionstatsrule": {
    "operationId": "deletealertinginteractionstatsrule",
    "functionName": "deleteAlertingInteractionstatsRule",
    "signature": "deleteAlertingInteractionstatsRule(ruleId)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet ruleId = \"ruleId_example\"; // String | Rule ID\n\n// Delete an interaction stats rule.\napiInstance.deleteAlertingInteractionstatsRule(ruleId)\n  .then(() => {\n    console.log(\"deleteAlertingInteractionstatsRule returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAlertingInteractionstatsRule\");\n    console.error(err);\n  });"
  },
  "deletealertingrule": {
    "operationId": "deletealertingrule",
    "functionName": "deleteAlertingRule",
    "signature": "deleteAlertingRule(ruleId)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet ruleId = \"ruleId_example\"; // String | Rule Id\n\n// Delete a rule.\napiInstance.deleteAlertingRule(ruleId)\n  .then(() => {\n    console.log(\"deleteAlertingRule returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAlertingRule\");\n    console.error(err);\n  });"
  },
  "getalertingalert": {
    "operationId": "getalertingalert",
    "functionName": "getAlertingAlert",
    "signature": "getAlertingAlert(alertId)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CommonAlert",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\n\n// Get an alert\napiInstance.getAlertingAlert(alertId)\n  .then((data) => {\n    console.log(`getAlertingAlert success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingAlert\");\n    console.error(err);\n  });"
  },
  "getalertingalertsactive": {
    "operationId": "getalertingalertsactive",
    "functionName": "getAlertingAlertsActive",
    "signature": "getAlertingAlertsActive()",
    "return": "ActiveAlertCount",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\n// Gets active alert count for a user.\napiInstance.getAlertingAlertsActive()\n  .then((data) => {\n    console.log(`getAlertingAlertsActive success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingAlertsActive\");\n    console.error(err);\n  });"
  },
  "getalertinginteractionstatsalert": {
    "operationId": "getalertinginteractionstatsalert",
    "functionName": "getAlertingInteractionstatsAlert",
    "signature": "getAlertingInteractionstatsAlert(alertId, expand)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsAlert",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get an interaction stats alert\napiInstance.getAlertingInteractionstatsAlert(alertId, opts)\n  .then((data) => {\n    console.log(`getAlertingInteractionstatsAlert success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingInteractionstatsAlert\");\n    console.error(err);\n  });"
  },
  "getalertinginteractionstatsalerts": {
    "operationId": "getalertinginteractionstatsalerts",
    "functionName": "getAlertingInteractionstatsAlerts",
    "signature": "getAlertingInteractionstatsAlerts(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsAlertContainer",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get interaction stats alert list.\napiInstance.getAlertingInteractionstatsAlerts(opts)\n  .then((data) => {\n    console.log(`getAlertingInteractionstatsAlerts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingInteractionstatsAlerts\");\n    console.error(err);\n  });"
  },
  "getalertinginteractionstatsalertsunread": {
    "operationId": "getalertinginteractionstatsalertsunread",
    "functionName": "getAlertingInteractionstatsAlertsUnread",
    "signature": "getAlertingInteractionstatsAlertsUnread()",
    "return": "UnreadMetric",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\n// Gets user unread count of interaction stats alerts.\napiInstance.getAlertingInteractionstatsAlertsUnread()\n  .then((data) => {\n    console.log(`getAlertingInteractionstatsAlertsUnread success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingInteractionstatsAlertsUnread\");\n    console.error(err);\n  });"
  },
  "getalertinginteractionstatsrule": {
    "operationId": "getalertinginteractionstatsrule",
    "functionName": "getAlertingInteractionstatsRule",
    "signature": "getAlertingInteractionstatsRule(ruleId, expand)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet ruleId = \"ruleId_example\"; // String | Rule ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get an interaction stats rule.\napiInstance.getAlertingInteractionstatsRule(ruleId, opts)\n  .then((data) => {\n    console.log(`getAlertingInteractionstatsRule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingInteractionstatsRule\");\n    console.error(err);\n  });"
  },
  "getalertinginteractionstatsrules": {
    "operationId": "getalertinginteractionstatsrules",
    "functionName": "getAlertingInteractionstatsRules",
    "signature": "getAlertingInteractionstatsRules(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRuleContainer",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get an interaction stats rule list.\napiInstance.getAlertingInteractionstatsRules(opts)\n  .then((data) => {\n    console.log(`getAlertingInteractionstatsRules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingInteractionstatsRules\");\n    console.error(err);\n  });"
  },
  "getalertingrule": {
    "operationId": "getalertingrule",
    "functionName": "getAlertingRule",
    "signature": "getAlertingRule(ruleId)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CommonRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet ruleId = \"ruleId_example\"; // String | Rule Id\n\n// Get a rule.\napiInstance.getAlertingRule(ruleId)\n  .then((data) => {\n    console.log(`getAlertingRule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAlertingRule\");\n    console.error(err);\n  });"
  },
  "patchalertingalert": {
    "operationId": "patchalertingalert",
    "functionName": "patchAlertingAlert",
    "signature": "patchAlertingAlert(alertId, body)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "CommonAlert",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Allows an entity to mute/snooze an alert or update the unread status of the alert.\napiInstance.patchAlertingAlert(alertId, opts)\n  .then((data) => {\n    console.log(`patchAlertingAlert success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchAlertingAlert\");\n    console.error(err);\n  });"
  },
  "patchalertingalertsbulk": {
    "operationId": "patchalertingalertsbulk",
    "functionName": "patchAlertingAlertsBulk",
    "signature": "patchAlertingAlertsBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet body = {}; // Object | \n\n// Bulk alert updates\napiInstance.patchAlertingAlertsBulk(body)\n  .then((data) => {\n    console.log(`patchAlertingAlertsBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchAlertingAlertsBulk\");\n    console.error(err);\n  });"
  },
  "patchalertingrulesbulk": {
    "operationId": "patchalertingrulesbulk",
    "functionName": "patchAlertingRulesBulk",
    "signature": "patchAlertingRulesBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet body = {}; // Object | \n\n// Bulk update of notification lists\napiInstance.patchAlertingRulesBulk(body)\n  .then((data) => {\n    console.log(`patchAlertingRulesBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchAlertingRulesBulk\");\n    console.error(err);\n  });"
  },
  "postalertingalertsquery": {
    "operationId": "postalertingalertsquery",
    "functionName": "postAlertingAlertsQuery",
    "signature": "postAlertingAlertsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "AlertListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Gets a paged list of alerts. The max page size is 50\napiInstance.postAlertingAlertsQuery(opts)\n  .then((data) => {\n    console.log(`postAlertingAlertsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAlertingAlertsQuery\");\n    console.error(err);\n  });"
  },
  "postalertinginteractionstatsrules": {
    "operationId": "postalertinginteractionstatsrules",
    "functionName": "postAlertingInteractionstatsRules",
    "signature": "postAlertingInteractionstatsRules(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet body = {}; // Object | AlertingRule\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Create an interaction stats rule.\napiInstance.postAlertingInteractionstatsRules(body, opts)\n  .then((data) => {\n    console.log(`postAlertingInteractionstatsRules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAlertingInteractionstatsRules\");\n    console.error(err);\n  });"
  },
  "postalertingrules": {
    "operationId": "postalertingrules",
    "functionName": "postAlertingRules",
    "signature": "postAlertingRules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CommonRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet body = {}; // Object | rule to be created\n\n// Create a Rule.\napiInstance.postAlertingRules(body)\n  .then((data) => {\n    console.log(`postAlertingRules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAlertingRules\");\n    console.error(err);\n  });"
  },
  "postalertingrulesbulkremove": {
    "operationId": "postalertingrulesbulkremove",
    "functionName": "postAlertingRulesBulkRemove",
    "signature": "postAlertingRulesBulkRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet body = {}; // Object | \n\n// Bulk remove rules\napiInstance.postAlertingRulesBulkRemove(body)\n  .then((data) => {\n    console.log(`postAlertingRulesBulkRemove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAlertingRulesBulkRemove\");\n    console.error(err);\n  });"
  },
  "postalertingrulesquery": {
    "operationId": "postalertingrulesquery",
    "functionName": "postAlertingRulesQuery",
    "signature": "postAlertingRulesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "CommonRuleContainer",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Get a paged list of rules.  The max size of the page is 50 items.\napiInstance.postAlertingRulesQuery(opts)\n  .then((data) => {\n    console.log(`postAlertingRulesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAlertingRulesQuery\");\n    console.error(err);\n  });"
  },
  "putalertingalert": {
    "operationId": "putalertingalert",
    "functionName": "putAlertingAlert",
    "signature": "putAlertingAlert(alertId, body)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UnreadStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update an alert read status\napiInstance.putAlertingAlert(alertId, opts)\n  .then((data) => {\n    console.log(`putAlertingAlert success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAlertingAlert\");\n    console.error(err);\n  });"
  },
  "putalertinginteractionstatsalert": {
    "operationId": "putalertinginteractionstatsalert",
    "functionName": "putAlertingInteractionstatsAlert",
    "signature": "putAlertingInteractionstatsAlert(alertId, body, expand)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UnreadStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\nlet body = {}; // Object | InteractionStatsAlert\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Update an interaction stats alert read status\napiInstance.putAlertingInteractionstatsAlert(alertId, body, opts)\n  .then((data) => {\n    console.log(`putAlertingInteractionstatsAlert success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAlertingInteractionstatsAlert\");\n    console.error(err);\n  });"
  },
  "putalertinginteractionstatsrule": {
    "operationId": "putalertinginteractionstatsrule",
    "functionName": "putAlertingInteractionstatsRule",
    "signature": "putAlertingInteractionstatsRule(ruleId, body, expand)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet ruleId = \"ruleId_example\"; // String | Rule ID\nlet body = {}; // Object | AlertingRule\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Update an interaction stats rule\napiInstance.putAlertingInteractionstatsRule(ruleId, body, opts)\n  .then((data) => {\n    console.log(`putAlertingInteractionstatsRule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAlertingInteractionstatsRule\");\n    console.error(err);\n  });"
  },
  "putalertingrule": {
    "operationId": "putalertingrule",
    "functionName": "putAlertingRule",
    "signature": "putAlertingRule(ruleId, body)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CommonRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AlertingApi();\n\nlet ruleId = \"ruleId_example\"; // String | Rule Id\nlet body = {}; // Object | rule to be updated\n\n// Update a rule\napiInstance.putAlertingRule(ruleId, body)\n  .then((data) => {\n    console.log(`putAlertingRule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAlertingRule\");\n    console.error(err);\n  });"
  },
  "deleteanalyticsconversationsdetailsjob": {
    "operationId": "deleteanalyticsconversationsdetailsjob",
    "functionName": "deleteAnalyticsConversationsDetailsJob",
    "signature": "deleteAnalyticsConversationsDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Delete/cancel an async details job\napiInstance.deleteAnalyticsConversationsDetailsJob(jobId)\n  .then(() => {\n    console.log(\"deleteAnalyticsConversationsDetailsJob returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAnalyticsConversationsDetailsJob\");\n    console.error(err);\n  });"
  },
  "deleteanalyticsreportingschedule": {
    "operationId": "deleteanalyticsreportingschedule",
    "functionName": "deleteAnalyticsReportingSchedule",
    "signature": "deleteAnalyticsReportingSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n// Delete a scheduled report job.\napiInstance.deleteAnalyticsReportingSchedule(scheduleId)\n  .then(() => {\n    console.log(\"deleteAnalyticsReportingSchedule returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAnalyticsReportingSchedule\");\n    console.error(err);\n  });"
  },
  "deleteanalyticsusersdetailsjob": {
    "operationId": "deleteanalyticsusersdetailsjob",
    "functionName": "deleteAnalyticsUsersDetailsJob",
    "signature": "deleteAnalyticsUsersDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Delete/cancel an async request\napiInstance.deleteAnalyticsUsersDetailsJob(jobId)\n  .then(() => {\n    console.log(\"deleteAnalyticsUsersDetailsJob returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAnalyticsUsersDetailsJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsactionsaggregatesjob": {
    "operationId": "getanalyticsactionsaggregatesjob",
    "functionName": "getAnalyticsActionsAggregatesJob",
    "signature": "getAnalyticsActionsAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for action aggregates\napiInstance.getAnalyticsActionsAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsActionsAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsActionsAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsactionsaggregatesjobresults": {
    "operationId": "getanalyticsactionsaggregatesjobresults",
    "functionName": "getAnalyticsActionsAggregatesJobResults",
    "signature": "getAnalyticsActionsAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsActionsAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsActionsAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsActionsAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsbotflowreportingturns": {
    "operationId": "getanalyticsbotflowreportingturns",
    "functionName": "getAnalyticsBotflowReportingturns",
    "signature": "getAnalyticsBotflowReportingturns(botFlowId, after, pageSize, interval, actionId, sessionId, language, askActionResults)",
    "parameters": [
      {
        "name": "botFlowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "actionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sessionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      },
      {
        "name": "askActionResults",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportingTurnsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet botFlowId = \"botFlowId_example\"; // String | ID of the bot flow.\nlet opts = { \n  \"after\": \"after_example\", // String | The cursor that points to the ID of the last item in the list of entities that has been returned.\n  \"pageSize\": \"50\", // String | Max number of entities to return. Maximum of 250\n  \"interval\": 2023-07-17T08:15:44.586Z/2023-07-26T09:22:33.111Z, // String | Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: '2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07'. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"actionId\": \"actionId_example\", // String | Optional action ID to get the reporting turns associated to a particular flow action\n  \"sessionId\": \"sessionId_example\", // String | Optional session ID to get the reporting turns for a particular session. Specifying a session ID alongside an action ID or a language or any ask action results is not allowed.\n  \"language\": en-us, // String | Optional language code to get the reporting turns for a particular language\n  \"askActionResults\": \"askActionResults_example\" // String | Optional case-insensitive comma separated list of ask action results to filter the reporting turns.\n};\n\n// Get Reporting Turns.\napiInstance.getAnalyticsBotflowReportingturns(botFlowId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsBotflowReportingturns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsBotflowReportingturns\");\n    console.error(err);\n  });"
  },
  "getanalyticsbotsaggregatesjob": {
    "operationId": "getanalyticsbotsaggregatesjob",
    "functionName": "getAnalyticsBotsAggregatesJob",
    "signature": "getAnalyticsBotsAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for bot aggregates\napiInstance.getAnalyticsBotsAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsBotsAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsBotsAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsbotsaggregatesjobresults": {
    "operationId": "getanalyticsbotsaggregatesjobresults",
    "functionName": "getAnalyticsBotsAggregatesJobResults",
    "signature": "getAnalyticsBotsAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BotAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsBotsAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsBotsAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsBotsAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsconversationdetails": {
    "operationId": "getanalyticsconversationdetails",
    "functionName": "getAnalyticsConversationDetails",
    "signature": "getAnalyticsConversationDetails(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get a conversation by id\napiInstance.getAnalyticsConversationDetails(conversationId)\n  .then((data) => {\n    console.log(`getAnalyticsConversationDetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsConversationDetails\");\n    console.error(err);\n  });"
  },
  "getanalyticsconversationsaggregatesjob": {
    "operationId": "getanalyticsconversationsaggregatesjob",
    "functionName": "getAnalyticsConversationsAggregatesJob",
    "signature": "getAnalyticsConversationsAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for conversation aggregates\napiInstance.getAnalyticsConversationsAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsConversationsAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsConversationsAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsconversationsaggregatesjobresults": {
    "operationId": "getanalyticsconversationsaggregatesjobresults",
    "functionName": "getAnalyticsConversationsAggregatesJobResults",
    "signature": "getAnalyticsConversationsAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ConversationAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsConversationsAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsConversationsAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsConversationsAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsconversationsdetails": {
    "operationId": "getanalyticsconversationsdetails",
    "functionName": "getAnalyticsConversationsDetails",
    "signature": "getAnalyticsConversationsDetails(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributesMultiGetResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"id\": [\"id_example\"] // [String] | Comma-separated conversation ids\n};\n\n// Gets multiple conversations by id\napiInstance.getAnalyticsConversationsDetails(opts)\n  .then((data) => {\n    console.log(`getAnalyticsConversationsDetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsConversationsDetails\");\n    console.error(err);\n  });"
  },
  "getanalyticsconversationsdetailsjob": {
    "operationId": "getanalyticsconversationsdetailsjob",
    "functionName": "getAnalyticsConversationsDetailsJob",
    "signature": "getAnalyticsConversationsDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for conversation details\napiInstance.getAnalyticsConversationsDetailsJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsConversationsDetailsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsConversationsDetailsJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsconversationsdetailsjobresults": {
    "operationId": "getanalyticsconversationsdetailsjobresults",
    "functionName": "getAnalyticsConversationsDetailsJobResults",
    "signature": "getAnalyticsConversationsDetailsJobResults(jobId, cursor, pageSize)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "AnalyticsConversationAsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  \"pageSize\": 3.4 // Number | The desired maximum number of results\n};\n\n// Fetch a page of results for an async details job\napiInstance.getAnalyticsConversationsDetailsJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsConversationsDetailsJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsConversationsDetailsJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsconversationsdetailsjobsavailability": {
    "operationId": "getanalyticsconversationsdetailsjobsavailability",
    "functionName": "getAnalyticsConversationsDetailsJobsAvailability",
    "signature": "getAnalyticsConversationsDetailsJobsAvailability()",
    "return": "DataAvailabilityResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Lookup the datalake availability date and time\napiInstance.getAnalyticsConversationsDetailsJobsAvailability()\n  .then((data) => {\n    console.log(`getAnalyticsConversationsDetailsJobsAvailability success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsConversationsDetailsJobsAvailability\");\n    console.error(err);\n  });"
  },
  "getanalyticsdataretentionsettings": {
    "operationId": "getanalyticsdataretentionsettings",
    "functionName": "getAnalyticsDataretentionSettings",
    "signature": "getAnalyticsDataretentionSettings()",
    "return": "AnalyticsDataRetentionResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\n// Get analytics data retention setting\napiInstance.getAnalyticsDataretentionSettings()\n  .then((data) => {\n    console.log(`getAnalyticsDataretentionSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsDataretentionSettings\");\n    console.error(err);\n  });"
  },
  "getanalyticsevaluationsaggregatesjob": {
    "operationId": "getanalyticsevaluationsaggregatesjob",
    "functionName": "getAnalyticsEvaluationsAggregatesJob",
    "signature": "getAnalyticsEvaluationsAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for evaluation aggregates\napiInstance.getAnalyticsEvaluationsAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsEvaluationsAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsEvaluationsAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsevaluationsaggregatesjobresults": {
    "operationId": "getanalyticsevaluationsaggregatesjobresults",
    "functionName": "getAnalyticsEvaluationsAggregatesJobResults",
    "signature": "getAnalyticsEvaluationsAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsEvaluationsAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsEvaluationsAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsEvaluationsAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsflowsaggregatesjob": {
    "operationId": "getanalyticsflowsaggregatesjob",
    "functionName": "getAnalyticsFlowsAggregatesJob",
    "signature": "getAnalyticsFlowsAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FlowsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for Flow aggregates\napiInstance.getAnalyticsFlowsAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsFlowsAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsFlowsAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsflowsaggregatesjobresults": {
    "operationId": "getanalyticsflowsaggregatesjobresults",
    "functionName": "getAnalyticsFlowsAggregatesJobResults",
    "signature": "getAnalyticsFlowsAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FlowAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FlowsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsFlowsAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsFlowsAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsFlowsAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsjourneysaggregatesjob": {
    "operationId": "getanalyticsjourneysaggregatesjob",
    "functionName": "getAnalyticsJourneysAggregatesJob",
    "signature": "getAnalyticsJourneysAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for journey aggregates\napiInstance.getAnalyticsJourneysAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsJourneysAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsJourneysAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsjourneysaggregatesjobresults": {
    "operationId": "getanalyticsjourneysaggregatesjobresults",
    "functionName": "getAnalyticsJourneysAggregatesJobResults",
    "signature": "getAnalyticsJourneysAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "JourneyAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsJourneysAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsJourneysAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsJourneysAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsknowledgeaggregatesjob": {
    "operationId": "getanalyticsknowledgeaggregatesjob",
    "functionName": "getAnalyticsKnowledgeAggregatesJob",
    "signature": "getAnalyticsKnowledgeAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for knowledge aggregates\napiInstance.getAnalyticsKnowledgeAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsKnowledgeAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsKnowledgeAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsknowledgeaggregatesjobresults": {
    "operationId": "getanalyticsknowledgeaggregatesjobresults",
    "functionName": "getAnalyticsKnowledgeAggregatesJobResults",
    "signature": "getAnalyticsKnowledgeAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "KnowledgeAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsKnowledgeAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsKnowledgeAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsKnowledgeAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingexports": {
    "operationId": "getanalyticsreportingexports",
    "functionName": "getAnalyticsReportingExports",
    "signature": "getAnalyticsReportingExports(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ReportingExportJobListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get all view export requests for a user\napiInstance.getAnalyticsReportingExports(opts)\n  .then((data) => {\n    console.log(`getAnalyticsReportingExports success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingExports\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingexportsmetadata": {
    "operationId": "getanalyticsreportingexportsmetadata",
    "functionName": "getAnalyticsReportingExportsMetadata",
    "signature": "getAnalyticsReportingExportsMetadata()",
    "return": "ReportingExportMetadataJobListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\n// Get all export metadata\napiInstance.getAnalyticsReportingExportsMetadata()\n  .then((data) => {\n    console.log(`getAnalyticsReportingExportsMetadata success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingExportsMetadata\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingmetadata": {
    "operationId": "getanalyticsreportingmetadata",
    "functionName": "getAnalyticsReportingMetadata",
    "signature": "getAnalyticsReportingMetadata(pageNumber, pageSize, locale)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportMetaDataEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"locale\": \"locale_example\" // String | Locale\n};\n\n// Get list of reporting metadata.\napiInstance.getAnalyticsReportingMetadata(opts)\n  .then((data) => {\n    console.log(`getAnalyticsReportingMetadata success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingMetadata\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingreportidmetadata": {
    "operationId": "getanalyticsreportingreportidmetadata",
    "functionName": "getAnalyticsReportingReportIdMetadata",
    "signature": "getAnalyticsReportingReportIdMetadata(reportId, locale)",
    "parameters": [
      {
        "name": "reportId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportMetaData",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet reportId = \"reportId_example\"; // String | Report ID\nlet opts = { \n  \"locale\": \"locale_example\" // String | Locale\n};\n\n// Get a reporting metadata.\napiInstance.getAnalyticsReportingReportIdMetadata(reportId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsReportingReportIdMetadata success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingReportIdMetadata\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingreportformats": {
    "operationId": "getanalyticsreportingreportformats",
    "functionName": "getAnalyticsReportingReportformats",
    "signature": "getAnalyticsReportingReportformats()",
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\n// Get a list of report formats\napiInstance.getAnalyticsReportingReportformats()\n  .then((data) => {\n    console.log(`getAnalyticsReportingReportformats success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingReportformats\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingschedule": {
    "operationId": "getanalyticsreportingschedule",
    "functionName": "getAnalyticsReportingSchedule",
    "signature": "getAnalyticsReportingSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n// Get a scheduled report job.\napiInstance.getAnalyticsReportingSchedule(scheduleId)\n  .then((data) => {\n    console.log(`getAnalyticsReportingSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingSchedule\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingschedulehistory": {
    "operationId": "getanalyticsreportingschedulehistory",
    "functionName": "getAnalyticsReportingScheduleHistory",
    "signature": "getAnalyticsReportingScheduleHistory(scheduleId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ReportRunEntryEntityDomainListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\nlet opts = { \n  \"pageNumber\": 1, // Number | \n  \"pageSize\": 25 // Number | \n};\n\n// Get list of completed scheduled report jobs.\napiInstance.getAnalyticsReportingScheduleHistory(scheduleId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsReportingScheduleHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingScheduleHistory\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingschedulehistorylatest": {
    "operationId": "getanalyticsreportingschedulehistorylatest",
    "functionName": "getAnalyticsReportingScheduleHistoryLatest",
    "signature": "getAnalyticsReportingScheduleHistoryLatest(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportRunEntry",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n// Get most recently completed scheduled report job.\napiInstance.getAnalyticsReportingScheduleHistoryLatest(scheduleId)\n  .then((data) => {\n    console.log(`getAnalyticsReportingScheduleHistoryLatest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingScheduleHistoryLatest\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingschedulehistoryrunid": {
    "operationId": "getanalyticsreportingschedulehistoryrunid",
    "functionName": "getAnalyticsReportingScheduleHistoryRunId",
    "signature": "getAnalyticsReportingScheduleHistoryRunId(runId, scheduleId)",
    "parameters": [
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportRunEntry",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet runId = \"runId_example\"; // String | Run ID\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n// A completed scheduled report job\napiInstance.getAnalyticsReportingScheduleHistoryRunId(runId, scheduleId)\n  .then((data) => {\n    console.log(`getAnalyticsReportingScheduleHistoryRunId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingScheduleHistoryRunId\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingschedules": {
    "operationId": "getanalyticsreportingschedules",
    "functionName": "getAnalyticsReportingSchedules",
    "signature": "getAnalyticsReportingSchedules(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ReportScheduleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get a list of scheduled report jobs\napiInstance.getAnalyticsReportingSchedules(opts)\n  .then((data) => {\n    console.log(`getAnalyticsReportingSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingSchedules\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingsettings": {
    "operationId": "getanalyticsreportingsettings",
    "functionName": "getAnalyticsReportingSettings",
    "signature": "getAnalyticsReportingSettings()",
    "return": "AnalyticsReportingSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\n// Get AnalyticsReportingSettings for an organization\napiInstance.getAnalyticsReportingSettings()\n  .then((data) => {\n    console.log(`getAnalyticsReportingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingSettings\");\n    console.error(err);\n  });"
  },
  "getanalyticsreportingtimeperiods": {
    "operationId": "getanalyticsreportingtimeperiods",
    "functionName": "getAnalyticsReportingTimeperiods",
    "signature": "getAnalyticsReportingTimeperiods()",
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\n// Get a list of report time periods.\napiInstance.getAnalyticsReportingTimeperiods()\n  .then((data) => {\n    console.log(`getAnalyticsReportingTimeperiods success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsReportingTimeperiods\");\n    console.error(err);\n  });"
  },
  "getanalyticsresolutionsaggregatesjob": {
    "operationId": "getanalyticsresolutionsaggregatesjob",
    "functionName": "getAnalyticsResolutionsAggregatesJob",
    "signature": "getAnalyticsResolutionsAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for resolution aggregates\napiInstance.getAnalyticsResolutionsAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsResolutionsAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsResolutionsAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsresolutionsaggregatesjobresults": {
    "operationId": "getanalyticsresolutionsaggregatesjobresults",
    "functionName": "getAnalyticsResolutionsAggregatesJobResults",
    "signature": "getAnalyticsResolutionsAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ResolutionAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsResolutionsAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsResolutionsAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsResolutionsAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticssurveysaggregatesjob": {
    "operationId": "getanalyticssurveysaggregatesjob",
    "functionName": "getAnalyticsSurveysAggregatesJob",
    "signature": "getAnalyticsSurveysAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for survey aggregates\napiInstance.getAnalyticsSurveysAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsSurveysAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsSurveysAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticssurveysaggregatesjobresults": {
    "operationId": "getanalyticssurveysaggregatesjobresults",
    "functionName": "getAnalyticsSurveysAggregatesJobResults",
    "signature": "getAnalyticsSurveysAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SurveyAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsSurveysAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsSurveysAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsSurveysAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticstaskmanagementaggregatesjob": {
    "operationId": "getanalyticstaskmanagementaggregatesjob",
    "functionName": "getAnalyticsTaskmanagementAggregatesJob",
    "signature": "getAnalyticsTaskmanagementAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for task management aggregates\napiInstance.getAnalyticsTaskmanagementAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsTaskmanagementAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsTaskmanagementAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticstaskmanagementaggregatesjobresults": {
    "operationId": "getanalyticstaskmanagementaggregatesjobresults",
    "functionName": "getAnalyticsTaskmanagementAggregatesJobResults",
    "signature": "getAnalyticsTaskmanagementAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TaskManagementAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async task management query\napiInstance.getAnalyticsTaskmanagementAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsTaskmanagementAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsTaskmanagementAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticstranscriptsaggregatesjob": {
    "operationId": "getanalyticstranscriptsaggregatesjob",
    "functionName": "getAnalyticsTranscriptsAggregatesJob",
    "signature": "getAnalyticsTranscriptsAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for transcript aggregates\napiInstance.getAnalyticsTranscriptsAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsTranscriptsAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsTranscriptsAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticstranscriptsaggregatesjobresults": {
    "operationId": "getanalyticstranscriptsaggregatesjobresults",
    "functionName": "getAnalyticsTranscriptsAggregatesJobResults",
    "signature": "getAnalyticsTranscriptsAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TranscriptAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsTranscriptsAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsTranscriptsAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsTranscriptsAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsusersaggregatesjob": {
    "operationId": "getanalyticsusersaggregatesjob",
    "functionName": "getAnalyticsUsersAggregatesJob",
    "signature": "getAnalyticsUsersAggregatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for user aggregates\napiInstance.getAnalyticsUsersAggregatesJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsUsersAggregatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsUsersAggregatesJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsusersaggregatesjobresults": {
    "operationId": "getanalyticsusersaggregatesjobresults",
    "functionName": "getAnalyticsUsersAggregatesJobResults",
    "signature": "getAnalyticsUsersAggregatesJobResults(jobId, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserAsyncAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\" // String | Cursor token to retrieve next page\n};\n\n// Fetch a page of results for an async aggregates query\napiInstance.getAnalyticsUsersAggregatesJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsUsersAggregatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsUsersAggregatesJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsusersdetailsjob": {
    "operationId": "getanalyticsusersdetailsjob",
    "functionName": "getAnalyticsUsersDetailsJob",
    "signature": "getAnalyticsUsersDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get status for async query for user details\napiInstance.getAnalyticsUsersDetailsJob(jobId)\n  .then((data) => {\n    console.log(`getAnalyticsUsersDetailsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsUsersDetailsJob\");\n    console.error(err);\n  });"
  },
  "getanalyticsusersdetailsjobresults": {
    "operationId": "getanalyticsusersdetailsjobresults",
    "functionName": "getAnalyticsUsersDetailsJobResults",
    "signature": "getAnalyticsUsersDetailsJobResults(jobId, cursor, pageSize)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "AnalyticsUserDetailsAsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"cursor\": \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  \"pageSize\": 3.4 // Number | The desired maximum number of results\n};\n\n// Fetch a page of results for an async query\napiInstance.getAnalyticsUsersDetailsJobResults(jobId, opts)\n  .then((data) => {\n    console.log(`getAnalyticsUsersDetailsJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsUsersDetailsJobResults\");\n    console.error(err);\n  });"
  },
  "getanalyticsusersdetailsjobsavailability": {
    "operationId": "getanalyticsusersdetailsjobsavailability",
    "functionName": "getAnalyticsUsersDetailsJobsAvailability",
    "signature": "getAnalyticsUsersDetailsJobsAvailability()",
    "return": "DataAvailabilityResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\n// Lookup the datalake availability date and time\napiInstance.getAnalyticsUsersDetailsJobsAvailability()\n  .then((data) => {\n    console.log(`getAnalyticsUsersDetailsJobsAvailability success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAnalyticsUsersDetailsJobsAvailability\");\n    console.error(err);\n  });"
  },
  "patchanalyticsreportingsettings": {
    "operationId": "patchanalyticsreportingsettings",
    "functionName": "patchAnalyticsReportingSettings",
    "signature": "patchAnalyticsReportingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsReportingSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | AnalyticsReportingSettingsRequest\n\n// Patch AnalyticsReportingSettings values for an organization\napiInstance.patchAnalyticsReportingSettings(body)\n  .then((data) => {\n    console.log(`patchAnalyticsReportingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchAnalyticsReportingSettings\");\n    console.error(err);\n  });"
  },
  "postanalyticsactionsaggregatesjobs": {
    "operationId": "postanalyticsactionsaggregatesjobs",
    "functionName": "postAnalyticsActionsAggregatesJobs",
    "signature": "postAnalyticsActionsAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for action aggregates asynchronously\napiInstance.postAnalyticsActionsAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsActionsAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsActionsAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsactionsaggregatesquery": {
    "operationId": "postanalyticsactionsaggregatesquery",
    "functionName": "postAnalyticsActionsAggregatesQuery",
    "signature": "postAnalyticsActionsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ActionAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for action aggregates\napiInstance.postAnalyticsActionsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsActionsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsActionsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsbotsaggregatesjobs": {
    "operationId": "postanalyticsbotsaggregatesjobs",
    "functionName": "postAnalyticsBotsAggregatesJobs",
    "signature": "postAnalyticsBotsAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for bot aggregates asynchronously\napiInstance.postAnalyticsBotsAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsBotsAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsBotsAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsbotsaggregatesquery": {
    "operationId": "postanalyticsbotsaggregatesquery",
    "functionName": "postAnalyticsBotsAggregatesQuery",
    "signature": "postAnalyticsBotsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BotAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for bot aggregates\napiInstance.postAnalyticsBotsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsBotsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsBotsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsconversationdetailsproperties": {
    "operationId": "postanalyticsconversationdetailsproperties",
    "functionName": "postAnalyticsConversationDetailsProperties",
    "signature": "postAnalyticsConversationDetailsProperties(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PropertyIndexRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | request\n\n// Index conversation properties\napiInstance.postAnalyticsConversationDetailsProperties(conversationId, body)\n  .then((data) => {\n    console.log(`postAnalyticsConversationDetailsProperties success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsConversationDetailsProperties\");\n    console.error(err);\n  });"
  },
  "postanalyticsconversationsactivityquery": {
    "operationId": "postanalyticsconversationsactivityquery",
    "functionName": "postAnalyticsConversationsActivityQuery",
    "signature": "postAnalyticsConversationsActivityQuery(body, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ConversationActivityResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | query\nlet opts = { \n  \"pageSize\": 3.4, // Number | The desired page size\n  \"pageNumber\": 3.4 // Number | The desired page number\n};\n\n// Query for conversation activity observations\napiInstance.postAnalyticsConversationsActivityQuery(body, opts)\n  .then((data) => {\n    console.log(`postAnalyticsConversationsActivityQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsConversationsActivityQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsconversationsaggregatesjobs": {
    "operationId": "postanalyticsconversationsaggregatesjobs",
    "functionName": "postAnalyticsConversationsAggregatesJobs",
    "signature": "postAnalyticsConversationsAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | query\n\n// Query for conversation aggregates asynchronously\napiInstance.postAnalyticsConversationsAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsConversationsAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsConversationsAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsconversationsaggregatesquery": {
    "operationId": "postanalyticsconversationsaggregatesquery",
    "functionName": "postAnalyticsConversationsAggregatesQuery",
    "signature": "postAnalyticsConversationsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConversationAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | query\n\n// Query for conversation aggregates\napiInstance.postAnalyticsConversationsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsConversationsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsConversationsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsconversationsdetailsjobs": {
    "operationId": "postanalyticsconversationsdetailsjobs",
    "functionName": "postAnalyticsConversationsDetailsJobs",
    "signature": "postAnalyticsConversationsDetailsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | query\n\n// Query for conversation details asynchronously\napiInstance.postAnalyticsConversationsDetailsJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsConversationsDetailsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsConversationsDetailsJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsconversationsdetailsquery": {
    "operationId": "postanalyticsconversationsdetailsquery",
    "functionName": "postAnalyticsConversationsDetailsQuery",
    "signature": "postAnalyticsConversationsDetailsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | query\n\n// Query for conversation details\napiInstance.postAnalyticsConversationsDetailsQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsConversationsDetailsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsConversationsDetailsQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsconversationstranscriptsquery": {
    "operationId": "postanalyticsconversationstranscriptsquery",
    "functionName": "postAnalyticsConversationsTranscriptsQuery",
    "signature": "postAnalyticsConversationsTranscriptsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributesMultiGetResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet body = {}; // Object | Search request options\n\n// Search resources.\napiInstance.postAnalyticsConversationsTranscriptsQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsConversationsTranscriptsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsConversationsTranscriptsQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsevaluationsaggregatesjobs": {
    "operationId": "postanalyticsevaluationsaggregatesjobs",
    "functionName": "postAnalyticsEvaluationsAggregatesJobs",
    "signature": "postAnalyticsEvaluationsAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | query\n\n// Query for evaluation aggregates asynchronously\napiInstance.postAnalyticsEvaluationsAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsEvaluationsAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsEvaluationsAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsevaluationsaggregatesquery": {
    "operationId": "postanalyticsevaluationsaggregatesquery",
    "functionName": "postAnalyticsEvaluationsAggregatesQuery",
    "signature": "postAnalyticsEvaluationsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | query\n\n// Query for evaluation aggregates\napiInstance.postAnalyticsEvaluationsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsEvaluationsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsEvaluationsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsflowsactivityquery": {
    "operationId": "postanalyticsflowsactivityquery",
    "functionName": "postAnalyticsFlowsActivityQuery",
    "signature": "postAnalyticsFlowsActivityQuery(body, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "FlowActivityResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FlowsApi();\n\nlet body = {}; // Object | query\nlet opts = { \n  \"pageSize\": 3.4, // Number | The desired page size\n  \"pageNumber\": 3.4 // Number | The desired page number\n};\n\n// Query for flow activity observations\napiInstance.postAnalyticsFlowsActivityQuery(body, opts)\n  .then((data) => {\n    console.log(`postAnalyticsFlowsActivityQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsFlowsActivityQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsflowsaggregatesjobs": {
    "operationId": "postanalyticsflowsaggregatesjobs",
    "functionName": "postAnalyticsFlowsAggregatesJobs",
    "signature": "postAnalyticsFlowsAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FlowsApi();\n\nlet body = {}; // Object | query\n\n// Query for flow aggregates asynchronously\napiInstance.postAnalyticsFlowsAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsFlowsAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsFlowsAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsflowsaggregatesquery": {
    "operationId": "postanalyticsflowsaggregatesquery",
    "functionName": "postAnalyticsFlowsAggregatesQuery",
    "signature": "postAnalyticsFlowsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FlowAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FlowsApi();\n\nlet body = {}; // Object | query\n\n// Query for flow aggregates\napiInstance.postAnalyticsFlowsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsFlowsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsFlowsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsflowsobservationsquery": {
    "operationId": "postanalyticsflowsobservationsquery",
    "functionName": "postAnalyticsFlowsObservationsQuery",
    "signature": "postAnalyticsFlowsObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FlowObservationQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FlowsApi();\n\nlet body = {}; // Object | query\n\n// Query for flow observations\napiInstance.postAnalyticsFlowsObservationsQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsFlowsObservationsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsFlowsObservationsQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsjourneysaggregatesjobs": {
    "operationId": "postanalyticsjourneysaggregatesjobs",
    "functionName": "postAnalyticsJourneysAggregatesJobs",
    "signature": "postAnalyticsJourneysAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet body = {}; // Object | query\n\n// Query for journey aggregates asynchronously\napiInstance.postAnalyticsJourneysAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsJourneysAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsJourneysAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsjourneysaggregatesquery": {
    "operationId": "postanalyticsjourneysaggregatesquery",
    "functionName": "postAnalyticsJourneysAggregatesQuery",
    "signature": "postAnalyticsJourneysAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "JourneyAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet body = {}; // Object | query\n\n// Query for journey aggregates\napiInstance.postAnalyticsJourneysAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsJourneysAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsJourneysAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsknowledgeaggregatesjobs": {
    "operationId": "postanalyticsknowledgeaggregatesjobs",
    "functionName": "postAnalyticsKnowledgeAggregatesJobs",
    "signature": "postAnalyticsKnowledgeAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for knowledge aggregates asynchronously\napiInstance.postAnalyticsKnowledgeAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsKnowledgeAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsKnowledgeAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsknowledgeaggregatesquery": {
    "operationId": "postanalyticsknowledgeaggregatesquery",
    "functionName": "postAnalyticsKnowledgeAggregatesQuery",
    "signature": "postAnalyticsKnowledgeAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for knowledge aggregates\napiInstance.postAnalyticsKnowledgeAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsKnowledgeAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsKnowledgeAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsqueuesobservationsquery": {
    "operationId": "postanalyticsqueuesobservationsquery",
    "functionName": "postAnalyticsQueuesObservationsQuery",
    "signature": "postAnalyticsQueuesObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueueObservationQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | query\n\n// Query for queue observations\napiInstance.postAnalyticsQueuesObservationsQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsQueuesObservationsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsQueuesObservationsQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsreportingexports": {
    "operationId": "postanalyticsreportingexports",
    "functionName": "postAnalyticsReportingExports",
    "signature": "postAnalyticsReportingExports(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ReportingExportJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | ReportingExportJobRequest\n\n// Generate a view export request\napiInstance.postAnalyticsReportingExports(body)\n  .then((data) => {\n    console.log(`postAnalyticsReportingExports success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsReportingExports\");\n    console.error(err);\n  });"
  },
  "postanalyticsreportingschedulerunreport": {
    "operationId": "postanalyticsreportingschedulerunreport",
    "functionName": "postAnalyticsReportingScheduleRunreport",
    "signature": "postAnalyticsReportingScheduleRunreport(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RunNowResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n// Place a scheduled report immediately into the reporting queue\napiInstance.postAnalyticsReportingScheduleRunreport(scheduleId)\n  .then((data) => {\n    console.log(`postAnalyticsReportingScheduleRunreport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsReportingScheduleRunreport\");\n    console.error(err);\n  });"
  },
  "postanalyticsreportingschedules": {
    "operationId": "postanalyticsreportingschedules",
    "functionName": "postAnalyticsReportingSchedules",
    "signature": "postAnalyticsReportingSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | ReportSchedule\n\n// Create a scheduled report job\napiInstance.postAnalyticsReportingSchedules(body)\n  .then((data) => {\n    console.log(`postAnalyticsReportingSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsReportingSchedules\");\n    console.error(err);\n  });"
  },
  "postanalyticsresolutionsaggregatesjobs": {
    "operationId": "postanalyticsresolutionsaggregatesjobs",
    "functionName": "postAnalyticsResolutionsAggregatesJobs",
    "signature": "postAnalyticsResolutionsAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for resolution aggregates asynchronously\napiInstance.postAnalyticsResolutionsAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsResolutionsAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsResolutionsAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsroutingactivityquery": {
    "operationId": "postanalyticsroutingactivityquery",
    "functionName": "postAnalyticsRoutingActivityQuery",
    "signature": "postAnalyticsRoutingActivityQuery(body, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "RoutingActivityResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | query\nlet opts = { \n  \"pageSize\": 3.4, // Number | The desired page size\n  \"pageNumber\": 3.4 // Number | The desired page number\n};\n\n// Query for user activity observations\napiInstance.postAnalyticsRoutingActivityQuery(body, opts)\n  .then((data) => {\n    console.log(`postAnalyticsRoutingActivityQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsRoutingActivityQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticssurveysaggregatesjobs": {
    "operationId": "postanalyticssurveysaggregatesjobs",
    "functionName": "postAnalyticsSurveysAggregatesJobs",
    "signature": "postAnalyticsSurveysAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | query\n\n// Query for survey aggregates asynchronously\napiInstance.postAnalyticsSurveysAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsSurveysAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsSurveysAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticssurveysaggregatesquery": {
    "operationId": "postanalyticssurveysaggregatesquery",
    "functionName": "postAnalyticsSurveysAggregatesQuery",
    "signature": "postAnalyticsSurveysAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | query\n\n// Query for survey aggregates\napiInstance.postAnalyticsSurveysAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsSurveysAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsSurveysAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticstaskmanagementaggregatesjobs": {
    "operationId": "postanalyticstaskmanagementaggregatesjobs",
    "functionName": "postAnalyticsTaskmanagementAggregatesJobs",
    "signature": "postAnalyticsTaskmanagementAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for task management aggregates asynchronously\napiInstance.postAnalyticsTaskmanagementAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsTaskmanagementAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsTaskmanagementAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticstaskmanagementaggregatesquery": {
    "operationId": "postanalyticstaskmanagementaggregatesquery",
    "functionName": "postAnalyticsTaskmanagementAggregatesQuery",
    "signature": "postAnalyticsTaskmanagementAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TaskManagementAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for task management aggregates\napiInstance.postAnalyticsTaskmanagementAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsTaskmanagementAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsTaskmanagementAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsteamsactivityquery": {
    "operationId": "postanalyticsteamsactivityquery",
    "functionName": "postAnalyticsTeamsActivityQuery",
    "signature": "postAnalyticsTeamsActivityQuery(body, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TeamActivityResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet body = {}; // Object | query\nlet opts = { \n  \"pageSize\": 3.4, // Number | The desired page size\n  \"pageNumber\": 3.4 // Number | The desired page number\n};\n\n// Query for team activity observations\napiInstance.postAnalyticsTeamsActivityQuery(body, opts)\n  .then((data) => {\n    console.log(`postAnalyticsTeamsActivityQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsTeamsActivityQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticstranscriptsaggregatesjobs": {
    "operationId": "postanalyticstranscriptsaggregatesjobs",
    "functionName": "postAnalyticsTranscriptsAggregatesJobs",
    "signature": "postAnalyticsTranscriptsAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for transcript aggregates asynchronously\napiInstance.postAnalyticsTranscriptsAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsTranscriptsAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsTranscriptsAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticstranscriptsaggregatesquery": {
    "operationId": "postanalyticstranscriptsaggregatesquery",
    "functionName": "postAnalyticsTranscriptsAggregatesQuery",
    "signature": "postAnalyticsTranscriptsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TranscriptAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | query\n\n// Query for transcript aggregates\napiInstance.postAnalyticsTranscriptsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsTranscriptsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsTranscriptsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsusersactivityquery": {
    "operationId": "postanalyticsusersactivityquery",
    "functionName": "postAnalyticsUsersActivityQuery",
    "signature": "postAnalyticsUsersActivityQuery(body, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "UserActivityResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | query\nlet opts = { \n  \"pageSize\": 3.4, // Number | The desired page size\n  \"pageNumber\": 3.4 // Number | The desired page number\n};\n\n// Query for user activity observations\napiInstance.postAnalyticsUsersActivityQuery(body, opts)\n  .then((data) => {\n    console.log(`postAnalyticsUsersActivityQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsUsersActivityQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsusersaggregatesjobs": {
    "operationId": "postanalyticsusersaggregatesjobs",
    "functionName": "postAnalyticsUsersAggregatesJobs",
    "signature": "postAnalyticsUsersAggregatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | query\n\n// Query for user aggregates asynchronously\napiInstance.postAnalyticsUsersAggregatesJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsUsersAggregatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsUsersAggregatesJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsusersaggregatesquery": {
    "operationId": "postanalyticsusersaggregatesquery",
    "functionName": "postAnalyticsUsersAggregatesQuery",
    "signature": "postAnalyticsUsersAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | query\n\n// Query for user aggregates\napiInstance.postAnalyticsUsersAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsUsersAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsUsersAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsusersdetailsjobs": {
    "operationId": "postanalyticsusersdetailsjobs",
    "functionName": "postAnalyticsUsersDetailsJobs",
    "signature": "postAnalyticsUsersDetailsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | query\n\n// Query for user details asynchronously\napiInstance.postAnalyticsUsersDetailsJobs(body)\n  .then((data) => {\n    console.log(`postAnalyticsUsersDetailsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsUsersDetailsJobs\");\n    console.error(err);\n  });"
  },
  "postanalyticsusersdetailsquery": {
    "operationId": "postanalyticsusersdetailsquery",
    "functionName": "postAnalyticsUsersDetailsQuery",
    "signature": "postAnalyticsUsersDetailsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsUserDetailsQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | query\n\n// Query for user details\napiInstance.postAnalyticsUsersDetailsQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsUsersDetailsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsUsersDetailsQuery\");\n    console.error(err);\n  });"
  },
  "postanalyticsusersobservationsquery": {
    "operationId": "postanalyticsusersobservationsquery",
    "functionName": "postAnalyticsUsersObservationsQuery",
    "signature": "postAnalyticsUsersObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserObservationQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | query\n\n// Query for user observations\napiInstance.postAnalyticsUsersObservationsQuery(body)\n  .then((data) => {\n    console.log(`postAnalyticsUsersObservationsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAnalyticsUsersObservationsQuery\");\n    console.error(err);\n  });"
  },
  "putanalyticsdataretentionsettings": {
    "operationId": "putanalyticsdataretentionsettings",
    "functionName": "putAnalyticsDataretentionSettings",
    "signature": "putAnalyticsDataretentionSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsDataRetentionResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet body = {}; // Object | retentionDays\n\n// Update analytics data retention setting\napiInstance.putAnalyticsDataretentionSettings(body)\n  .then((data) => {\n    console.log(`putAnalyticsDataretentionSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAnalyticsDataretentionSettings\");\n    console.error(err);\n  });"
  },
  "putanalyticsreportingschedule": {
    "operationId": "putanalyticsreportingschedule",
    "functionName": "putAnalyticsReportingSchedule",
    "signature": "putAnalyticsReportingSchedule(scheduleId, body)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AnalyticsApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\nlet body = {}; // Object | ReportSchedule\n\n// Update a scheduled report job.\napiInstance.putAnalyticsReportingSchedule(scheduleId, body)\n  .then((data) => {\n    console.log(`putAnalyticsReportingSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAnalyticsReportingSchedule\");\n    console.error(err);\n  });"
  },
  "deletearchitectemergencygroup": {
    "operationId": "deletearchitectemergencygroup",
    "functionName": "deleteArchitectEmergencygroup",
    "signature": "deleteArchitectEmergencygroup(emergencyGroupId)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet emergencyGroupId = \"emergencyGroupId_example\"; // String | Emergency group ID\n\n// Deletes a emergency group by ID\napiInstance.deleteArchitectEmergencygroup(emergencyGroupId)\n  .then(() => {\n    console.log(\"deleteArchitectEmergencygroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectEmergencygroup\");\n    console.error(err);\n  });"
  },
  "deletearchitectgrammar": {
    "operationId": "deletearchitectgrammar",
    "functionName": "deleteArchitectGrammar",
    "signature": "deleteArchitectGrammar(grammarId)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | grammar ID\n\n// Delete a grammar.\napiInstance.deleteArchitectGrammar(grammarId)\n  .then((data) => {\n    console.log(`deleteArchitectGrammar success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectGrammar\");\n    console.error(err);\n  });"
  },
  "deletearchitectgrammarlanguage": {
    "operationId": "deletearchitectgrammarlanguage",
    "functionName": "deleteArchitectGrammarLanguage",
    "signature": "deleteArchitectGrammarLanguage(grammarId, languageCode)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | Grammar ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Delete specified grammar language\napiInstance.deleteArchitectGrammarLanguage(grammarId, languageCode)\n  .then(() => {\n    console.log(\"deleteArchitectGrammarLanguage returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectGrammarLanguage\");\n    console.error(err);\n  });"
  },
  "deletearchitectgrammarlanguagefilesdtmf": {
    "operationId": "deletearchitectgrammarlanguagefilesdtmf",
    "functionName": "deleteArchitectGrammarLanguageFilesDtmf",
    "signature": "deleteArchitectGrammarLanguageFilesDtmf(grammarId, languageCode)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | Grammar ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Clear the DTMF mode file for the grammar language if there is one\napiInstance.deleteArchitectGrammarLanguageFilesDtmf(grammarId, languageCode)\n  .then(() => {\n    console.log(\"deleteArchitectGrammarLanguageFilesDtmf returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectGrammarLanguageFilesDtmf\");\n    console.error(err);\n  });"
  },
  "deletearchitectgrammarlanguagefilesvoice": {
    "operationId": "deletearchitectgrammarlanguagefilesvoice",
    "functionName": "deleteArchitectGrammarLanguageFilesVoice",
    "signature": "deleteArchitectGrammarLanguageFilesVoice(grammarId, languageCode)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | Grammar ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Clear the voice mode file for the grammar language if there is one\napiInstance.deleteArchitectGrammarLanguageFilesVoice(grammarId, languageCode)\n  .then(() => {\n    console.log(\"deleteArchitectGrammarLanguageFilesVoice returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectGrammarLanguageFilesVoice\");\n    console.error(err);\n  });"
  },
  "deletearchitectivr": {
    "operationId": "deletearchitectivr",
    "functionName": "deleteArchitectIvr",
    "signature": "deleteArchitectIvr(ivrId)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet ivrId = \"ivrId_example\"; // String | IVR id\n\n// Delete an IVR Config.\napiInstance.deleteArchitectIvr(ivrId)\n  .then(() => {\n    console.log(\"deleteArchitectIvr returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectIvr\");\n    console.error(err);\n  });"
  },
  "deletearchitectprompt": {
    "operationId": "deletearchitectprompt",
    "functionName": "deleteArchitectPrompt",
    "signature": "deleteArchitectPrompt(promptId, allResources)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "allResources",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet opts = { \n  \"allResources\": true // Boolean | Whether or not to delete all the prompt resources\n};\n\n// Delete specified user prompt\napiInstance.deleteArchitectPrompt(promptId, opts)\n  .then(() => {\n    console.log(\"deleteArchitectPrompt returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectPrompt\");\n    console.error(err);\n  });"
  },
  "deletearchitectpromptresource": {
    "operationId": "deletearchitectpromptresource",
    "functionName": "deleteArchitectPromptResource",
    "signature": "deleteArchitectPromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Delete specified user prompt resource\napiInstance.deleteArchitectPromptResource(promptId, languageCode)\n  .then(() => {\n    console.log(\"deleteArchitectPromptResource returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectPromptResource\");\n    console.error(err);\n  });"
  },
  "deletearchitectpromptresourceaudio": {
    "operationId": "deletearchitectpromptresourceaudio",
    "functionName": "deleteArchitectPromptResourceAudio",
    "signature": "deleteArchitectPromptResourceAudio(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Delete specified user prompt resource audio\napiInstance.deleteArchitectPromptResourceAudio(promptId, languageCode)\n  .then(() => {\n    console.log(\"deleteArchitectPromptResourceAudio returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectPromptResourceAudio\");\n    console.error(err);\n  });"
  },
  "deletearchitectprompts": {
    "operationId": "deletearchitectprompts",
    "functionName": "deleteArchitectPrompts",
    "signature": "deleteArchitectPrompts(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet id = [\"id_example\"]; // [String] | List of Prompt IDs\n\n// Batch-delete a list of prompts\napiInstance.deleteArchitectPrompts(id)\n  .then((data) => {\n    console.log(`deleteArchitectPrompts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectPrompts\");\n    console.error(err);\n  });"
  },
  "deletearchitectschedule": {
    "operationId": "deletearchitectschedule",
    "functionName": "deleteArchitectSchedule",
    "signature": "deleteArchitectSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n// Delete a schedule by id\napiInstance.deleteArchitectSchedule(scheduleId)\n  .then(() => {\n    console.log(\"deleteArchitectSchedule returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectSchedule\");\n    console.error(err);\n  });"
  },
  "deletearchitectschedulegroup": {
    "operationId": "deletearchitectschedulegroup",
    "functionName": "deleteArchitectSchedulegroup",
    "signature": "deleteArchitectSchedulegroup(scheduleGroupId)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet scheduleGroupId = \"scheduleGroupId_example\"; // String | Schedule group ID\n\n// Deletes a schedule group by ID\napiInstance.deleteArchitectSchedulegroup(scheduleGroupId)\n  .then(() => {\n    console.log(\"deleteArchitectSchedulegroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectSchedulegroup\");\n    console.error(err);\n  });"
  },
  "deletearchitectsystempromptresource": {
    "operationId": "deletearchitectsystempromptresource",
    "functionName": "deleteArchitectSystempromptResource",
    "signature": "deleteArchitectSystempromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Delete a system prompt resource override.\napiInstance.deleteArchitectSystempromptResource(promptId, languageCode)\n  .then(() => {\n    console.log(\"deleteArchitectSystempromptResource returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteArchitectSystempromptResource\");\n    console.error(err);\n  });"
  },
  "deleteflow": {
    "operationId": "deleteflow",
    "functionName": "deleteFlow",
    "signature": "deleteFlow(flowId)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\n\n// Delete flow\napiInstance.deleteFlow(flowId)\n  .then(() => {\n    console.log(\"deleteFlow returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteFlow\");\n    console.error(err);\n  });"
  },
  "deleteflows": {
    "operationId": "deleteflows",
    "functionName": "deleteFlows",
    "signature": "deleteFlows(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet id = [\"id_example\"]; // [String] | List of Flow IDs\n\n// Batch-delete a list of flows\napiInstance.deleteFlows(id)\n  .then((data) => {\n    console.log(`deleteFlows success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteFlows\");\n    console.error(err);\n  });"
  },
  "deleteflowsdatatable": {
    "operationId": "deleteflowsdatatable",
    "functionName": "deleteFlowsDatatable",
    "signature": "deleteFlowsDatatable(datatableId, force)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  \"force\": false // Boolean | force delete, even if in use\n};\n\n// deletes a specific datatable by id\napiInstance.deleteFlowsDatatable(datatableId, opts)\n  .then(() => {\n    console.log(\"deleteFlowsDatatable returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteFlowsDatatable\");\n    console.error(err);\n  });"
  },
  "deleteflowsdatatablerow": {
    "operationId": "deleteflowsdatatablerow",
    "functionName": "deleteFlowsDatatableRow",
    "signature": "deleteFlowsDatatableRow(datatableId, rowId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet rowId = \"rowId_example\"; // String | the key for the row\n\n// Delete a row entry\napiInstance.deleteFlowsDatatableRow(datatableId, rowId)\n  .then(() => {\n    console.log(\"deleteFlowsDatatableRow returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteFlowsDatatableRow\");\n    console.error(err);\n  });"
  },
  "deleteflowsmilestone": {
    "operationId": "deleteflowsmilestone",
    "functionName": "deleteFlowsMilestone",
    "signature": "deleteFlowsMilestone(milestoneId)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet milestoneId = \"milestoneId_example\"; // String | flow milestone ID\n\n// Delete a flow milestone.\napiInstance.deleteFlowsMilestone(milestoneId)\n  .then((data) => {\n    console.log(`deleteFlowsMilestone success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteFlowsMilestone\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytracking": {
    "operationId": "getarchitectdependencytracking",
    "functionName": "getArchitectDependencytracking",
    "signature": "getArchitectDependencytracking(name, pageNumber, pageSize, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumingResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumingResourceType",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet name = \"name_example\"; // String | Object name to search for\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"objectType\": [\"objectType_example\"], // [String] | Object type(s) to search for\n  \"consumedResources\": true, // Boolean | Include resources each result item consumes\n  \"consumingResources\": true, // Boolean | Include resources that consume each result item\n  \"consumedResourceType\": [\"consumedResourceType_example\"], // [String] | Types of consumed resources to return, if consumed resources are requested\n  \"consumingResourceType\": [\"consumingResourceType_example\"] // [String] | Types of consuming resources to return, if consuming resources are requested\n};\n\n// Get Dependency Tracking objects that have a given display name\napiInstance.getArchitectDependencytracking(name, opts)\n  .then((data) => {\n    console.log(`getArchitectDependencytracking success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytracking\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingbuild": {
    "operationId": "getarchitectdependencytrackingbuild",
    "functionName": "getArchitectDependencytrackingBuild",
    "signature": "getArchitectDependencytrackingBuild()",
    "return": "DependencyStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\n// Get Dependency Tracking build status for an organization\napiInstance.getArchitectDependencytrackingBuild()\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingBuild success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingBuild\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingconsumedresources": {
    "operationId": "getarchitectdependencytrackingconsumedresources",
    "functionName": "getArchitectDependencytrackingConsumedresources",
    "signature": "getArchitectDependencytrackingConsumedresources(id, version, objectType, resourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "resourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ConsumedResourcesEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet id = \"id_example\"; // String | Consuming object ID\nlet version = \"version_example\"; // String | Consuming object version\nlet objectType = \"objectType_example\"; // String | Consuming object type.  Only versioned types are allowed here.\nlet opts = { \n  \"resourceType\": [\"resourceType_example\"], // [String] | Types of consumed resources to show\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get resources that are consumed by a given Dependency Tracking object\napiInstance.getArchitectDependencytrackingConsumedresources(id, version, objectType, opts)\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingConsumedresources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingConsumedresources\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingconsumingresources": {
    "operationId": "getarchitectdependencytrackingconsumingresources",
    "functionName": "getArchitectDependencytrackingConsumingresources",
    "signature": "getArchitectDependencytrackingConsumingresources(id, objectType, resourceType, version, pageNumber, pageSize, flowFilter)",
    "parameters": [
      {
        "name": "id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "resourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "flowFilter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ConsumingResourcesEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet id = \"id_example\"; // String | Consumed object ID\nlet objectType = \"objectType_example\"; // String | Consumed object type\nlet opts = { \n  \"resourceType\": [\"resourceType_example\"], // [String] | Types of consuming resources to show.  Only versioned types are allowed here.\n  \"version\": \"version_example\", // String | Object version\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"flowFilter\": \"flowFilter_example\" // String | Show only checkedIn or published flows\n};\n\n// Get resources that consume a given Dependency Tracking object\napiInstance.getArchitectDependencytrackingConsumingresources(id, objectType, opts)\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingConsumingresources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingConsumingresources\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingdeletedresourceconsumers": {
    "operationId": "getarchitectdependencytrackingdeletedresourceconsumers",
    "functionName": "getArchitectDependencytrackingDeletedresourceconsumers",
    "signature": "getArchitectDependencytrackingDeletedresourceconsumers(name, objectType, flowFilter, consumedResources, consumedResourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "flowFilter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"name\": \"name_example\", // String | Name to search for\n  \"objectType\": [\"objectType_example\"], // [String] | Object type(s) to search for\n  \"flowFilter\": \"flowFilter_example\", // String | Show only checkedIn or published flows\n  \"consumedResources\": false, // Boolean | Return consumed resources?\n  \"consumedResourceType\": [\"consumedResourceType_example\"], // [String] | Resource type(s) to return\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get Dependency Tracking objects that consume deleted resources\napiInstance.getArchitectDependencytrackingDeletedresourceconsumers(opts)\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingDeletedresourceconsumers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingDeletedresourceconsumers\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingobject": {
    "operationId": "getarchitectdependencytrackingobject",
    "functionName": "getArchitectDependencytrackingObject",
    "signature": "getArchitectDependencytrackingObject(id, version, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType, consumedResourceRequest)",
    "parameters": [
      {
        "name": "id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumingResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumingResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResourceRequest",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DependencyObject",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet id = \"id_example\"; // String | Object ID\nlet opts = { \n  \"version\": \"version_example\", // String | Object version\n  \"objectType\": \"objectType_example\", // String | Object type\n  \"consumedResources\": true, // Boolean | Include resources this item consumes\n  \"consumingResources\": true, // Boolean | Include resources that consume this item\n  \"consumedResourceType\": [\"consumedResourceType_example\"], // [String] | Types of consumed resources to return, if consumed resources are requested\n  \"consumingResourceType\": [\"consumingResourceType_example\"], // [String] | Types of consuming resources to return, if consuming resources are requested\n  \"consumedResourceRequest\": true // Boolean | Indicate that this is going to look up a consumed resource object\n};\n\n// Get a Dependency Tracking object\napiInstance.getArchitectDependencytrackingObject(id, opts)\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingObject success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingObject\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingtype": {
    "operationId": "getarchitectdependencytrackingtype",
    "functionName": "getArchitectDependencytrackingType",
    "signature": "getArchitectDependencytrackingType(typeId)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DependencyType",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet typeId = \"typeId_example\"; // String | Type ID\n\n// Get a Dependency Tracking type.\napiInstance.getArchitectDependencytrackingType(typeId)\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingType success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingType\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingtypes": {
    "operationId": "getarchitectdependencytrackingtypes",
    "functionName": "getArchitectDependencytrackingTypes",
    "signature": "getArchitectDependencytrackingTypes(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DependencyTypeEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get Dependency Tracking types.\napiInstance.getArchitectDependencytrackingTypes(opts)\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingTypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingTypes\");\n    console.error(err);\n  });"
  },
  "getarchitectdependencytrackingupdatedresourceconsumers": {
    "operationId": "getarchitectdependencytrackingupdatedresourceconsumers",
    "functionName": "getArchitectDependencytrackingUpdatedresourceconsumers",
    "signature": "getArchitectDependencytrackingUpdatedresourceconsumers(name, objectType, consumedResources, consumedResourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"name\": \"name_example\", // String | Name to search for\n  \"objectType\": [\"objectType_example\"], // [String] | Object type(s) to search for\n  \"consumedResources\": false, // Boolean | Return consumed resources?\n  \"consumedResourceType\": [\"consumedResourceType_example\"], // [String] | Resource type(s) to return\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get Dependency Tracking objects that depend on updated resources\napiInstance.getArchitectDependencytrackingUpdatedresourceconsumers(opts)\n  .then((data) => {\n    console.log(`getArchitectDependencytrackingUpdatedresourceconsumers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectDependencytrackingUpdatedresourceconsumers\");\n    console.error(err);\n  });"
  },
  "getarchitectemergencygroup": {
    "operationId": "getarchitectemergencygroup",
    "functionName": "getArchitectEmergencygroup",
    "signature": "getArchitectEmergencygroup(emergencyGroupId)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet emergencyGroupId = \"emergencyGroupId_example\"; // String | Emergency group ID\n\n// Gets a emergency group by ID\napiInstance.getArchitectEmergencygroup(emergencyGroupId)\n  .then((data) => {\n    console.log(`getArchitectEmergencygroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectEmergencygroup\");\n    console.error(err);\n  });"
  },
  "getarchitectemergencygroups": {
    "operationId": "getarchitectemergencygroups",
    "functionName": "getArchitectEmergencygroups",
    "signature": "getArchitectEmergencygroups(pageNumber, pageSize, sortBy, sortOrder, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EmergencyGroupListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"name\": \"name_example\" // String | Name of the Emergency Group to filter by.\n};\n\n// Get a list of emergency groups.\napiInstance.getArchitectEmergencygroups(opts)\n  .then((data) => {\n    console.log(`getArchitectEmergencygroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectEmergencygroups\");\n    console.error(err);\n  });"
  },
  "getarchitectemergencygroupsdivisionviews": {
    "operationId": "getarchitectemergencygroupsdivisionviews",
    "functionName": "getArchitectEmergencygroupsDivisionviews",
    "signature": "getArchitectEmergencygroupsDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "EmergencyGroupDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID of the Emergency Groups to filter by.\n  \"name\": \"name_example\", // String | Name of the Emergency Group to filter by.\n  \"divisionId\": [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n// Get a pageable list of basic emergency group objects filterable by query parameters.\napiInstance.getArchitectEmergencygroupsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getArchitectEmergencygroupsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectEmergencygroupsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getarchitectgrammar": {
    "operationId": "getarchitectgrammar",
    "functionName": "getArchitectGrammar",
    "signature": "getArchitectGrammar(grammarId, includeFileUrls)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeFileUrls",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Grammar",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | grammar ID\nlet opts = { \n  \"includeFileUrls\": true // Boolean | Include grammar language file URLs\n};\n\n// Get a grammar\napiInstance.getArchitectGrammar(grammarId, opts)\n  .then((data) => {\n    console.log(`getArchitectGrammar success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectGrammar\");\n    console.error(err);\n  });"
  },
  "getarchitectgrammarlanguage": {
    "operationId": "getarchitectgrammarlanguage",
    "functionName": "getArchitectGrammarLanguage",
    "signature": "getArchitectGrammarLanguage(grammarId, languageCode)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GrammarLanguage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | Grammar ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Get a grammar language.\napiInstance.getArchitectGrammarLanguage(grammarId, languageCode)\n  .then((data) => {\n    console.log(`getArchitectGrammarLanguage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectGrammarLanguage\");\n    console.error(err);\n  });"
  },
  "getarchitectgrammars": {
    "operationId": "getarchitectgrammars",
    "functionName": "getArchitectGrammars",
    "signature": "getArchitectGrammars(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, includeFileUrls)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeFileUrls",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "GrammarListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID\n  \"name\": \"name_example\", // String | Name\n  \"description\": \"description_example\", // String | Description\n  \"nameOrDescription\": \"nameOrDescription_example\", // String | Name or description\n  \"includeFileUrls\": true // Boolean | Include grammar language file URLs\n};\n\n// Get a pageable list of grammars, filtered by query parameters\napiInstance.getArchitectGrammars(opts)\n  .then((data) => {\n    console.log(`getArchitectGrammars success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectGrammars\");\n    console.error(err);\n  });"
  },
  "getarchitectivr": {
    "operationId": "getarchitectivr",
    "functionName": "getArchitectIvr",
    "signature": "getArchitectIvr(ivrId)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet ivrId = \"ivrId_example\"; // String | IVR id\n\n// Get an IVR config.\napiInstance.getArchitectIvr(ivrId)\n  .then((data) => {\n    console.log(`getArchitectIvr success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectIvr\");\n    console.error(err);\n  });"
  },
  "getarchitectivrs": {
    "operationId": "getarchitectivrs",
    "functionName": "getArchitectIvrs",
    "signature": "getArchitectIvrs(pageNumber, pageSize, sortBy, sortOrder, name, dnis, scheduleGroup)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dnis",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scheduleGroup",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IVREntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"name\": \"name_example\", // String | Name of the IVR to filter by.\n  \"dnis\": \"dnis_example\", // String | The phone number of the IVR to filter by.\n  \"scheduleGroup\": \"scheduleGroup_example\" // String | The Schedule Group of the IVR to filter by.\n};\n\n// Get IVR configs.\napiInstance.getArchitectIvrs(opts)\n  .then((data) => {\n    console.log(`getArchitectIvrs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectIvrs\");\n    console.error(err);\n  });"
  },
  "getarchitectivrsdivisionviews": {
    "operationId": "getarchitectivrsdivisionviews",
    "functionName": "getArchitectIvrsDivisionviews",
    "signature": "getArchitectIvrsDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "IVRDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID of the IVR to filter by.\n  \"name\": \"name_example\", // String | Name of the IVR to filter by.\n  \"divisionId\": [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n// Get a pageable list of basic ivr configuration information objects filterable by query parameters.\napiInstance.getArchitectIvrsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getArchitectIvrsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectIvrsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getarchitectprompt": {
    "operationId": "getarchitectprompt",
    "functionName": "getArchitectPrompt",
    "signature": "getArchitectPrompt(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\n\n// Get specified user prompt\napiInstance.getArchitectPrompt(promptId)\n  .then((data) => {\n    console.log(`getArchitectPrompt success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectPrompt\");\n    console.error(err);\n  });"
  },
  "getarchitectprompthistoryhistoryid": {
    "operationId": "getarchitectprompthistoryhistoryid",
    "functionName": "getArchitectPromptHistoryHistoryId",
    "signature": "getArchitectPromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet historyId = \"historyId_example\"; // String | History request ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortOrder\": \"desc\", // String | Sort order\n  \"sortBy\": \"timestamp\", // String | Sort by\n  \"action\": [\"action_example\"] // [String] | Flow actions to include (omit to include all)\n};\n\n// Get generated prompt history\napiInstance.getArchitectPromptHistoryHistoryId(promptId, historyId, opts)\n  .then((data) => {\n    console.log(`getArchitectPromptHistoryHistoryId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectPromptHistoryHistoryId\");\n    console.error(err);\n  });"
  },
  "getarchitectpromptresource": {
    "operationId": "getarchitectpromptresource",
    "functionName": "getArchitectPromptResource",
    "signature": "getArchitectPromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Get specified user prompt resource\napiInstance.getArchitectPromptResource(promptId, languageCode)\n  .then((data) => {\n    console.log(`getArchitectPromptResource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectPromptResource\");\n    console.error(err);\n  });"
  },
  "getarchitectpromptresources": {
    "operationId": "getarchitectpromptresources",
    "functionName": "getArchitectPromptResources",
    "signature": "getArchitectPromptResources(promptId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "PromptAssetEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get a pageable list of user prompt resources\napiInstance.getArchitectPromptResources(promptId, opts)\n  .then((data) => {\n    console.log(`getArchitectPromptResources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectPromptResources\");\n    console.error(err);\n  });"
  },
  "getarchitectprompts": {
    "operationId": "getarchitectprompts",
    "functionName": "getArchitectPrompts",
    "signature": "getArchitectPrompts(pageNumber, pageSize, name, description, nameOrDescription, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PromptEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"name\": [\"name_example\"], // [String] | Name\n  \"description\": \"description_example\", // String | Description\n  \"nameOrDescription\": \"nameOrDescription_example\", // String | Name or description\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\" // String | Sort order\n};\n\n// Get a pageable list of user prompts\napiInstance.getArchitectPrompts(opts)\n  .then((data) => {\n    console.log(`getArchitectPrompts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectPrompts\");\n    console.error(err);\n  });"
  },
  "getarchitectschedule": {
    "operationId": "getarchitectschedule",
    "functionName": "getArchitectSchedule",
    "signature": "getArchitectSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n// Get a schedule by ID\napiInstance.getArchitectSchedule(scheduleId)\n  .then((data) => {\n    console.log(`getArchitectSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSchedule\");\n    console.error(err);\n  });"
  },
  "getarchitectschedulegroup": {
    "operationId": "getarchitectschedulegroup",
    "functionName": "getArchitectSchedulegroup",
    "signature": "getArchitectSchedulegroup(scheduleGroupId)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet scheduleGroupId = \"scheduleGroupId_example\"; // String | Schedule group ID\n\n// Gets a schedule group by ID\napiInstance.getArchitectSchedulegroup(scheduleGroupId)\n  .then((data) => {\n    console.log(`getArchitectSchedulegroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSchedulegroup\");\n    console.error(err);\n  });"
  },
  "getarchitectschedulegroups": {
    "operationId": "getarchitectschedulegroups",
    "functionName": "getArchitectSchedulegroups",
    "signature": "getArchitectSchedulegroups(pageNumber, pageSize, sortBy, sortOrder, name, scheduleIds, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scheduleIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleGroupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"name\": \"name_example\", // String | Name of the Schedule Group to filter by.\n  \"scheduleIds\": \"scheduleIds_example\", // String | A comma-delimited list of Schedule IDs to filter by.\n  \"divisionId\": [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n// Get a list of schedule groups.\napiInstance.getArchitectSchedulegroups(opts)\n  .then((data) => {\n    console.log(`getArchitectSchedulegroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSchedulegroups\");\n    console.error(err);\n  });"
  },
  "getarchitectschedulegroupsdivisionviews": {
    "operationId": "getarchitectschedulegroupsdivisionviews",
    "functionName": "getArchitectSchedulegroupsDivisionviews",
    "signature": "getArchitectSchedulegroupsDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleGroupDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID of the schedule group to filter by.\n  \"name\": \"name_example\", // String | Name of the schedule group to filter by.\n  \"divisionId\": [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n// Get a pageable list of basic schedule group configuration information objects filterable by query parameters.\napiInstance.getArchitectSchedulegroupsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getArchitectSchedulegroupsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSchedulegroupsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getarchitectschedules": {
    "operationId": "getarchitectschedules",
    "functionName": "getArchitectSchedules",
    "signature": "getArchitectSchedules(pageNumber, pageSize, sortBy, sortOrder, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"name\": \"name_example\", // String | Name of the Schedule to filter by.\n  \"divisionId\": [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n// Get a list of schedules.\napiInstance.getArchitectSchedules(opts)\n  .then((data) => {\n    console.log(`getArchitectSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSchedules\");\n    console.error(err);\n  });"
  },
  "getarchitectschedulesdivisionviews": {
    "operationId": "getarchitectschedulesdivisionviews",
    "functionName": "getArchitectSchedulesDivisionviews",
    "signature": "getArchitectSchedulesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID of the schedule group to filter by.\n  \"name\": \"name_example\", // String | Name of the schedule group to filter by.\n  \"divisionId\": [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n// Get a pageable list of basic schedule configuration information objects filterable by query parameters.\napiInstance.getArchitectSchedulesDivisionviews(opts)\n  .then((data) => {\n    console.log(`getArchitectSchedulesDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSchedulesDivisionviews\");\n    console.error(err);\n  });"
  },
  "getarchitectsystemprompt": {
    "operationId": "getarchitectsystemprompt",
    "functionName": "getArchitectSystemprompt",
    "signature": "getArchitectSystemprompt(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SystemPrompt",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | promptId\n\n// Get a system prompt\napiInstance.getArchitectSystemprompt(promptId)\n  .then((data) => {\n    console.log(`getArchitectSystemprompt success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSystemprompt\");\n    console.error(err);\n  });"
  },
  "getarchitectsystemprompthistoryhistoryid": {
    "operationId": "getarchitectsystemprompthistoryhistoryid",
    "functionName": "getArchitectSystempromptHistoryHistoryId",
    "signature": "getArchitectSystempromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | promptId\nlet historyId = \"historyId_example\"; // String | History request ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortOrder\": \"desc\", // String | Sort order\n  \"sortBy\": \"timestamp\", // String | Sort by\n  \"action\": [\"action_example\"] // [String] | Flow actions to include (omit to include all)\n};\n\n// Get generated prompt history\napiInstance.getArchitectSystempromptHistoryHistoryId(promptId, historyId, opts)\n  .then((data) => {\n    console.log(`getArchitectSystempromptHistoryHistoryId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSystempromptHistoryHistoryId\");\n    console.error(err);\n  });"
  },
  "getarchitectsystempromptresource": {
    "operationId": "getarchitectsystempromptresource",
    "functionName": "getArchitectSystempromptResource",
    "signature": "getArchitectSystempromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n// Get a system prompt resource.\napiInstance.getArchitectSystempromptResource(promptId, languageCode)\n  .then((data) => {\n    console.log(`getArchitectSystempromptResource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSystempromptResource\");\n    console.error(err);\n  });"
  },
  "getarchitectsystempromptresources": {
    "operationId": "getarchitectsystempromptresources",
    "functionName": "getArchitectSystempromptResources",
    "signature": "getArchitectSystempromptResources(promptId, pageNumber, pageSize, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SystemPromptAssetEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\" // String | Sort order\n};\n\n// Get system prompt resources.\napiInstance.getArchitectSystempromptResources(promptId, opts)\n  .then((data) => {\n    console.log(`getArchitectSystempromptResources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSystempromptResources\");\n    console.error(err);\n  });"
  },
  "getarchitectsystemprompts": {
    "operationId": "getarchitectsystemprompts",
    "functionName": "getArchitectSystemprompts",
    "signature": "getArchitectSystemprompts(pageNumber, pageSize, sortBy, sortOrder, name, description, nameOrDescription)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SystemPromptEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"name\": \"name_example\", // String | Name\n  \"description\": \"description_example\", // String | Description\n  \"nameOrDescription\": \"nameOrDescription_example\" // String | Name or description\n};\n\n// Get System Prompts\napiInstance.getArchitectSystemprompts(opts)\n  .then((data) => {\n    console.log(`getArchitectSystemprompts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getArchitectSystemprompts\");\n    console.error(err);\n  });"
  },
  "getflow": {
    "operationId": "getflow",
    "functionName": "getFlow",
    "signature": "getFlow(flowId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Flow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet opts = { \n  \"deleted\": false // Boolean | Deleted flows\n};\n\n// Get flow\napiInstance.getFlow(flowId, opts)\n  .then((data) => {\n    console.log(`getFlow success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlow\");\n    console.error(err);\n  });"
  },
  "getflowhistoryhistoryid": {
    "operationId": "getflowhistoryhistoryid",
    "functionName": "getFlowHistoryHistoryId",
    "signature": "getFlowHistoryHistoryId(flowId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet historyId = \"historyId_example\"; // String | History request ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortOrder\": \"desc\", // String | Sort order\n  \"sortBy\": \"timestamp\", // String | Sort by\n  \"action\": [\"action_example\"] // [String] | Flow actions to include (omit to include all)\n};\n\n// Get generated flow history\napiInstance.getFlowHistoryHistoryId(flowId, historyId, opts)\n  .then((data) => {\n    console.log(`getFlowHistoryHistoryId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowHistoryHistoryId\");\n    console.error(err);\n  });"
  },
  "getflowlatestconfiguration": {
    "operationId": "getflowlatestconfiguration",
    "functionName": "getFlowLatestconfiguration",
    "signature": "getFlowLatestconfiguration(flowId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet opts = { \n  \"deleted\": false // Boolean | Deleted flows\n};\n\n// Get the latest configuration for flow\napiInstance.getFlowLatestconfiguration(flowId, opts)\n  .then((data) => {\n    console.log(`getFlowLatestconfiguration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowLatestconfiguration\");\n    console.error(err);\n  });"
  },
  "getflowversion": {
    "operationId": "getflowversion",
    "functionName": "getFlowVersion",
    "signature": "getFlowVersion(flowId, versionId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FlowVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet versionId = \"versionId_example\"; // String | Version ID\nlet opts = { \n  \"deleted\": \"deleted_example\" // String | Deleted flows\n};\n\n// Get flow version\napiInstance.getFlowVersion(flowId, versionId, opts)\n  .then((data) => {\n    console.log(`getFlowVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowVersion\");\n    console.error(err);\n  });"
  },
  "getflowversionconfiguration": {
    "operationId": "getflowversionconfiguration",
    "functionName": "getFlowVersionConfiguration",
    "signature": "getFlowVersionConfiguration(flowId, versionId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet versionId = \"versionId_example\"; // String | Version ID\nlet opts = { \n  \"deleted\": \"deleted_example\" // String | Deleted flows\n};\n\n// Create flow version configuration\napiInstance.getFlowVersionConfiguration(flowId, versionId, opts)\n  .then((data) => {\n    console.log(`getFlowVersionConfiguration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowVersionConfiguration\");\n    console.error(err);\n  });"
  },
  "getflowversions": {
    "operationId": "getflowversions",
    "functionName": "getFlowVersions",
    "signature": "getFlowVersions(flowId, pageNumber, pageSize, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "FlowVersionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"deleted\": true // Boolean | Include Deleted flows\n};\n\n// Get flow version list\napiInstance.getFlowVersions(flowId, opts)\n  .then((data) => {\n    console.log(`getFlowVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowVersions\");\n    console.error(err);\n  });"
  },
  "getflows": {
    "operationId": "getflows",
    "functionName": "getFlows",
    "signature": "getFlows(type, pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, publishVersionId, editableBy, lockedBy, lockedByClientId, secure, deleted, includeSchemas, publishedAfter, publishedBefore, divisionId)",
    "parameters": [
      {
        "name": "type",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishVersionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "editableBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lockedBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lockedByClientId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSchemas",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "publishedAfter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedBefore",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"type\": [\"type_example\"], // [String] | Type\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID\n  \"name\": \"name_example\", // String | Name\n  \"description\": \"description_example\", // String | Description\n  \"nameOrDescription\": \"nameOrDescription_example\", // String | Name or description\n  \"publishVersionId\": \"publishVersionId_example\", // String | Publish version ID\n  \"editableBy\": \"editableBy_example\", // String | Editable by\n  \"lockedBy\": \"lockedBy_example\", // String | Locked by\n  \"lockedByClientId\": \"lockedByClientId_example\", // String | Locked by client ID\n  \"secure\": \"secure_example\", // String | Secure\n  \"deleted\": false, // Boolean | Include deleted\n  \"includeSchemas\": false, // Boolean | Include variable schemas\n  \"publishedAfter\": 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01, // String | Published after\n  \"publishedBefore\": 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01, // String | Published before\n  \"divisionId\": [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n// Get a pageable list of flows, filtered by query parameters\napiInstance.getFlows(opts)\n  .then((data) => {\n    console.log(`getFlows success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlows\");\n    console.error(err);\n  });"
  },
  "getflowsdatatable": {
    "operationId": "getflowsdatatable",
    "functionName": "getFlowsDatatable",
    "signature": "getFlowsDatatable(datatableId, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the result\n};\n\n// Returns a specific datatable by id\napiInstance.getFlowsDatatable(datatableId, opts)\n  .then((data) => {\n    console.log(`getFlowsDatatable success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatable\");\n    console.error(err);\n  });"
  },
  "getflowsdatatableexportjob": {
    "operationId": "getflowsdatatableexportjob",
    "functionName": "getFlowsDatatableExportJob",
    "signature": "getFlowsDatatableExportJob(datatableId, exportJobId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "exportJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableExportJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet exportJobId = \"exportJobId_example\"; // String | id of export job\n\n// Returns the state information about an export job\napiInstance.getFlowsDatatableExportJob(datatableId, exportJobId)\n  .then((data) => {\n    console.log(`getFlowsDatatableExportJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatableExportJob\");\n    console.error(err);\n  });"
  },
  "getflowsdatatableimportjob": {
    "operationId": "getflowsdatatableimportjob",
    "functionName": "getFlowsDatatableImportJob",
    "signature": "getFlowsDatatableImportJob(datatableId, importJobId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableImportJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet importJobId = \"importJobId_example\"; // String | id of import job\n\n// Returns the state information about an import job\napiInstance.getFlowsDatatableImportJob(datatableId, importJobId)\n  .then((data) => {\n    console.log(`getFlowsDatatableImportJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatableImportJob\");\n    console.error(err);\n  });"
  },
  "getflowsdatatableimportjobs": {
    "operationId": "getflowsdatatableimportjobs",
    "functionName": "getFlowsDatatableImportJobs",
    "signature": "getFlowsDatatableImportJobs(datatableId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DataTableImportEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get all recent import jobs\napiInstance.getFlowsDatatableImportJobs(datatableId, opts)\n  .then((data) => {\n    console.log(`getFlowsDatatableImportJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatableImportJobs\");\n    console.error(err);\n  });"
  },
  "getflowsdatatablerow": {
    "operationId": "getflowsdatatablerow",
    "functionName": "getFlowsDatatableRow",
    "signature": "getFlowsDatatableRow(datatableId, rowId, showbrief)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "showbrief",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet rowId = \"rowId_example\"; // String | The key for the row\nlet opts = { \n  \"showbrief\": true // Boolean | if true returns just the key field for the row\n};\n\n// Returns a specific row for the datatable\napiInstance.getFlowsDatatableRow(datatableId, rowId, opts)\n  .then((data) => {\n    console.log(`getFlowsDatatableRow success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatableRow\");\n    console.error(err);\n  });"
  },
  "getflowsdatatablerows": {
    "operationId": "getflowsdatatablerows",
    "functionName": "getFlowsDatatableRows",
    "signature": "getFlowsDatatableRows(datatableId, pageNumber, pageSize, showbrief, sortOrder)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "showbrief",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTableRowEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"showbrief\": true, // Boolean | If true returns just the key value of the row\n  \"sortOrder\": \"ascending\" // String | Sort order\n};\n\n// Returns the rows for the datatable with the given id\napiInstance.getFlowsDatatableRows(datatableId, opts)\n  .then((data) => {\n    console.log(`getFlowsDatatableRows success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatableRows\");\n    console.error(err);\n  });"
  },
  "getflowsdatatables": {
    "operationId": "getflowsdatatables",
    "functionName": "getFlowsDatatables",
    "signature": "getFlowsDatatables(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
    "parameters": [
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTablesDomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"expand\": \"expand_example\", // String | Expand instructions for the result\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"ascending\", // String | Sort order\n  \"divisionId\": [\"divisionId_example\"], // [String] | division ID(s)\n  \"name\": exactMatch, beginsWith*, *endsWith, *contains* // String | Filter by Name. The wildcard character * is supported within the filter. Matches are case-insensitive.\n};\n\n// Retrieve a list of datatables for the org\napiInstance.getFlowsDatatables(opts)\n  .then((data) => {\n    console.log(`getFlowsDatatables success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatables\");\n    console.error(err);\n  });"
  },
  "getflowsdatatablesdivisionview": {
    "operationId": "getflowsdatatablesdivisionview",
    "functionName": "getFlowsDatatablesDivisionview",
    "signature": "getFlowsDatatablesDivisionview(datatableId, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the result\n};\n\n// Returns a specific datatable by id\napiInstance.getFlowsDatatablesDivisionview(datatableId, opts)\n  .then((data) => {\n    console.log(`getFlowsDatatablesDivisionview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatablesDivisionview\");\n    console.error(err);\n  });"
  },
  "getflowsdatatablesdivisionviews": {
    "operationId": "getflowsdatatablesdivisionviews",
    "functionName": "getFlowsDatatablesDivisionviews",
    "signature": "getFlowsDatatablesDivisionviews(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
    "parameters": [
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTablesDomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"expand\": \"expand_example\", // String | Expand instructions for the result\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"ascending\", // String | Sort order\n  \"divisionId\": [\"divisionId_example\"], // [String] | division ID(s)\n  \"name\": exactMatch, beginsWith*, *endsWith, *contains* // String | Filter by Name. The wildcard character * is supported within the filter. Matches are case-insensitive.\n};\n\n// Retrieve a list of datatables for the org\napiInstance.getFlowsDatatablesDivisionviews(opts)\n  .then((data) => {\n    console.log(`getFlowsDatatablesDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDatatablesDivisionviews\");\n    console.error(err);\n  });"
  },
  "getflowsdivisionviews": {
    "operationId": "getflowsdivisionviews",
    "functionName": "getFlowsDivisionviews",
    "signature": "getFlowsDivisionviews(type, pageNumber, pageSize, sortBy, sortOrder, id, name, publishVersionId, publishedAfter, publishedBefore, divisionId, includeSchemas)",
    "parameters": [
      {
        "name": "type",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishVersionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedAfter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedBefore",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includeSchemas",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "FlowDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"type\": [\"type_example\"], // [String] | Type\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID\n  \"name\": \"name_example\", // String | Name\n  \"publishVersionId\": \"publishVersionId_example\", // String | Publish version ID\n  \"publishedAfter\": 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01, // String | Published after\n  \"publishedBefore\": 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01, // String | Published before\n  \"divisionId\": [\"divisionId_example\"], // [String] | division ID(s)\n  \"includeSchemas\": false // Boolean | Include variable schemas\n};\n\n// Get a pageable list of basic flow information objects filterable by query parameters.\napiInstance.getFlowsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getFlowsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getflowsexecution": {
    "operationId": "getflowsexecution",
    "functionName": "getFlowsExecution",
    "signature": "getFlowsExecution(flowExecutionId)",
    "parameters": [
      {
        "name": "flowExecutionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowRuntimeExecution",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowExecutionId = \"flowExecutionId_example\"; // String | flow execution ID\n\n// Get a flow execution's details. Flow execution details are available for several days after the flow is started.\napiInstance.getFlowsExecution(flowExecutionId)\n  .then((data) => {\n    console.log(`getFlowsExecution success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsExecution\");\n    console.error(err);\n  });"
  },
  "getflowsinstance": {
    "operationId": "getflowsinstance",
    "functionName": "getFlowsInstance",
    "signature": "getFlowsInstance(instanceId, expand)",
    "parameters": [
      {
        "name": "instanceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GetFlowExecutionDataJobResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet instanceId = \"instanceId_example\"; // String | Instance ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand various details.\n};\n\n// Start a process (job) to prepare a download of a singular flow execution data instance by Id\napiInstance.getFlowsInstance(instanceId, opts)\n  .then((data) => {\n    console.log(`getFlowsInstance success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsInstance\");\n    console.error(err);\n  });"
  },
  "getflowsinstancesjob": {
    "operationId": "getflowsinstancesjob",
    "functionName": "getFlowsInstancesJob",
    "signature": "getFlowsInstancesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GetFlowExecutionDataJobResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet jobId = \"jobId_example\"; // String | The asynchronous job ID\n\n// Get the status and/or results of an asynchronous flow execution data retrieval job\napiInstance.getFlowsInstancesJob(jobId)\n  .then((data) => {\n    console.log(`getFlowsInstancesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsInstancesJob\");\n    console.error(err);\n  });"
  },
  "getflowsinstancesquerycapabilities": {
    "operationId": "getflowsinstancesquerycapabilities",
    "functionName": "getFlowsInstancesQuerycapabilities",
    "signature": "getFlowsInstancesQuerycapabilities(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FlowsQueryCriteriaResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand various query types.\n};\n\n// Retrieve a list of capabilities that the org can use to query for execution data\napiInstance.getFlowsInstancesQuerycapabilities(opts)\n  .then((data) => {\n    console.log(`getFlowsInstancesQuerycapabilities success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsInstancesQuerycapabilities\");\n    console.error(err);\n  });"
  },
  "getflowsjob": {
    "operationId": "getflowsjob",
    "functionName": "getFlowsJob",
    "signature": "getFlowsJob(jobId, expand)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ArchitectJobStateResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet jobId = \"jobId_example\"; // String | Job ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Fetch Architect Job Status\napiInstance.getFlowsJob(jobId, opts)\n  .then((data) => {\n    console.log(`getFlowsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsJob\");\n    console.error(err);\n  });"
  },
  "getflowsmilestone": {
    "operationId": "getflowsmilestone",
    "functionName": "getFlowsMilestone",
    "signature": "getFlowsMilestone(milestoneId)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowMilestone",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet milestoneId = \"milestoneId_example\"; // String | flow milestone ID\n\n// Get a flow milestone\napiInstance.getFlowsMilestone(milestoneId)\n  .then((data) => {\n    console.log(`getFlowsMilestone success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsMilestone\");\n    console.error(err);\n  });"
  },
  "getflowsmilestones": {
    "operationId": "getflowsmilestones",
    "functionName": "getFlowsMilestones",
    "signature": "getFlowsMilestones(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowMilestoneListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID\n  \"name\": \"name_example\", // String | Name\n  \"description\": \"description_example\", // String | Description\n  \"nameOrDescription\": \"nameOrDescription_example\", // String | Name or description\n  \"divisionId\": [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n// Get a pageable list of flow milestones, filtered by query parameters\napiInstance.getFlowsMilestones(opts)\n  .then((data) => {\n    console.log(`getFlowsMilestones success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsMilestones\");\n    console.error(err);\n  });"
  },
  "getflowsmilestonesdivisionviews": {
    "operationId": "getflowsmilestonesdivisionviews",
    "functionName": "getFlowsMilestonesDivisionviews",
    "signature": "getFlowsMilestonesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowMilestoneDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID\n  \"name\": \"name_example\", // String | Name\n  \"divisionId\": [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n// Get a pageable list of basic flow milestone information objects filterable by query parameters.\napiInstance.getFlowsMilestonesDivisionviews(opts)\n  .then((data) => {\n    console.log(`getFlowsMilestonesDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsMilestonesDivisionviews\");\n    console.error(err);\n  });"
  },
  "getflowsoutcome": {
    "operationId": "getflowsoutcome",
    "functionName": "getFlowsOutcome",
    "signature": "getFlowsOutcome(flowOutcomeId)",
    "parameters": [
      {
        "name": "flowOutcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowOutcome",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowOutcomeId = \"flowOutcomeId_example\"; // String | flow outcome ID\n\n// Get a flow outcome\napiInstance.getFlowsOutcome(flowOutcomeId)\n  .then((data) => {\n    console.log(`getFlowsOutcome success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsOutcome\");\n    console.error(err);\n  });"
  },
  "getflowsoutcomes": {
    "operationId": "getflowsoutcomes",
    "functionName": "getFlowsOutcomes",
    "signature": "getFlowsOutcomes(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowOutcomeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID\n  \"name\": \"name_example\", // String | Name\n  \"description\": \"description_example\", // String | Description\n  \"nameOrDescription\": \"nameOrDescription_example\", // String | Name or description\n  \"divisionId\": [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n// Get a pageable list of flow outcomes, filtered by query parameters\napiInstance.getFlowsOutcomes(opts)\n  .then((data) => {\n    console.log(`getFlowsOutcomes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsOutcomes\");\n    console.error(err);\n  });"
  },
  "getflowsoutcomesdivisionviews": {
    "operationId": "getflowsoutcomesdivisionviews",
    "functionName": "getFlowsOutcomesDivisionviews",
    "signature": "getFlowsOutcomesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowOutcomeDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"id\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID\n  \"name\": \"name_example\", // String | Name\n  \"divisionId\": [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n// Get a pageable list of basic flow outcome information objects filterable by query parameters.\napiInstance.getFlowsOutcomesDivisionviews(opts)\n  .then((data) => {\n    console.log(`getFlowsOutcomesDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFlowsOutcomesDivisionviews\");\n    console.error(err);\n  });"
  },
  "patcharchitectgrammar": {
    "operationId": "patcharchitectgrammar",
    "functionName": "patchArchitectGrammar",
    "signature": "patchArchitectGrammar(grammarId, body)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Grammar",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | grammar ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Updates a grammar\napiInstance.patchArchitectGrammar(grammarId, opts)\n  .then((data) => {\n    console.log(`patchArchitectGrammar success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchArchitectGrammar\");\n    console.error(err);\n  });"
  },
  "postarchitectdependencytrackingbuild": {
    "operationId": "postarchitectdependencytrackingbuild",
    "functionName": "postArchitectDependencytrackingBuild",
    "signature": "postArchitectDependencytrackingBuild()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\n// Rebuild Dependency Tracking data for an organization\napiInstance.postArchitectDependencytrackingBuild()\n  .then(() => {\n    console.log(\"postArchitectDependencytrackingBuild returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectDependencytrackingBuild\");\n    console.error(err);\n  });"
  },
  "postarchitectemergencygroups": {
    "operationId": "postarchitectemergencygroups",
    "functionName": "postArchitectEmergencygroups",
    "signature": "postArchitectEmergencygroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | \n\n// Creates a new emergency group\napiInstance.postArchitectEmergencygroups(body)\n  .then((data) => {\n    console.log(`postArchitectEmergencygroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectEmergencygroups\");\n    console.error(err);\n  });"
  },
  "postarchitectgrammarlanguagefilesdtmf": {
    "operationId": "postarchitectgrammarlanguagefilesdtmf",
    "functionName": "postArchitectGrammarLanguageFilesDtmf",
    "signature": "postArchitectGrammarLanguageFilesDtmf(grammarId, languageCode, body)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | Grammar ID\nlet languageCode = \"languageCode_example\"; // String | Language\nlet body = {}; // Object | query\n\n// Creates a presigned URL for uploading a grammar DTMF mode file\napiInstance.postArchitectGrammarLanguageFilesDtmf(grammarId, languageCode, body)\n  .then((data) => {\n    console.log(`postArchitectGrammarLanguageFilesDtmf success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectGrammarLanguageFilesDtmf\");\n    console.error(err);\n  });"
  },
  "postarchitectgrammarlanguagefilesvoice": {
    "operationId": "postarchitectgrammarlanguagefilesvoice",
    "functionName": "postArchitectGrammarLanguageFilesVoice",
    "signature": "postArchitectGrammarLanguageFilesVoice(grammarId, languageCode, body)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | Grammar ID\nlet languageCode = \"languageCode_example\"; // String | Language\nlet body = {}; // Object | query\n\n// Creates a presigned URL for uploading a grammar voice mode file\napiInstance.postArchitectGrammarLanguageFilesVoice(grammarId, languageCode, body)\n  .then((data) => {\n    console.log(`postArchitectGrammarLanguageFilesVoice success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectGrammarLanguageFilesVoice\");\n    console.error(err);\n  });"
  },
  "postarchitectgrammarlanguages": {
    "operationId": "postarchitectgrammarlanguages",
    "functionName": "postArchitectGrammarLanguages",
    "signature": "postArchitectGrammarLanguages(grammarId, body)",
    "parameters": [
      {
        "name": "grammarId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GrammarLanguage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet grammarId = \"grammarId_example\"; // String | Grammar ID\nlet body = {}; // Object | \n\n// Create a new language for a given grammar\napiInstance.postArchitectGrammarLanguages(grammarId, body)\n  .then((data) => {\n    console.log(`postArchitectGrammarLanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectGrammarLanguages\");\n    console.error(err);\n  });"
  },
  "postarchitectgrammars": {
    "operationId": "postarchitectgrammars",
    "functionName": "postArchitectGrammars",
    "signature": "postArchitectGrammars(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Grammar",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | \n\n// Create a new grammar\napiInstance.postArchitectGrammars(body)\n  .then((data) => {\n    console.log(`postArchitectGrammars success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectGrammars\");\n    console.error(err);\n  });"
  },
  "postarchitectivrs": {
    "operationId": "postarchitectivrs",
    "functionName": "postArchitectIvrs",
    "signature": "postArchitectIvrs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | \n\n// Create IVR config.\napiInstance.postArchitectIvrs(body)\n  .then((data) => {\n    console.log(`postArchitectIvrs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectIvrs\");\n    console.error(err);\n  });"
  },
  "postarchitectprompthistory": {
    "operationId": "postarchitectprompthistory",
    "functionName": "postArchitectPromptHistory",
    "signature": "postArchitectPromptHistory(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\n\n// Generate prompt history\napiInstance.postArchitectPromptHistory(promptId)\n  .then((data) => {\n    console.log(`postArchitectPromptHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectPromptHistory\");\n    console.error(err);\n  });"
  },
  "postarchitectpromptresources": {
    "operationId": "postarchitectpromptresources",
    "functionName": "postArchitectPromptResources",
    "signature": "postArchitectPromptResources(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet body = {}; // Object | \n\n// Create a new user prompt resource\napiInstance.postArchitectPromptResources(promptId, body)\n  .then((data) => {\n    console.log(`postArchitectPromptResources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectPromptResources\");\n    console.error(err);\n  });"
  },
  "postarchitectprompts": {
    "operationId": "postarchitectprompts",
    "functionName": "postArchitectPrompts",
    "signature": "postArchitectPrompts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | \n\n// Create a new user prompt\napiInstance.postArchitectPrompts(body)\n  .then((data) => {\n    console.log(`postArchitectPrompts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectPrompts\");\n    console.error(err);\n  });"
  },
  "postarchitectschedulegroups": {
    "operationId": "postarchitectschedulegroups",
    "functionName": "postArchitectSchedulegroups",
    "signature": "postArchitectSchedulegroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | \n\n// Creates a new schedule group\napiInstance.postArchitectSchedulegroups(body)\n  .then((data) => {\n    console.log(`postArchitectSchedulegroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectSchedulegroups\");\n    console.error(err);\n  });"
  },
  "postarchitectschedules": {
    "operationId": "postarchitectschedules",
    "functionName": "postArchitectSchedules",
    "signature": "postArchitectSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | \n\n// Create a new schedule.\napiInstance.postArchitectSchedules(body)\n  .then((data) => {\n    console.log(`postArchitectSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectSchedules\");\n    console.error(err);\n  });"
  },
  "postarchitectsystemprompthistory": {
    "operationId": "postarchitectsystemprompthistory",
    "functionName": "postArchitectSystempromptHistory",
    "signature": "postArchitectSystempromptHistory(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | promptId\n\n// Generate system prompt history\napiInstance.postArchitectSystempromptHistory(promptId)\n  .then((data) => {\n    console.log(`postArchitectSystempromptHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectSystempromptHistory\");\n    console.error(err);\n  });"
  },
  "postarchitectsystempromptresources": {
    "operationId": "postarchitectsystempromptresources",
    "functionName": "postArchitectSystempromptResources",
    "signature": "postArchitectSystempromptResources(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet body = {}; // Object | \n\n// Create system prompt resource override.\napiInstance.postArchitectSystempromptResources(promptId, body)\n  .then((data) => {\n    console.log(`postArchitectSystempromptResources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postArchitectSystempromptResources\");\n    console.error(err);\n  });"
  },
  "postflowhistory": {
    "operationId": "postflowhistory",
    "functionName": "postFlowHistory",
    "signature": "postFlowHistory(flowId)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\n\n// Generate flow history\napiInstance.postFlowHistory(flowId)\n  .then((data) => {\n    console.log(`postFlowHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowHistory\");\n    console.error(err);\n  });"
  },
  "postflowversions": {
    "operationId": "postflowversions",
    "functionName": "postFlowVersions",
    "signature": "postFlowVersions(flowId, body)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "{String: Object}",
        "required": "true"
      }
    ],
    "return": "FlowVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet body = null; // {String: Object} | \n\n// Create flow version\napiInstance.postFlowVersions(flowId, body)\n  .then((data) => {\n    console.log(`postFlowVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowVersions\");\n    console.error(err);\n  });"
  },
  "postflows": {
    "operationId": "postflows",
    "functionName": "postFlows",
    "signature": "postFlows(body, language)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Flow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | \nlet opts = { \n  \"language\": \"language_example\" // String | Language\n};\n\n// Create flow\napiInstance.postFlows(body, opts)\n  .then((data) => {\n    console.log(`postFlows success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlows\");\n    console.error(err);\n  });"
  },
  "postflowsactionscheckin": {
    "operationId": "postflowsactionscheckin",
    "functionName": "postFlowsActionsCheckin",
    "signature": "postFlowsActionsCheckin(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n// Check-in flow\napiInstance.postFlowsActionsCheckin(flow)\n  .then((data) => {\n    console.log(`postFlowsActionsCheckin success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsActionsCheckin\");\n    console.error(err);\n  });"
  },
  "postflowsactionscheckout": {
    "operationId": "postflowsactionscheckout",
    "functionName": "postFlowsActionsCheckout",
    "signature": "postFlowsActionsCheckout(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n// Check-out flow\napiInstance.postFlowsActionsCheckout(flow)\n  .then((data) => {\n    console.log(`postFlowsActionsCheckout success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsActionsCheckout\");\n    console.error(err);\n  });"
  },
  "postflowsactionsdeactivate": {
    "operationId": "postflowsactionsdeactivate",
    "functionName": "postFlowsActionsDeactivate",
    "signature": "postFlowsActionsDeactivate(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n// Deactivate flow\napiInstance.postFlowsActionsDeactivate(flow)\n  .then((data) => {\n    console.log(`postFlowsActionsDeactivate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsActionsDeactivate\");\n    console.error(err);\n  });"
  },
  "postflowsactionspublish": {
    "operationId": "postflowsactionspublish",
    "functionName": "postFlowsActionsPublish",
    "signature": "postFlowsActionsPublish(flow, version)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flow = \"flow_example\"; // String | Flow ID\nlet opts = { \n  \"version\": \"version_example\" // String | version\n};\n\n// Publish flow\napiInstance.postFlowsActionsPublish(flow, opts)\n  .then((data) => {\n    console.log(`postFlowsActionsPublish success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsActionsPublish\");\n    console.error(err);\n  });"
  },
  "postflowsactionsrevert": {
    "operationId": "postflowsactionsrevert",
    "functionName": "postFlowsActionsRevert",
    "signature": "postFlowsActionsRevert(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n// Revert flow\napiInstance.postFlowsActionsRevert(flow)\n  .then((data) => {\n    console.log(`postFlowsActionsRevert success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsActionsRevert\");\n    console.error(err);\n  });"
  },
  "postflowsactionsunlock": {
    "operationId": "postflowsactionsunlock",
    "functionName": "postFlowsActionsUnlock",
    "signature": "postFlowsActionsUnlock(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n// Unlock flow\napiInstance.postFlowsActionsUnlock(flow)\n  .then((data) => {\n    console.log(`postFlowsActionsUnlock success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsActionsUnlock\");\n    console.error(err);\n  });"
  },
  "postflowsdatatableexportjobs": {
    "operationId": "postflowsdatatableexportjobs",
    "functionName": "postFlowsDatatableExportJobs",
    "signature": "postFlowsDatatableExportJobs(datatableId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableExportJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\n\n// Begin an export process for exporting all rows from a datatable\napiInstance.postFlowsDatatableExportJobs(datatableId)\n  .then((data) => {\n    console.log(`postFlowsDatatableExportJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsDatatableExportJobs\");\n    console.error(err);\n  });"
  },
  "postflowsdatatableimportjobs": {
    "operationId": "postflowsdatatableimportjobs",
    "functionName": "postFlowsDatatableImportJobs",
    "signature": "postFlowsDatatableImportJobs(datatableId, body)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataTableImportJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet body = {}; // Object | import job information\n\n// Begin an import process for importing rows into a datatable\napiInstance.postFlowsDatatableImportJobs(datatableId, body)\n  .then((data) => {\n    console.log(`postFlowsDatatableImportJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsDatatableImportJobs\");\n    console.error(err);\n  });"
  },
  "postflowsdatatablerows": {
    "operationId": "postflowsdatatablerows",
    "functionName": "postFlowsDatatableRows",
    "signature": "postFlowsDatatableRows(datatableId, dataTableRow)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "dataTableRow",
        "type": "{String: Object}",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet dataTableRow = null; // {String: Object} | \n\n// Create a new row entry for the datatable.\napiInstance.postFlowsDatatableRows(datatableId, dataTableRow)\n  .then((data) => {\n    console.log(`postFlowsDatatableRows success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsDatatableRows\");\n    console.error(err);\n  });"
  },
  "postflowsdatatables": {
    "operationId": "postflowsdatatables",
    "functionName": "postFlowsDatatables",
    "signature": "postFlowsDatatables(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataTable",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | datatable json-schema\n\n// Create a new datatable with the specified json-schema definition\napiInstance.postFlowsDatatables(body)\n  .then((data) => {\n    console.log(`postFlowsDatatables success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsDatatables\");\n    console.error(err);\n  });"
  },
  "postflowsexecutions": {
    "operationId": "postflowsexecutions",
    "functionName": "postFlowsExecutions",
    "signature": "postFlowsExecutions(flowLaunchRequest)",
    "parameters": [
      {
        "name": "flowLaunchRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FlowExecutionLaunchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowLaunchRequest = {}; // Object | \n\n// Launch an instance of a flow definition, for flow types that support it such as the 'workflow' type.\napiInstance.postFlowsExecutions(flowLaunchRequest)\n  .then((data) => {\n    console.log(`postFlowsExecutions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsExecutions\");\n    console.error(err);\n  });"
  },
  "postflowsinstancesjobs": {
    "operationId": "postflowsinstancesjobs",
    "functionName": "postFlowsInstancesJobs",
    "signature": "postFlowsInstancesJobs(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GetFlowExecutionDataJobResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | Requested Flow Ids\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand various query types.\n};\n\n// Start a process (job) that will prepare a list of execution data IDs for download.\napiInstance.postFlowsInstancesJobs(body, opts)\n  .then((data) => {\n    console.log(`postFlowsInstancesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsInstancesJobs\");\n    console.error(err);\n  });"
  },
  "postflowsinstancesquery": {
    "operationId": "postflowsinstancesquery",
    "functionName": "postFlowsInstancesQuery",
    "signature": "postFlowsInstancesQuery(body, indexOnly)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "indexOnly",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "FlowResultEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet body = {}; // Object | query\nlet opts = { \n  \"indexOnly\": true // Boolean | indexes only\n};\n\n// Query the database of existing flow histories to look for particular flow criteria\napiInstance.postFlowsInstancesQuery(body, opts)\n  .then((data) => {\n    console.log(`postFlowsInstancesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsInstancesQuery\");\n    console.error(err);\n  });"
  },
  "postflowsjobs": {
    "operationId": "postflowsjobs",
    "functionName": "postFlowsJobs",
    "signature": "postFlowsJobs()",
    "return": "RegisterArchitectJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\n// Register Architect Job. Returns a URL where a file, such as an Architect flow YAML file, can be PUT which will then initiate the job.\napiInstance.postFlowsJobs()\n  .then((data) => {\n    console.log(`postFlowsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsJobs\");\n    console.error(err);\n  });"
  },
  "postflowsmilestones": {
    "operationId": "postflowsmilestones",
    "functionName": "postFlowsMilestones",
    "signature": "postFlowsMilestones(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "FlowMilestone",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a flow milestone\napiInstance.postFlowsMilestones(opts)\n  .then((data) => {\n    console.log(`postFlowsMilestones success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsMilestones\");\n    console.error(err);\n  });"
  },
  "postflowsoutcomes": {
    "operationId": "postflowsoutcomes",
    "functionName": "postFlowsOutcomes",
    "signature": "postFlowsOutcomes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "FlowOutcome",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a flow outcome\napiInstance.postFlowsOutcomes(opts)\n  .then((data) => {\n    console.log(`postFlowsOutcomes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postFlowsOutcomes\");\n    console.error(err);\n  });"
  },
  "putarchitectemergencygroup": {
    "operationId": "putarchitectemergencygroup",
    "functionName": "putArchitectEmergencygroup",
    "signature": "putArchitectEmergencygroup(emergencyGroupId, body)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet emergencyGroupId = \"emergencyGroupId_example\"; // String | Emergency group ID\nlet body = {}; // Object | \n\n// Updates a emergency group by ID\napiInstance.putArchitectEmergencygroup(emergencyGroupId, body)\n  .then((data) => {\n    console.log(`putArchitectEmergencygroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putArchitectEmergencygroup\");\n    console.error(err);\n  });"
  },
  "putarchitectivr": {
    "operationId": "putarchitectivr",
    "functionName": "putArchitectIvr",
    "signature": "putArchitectIvr(ivrId, body)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet ivrId = \"ivrId_example\"; // String | IVR id\nlet body = {}; // Object | \n\n// Update an IVR Config.\napiInstance.putArchitectIvr(ivrId, body)\n  .then((data) => {\n    console.log(`putArchitectIvr success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putArchitectIvr\");\n    console.error(err);\n  });"
  },
  "putarchitectprompt": {
    "operationId": "putarchitectprompt",
    "functionName": "putArchitectPrompt",
    "signature": "putArchitectPrompt(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet body = {}; // Object | \n\n// Update specified user prompt\napiInstance.putArchitectPrompt(promptId, body)\n  .then((data) => {\n    console.log(`putArchitectPrompt success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putArchitectPrompt\");\n    console.error(err);\n  });"
  },
  "putarchitectpromptresource": {
    "operationId": "putarchitectpromptresource",
    "functionName": "putArchitectPromptResource",
    "signature": "putArchitectPromptResource(promptId, languageCode, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\nlet body = {}; // Object | \n\n// Update specified user prompt resource\napiInstance.putArchitectPromptResource(promptId, languageCode, body)\n  .then((data) => {\n    console.log(`putArchitectPromptResource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putArchitectPromptResource\");\n    console.error(err);\n  });"
  },
  "putarchitectschedule": {
    "operationId": "putarchitectschedule",
    "functionName": "putArchitectSchedule",
    "signature": "putArchitectSchedule(scheduleId, body)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\nlet body = {}; // Object | \n\n// Update schedule by ID\napiInstance.putArchitectSchedule(scheduleId, body)\n  .then((data) => {\n    console.log(`putArchitectSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putArchitectSchedule\");\n    console.error(err);\n  });"
  },
  "putarchitectschedulegroup": {
    "operationId": "putarchitectschedulegroup",
    "functionName": "putArchitectSchedulegroup",
    "signature": "putArchitectSchedulegroup(scheduleGroupId, body)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet scheduleGroupId = \"scheduleGroupId_example\"; // String | Schedule group ID\nlet body = {}; // Object | \n\n// Updates a schedule group by ID\napiInstance.putArchitectSchedulegroup(scheduleGroupId, body)\n  .then((data) => {\n    console.log(`putArchitectSchedulegroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putArchitectSchedulegroup\");\n    console.error(err);\n  });"
  },
  "putarchitectsystempromptresource": {
    "operationId": "putarchitectsystempromptresource",
    "functionName": "putArchitectSystempromptResource",
    "signature": "putArchitectSystempromptResource(promptId, languageCode, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\nlet body = {}; // Object | \n\n// Updates a system prompt resource override.\napiInstance.putArchitectSystempromptResource(promptId, languageCode, body)\n  .then((data) => {\n    console.log(`putArchitectSystempromptResource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putArchitectSystempromptResource\");\n    console.error(err);\n  });"
  },
  "putflow": {
    "operationId": "putflow",
    "functionName": "putFlow",
    "signature": "putFlow(flowId, body)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet body = {}; // Object | \n\n// Update flow\napiInstance.putFlow(flowId, body)\n  .then((data) => {\n    console.log(`putFlow success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putFlow\");\n    console.error(err);\n  });"
  },
  "putflowsdatatable": {
    "operationId": "putflowsdatatable",
    "functionName": "putFlowsDatatable",
    "signature": "putFlowsDatatable(datatableId, body, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet body = {}; // Object | datatable json-schema\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the result\n};\n\n// Updates a specific datatable by id\napiInstance.putFlowsDatatable(datatableId, body, opts)\n  .then((data) => {\n    console.log(`putFlowsDatatable success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putFlowsDatatable\");\n    console.error(err);\n  });"
  },
  "putflowsdatatablerow": {
    "operationId": "putflowsdatatablerow",
    "functionName": "putFlowsDatatableRow",
    "signature": "putFlowsDatatableRow(datatableId, rowId, body)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "{String: Object}",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet rowId = \"rowId_example\"; // String | the key for the row\nlet opts = { \n  \"body\": null // {String: Object} | datatable row\n};\n\n// Update a row entry\napiInstance.putFlowsDatatableRow(datatableId, rowId, opts)\n  .then((data) => {\n    console.log(`putFlowsDatatableRow success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putFlowsDatatableRow\");\n    console.error(err);\n  });"
  },
  "putflowsmilestone": {
    "operationId": "putflowsmilestone",
    "functionName": "putFlowsMilestone",
    "signature": "putFlowsMilestone(milestoneId, body)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "FlowMilestone",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet milestoneId = \"milestoneId_example\"; // String | flow milestone ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Updates a flow milestone\napiInstance.putFlowsMilestone(milestoneId, opts)\n  .then((data) => {\n    console.log(`putFlowsMilestone success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putFlowsMilestone\");\n    console.error(err);\n  });"
  },
  "putflowsoutcome": {
    "operationId": "putflowsoutcome",
    "functionName": "putFlowsOutcome",
    "signature": "putFlowsOutcome(flowOutcomeId, body)",
    "parameters": [
      {
        "name": "flowOutcomeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Operation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ArchitectApi();\n\nlet flowOutcomeId = \"flowOutcomeId_example\"; // String | flow outcome ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Updates a flow outcome\napiInstance.putFlowsOutcome(flowOutcomeId, opts)\n  .then((data) => {\n    console.log(`putFlowsOutcome success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putFlowsOutcome\");\n    console.error(err);\n  });"
  },
  "getauditsqueryrealtimeservicemapping": {
    "operationId": "getauditsqueryrealtimeservicemapping",
    "functionName": "getAuditsQueryRealtimeServicemapping",
    "signature": "getAuditsQueryRealtimeServicemapping()",
    "return": "AuditQueryServiceMapping",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuditApi();\n\n// Get service mapping information used in realtime audits.\napiInstance.getAuditsQueryRealtimeServicemapping()\n  .then((data) => {\n    console.log(`getAuditsQueryRealtimeServicemapping success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuditsQueryRealtimeServicemapping\");\n    console.error(err);\n  });"
  },
  "getauditsqueryservicemapping": {
    "operationId": "getauditsqueryservicemapping",
    "functionName": "getAuditsQueryServicemapping",
    "signature": "getAuditsQueryServicemapping()",
    "return": "AuditQueryServiceMapping",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuditApi();\n\n// Get service mapping information used in audits.\napiInstance.getAuditsQueryServicemapping()\n  .then((data) => {\n    console.log(`getAuditsQueryServicemapping success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuditsQueryServicemapping\");\n    console.error(err);\n  });"
  },
  "getauditsquerytransactionid": {
    "operationId": "getauditsquerytransactionid",
    "functionName": "getAuditsQueryTransactionId",
    "signature": "getAuditsQueryTransactionId(transactionId)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AuditQueryExecutionStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuditApi();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\n\n// Get status of audit query execution\napiInstance.getAuditsQueryTransactionId(transactionId)\n  .then((data) => {\n    console.log(`getAuditsQueryTransactionId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuditsQueryTransactionId\");\n    console.error(err);\n  });"
  },
  "getauditsquerytransactionidresults": {
    "operationId": "getauditsquerytransactionidresults",
    "functionName": "getAuditsQueryTransactionIdResults",
    "signature": "getAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AuditQueryExecutionResultsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuditApi();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\nlet opts = { \n  \"cursor\": \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  \"pageSize\": 25, // Number | Indicates maximum number of results in response. Default page size is 25 results. The maximum page size is 500.\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get results of audit query\napiInstance.getAuditsQueryTransactionIdResults(transactionId, opts)\n  .then((data) => {\n    console.log(`getAuditsQueryTransactionIdResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuditsQueryTransactionIdResults\");\n    console.error(err);\n  });"
  },
  "postauditsquery": {
    "operationId": "postauditsquery",
    "functionName": "postAuditsQuery",
    "signature": "postAuditsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuditQueryExecutionStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuditApi();\n\nlet body = {}; // Object | query\n\n// Create audit query execution\napiInstance.postAuditsQuery(body)\n  .then((data) => {\n    console.log(`postAuditsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuditsQuery\");\n    console.error(err);\n  });"
  },
  "postauditsqueryrealtime": {
    "operationId": "postauditsqueryrealtime",
    "functionName": "postAuditsQueryRealtime",
    "signature": "postAuditsQueryRealtime(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AuditRealtimeQueryResultsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuditApi();\n\nlet body = {}; // Object | query\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// This endpoint will only retrieve 14 days worth of audits for certain services. Please use /query to get a full list and older audits.\napiInstance.postAuditsQueryRealtime(body, opts)\n  .then((data) => {\n    console.log(`postAuditsQueryRealtime success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuditsQueryRealtime\");\n    console.error(err);\n  });"
  },
  "deleteauthorizationdivision": {
    "operationId": "deleteauthorizationdivision",
    "functionName": "deleteAuthorizationDivision",
    "signature": "deleteAuthorizationDivision(divisionId, force)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet opts = { \n  \"force\": false // Boolean | Force delete this division as well as the grants and objects associated with it\n};\n\n// Delete a division.\napiInstance.deleteAuthorizationDivision(divisionId, opts)\n  .then(() => {\n    console.log(\"deleteAuthorizationDivision returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAuthorizationDivision\");\n    console.error(err);\n  });"
  },
  "deleteauthorizationrole": {
    "operationId": "deleteauthorizationrole",
    "functionName": "deleteAuthorizationRole",
    "signature": "deleteAuthorizationRole(roleId)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\n\n// Delete an organization role.\napiInstance.deleteAuthorizationRole(roleId)\n  .then(() => {\n    console.log(\"deleteAuthorizationRole returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAuthorizationRole\");\n    console.error(err);\n  });"
  },
  "deleteauthorizationsubjectdivisionrole": {
    "operationId": "deleteauthorizationsubjectdivisionrole",
    "functionName": "deleteAuthorizationSubjectDivisionRole",
    "signature": "deleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet divisionId = \"divisionId_example\"; // String | the id of the division of the grant\nlet roleId = \"roleId_example\"; // String | the id of the role of the grant\n\n// Delete a grant of a role in a division\napiInstance.deleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)\n  .then(() => {\n    console.log(\"deleteAuthorizationSubjectDivisionRole returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteAuthorizationSubjectDivisionRole\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivision": {
    "operationId": "getauthorizationdivision",
    "functionName": "getAuthorizationDivision",
    "signature": "getAuthorizationDivision(divisionId, objectCount)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectCount",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AuthzDivision",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet opts = { \n  \"objectCount\": false // Boolean | Get count of objects in this division, grouped by type\n};\n\n// Returns an authorization division.\napiInstance.getAuthorizationDivision(divisionId, opts)\n  .then((data) => {\n    console.log(`getAuthorizationDivision success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivision\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivisiongrants": {
    "operationId": "getauthorizationdivisiongrants",
    "functionName": "getAuthorizationDivisionGrants",
    "signature": "getAuthorizationDivisionGrants(divisionId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "AuthzDivisionGrantEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Gets all grants for a given division.\napiInstance.getAuthorizationDivisionGrants(divisionId, opts)\n  .then((data) => {\n    console.log(`getAuthorizationDivisionGrants success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivisionGrants\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivisions": {
    "operationId": "getauthorizationdivisions",
    "functionName": "getAuthorizationDivisions",
    "signature": "getAuthorizationDivisions(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, objectCount, id, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectCount",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AuthzDivisionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"objectCount\": false, // Boolean | Include the count of objects contained in the division\n  \"id\": [\"id_example\"], // [String] | Optionally request specific divisions by their IDs\n  \"name\": \"name_example\" // String | Search term to filter by division name\n};\n\n// Retrieve a list of all divisions defined for the organization\napiInstance.getAuthorizationDivisions(opts)\n  .then((data) => {\n    console.log(`getAuthorizationDivisions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivisions\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivisionshome": {
    "operationId": "getauthorizationdivisionshome",
    "functionName": "getAuthorizationDivisionsHome",
    "signature": "getAuthorizationDivisionsHome()",
    "return": "AuthzDivision",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\n// Retrieve the home division for the organization.\napiInstance.getAuthorizationDivisionsHome()\n  .then((data) => {\n    console.log(`getAuthorizationDivisionsHome success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivisionsHome\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivisionslimit": {
    "operationId": "getauthorizationdivisionslimit",
    "functionName": "getAuthorizationDivisionsLimit",
    "signature": "getAuthorizationDivisionsLimit()",
    "return": "'Number'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\n// Returns the maximum allowed number of divisions.\napiInstance.getAuthorizationDivisionsLimit()\n  .then((data) => {\n    console.log(`getAuthorizationDivisionsLimit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivisionsLimit\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivisionspermittedme": {
    "operationId": "getauthorizationdivisionspermittedme",
    "functionName": "getAuthorizationDivisionspermittedMe",
    "signature": "getAuthorizationDivisionspermittedMe(permission, name)",
    "parameters": [
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[AuthzDivision]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet permission = \"permission_example\"; // String | The permission string, including the object to access, e.g. routing:queue:view\nlet opts = { \n  \"name\": \"name_example\" // String | Search term to filter by division name\n};\n\n// Returns which divisions the current user has the given permission in.\napiInstance.getAuthorizationDivisionspermittedMe(permission, opts)\n  .then((data) => {\n    console.log(`getAuthorizationDivisionspermittedMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivisionspermittedMe\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivisionspermittedpagedme": {
    "operationId": "getauthorizationdivisionspermittedpagedme",
    "functionName": "getAuthorizationDivisionspermittedPagedMe",
    "signature": "getAuthorizationDivisionspermittedPagedMe(permission, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DivsPermittedEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet permission = \"permission_example\"; // String | The permission string, including the object to access, e.g. routing:queue:view\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Returns which divisions the current user has the given permission in.\napiInstance.getAuthorizationDivisionspermittedPagedMe(permission, opts)\n  .then((data) => {\n    console.log(`getAuthorizationDivisionspermittedPagedMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivisionspermittedPagedMe\");\n    console.error(err);\n  });"
  },
  "getauthorizationdivisionspermittedpagedsubjectid": {
    "operationId": "getauthorizationdivisionspermittedpagedsubjectid",
    "functionName": "getAuthorizationDivisionspermittedPagedSubjectId",
    "signature": "getAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DivsPermittedEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet permission = \"permission_example\"; // String | The permission string, including the object to access, e.g. routing:queue:view\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Returns which divisions the specified user has the given permission in.\napiInstance.getAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, opts)\n  .then((data) => {\n    console.log(`getAuthorizationDivisionspermittedPagedSubjectId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationDivisionspermittedPagedSubjectId\");\n    console.error(err);\n  });"
  },
  "getauthorizationpermissions": {
    "operationId": "getauthorizationpermissions",
    "functionName": "getAuthorizationPermissions",
    "signature": "getAuthorizationPermissions(pageSize, pageNumber, queryType, query)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "queryType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "query",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PermissionCollectionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"queryType\": \"queryType_example\", // String | Query filter type\n  \"query\": \"query_example\" // String | Comma-separated list of permissions or domains to query\n};\n\n// Get all permissions.\napiInstance.getAuthorizationPermissions(opts)\n  .then((data) => {\n    console.log(`getAuthorizationPermissions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationPermissions\");\n    console.error(err);\n  });"
  },
  "getauthorizationproducts": {
    "operationId": "getauthorizationproducts",
    "functionName": "getAuthorizationProducts",
    "signature": "getAuthorizationProducts()",
    "return": "OrganizationProductEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\n// Get the list of enabled products\napiInstance.getAuthorizationProducts()\n  .then((data) => {\n    console.log(`getAuthorizationProducts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationProducts\");\n    console.error(err);\n  });"
  },
  "getauthorizationrole": {
    "operationId": "getauthorizationrole",
    "functionName": "getAuthorizationRole",
    "signature": "getAuthorizationRole(roleId, userCount, expand)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userCount",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet opts = { \n  \"userCount\": true, // Boolean | Fetch the count of users who have this role granted in at least one division\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand. unusedPermissions returns the permissions not used for the role\n};\n\n// Get a single organization role.\napiInstance.getAuthorizationRole(roleId, opts)\n  .then((data) => {\n    console.log(`getAuthorizationRole success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationRole\");\n    console.error(err);\n  });"
  },
  "getauthorizationrolecomparedefaultrightroleid": {
    "operationId": "getauthorizationrolecomparedefaultrightroleid",
    "functionName": "getAuthorizationRoleComparedefaultRightRoleId",
    "signature": "getAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId)",
    "parameters": [
      {
        "name": "leftRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rightRoleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainOrgRoleDifference",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet leftRoleId = \"leftRoleId_example\"; // String | Left Role ID\nlet rightRoleId = \"rightRoleId_example\"; // String | Right Role id\n\n// Get an org role to default role comparison\napiInstance.getAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId)\n  .then((data) => {\n    console.log(`getAuthorizationRoleComparedefaultRightRoleId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationRoleComparedefaultRightRoleId\");\n    console.error(err);\n  });"
  },
  "getauthorizationrolesubjectgrants": {
    "operationId": "getauthorizationrolesubjectgrants",
    "functionName": "getAuthorizationRoleSubjectgrants",
    "signature": "getAuthorizationRoleSubjectgrants(roleId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SubjectDivisionGrantsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\" // String | Previous page token\n};\n\n// Get the subjects' granted divisions in the specified role.\napiInstance.getAuthorizationRoleSubjectgrants(roleId, opts)\n  .then((data) => {\n    console.log(`getAuthorizationRoleSubjectgrants success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationRoleSubjectgrants\");\n    console.error(err);\n  });"
  },
  "getauthorizationroleusers": {
    "operationId": "getauthorizationroleusers",
    "functionName": "getAuthorizationRoleUsers",
    "signature": "getAuthorizationRoleUsers(roleId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of the users in a specified role.\napiInstance.getAuthorizationRoleUsers(roleId, opts)\n  .then((data) => {\n    console.log(`getAuthorizationRoleUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationRoleUsers\");\n    console.error(err);\n  });"
  },
  "getauthorizationroles": {
    "operationId": "getauthorizationroles",
    "functionName": "getAuthorizationRoles",
    "signature": "getAuthorizationRoles(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, permission, defaultRoleId, userCount, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "permission",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "defaultRoleId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "userCount",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"name\": \"name_example\", // String | \n  \"permission\": [\"permission_example\"], // [String] | \n  \"defaultRoleId\": [\"defaultRoleId_example\"], // [String] | \n  \"userCount\": true, // Boolean | \n  \"id\": [\"id_example\"] // [String] | id\n};\n\n// Retrieve a list of all roles defined for the organization\napiInstance.getAuthorizationRoles(opts)\n  .then((data) => {\n    console.log(`getAuthorizationRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationRoles\");\n    console.error(err);\n  });"
  },
  "getauthorizationsettings": {
    "operationId": "getauthorizationsettings",
    "functionName": "getAuthorizationSettings",
    "signature": "getAuthorizationSettings()",
    "return": "AuthorizationSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\n// Get authorization settings\napiInstance.getAuthorizationSettings()\n  .then((data) => {\n    console.log(`getAuthorizationSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationSettings\");\n    console.error(err);\n  });"
  },
  "getauthorizationsubject": {
    "operationId": "getauthorizationsubject",
    "functionName": "getAuthorizationSubject",
    "signature": "getAuthorizationSubject(subjectId)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AuthzSubject",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\n\n// Returns a listing of roles and permissions for a user.\napiInstance.getAuthorizationSubject(subjectId)\n  .then((data) => {\n    console.log(`getAuthorizationSubject success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationSubject\");\n    console.error(err);\n  });"
  },
  "getauthorizationsubjectsme": {
    "operationId": "getauthorizationsubjectsme",
    "functionName": "getAuthorizationSubjectsMe",
    "signature": "getAuthorizationSubjectsMe()",
    "return": "AuthzSubject",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\n// Returns a listing of roles and permissions for the currently authenticated user.\napiInstance.getAuthorizationSubjectsMe()\n  .then((data) => {\n    console.log(`getAuthorizationSubjectsMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationSubjectsMe\");\n    console.error(err);\n  });"
  },
  "getauthorizationsubjectsrolecounts": {
    "operationId": "getauthorizationsubjectsrolecounts",
    "functionName": "getAuthorizationSubjectsRolecounts",
    "signature": "getAuthorizationSubjectsRolecounts(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet opts = { \n  \"id\": [\"id_example\"] // [String] | id\n};\n\n// Get the count of roles granted to a list of subjects\napiInstance.getAuthorizationSubjectsRolecounts(opts)\n  .then((data) => {\n    console.log(`getAuthorizationSubjectsRolecounts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getAuthorizationSubjectsRolecounts\");\n    console.error(err);\n  });"
  },
  "getuserroles": {
    "operationId": "getuserroles",
    "functionName": "getUserRoles",
    "signature": "getUserRoles(subjectId)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | User ID\n\n// Returns a listing of roles and permissions for a user.\napiInstance.getUserRoles(subjectId)\n  .then((data) => {\n    console.log(`getUserRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserRoles\");\n    console.error(err);\n  });"
  },
  "patchauthorizationrole": {
    "operationId": "patchauthorizationrole",
    "functionName": "patchAuthorizationRole",
    "signature": "patchAuthorizationRole(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = {}; // Object | Organization role\n\n// Patch Organization Role for needsUpdate Field\napiInstance.patchAuthorizationRole(roleId, body)\n  .then((data) => {\n    console.log(`patchAuthorizationRole success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchAuthorizationRole\");\n    console.error(err);\n  });"
  },
  "patchauthorizationsettings": {
    "operationId": "patchauthorizationsettings",
    "functionName": "patchAuthorizationSettings",
    "signature": "patchAuthorizationSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuthorizationSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet body = {}; // Object | Authorization Settings\n\n// Change authorization settings\napiInstance.patchAuthorizationSettings(body)\n  .then((data) => {\n    console.log(`patchAuthorizationSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchAuthorizationSettings\");\n    console.error(err);\n  });"
  },
  "postauthorizationdivisionobject": {
    "operationId": "postauthorizationdivisionobject",
    "functionName": "postAuthorizationDivisionObject",
    "signature": "postAuthorizationDivisionObject(divisionId, objectType, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet objectType = \"objectType_example\"; // String | The type of the objects. Must be one of the valid object types\nlet body = [\"body_example\"]; // [String] | Object Id List\n\n// Assign a list of objects to a division\napiInstance.postAuthorizationDivisionObject(divisionId, objectType, body)\n  .then(() => {\n    console.log(\"postAuthorizationDivisionObject returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationDivisionObject\");\n    console.error(err);\n  });"
  },
  "postauthorizationdivisionrestore": {
    "operationId": "postauthorizationdivisionrestore",
    "functionName": "postAuthorizationDivisionRestore",
    "signature": "postAuthorizationDivisionRestore(divisionId, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet body = {}; // Object | Recreated division data\n\n// Recreate a previously deleted division.\napiInstance.postAuthorizationDivisionRestore(divisionId, body)\n  .then((data) => {\n    console.log(`postAuthorizationDivisionRestore success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationDivisionRestore\");\n    console.error(err);\n  });"
  },
  "postauthorizationdivisions": {
    "operationId": "postauthorizationdivisions",
    "functionName": "postAuthorizationDivisions",
    "signature": "postAuthorizationDivisions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\nlet body = {}; // Object | Division\n\n// Create a division.\napiInstance.postAuthorizationDivisions(body)\n  .then((data) => {\n    console.log(`postAuthorizationDivisions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationDivisions\");\n    console.error(err);\n  });"
  },
  "postauthorizationrole": {
    "operationId": "postauthorizationrole",
    "functionName": "postAuthorizationRole",
    "signature": "postAuthorizationRole(roleId, body, subjectType)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = {}; // Object | Subjects and Divisions\nlet opts = { \n  \"subjectType\": \"PC_USER\" // String | what the type of the subjects are (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n};\n\n// Bulk-grant subjects and divisions with an organization role.\napiInstance.postAuthorizationRole(roleId, body, opts)\n  .then(() => {\n    console.log(\"postAuthorizationRole returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationRole\");\n    console.error(err);\n  });"
  },
  "postauthorizationrolecomparedefaultrightroleid": {
    "operationId": "postauthorizationrolecomparedefaultrightroleid",
    "functionName": "postAuthorizationRoleComparedefaultRightRoleId",
    "signature": "postAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, body)",
    "parameters": [
      {
        "name": "leftRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rightRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrgRoleDifference",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet leftRoleId = \"leftRoleId_example\"; // String | Left Role ID\nlet rightRoleId = \"rightRoleId_example\"; // String | Right Role id\nlet body = {}; // Object | Organization role\n\n// Get an unsaved org role to default role comparison\napiInstance.postAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, body)\n  .then((data) => {\n    console.log(`postAuthorizationRoleComparedefaultRightRoleId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationRoleComparedefaultRightRoleId\");\n    console.error(err);\n  });"
  },
  "postauthorizationroles": {
    "operationId": "postauthorizationroles",
    "functionName": "postAuthorizationRoles",
    "signature": "postAuthorizationRoles(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet body = {}; // Object | Organization role\n\n// Create an organization role.\napiInstance.postAuthorizationRoles(body)\n  .then((data) => {\n    console.log(`postAuthorizationRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationRoles\");\n    console.error(err);\n  });"
  },
  "postauthorizationrolesdefault": {
    "operationId": "postauthorizationrolesdefault",
    "functionName": "postAuthorizationRolesDefault",
    "signature": "postAuthorizationRolesDefault(force)",
    "parameters": [
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet opts = { \n  \"force\": false // Boolean | Restore default roles\n};\n\n// Restores all default roles\napiInstance.postAuthorizationRolesDefault(opts)\n  .then((data) => {\n    console.log(`postAuthorizationRolesDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationRolesDefault\");\n    console.error(err);\n  });"
  },
  "postauthorizationsubjectbulkadd": {
    "operationId": "postauthorizationsubjectbulkadd",
    "functionName": "postAuthorizationSubjectBulkadd",
    "signature": "postAuthorizationSubjectBulkadd(subjectId, body, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet body = {}; // Object | Pairs of role and division IDs\nlet opts = { \n  \"subjectType\": \"PC_USER\" // String | what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n};\n\n// Bulk-grant roles and divisions to a subject.\napiInstance.postAuthorizationSubjectBulkadd(subjectId, body, opts)\n  .then(() => {\n    console.log(\"postAuthorizationSubjectBulkadd returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationSubjectBulkadd\");\n    console.error(err);\n  });"
  },
  "postauthorizationsubjectbulkremove": {
    "operationId": "postauthorizationsubjectbulkremove",
    "functionName": "postAuthorizationSubjectBulkremove",
    "signature": "postAuthorizationSubjectBulkremove(subjectId, body)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet body = {}; // Object | Pairs of role and division IDs\n\n// Bulk-remove grants from a subject.\napiInstance.postAuthorizationSubjectBulkremove(subjectId, body)\n  .then(() => {\n    console.log(\"postAuthorizationSubjectBulkremove returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationSubjectBulkremove\");\n    console.error(err);\n  });"
  },
  "postauthorizationsubjectbulkreplace": {
    "operationId": "postauthorizationsubjectbulkreplace",
    "functionName": "postAuthorizationSubjectBulkreplace",
    "signature": "postAuthorizationSubjectBulkreplace(subjectId, body, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet body = {}; // Object | Pairs of role and division IDs\nlet opts = { \n  \"subjectType\": \"PC_USER\" // String | what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n};\n\n// Replace subject's roles and divisions with the exact list supplied in the request.\napiInstance.postAuthorizationSubjectBulkreplace(subjectId, body, opts)\n  .then(() => {\n    console.log(\"postAuthorizationSubjectBulkreplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationSubjectBulkreplace\");\n    console.error(err);\n  });"
  },
  "postauthorizationsubjectdivisionrole": {
    "operationId": "postauthorizationsubjectdivisionrole",
    "functionName": "postAuthorizationSubjectDivisionRole",
    "signature": "postAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet divisionId = \"divisionId_example\"; // String | the id of the division to which to make the grant\nlet roleId = \"roleId_example\"; // String | the id of the role to grant\nlet opts = { \n  \"subjectType\": \"PC_USER\" // String | what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints)\n};\n\n// Make a grant of a role in a division\napiInstance.postAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, opts)\n  .then(() => {\n    console.log(\"postAuthorizationSubjectDivisionRole returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postAuthorizationSubjectDivisionRole\");\n    console.error(err);\n  });"
  },
  "putauthorizationdivision": {
    "operationId": "putauthorizationdivision",
    "functionName": "putAuthorizationDivision",
    "signature": "putAuthorizationDivision(divisionId, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ObjectsApi();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet body = {}; // Object | Updated division data\n\n// Update a division.\napiInstance.putAuthorizationDivision(divisionId, body)\n  .then((data) => {\n    console.log(`putAuthorizationDivision success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAuthorizationDivision\");\n    console.error(err);\n  });"
  },
  "putauthorizationrole": {
    "operationId": "putauthorizationrole",
    "functionName": "putAuthorizationRole",
    "signature": "putAuthorizationRole(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = {}; // Object | Organization role\n\n// Update an organization role.\napiInstance.putAuthorizationRole(roleId, body)\n  .then((data) => {\n    console.log(`putAuthorizationRole success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAuthorizationRole\");\n    console.error(err);\n  });"
  },
  "putauthorizationroleusersadd": {
    "operationId": "putauthorizationroleusersadd",
    "functionName": "putAuthorizationRoleUsersAdd",
    "signature": "putAuthorizationRoleUsersAdd(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = [\"body_example\"]; // [String] | List of user IDs\n\n// Sets the users for the role\napiInstance.putAuthorizationRoleUsersAdd(roleId, body)\n  .then((data) => {\n    console.log(`putAuthorizationRoleUsersAdd success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAuthorizationRoleUsersAdd\");\n    console.error(err);\n  });"
  },
  "putauthorizationroleusersremove": {
    "operationId": "putauthorizationroleusersremove",
    "functionName": "putAuthorizationRoleUsersRemove",
    "signature": "putAuthorizationRoleUsersRemove(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = [\"body_example\"]; // [String] | List of user IDs\n\n// Removes the users from the role\napiInstance.putAuthorizationRoleUsersRemove(roleId, body)\n  .then((data) => {\n    console.log(`putAuthorizationRoleUsersRemove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAuthorizationRoleUsersRemove\");\n    console.error(err);\n  });"
  },
  "putauthorizationrolesdefault": {
    "operationId": "putauthorizationrolesdefault",
    "functionName": "putAuthorizationRolesDefault",
    "signature": "putAuthorizationRolesDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.AuthorizationApi();\n\nlet body = [{}]; // Object | Organization roles list\n\n// Restore specified default roles\napiInstance.putAuthorizationRolesDefault(body)\n  .then((data) => {\n    console.log(`putAuthorizationRolesDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putAuthorizationRolesDefault\");\n    console.error(err);\n  });"
  },
  "putuserroles": {
    "operationId": "putuserroles",
    "functionName": "putUserRoles",
    "signature": "putUserRoles(subjectId, body)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet subjectId = \"subjectId_example\"; // String | User ID\nlet body = [\"body_example\"]; // [String] | List of roles\n\n// Sets the user's roles\napiInstance.putUserRoles(subjectId, body)\n  .then((data) => {\n    console.log(`putUserRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserRoles\");\n    console.error(err);\n  });"
  },
  "getbillingreportsbillableusage": {
    "operationId": "getbillingreportsbillableusage",
    "functionName": "getBillingReportsBillableusage",
    "signature": "getBillingReportsBillableusage(startDate, endDate)",
    "parameters": [
      {
        "name": "startDate",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endDate",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "BillingUsageReport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.BillingApi();\n\nlet startDate = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | The period start date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet endDate = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | The period end date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n\n// Get a report of the billable license usages\napiInstance.getBillingReportsBillableusage(startDate, endDate)\n  .then((data) => {\n    console.log(`getBillingReportsBillableusage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getBillingReportsBillableusage\");\n    console.error(err);\n  });"
  },
  "getbillingtrusteebillingoverviewtrustororgid": {
    "operationId": "getbillingtrusteebillingoverviewtrustororgid",
    "functionName": "getBillingTrusteebillingoverviewTrustorOrgId",
    "signature": "getBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId, billingPeriodIndex)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "billingPeriodIndex",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrusteeBillingOverview",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.BillingApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | The organization ID of the trustor (customer) organization.\nlet opts = { \n  \"billingPeriodIndex\": 0 // Number | 0 for active period (overview data may change until period closes). 1 for prior completed billing period. 2 for two billing cycles prior, and so on.\n};\n\n// Get the billing overview for an organization that is managed by a partner.\napiInstance.getBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId, opts)\n  .then((data) => {\n    console.log(`getBillingTrusteebillingoverviewTrustorOrgId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getBillingTrusteebillingoverviewTrustorOrgId\");\n    console.error(err);\n  });"
  },
  "getcarrierservicesintegrationsemergencylocationsme": {
    "operationId": "getcarrierservicesintegrationsemergencylocationsme",
    "functionName": "getCarrierservicesIntegrationsEmergencylocationsMe",
    "signature": "getCarrierservicesIntegrationsEmergencylocationsMe(phoneNumber)",
    "parameters": [
      {
        "name": "phoneNumber",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmergencyLocation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CarrierServicesApi();\n\nlet phoneNumber = \"phoneNumber_example\"; // String | Phone number in E164 format\n\n// Get location for the logged in user\napiInstance.getCarrierservicesIntegrationsEmergencylocationsMe(phoneNumber)\n  .then((data) => {\n    console.log(`getCarrierservicesIntegrationsEmergencylocationsMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCarrierservicesIntegrationsEmergencylocationsMe\");\n    console.error(err);\n  });"
  },
  "postcarrierservicesintegrationsemergencylocationsme": {
    "operationId": "postcarrierservicesintegrationsemergencylocationsme",
    "functionName": "postCarrierservicesIntegrationsEmergencylocationsMe",
    "signature": "postCarrierservicesIntegrationsEmergencylocationsMe(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "EmergencyLocation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CarrierServicesApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Set current location for the logged in user\napiInstance.postCarrierservicesIntegrationsEmergencylocationsMe(opts)\n  .then((data) => {\n    console.log(`postCarrierservicesIntegrationsEmergencylocationsMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postCarrierservicesIntegrationsEmergencylocationsMe\");\n    console.error(err);\n  });"
  },
  "getchatsettings": {
    "operationId": "getchatsettings",
    "functionName": "getChatSettings",
    "signature": "getChatSettings()",
    "return": "ChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ChatApi();\n\n// Get Chat Settings.\napiInstance.getChatSettings()\n  .then((data) => {\n    console.log(`getChatSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getChatSettings\");\n    console.error(err);\n  });"
  },
  "getchatssettings": {
    "operationId": "getchatssettings",
    "functionName": "getChatsSettings",
    "signature": "getChatsSettings()",
    "return": "ChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ChatApi();\n\n// Get Chat Settings.\napiInstance.getChatsSettings()\n  .then((data) => {\n    console.log(`getChatsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getChatsSettings\");\n    console.error(err);\n  });"
  },
  "patchchatsettings": {
    "operationId": "patchchatsettings",
    "functionName": "patchChatSettings",
    "signature": "patchChatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ChatApi();\n\nlet body = {}; // Object | Chat\n\n// Patch Chat Settings.\napiInstance.patchChatSettings(body)\n  .then((data) => {\n    console.log(`patchChatSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchChatSettings\");\n    console.error(err);\n  });"
  },
  "patchchatssettings": {
    "operationId": "patchchatssettings",
    "functionName": "patchChatsSettings",
    "signature": "patchChatsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ChatApi();\n\nlet body = {}; // Object | Chat\n\n// Patch Chat Settings.\napiInstance.patchChatsSettings(body)\n  .then((data) => {\n    console.log(`patchChatsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchChatsSettings\");\n    console.error(err);\n  });"
  },
  "putchatsettings": {
    "operationId": "putchatsettings",
    "functionName": "putChatSettings",
    "signature": "putChatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ChatApi();\n\nlet body = {}; // Object | Chat\n\n// Update Chat Settings.\napiInstance.putChatSettings(body)\n  .then((data) => {\n    console.log(`putChatSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putChatSettings\");\n    console.error(err);\n  });"
  },
  "putchatssettings": {
    "operationId": "putchatssettings",
    "functionName": "putChatsSettings",
    "signature": "putChatsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ChatApi();\n\nlet body = {}; // Object | Chat\n\n// Update Chat Settings.\napiInstance.putChatsSettings(body)\n  .then((data) => {\n    console.log(`putChatsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putChatsSettings\");\n    console.error(err);\n  });"
  },
  "deletecoachingappointment": {
    "operationId": "deletecoachingappointment",
    "functionName": "deleteCoachingAppointment",
    "signature": "deleteCoachingAppointment(appointmentId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentReference",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\n\n// Delete an existing appointment\napiInstance.deleteCoachingAppointment(appointmentId)\n  .then((data) => {\n    console.log(`deleteCoachingAppointment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteCoachingAppointment\");\n    console.error(err);\n  });"
  },
  "deletecoachingappointmentannotation": {
    "operationId": "deletecoachingappointmentannotation",
    "functionName": "deleteCoachingAppointmentAnnotation",
    "signature": "deleteCoachingAppointmentAnnotation(appointmentId, annotationId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet annotationId = \"annotationId_example\"; // String | The ID of the annotation.\n\n// Delete an existing annotation\napiInstance.deleteCoachingAppointmentAnnotation(appointmentId, annotationId)\n  .then(() => {\n    console.log(\"deleteCoachingAppointmentAnnotation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteCoachingAppointmentAnnotation\");\n    console.error(err);\n  });"
  },
  "getcoachingappointment": {
    "operationId": "getcoachingappointment",
    "functionName": "getCoachingAppointment",
    "signature": "getCoachingAppointment(appointmentId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\n\n// Retrieve an appointment\napiInstance.getCoachingAppointment(appointmentId)\n  .then((data) => {\n    console.log(`getCoachingAppointment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingAppointment\");\n    console.error(err);\n  });"
  },
  "getcoachingappointmentannotation": {
    "operationId": "getcoachingappointmentannotation",
    "functionName": "getCoachingAppointmentAnnotation",
    "signature": "getCoachingAppointmentAnnotation(appointmentId, annotationId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet annotationId = \"annotationId_example\"; // String | The ID of the annotation.\n\n// Retrieve an annotation.\napiInstance.getCoachingAppointmentAnnotation(appointmentId, annotationId)\n  .then((data) => {\n    console.log(`getCoachingAppointmentAnnotation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingAppointmentAnnotation\");\n    console.error(err);\n  });"
  },
  "getcoachingappointmentannotations": {
    "operationId": "getcoachingappointmentannotations",
    "functionName": "getCoachingAppointmentAnnotations",
    "signature": "getCoachingAppointmentAnnotations(appointmentId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CoachingAnnotationList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get a list of annotations.\napiInstance.getCoachingAppointmentAnnotations(appointmentId, opts)\n  .then((data) => {\n    console.log(`getCoachingAppointmentAnnotations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingAppointmentAnnotations\");\n    console.error(err);\n  });"
  },
  "getcoachingappointmentstatuses": {
    "operationId": "getcoachingappointmentstatuses",
    "functionName": "getCoachingAppointmentStatuses",
    "signature": "getCoachingAppointmentStatuses(appointmentId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentStatusResponseList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get the list of status changes for a coaching appointment.\napiInstance.getCoachingAppointmentStatuses(appointmentId, opts)\n  .then((data) => {\n    console.log(`getCoachingAppointmentStatuses success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingAppointmentStatuses\");\n    console.error(err);\n  });"
  },
  "getcoachingappointments": {
    "operationId": "getcoachingappointments",
    "functionName": "getCoachingAppointments",
    "signature": "getCoachingAppointments(userIds, interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
    "parameters": [
      {
        "name": "userIds",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "facilitatorIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "relationships",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "intervalCondition",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentResponseList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet userIds = [\"userIds_example\"]; // [String] | The user IDs for which to retrieve appointments\nlet opts = { \n  \"interval\": \"interval_example\", // String | Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"statuses\": [\"statuses_example\"], // [String] | Appointment Statuses to filter by\n  \"facilitatorIds\": [\"facilitatorIds_example\"], // [String] | The facilitator IDs for which to retrieve appointments\n  \"sortOrder\": \"sortOrder_example\", // String | Sort (by due date) either Asc or Desc\n  \"relationships\": [\"relationships_example\"], // [String] | Relationships to filter by\n  \"completionInterval\": \"completionInterval_example\", // String | Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"overdue\": \"overdue_example\", // String | Overdue status to filter by\n  \"intervalCondition\": \"intervalCondition_example\" // String | Filter condition for interval\n};\n\n// Get appointments for users and optional date range\napiInstance.getCoachingAppointments(userIds, opts)\n  .then((data) => {\n    console.log(`getCoachingAppointments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingAppointments\");\n    console.error(err);\n  });"
  },
  "getcoachingappointmentsme": {
    "operationId": "getcoachingappointmentsme",
    "functionName": "getCoachingAppointmentsMe",
    "signature": "getCoachingAppointmentsMe(interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
    "parameters": [
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "facilitatorIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "relationships",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "intervalCondition",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentResponseList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet opts = { \n  \"interval\": \"interval_example\", // String | Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"statuses\": [\"statuses_example\"], // [String] | Appointment Statuses to filter by\n  \"facilitatorIds\": [\"facilitatorIds_example\"], // [String] | The facilitator IDs for which to retrieve appointments\n  \"sortOrder\": \"sortOrder_example\", // String | Sort (by due date) either Asc or Desc\n  \"relationships\": [\"relationships_example\"], // [String] | Relationships to filter by\n  \"completionInterval\": \"completionInterval_example\", // String | Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"overdue\": \"overdue_example\", // String | Overdue status to filter by\n  \"intervalCondition\": \"intervalCondition_example\" // String | Filter condition for interval\n};\n\n// Get my appointments for a given date range\napiInstance.getCoachingAppointmentsMe(opts)\n  .then((data) => {\n    console.log(`getCoachingAppointmentsMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingAppointmentsMe\");\n    console.error(err);\n  });"
  },
  "getcoachingnotification": {
    "operationId": "getcoachingnotification",
    "functionName": "getCoachingNotification",
    "signature": "getCoachingNotification(notificationId, expand)",
    "parameters": [
      {
        "name": "notificationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CoachingNotification",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet notificationId = \"notificationId_example\"; // String | The ID of the notification.\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Indicates a field in the response which should be expanded.\n};\n\n// Get an existing notification\napiInstance.getCoachingNotification(notificationId, opts)\n  .then((data) => {\n    console.log(`getCoachingNotification success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingNotification\");\n    console.error(err);\n  });"
  },
  "getcoachingnotifications": {
    "operationId": "getcoachingnotifications",
    "functionName": "getCoachingNotifications",
    "signature": "getCoachingNotifications(pageNumber, pageSize, expand)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CoachingNotificationList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"expand\": [\"expand_example\"] // [String] | Indicates a field in the response which should be expanded.\n};\n\n// Retrieve the list of your notifications.\napiInstance.getCoachingNotifications(opts)\n  .then((data) => {\n    console.log(`getCoachingNotifications success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getCoachingNotifications\");\n    console.error(err);\n  });"
  },
  "patchcoachingappointment": {
    "operationId": "patchcoachingappointment",
    "functionName": "patchCoachingAppointment",
    "signature": "patchCoachingAppointment(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | The new version of the appointment\n\n// Update an existing appointment\napiInstance.patchCoachingAppointment(appointmentId, body)\n  .then((data) => {\n    console.log(`patchCoachingAppointment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchCoachingAppointment\");\n    console.error(err);\n  });"
  },
  "patchcoachingappointmentannotation": {
    "operationId": "patchcoachingappointmentannotation",
    "functionName": "patchCoachingAppointmentAnnotation",
    "signature": "patchCoachingAppointmentAnnotation(appointmentId, annotationId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet annotationId = \"annotationId_example\"; // String | The ID of the annotation.\nlet body = {}; // Object | The new version of the annotation\n\n// Update an existing annotation.\napiInstance.patchCoachingAppointmentAnnotation(appointmentId, annotationId, body)\n  .then((data) => {\n    console.log(`patchCoachingAppointmentAnnotation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchCoachingAppointmentAnnotation\");\n    console.error(err);\n  });"
  },
  "patchcoachingappointmentstatus": {
    "operationId": "patchcoachingappointmentstatus",
    "functionName": "patchCoachingAppointmentStatus",
    "signature": "patchCoachingAppointmentStatus(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | Updated status of the coaching appointment\n\n// Update the status of a coaching appointment\napiInstance.patchCoachingAppointmentStatus(appointmentId, body)\n  .then((data) => {\n    console.log(`patchCoachingAppointmentStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchCoachingAppointmentStatus\");\n    console.error(err);\n  });"
  },
  "patchcoachingnotification": {
    "operationId": "patchcoachingnotification",
    "functionName": "patchCoachingNotification",
    "signature": "patchCoachingNotification(notificationId, body)",
    "parameters": [
      {
        "name": "notificationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingNotification",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet notificationId = \"notificationId_example\"; // String | The ID of the notification.\nlet body = {}; // Object | Change the read state of a notification\n\n// Update an existing notification.\napiInstance.patchCoachingNotification(notificationId, body)\n  .then((data) => {\n    console.log(`patchCoachingNotification success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchCoachingNotification\");\n    console.error(err);\n  });"
  },
  "postcoachingappointmentannotations": {
    "operationId": "postcoachingappointmentannotations",
    "functionName": "postCoachingAppointmentAnnotations",
    "signature": "postCoachingAppointmentAnnotations(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | The annotation to add\n\n// Create a new annotation.\napiInstance.postCoachingAppointmentAnnotations(appointmentId, body)\n  .then((data) => {\n    console.log(`postCoachingAppointmentAnnotations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postCoachingAppointmentAnnotations\");\n    console.error(err);\n  });"
  },
  "postcoachingappointmentconversations": {
    "operationId": "postcoachingappointmentconversations",
    "functionName": "postCoachingAppointmentConversations",
    "signature": "postCoachingAppointmentConversations(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AddConversationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | body\n\n// Add a conversation to an appointment\napiInstance.postCoachingAppointmentConversations(appointmentId, body)\n  .then((data) => {\n    console.log(`postCoachingAppointmentConversations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postCoachingAppointmentConversations\");\n    console.error(err);\n  });"
  },
  "postcoachingappointments": {
    "operationId": "postcoachingappointments",
    "functionName": "postCoachingAppointments",
    "signature": "postCoachingAppointments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet body = {}; // Object | The appointment to add\n\n// Create a new appointment\napiInstance.postCoachingAppointments(body)\n  .then((data) => {\n    console.log(`postCoachingAppointments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postCoachingAppointments\");\n    console.error(err);\n  });"
  },
  "postcoachingappointmentsaggregatesquery": {
    "operationId": "postcoachingappointmentsaggregatesquery",
    "functionName": "postCoachingAppointmentsAggregatesQuery",
    "signature": "postCoachingAppointmentsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentAggregateResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet body = {}; // Object | Aggregate Request\n\n// Retrieve aggregated appointment data\napiInstance.postCoachingAppointmentsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postCoachingAppointmentsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postCoachingAppointmentsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postcoachingscheduleslotsquery": {
    "operationId": "postcoachingscheduleslotsquery",
    "functionName": "postCoachingScheduleslotsQuery",
    "signature": "postCoachingScheduleslotsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingSlotsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.CoachingApi();\n\nlet body = {}; // Object | The slot search request\n\n// Get list of possible slots where a coaching appointment can be scheduled.\napiInstance.postCoachingScheduleslotsQuery(body)\n  .then((data) => {\n    console.log(`postCoachingScheduleslotsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postCoachingScheduleslotsQuery\");\n    console.error(err);\n  });"
  },
  "deletecontentmanagementdocument": {
    "operationId": "deletecontentmanagementdocument",
    "functionName": "deleteContentmanagementDocument",
    "signature": "deleteContentmanagementDocument(documentId, override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  \"override\": true // Boolean | Override any lock on the document\n};\n\n// Delete a document.\napiInstance.deleteContentmanagementDocument(documentId, opts)\n  .then(() => {\n    console.log(\"deleteContentmanagementDocument returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteContentmanagementDocument\");\n    console.error(err);\n  });"
  },
  "deletecontentmanagementshare": {
    "operationId": "deletecontentmanagementshare",
    "functionName": "deleteContentmanagementShare",
    "signature": "deleteContentmanagementShare(shareId)",
    "parameters": [
      {
        "name": "shareId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet shareId = \"shareId_example\"; // String | Share ID\n\n// Deletes an existing share.\napiInstance.deleteContentmanagementShare(shareId)\n  .then(() => {\n    console.log(\"deleteContentmanagementShare returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteContentmanagementShare\");\n    console.error(err);\n  });"
  },
  "deletecontentmanagementstatusstatusid": {
    "operationId": "deletecontentmanagementstatusstatusid",
    "functionName": "deleteContentmanagementStatusStatusId",
    "signature": "deleteContentmanagementStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet statusId = \"statusId_example\"; // String | Status ID\n\n// Cancel the command for this status\napiInstance.deleteContentmanagementStatusStatusId(statusId)\n  .then(() => {\n    console.log(\"deleteContentmanagementStatusStatusId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteContentmanagementStatusStatusId\");\n    console.error(err);\n  });"
  },
  "deletecontentmanagementworkspace": {
    "operationId": "deletecontentmanagementworkspace",
    "functionName": "deleteContentmanagementWorkspace",
    "signature": "deleteContentmanagementWorkspace(workspaceId, moveChildrenToWorkspaceId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "moveChildrenToWorkspaceId",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  \"moveChildrenToWorkspaceId\": \"moveChildrenToWorkspaceId_example\" // String | New location for objects in deleted workspace.\n};\n\n// Delete a workspace\napiInstance.deleteContentmanagementWorkspace(workspaceId, opts)\n  .then(() => {\n    console.log(\"deleteContentmanagementWorkspace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteContentmanagementWorkspace\");\n    console.error(err);\n  });"
  },
  "deletecontentmanagementworkspacemember": {
    "operationId": "deletecontentmanagementworkspacemember",
    "functionName": "deleteContentmanagementWorkspaceMember",
    "signature": "deleteContentmanagementWorkspaceMember(workspaceId, memberId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet memberId = \"memberId_example\"; // String | Member ID\n\n// Delete a member from a workspace\napiInstance.deleteContentmanagementWorkspaceMember(workspaceId, memberId)\n  .then(() => {\n    console.log(\"deleteContentmanagementWorkspaceMember returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteContentmanagementWorkspaceMember\");\n    console.error(err);\n  });"
  },
  "deletecontentmanagementworkspacetagvalue": {
    "operationId": "deletecontentmanagementworkspacetagvalue",
    "functionName": "deleteContentmanagementWorkspaceTagvalue",
    "signature": "deleteContentmanagementWorkspaceTagvalue(workspaceId, tagId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet tagId = \"tagId_example\"; // String | Tag ID\n\n// Delete workspace tag\napiInstance.deleteContentmanagementWorkspaceTagvalue(workspaceId, tagId)\n  .then(() => {\n    console.log(\"deleteContentmanagementWorkspaceTagvalue returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteContentmanagementWorkspaceTagvalue\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementdocument": {
    "operationId": "getcontentmanagementdocument",
    "functionName": "getContentmanagementDocument",
    "signature": "getContentmanagementDocument(documentId, expand)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a document.\napiInstance.getContentmanagementDocument(documentId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementDocument\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementdocumentaudits": {
    "operationId": "getcontentmanagementdocumentaudits",
    "functionName": "getContentmanagementDocumentAudits",
    "signature": "getContentmanagementDocumentAudits(documentId, pageSize, pageNumber, transactionFilter, level, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "transactionFilter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "level",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentAuditEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"transactionFilter\": \"transactionFilter_example\", // String | Transaction filter\n  \"level\": \"USER\", // String | level\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"ascending\" // String | Sort order\n};\n\n// Get a list of audits for a document.\napiInstance.getContentmanagementDocumentAudits(documentId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementDocumentAudits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementDocumentAudits\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementdocumentcontent": {
    "operationId": "getcontentmanagementdocumentcontent",
    "functionName": "getContentmanagementDocumentContent",
    "signature": "getContentmanagementDocumentContent(documentId, disposition, contentType)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "disposition",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contentType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DownloadResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  \"disposition\": \"disposition_example\", // String | Request how the content will be downloaded: a file attachment or inline. Default is attachment.\n  \"contentType\": \"contentType_example\" // String | The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav\n};\n\n// Download a document.\napiInstance.getContentmanagementDocumentContent(documentId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementDocumentContent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementDocumentContent\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementdocuments": {
    "operationId": "getcontentmanagementdocuments",
    "functionName": "getContentmanagementDocuments",
    "signature": "getContentmanagementDocuments(workspaceId, name, expand, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  \"name\": \"name_example\", // String | Name\n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"sortBy_example\", // String | name or dateCreated\n  \"sortOrder\": \"ascending\" // String | ascending or descending\n};\n\n// Get a list of documents.\napiInstance.getContentmanagementDocuments(workspaceId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementDocuments\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementquery": {
    "operationId": "getcontentmanagementquery",
    "functionName": "getContentmanagementQuery",
    "signature": "getContentmanagementQuery(queryPhrase, pageSize, pageNumber, sortBy, sortOrder, expand)",
    "parameters": [
      {
        "name": "queryPhrase",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueryResults",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet queryPhrase = \"queryPhrase_example\"; // String | Phrase tokens are ANDed together over all searchable fields\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"name\", // String | name or dateCreated\n  \"sortOrder\": \"ascending\", // String | ascending or descending\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Query content\napiInstance.getContentmanagementQuery(queryPhrase, opts)\n  .then((data) => {\n    console.log(`getContentmanagementQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementQuery\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementsecurityprofile": {
    "operationId": "getcontentmanagementsecurityprofile",
    "functionName": "getContentmanagementSecurityprofile",
    "signature": "getContentmanagementSecurityprofile(securityProfileId)",
    "parameters": [
      {
        "name": "securityProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecurityProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet securityProfileId = \"securityProfileId_example\"; // String | Security Profile Id\n\n// Get a Security Profile\napiInstance.getContentmanagementSecurityprofile(securityProfileId)\n  .then((data) => {\n    console.log(`getContentmanagementSecurityprofile success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementSecurityprofile\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementsecurityprofiles": {
    "operationId": "getcontentmanagementsecurityprofiles",
    "functionName": "getContentmanagementSecurityprofiles",
    "signature": "getContentmanagementSecurityprofiles()",
    "return": "SecurityProfileEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\n// Get a List of Security Profiles\napiInstance.getContentmanagementSecurityprofiles()\n  .then((data) => {\n    console.log(`getContentmanagementSecurityprofiles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementSecurityprofiles\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementshare": {
    "operationId": "getcontentmanagementshare",
    "functionName": "getContentmanagementShare",
    "signature": "getContentmanagementShare(shareId, expand)",
    "parameters": [
      {
        "name": "shareId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Share",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet shareId = \"shareId_example\"; // String | Share ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Retrieve details about an existing share.\napiInstance.getContentmanagementShare(shareId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementShare success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementShare\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementsharedsharedid": {
    "operationId": "getcontentmanagementsharedsharedid",
    "functionName": "getContentmanagementSharedSharedId",
    "signature": "getContentmanagementSharedSharedId(sharedId, redirect, disposition, contentType, expand)",
    "parameters": [
      {
        "name": "sharedId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "redirect",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "disposition",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contentType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SharedResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet sharedId = \"sharedId_example\"; // String | Shared ID\nlet opts = { \n  \"redirect\": true, // Boolean | Turn on or off redirect\n  \"disposition\": \"attachment\", // String | Request how the share content will be downloaded: attached as a file or inline. Default is attachment.\n  \"contentType\": \"contentType_example\", // String | The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav\n  \"expand\": \"expand_example\" // String | Expand some document fields\n};\n\n// Get shared documents. Securely download a shared document.\napiInstance.getContentmanagementSharedSharedId(sharedId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementSharedSharedId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementSharedSharedId\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementshares": {
    "operationId": "getcontentmanagementshares",
    "functionName": "getContentmanagementShares",
    "signature": "getContentmanagementShares(entityId, expand, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "entityId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ShareEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet opts = { \n  \"entityId\": \"entityId_example\", // String | Filters the shares returned to only the entity specified by the value of this parameter.\n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Gets a list of shares.  You must specify at least one filter (e.g. entityId).\napiInstance.getContentmanagementShares(opts)\n  .then((data) => {\n    console.log(`getContentmanagementShares success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementShares\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementstatus": {
    "operationId": "getcontentmanagementstatus",
    "functionName": "getContentmanagementStatus",
    "signature": "getContentmanagementStatus(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CommandStatusEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of statuses for pending operations\napiInstance.getContentmanagementStatus(opts)\n  .then((data) => {\n    console.log(`getContentmanagementStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementStatus\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementstatusstatusid": {
    "operationId": "getcontentmanagementstatusstatusid",
    "functionName": "getContentmanagementStatusStatusId",
    "signature": "getContentmanagementStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CommandStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet statusId = \"statusId_example\"; // String | Status ID\n\n// Get a status.\napiInstance.getContentmanagementStatusStatusId(statusId)\n  .then((data) => {\n    console.log(`getContentmanagementStatusStatusId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementStatusStatusId\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementusage": {
    "operationId": "getcontentmanagementusage",
    "functionName": "getContentmanagementUsage",
    "signature": "getContentmanagementUsage()",
    "return": "Usage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\n// Get usage details.\napiInstance.getContentmanagementUsage()\n  .then((data) => {\n    console.log(`getContentmanagementUsage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementUsage\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementworkspace": {
    "operationId": "getcontentmanagementworkspace",
    "functionName": "getContentmanagementWorkspace",
    "signature": "getContentmanagementWorkspace(workspaceId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Workspace",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a workspace.\napiInstance.getContentmanagementWorkspace(workspaceId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementWorkspace success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementWorkspace\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementworkspacedocuments": {
    "operationId": "getcontentmanagementworkspacedocuments",
    "functionName": "getContentmanagementWorkspaceDocuments",
    "signature": "getContentmanagementWorkspaceDocuments(workspaceId, expand, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"sortBy_example\", // String | name or dateCreated\n  \"sortOrder\": \"ascending\" // String | ascending or descending\n};\n\n// Get a list of documents.\napiInstance.getContentmanagementWorkspaceDocuments(workspaceId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementWorkspaceDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementWorkspaceDocuments\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementworkspacemember": {
    "operationId": "getcontentmanagementworkspacemember",
    "functionName": "getContentmanagementWorkspaceMember",
    "signature": "getContentmanagementWorkspaceMember(workspaceId, memberId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceMember",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a workspace member\napiInstance.getContentmanagementWorkspaceMember(workspaceId, memberId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementWorkspaceMember success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementWorkspaceMember\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementworkspacemembers": {
    "operationId": "getcontentmanagementworkspacemembers",
    "functionName": "getContentmanagementWorkspaceMembers",
    "signature": "getContentmanagementWorkspaceMembers(workspaceId, pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceMemberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a list workspace members\napiInstance.getContentmanagementWorkspaceMembers(workspaceId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementWorkspaceMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementWorkspaceMembers\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementworkspacetagvalue": {
    "operationId": "getcontentmanagementworkspacetagvalue",
    "functionName": "getContentmanagementWorkspaceTagvalue",
    "signature": "getContentmanagementWorkspaceTagvalue(workspaceId, tagId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValue",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet tagId = \"tagId_example\"; // String | Tag ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a workspace tag\napiInstance.getContentmanagementWorkspaceTagvalue(workspaceId, tagId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementWorkspaceTagvalue success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementWorkspaceTagvalue\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementworkspacetagvalues": {
    "operationId": "getcontentmanagementworkspacetagvalues",
    "functionName": "getContentmanagementWorkspaceTagvalues",
    "signature": "getContentmanagementWorkspaceTagvalues(workspaceId, value, pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "value",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  \"value\": \"value_example\", // String | filter the list of tags returned\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a list of workspace tags\napiInstance.getContentmanagementWorkspaceTagvalues(workspaceId, opts)\n  .then((data) => {\n    console.log(`getContentmanagementWorkspaceTagvalues success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementWorkspaceTagvalues\");\n    console.error(err);\n  });"
  },
  "getcontentmanagementworkspaces": {
    "operationId": "getcontentmanagementworkspaces",
    "functionName": "getContentmanagementWorkspaces",
    "signature": "getContentmanagementWorkspaces(pageSize, pageNumber, access, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "access",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"access\": [\"access_example\"], // [String] | Requested access level.\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a list of workspaces.\napiInstance.getContentmanagementWorkspaces(opts)\n  .then((data) => {\n    console.log(`getContentmanagementWorkspaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getContentmanagementWorkspaces\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementauditquery": {
    "operationId": "postcontentmanagementauditquery",
    "functionName": "postContentmanagementAuditquery",
    "signature": "postContentmanagementAuditquery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueryResults",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet body = {}; // Object | Allows for a filtered query returning facet information\n\n// Query audits\napiInstance.postContentmanagementAuditquery(body)\n  .then((data) => {\n    console.log(`postContentmanagementAuditquery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementAuditquery\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementdocument": {
    "operationId": "postcontentmanagementdocument",
    "functionName": "postContentmanagementDocument",
    "signature": "postContentmanagementDocument(documentId, body, expand, override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet body = {}; // Object | Document\nlet opts = { \n  \"expand\": \"expand_example\", // String | Expand some document fields\n  \"override\": true // Boolean | Override any lock on the document\n};\n\n// Update a document.\napiInstance.postContentmanagementDocument(documentId, body, opts)\n  .then((data) => {\n    console.log(`postContentmanagementDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementDocument\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementdocumentcontent": {
    "operationId": "postcontentmanagementdocumentcontent",
    "functionName": "postContentmanagementDocumentContent",
    "signature": "postContentmanagementDocumentContent(documentId, body, override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ReplaceResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet body = {}; // Object | Replace Request\nlet opts = { \n  \"override\": true // Boolean | Override any lock on the document\n};\n\n// Replace the contents of a document.\napiInstance.postContentmanagementDocumentContent(documentId, body, opts)\n  .then((data) => {\n    console.log(`postContentmanagementDocumentContent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementDocumentContent\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementdocuments": {
    "operationId": "postcontentmanagementdocuments",
    "functionName": "postContentmanagementDocuments",
    "signature": "postContentmanagementDocuments(body, copySource, moveSource, override)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "copySource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "moveSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet body = {}; // Object | Document\nlet opts = { \n  \"copySource\": \"copySource_example\", // String | Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source.\n  \"moveSource\": \"moveSource_example\", // String | Move a document to a new workspace. Provide a document ID as the move source.\n  \"override\": true // Boolean | Override any lock on the source document\n};\n\n// Add a document.\napiInstance.postContentmanagementDocuments(body, opts)\n  .then((data) => {\n    console.log(`postContentmanagementDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementDocuments\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementquery": {
    "operationId": "postcontentmanagementquery",
    "functionName": "postContentmanagementQuery",
    "signature": "postContentmanagementQuery(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "QueryResults",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet body = {}; // Object | Allows for a filtered query returning facet information\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand some document fields\n};\n\n// Query content\napiInstance.postContentmanagementQuery(body, opts)\n  .then((data) => {\n    console.log(`postContentmanagementQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementQuery\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementshares": {
    "operationId": "postcontentmanagementshares",
    "functionName": "postContentmanagementShares",
    "signature": "postContentmanagementShares(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateShareResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet body = {}; // Object | CreateShareRequest - entity id and type and a single member or list of members are required\n\n// Creates a new share or updates an existing share if the entity has already been shared\napiInstance.postContentmanagementShares(body)\n  .then((data) => {\n    console.log(`postContentmanagementShares success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementShares\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementworkspacetagvalues": {
    "operationId": "postcontentmanagementworkspacetagvalues",
    "functionName": "postContentmanagementWorkspaceTagvalues",
    "signature": "postContentmanagementWorkspaceTagvalues(workspaceId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TagValue",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet body = {}; // Object | tag\n\n// Create a workspace tag\napiInstance.postContentmanagementWorkspaceTagvalues(workspaceId, body)\n  .then((data) => {\n    console.log(`postContentmanagementWorkspaceTagvalues success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementWorkspaceTagvalues\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementworkspacetagvaluesquery": {
    "operationId": "postcontentmanagementworkspacetagvaluesquery",
    "functionName": "postContentmanagementWorkspaceTagvaluesQuery",
    "signature": "postContentmanagementWorkspaceTagvaluesQuery(workspaceId, body, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet body = {}; // Object | query\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Perform a prefix query on tags in the workspace\napiInstance.postContentmanagementWorkspaceTagvaluesQuery(workspaceId, body, opts)\n  .then((data) => {\n    console.log(`postContentmanagementWorkspaceTagvaluesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementWorkspaceTagvaluesQuery\");\n    console.error(err);\n  });"
  },
  "postcontentmanagementworkspaces": {
    "operationId": "postcontentmanagementworkspaces",
    "functionName": "postContentmanagementWorkspaces",
    "signature": "postContentmanagementWorkspaces(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Workspace",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet body = {}; // Object | Workspace\n\n// Create a group workspace\napiInstance.postContentmanagementWorkspaces(body)\n  .then((data) => {\n    console.log(`postContentmanagementWorkspaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postContentmanagementWorkspaces\");\n    console.error(err);\n  });"
  },
  "putcontentmanagementworkspace": {
    "operationId": "putcontentmanagementworkspace",
    "functionName": "putContentmanagementWorkspace",
    "signature": "putContentmanagementWorkspace(workspaceId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Workspace",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet body = {}; // Object | Workspace\n\n// Update a workspace\napiInstance.putContentmanagementWorkspace(workspaceId, body)\n  .then((data) => {\n    console.log(`putContentmanagementWorkspace success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putContentmanagementWorkspace\");\n    console.error(err);\n  });"
  },
  "putcontentmanagementworkspacemember": {
    "operationId": "putcontentmanagementworkspacemember",
    "functionName": "putContentmanagementWorkspaceMember",
    "signature": "putContentmanagementWorkspaceMember(workspaceId, memberId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WorkspaceMember",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet body = {}; // Object | Workspace Member\n\n// Add a member to a workspace\napiInstance.putContentmanagementWorkspaceMember(workspaceId, memberId, body)\n  .then((data) => {\n    console.log(`putContentmanagementWorkspaceMember success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putContentmanagementWorkspaceMember\");\n    console.error(err);\n  });"
  },
  "putcontentmanagementworkspacetagvalue": {
    "operationId": "putcontentmanagementworkspacetagvalue",
    "functionName": "putContentmanagementWorkspaceTagvalue",
    "signature": "putContentmanagementWorkspaceTagvalue(workspaceId, tagId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TagValue",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ContentManagementApi();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet tagId = \"tagId_example\"; // String | Tag ID\nlet body = {}; // Object | Workspace\n\n// Update a workspace tag. Will update all documents with the new tag value.\napiInstance.putContentmanagementWorkspaceTagvalue(workspaceId, tagId, body)\n  .then((data) => {\n    console.log(`putContentmanagementWorkspaceTagvalue success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putContentmanagementWorkspaceTagvalue\");\n    console.error(err);\n  });"
  },
  "deleteconversationparticipantcode": {
    "operationId": "deleteconversationparticipantcode",
    "functionName": "deleteConversationParticipantCode",
    "signature": "deleteConversationParticipantCode(conversationId, participantId, addCommunicationCode)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "addCommunicationCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet addCommunicationCode = \"addCommunicationCode_example\"; // String | addCommunicationCode\n\n// Delete a code used to add a communication to this participant\napiInstance.deleteConversationParticipantCode(conversationId, participantId, addCommunicationCode)\n  .then(() => {\n    console.log(\"deleteConversationParticipantCode returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationParticipantCode\");\n    console.error(err);\n  });"
  },
  "deleteconversationparticipantflaggedreason": {
    "operationId": "deleteconversationparticipantflaggedreason",
    "functionName": "deleteConversationParticipantFlaggedreason",
    "signature": "deleteConversationParticipantFlaggedreason(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n// Remove flagged reason from conversation participant.\napiInstance.deleteConversationParticipantFlaggedreason(conversationId, participantId)\n  .then(() => {\n    console.log(\"deleteConversationParticipantFlaggedreason returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationParticipantFlaggedreason\");\n    console.error(err);\n  });"
  },
  "deleteconversationscallparticipantconsult": {
    "operationId": "deleteconversationscallparticipantconsult",
    "functionName": "deleteConversationsCallParticipantConsult",
    "signature": "deleteConversationsCallParticipantConsult(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Cancel the transfer\napiInstance.deleteConversationsCallParticipantConsult(conversationId, participantId)\n  .then(() => {\n    console.log(\"deleteConversationsCallParticipantConsult returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsCallParticipantConsult\");\n    console.error(err);\n  });"
  },
  "deleteconversationsemailmessagesdraftattachment": {
    "operationId": "deleteconversationsemailmessagesdraftattachment",
    "functionName": "deleteConversationsEmailMessagesDraftAttachment",
    "signature": "deleteConversationsEmailMessagesDraftAttachment(conversationId, attachmentId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attachmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet attachmentId = \"attachmentId_example\"; // String | attachmentId\n\n// Delete attachment from draft\napiInstance.deleteConversationsEmailMessagesDraftAttachment(conversationId, attachmentId)\n  .then(() => {\n    console.log(\"deleteConversationsEmailMessagesDraftAttachment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsEmailMessagesDraftAttachment\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagescachedmediacachedmediaitemid": {
    "operationId": "deleteconversationsmessagescachedmediacachedmediaitemid",
    "functionName": "deleteConversationsMessagesCachedmediaCachedMediaItemId",
    "signature": "deleteConversationsMessagesCachedmediaCachedMediaItemId(cachedMediaItemId)",
    "parameters": [
      {
        "name": "cachedMediaItemId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet cachedMediaItemId = \"cachedMediaItemId_example\"; // String | cachedMediaItemId\n\n// Remove a cached media item asychronously\napiInstance.deleteConversationsMessagesCachedmediaCachedMediaItemId(cachedMediaItemId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagesCachedmediaCachedMediaItemId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagesCachedmediaCachedMediaItemId\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n// Delete a Facebook messaging integration\napiInstance.deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagingIntegrationsFacebookIntegrationId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingIntegrationsFacebookIntegrationId\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingintegrationsinstagramintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationsinstagramintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsInstagramIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsInstagramIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n// Delete Instagram messaging integration\napiInstance.deleteConversationsMessagingIntegrationsInstagramIntegrationId(integrationId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagingIntegrationsInstagramIntegrationId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingIntegrationsInstagramIntegrationId\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingintegrationslineintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationslineintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n// Delete a LINE messenger integration\napiInstance.deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagingIntegrationsLineIntegrationId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingIntegrationsLineIntegrationId\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationsopenintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n// Delete an Open messaging integration\napiInstance.deleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagingIntegrationsOpenIntegrationId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingIntegrationsOpenIntegrationId\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n// Delete a Twitter messaging integration\napiInstance.deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagingIntegrationsTwitterIntegrationId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingIntegrationsTwitterIntegrationId\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n// Delete a WhatsApp messaging integration\napiInstance.deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId)\n  .then((data) => {\n    console.log(`deleteConversationsMessagingIntegrationsWhatsappIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingIntegrationsWhatsappIntegrationId\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingsetting": {
    "operationId": "deleteconversationsmessagingsetting",
    "functionName": "deleteConversationsMessagingSetting",
    "signature": "deleteConversationsMessagingSetting(messageSettingId)",
    "parameters": [
      {
        "name": "messageSettingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet messageSettingId = \"messageSettingId_example\"; // String | Message Setting ID\n\n// Delete a messaging setting\napiInstance.deleteConversationsMessagingSetting(messageSettingId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagingSetting returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingSetting\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingsettingsdefault": {
    "operationId": "deleteconversationsmessagingsettingsdefault",
    "functionName": "deleteConversationsMessagingSettingsDefault",
    "signature": "deleteConversationsMessagingSettingsDefault()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Delete the organization's default setting, a global default will be applied to integrations without settings\napiInstance.deleteConversationsMessagingSettingsDefault()\n  .then(() => {\n    console.log(\"deleteConversationsMessagingSettingsDefault returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingSettingsDefault\");\n    console.error(err);\n  });"
  },
  "deleteconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "deleteconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "deleteConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "deleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n// Delete a supported content profile\napiInstance.deleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)\n  .then(() => {\n    console.log(\"deleteConversationsMessagingSupportedcontentSupportedContentId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationsMessagingSupportedcontentSupportedContentId\");\n    console.error(err);\n  });"
  },
  "getconversation": {
    "operationId": "getconversation",
    "functionName": "getConversation",
    "signature": "getConversation(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\n\n// Get conversation\napiInstance.getConversation(conversationId)\n  .then((data) => {\n    console.log(`getConversation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversation\");\n    console.error(err);\n  });"
  },
  "getconversationparticipantsecureivrsession": {
    "operationId": "getconversationparticipantsecureivrsession",
    "functionName": "getConversationParticipantSecureivrsession",
    "signature": "getConversationParticipantSecureivrsession(conversationId, participantId, secureSessionId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "secureSessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecureSession",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet secureSessionId = \"secureSessionId_example\"; // String | secure IVR session ID\n\n// Fetch info on a secure session\napiInstance.getConversationParticipantSecureivrsession(conversationId, participantId, secureSessionId)\n  .then((data) => {\n    console.log(`getConversationParticipantSecureivrsession success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationParticipantSecureivrsession\");\n    console.error(err);\n  });"
  },
  "getconversationparticipantsecureivrsessions": {
    "operationId": "getconversationparticipantsecureivrsessions",
    "functionName": "getConversationParticipantSecureivrsessions",
    "signature": "getConversationParticipantSecureivrsessions(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecureSessionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n// Get a list of secure sessions for this participant.\napiInstance.getConversationParticipantSecureivrsessions(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationParticipantSecureivrsessions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationParticipantSecureivrsessions\");\n    console.error(err);\n  });"
  },
  "getconversationparticipantwrapup": {
    "operationId": "getconversationparticipantwrapup",
    "functionName": "getConversationParticipantWrapup",
    "signature": "getConversationParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation participant. \napiInstance.getConversationParticipantWrapup(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`getConversationParticipantWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationParticipantWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationparticipantwrapupcodes": {
    "operationId": "getconversationparticipantwrapupcodes",
    "functionName": "getConversationParticipantWrapupcodes",
    "signature": "getConversationParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n// Get list of wrapup codes for this conversation participant\napiInstance.getConversationParticipantWrapupcodes(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationParticipantWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationParticipantWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getconversationsecureattributes": {
    "operationId": "getconversationsecureattributes",
    "functionName": "getConversationSecureattributes",
    "signature": "getConversationSecureattributes(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ConversationSecureAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\n\n// Get the secure attributes on a conversation.\napiInstance.getConversationSecureattributes(conversationId)\n  .then((data) => {\n    console.log(`getConversationSecureattributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationSecureattributes\");\n    console.error(err);\n  });"
  },
  "getconversations": {
    "operationId": "getconversations",
    "functionName": "getConversations",
    "signature": "getConversations(communicationType)",
    "parameters": [
      {
        "name": "communicationType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"communicationType\": \"communicationType_example\" // String | Call or Chat communication filtering\n};\n\n// Get active conversations for the logged in user\napiInstance.getConversations(opts)\n  .then((data) => {\n    console.log(`getConversations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversations\");\n    console.error(err);\n  });"
  },
  "getconversationscall": {
    "operationId": "getconversationscall",
    "functionName": "getConversationsCall",
    "signature": "getConversationsCall(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get call conversation\napiInstance.getConversationsCall(conversationId)\n  .then((data) => {\n    console.log(`getConversationsCall success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCall\");\n    console.error(err);\n  });"
  },
  "getconversationscallparticipantcommunicationwrapup": {
    "operationId": "getconversationscallparticipantcommunicationwrapup",
    "functionName": "getConversationsCallParticipantCommunicationWrapup",
    "signature": "getConversationsCallParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsCallParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsCallParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationscallparticipantwrapup": {
    "operationId": "getconversationscallparticipantwrapup",
    "functionName": "getConversationsCallParticipantWrapup",
    "signature": "getConversationsCallParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation participant. \napiInstance.getConversationsCallParticipantWrapup(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`getConversationsCallParticipantWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallParticipantWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationscallparticipantwrapupcodes": {
    "operationId": "getconversationscallparticipantwrapupcodes",
    "functionName": "getConversationsCallParticipantWrapupcodes",
    "signature": "getConversationsCallParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Get list of wrapup codes for this conversation participant\napiInstance.getConversationsCallParticipantWrapupcodes(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationsCallParticipantWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallParticipantWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getconversationscallback": {
    "operationId": "getconversationscallback",
    "functionName": "getConversationsCallback",
    "signature": "getConversationsCallback(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallbackConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get callback conversation\napiInstance.getConversationsCallback(conversationId)\n  .then((data) => {\n    console.log(`getConversationsCallback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallback\");\n    console.error(err);\n  });"
  },
  "getconversationscallbackparticipantcommunicationwrapup": {
    "operationId": "getconversationscallbackparticipantcommunicationwrapup",
    "functionName": "getConversationsCallbackParticipantCommunicationWrapup",
    "signature": "getConversationsCallbackParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsCallbackParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsCallbackParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallbackParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationscallbackparticipantwrapup": {
    "operationId": "getconversationscallbackparticipantwrapup",
    "functionName": "getConversationsCallbackParticipantWrapup",
    "signature": "getConversationsCallbackParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation participant. \napiInstance.getConversationsCallbackParticipantWrapup(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`getConversationsCallbackParticipantWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallbackParticipantWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationscallbackparticipantwrapupcodes": {
    "operationId": "getconversationscallbackparticipantwrapupcodes",
    "functionName": "getConversationsCallbackParticipantWrapupcodes",
    "signature": "getConversationsCallbackParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Get list of wrapup codes for this conversation participant\napiInstance.getConversationsCallbackParticipantWrapupcodes(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationsCallbackParticipantWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallbackParticipantWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getconversationscallbacks": {
    "operationId": "getconversationscallbacks",
    "functionName": "getConversationsCallbacks",
    "signature": "getConversationsCallbacks()",
    "return": "CallbackConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get active callback conversations for the logged in user\napiInstance.getConversationsCallbacks()\n  .then((data) => {\n    console.log(`getConversationsCallbacks success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallbacks\");\n    console.error(err);\n  });"
  },
  "getconversationscalls": {
    "operationId": "getconversationscalls",
    "functionName": "getConversationsCalls",
    "signature": "getConversationsCalls()",
    "return": "CallConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get active call conversations for the logged in user\napiInstance.getConversationsCalls()\n  .then((data) => {\n    console.log(`getConversationsCalls success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCalls\");\n    console.error(err);\n  });"
  },
  "getconversationscallshistory": {
    "operationId": "getconversationscallshistory",
    "functionName": "getConversationsCallsHistory",
    "signature": "getConversationsCallsHistory(pageSize, pageNumber, interval, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CallHistoryConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size, maximum 50\n  \"pageNumber\": 1, // Number | Page number\n  \"interval\": \"interval_example\", // String | Interval string; format is ISO-8601. Separate start and end times with forward slash '/'\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get call history\napiInstance.getConversationsCallsHistory(opts)\n  .then((data) => {\n    console.log(`getConversationsCallsHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallsHistory\");\n    console.error(err);\n  });"
  },
  "getconversationscallsmaximumconferenceparties": {
    "operationId": "getconversationscallsmaximumconferenceparties",
    "functionName": "getConversationsCallsMaximumconferenceparties",
    "signature": "getConversationsCallsMaximumconferenceparties()",
    "return": "MaxParticipants",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get the maximum number of participants that this user can have on a conference\napiInstance.getConversationsCallsMaximumconferenceparties()\n  .then((data) => {\n    console.log(`getConversationsCallsMaximumconferenceparties success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCallsMaximumconferenceparties\");\n    console.error(err);\n  });"
  },
  "getconversationschat": {
    "operationId": "getconversationschat",
    "functionName": "getConversationsChat",
    "signature": "getConversationsChat(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ChatConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get chat conversation\napiInstance.getConversationsChat(conversationId)\n  .then((data) => {\n    console.log(`getConversationsChat success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsChat\");\n    console.error(err);\n  });"
  },
  "getconversationschatmessage": {
    "operationId": "getconversationschatmessage",
    "functionName": "getConversationsChatMessage",
    "signature": "getConversationsChatMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n// Get a web chat conversation message\napiInstance.getConversationsChatMessage(conversationId, messageId)\n  .then((data) => {\n    console.log(`getConversationsChatMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsChatMessage\");\n    console.error(err);\n  });"
  },
  "getconversationschatmessages": {
    "operationId": "getconversationschatmessages",
    "functionName": "getConversationsChatMessages",
    "signature": "getConversationsChatMessages(conversationId, after, before, sortOrder, maxResults)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "maxResults",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WebChatMessageEntityList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  \"after\": \"after_example\", // String | If specified, get the messages chronologically after the id of this message\n  \"before\": \"before_example\", // String | If specified, get the messages chronologically before the id of this message\n  \"sortOrder\": \"ascending\", // String | Sort order\n  \"maxResults\": 100 // Number | Limit the returned number of messages, up to a maximum of 100\n};\n\n// Get the messages of a chat conversation.\napiInstance.getConversationsChatMessages(conversationId, opts)\n  .then((data) => {\n    console.log(`getConversationsChatMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsChatMessages\");\n    console.error(err);\n  });"
  },
  "getconversationschatparticipantcommunicationwrapup": {
    "operationId": "getconversationschatparticipantcommunicationwrapup",
    "functionName": "getConversationsChatParticipantCommunicationWrapup",
    "signature": "getConversationsChatParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsChatParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsChatParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsChatParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationschatparticipantwrapup": {
    "operationId": "getconversationschatparticipantwrapup",
    "functionName": "getConversationsChatParticipantWrapup",
    "signature": "getConversationsChatParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation participant. \napiInstance.getConversationsChatParticipantWrapup(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`getConversationsChatParticipantWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsChatParticipantWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationschatparticipantwrapupcodes": {
    "operationId": "getconversationschatparticipantwrapupcodes",
    "functionName": "getConversationsChatParticipantWrapupcodes",
    "signature": "getConversationsChatParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Get list of wrapup codes for this conversation participant\napiInstance.getConversationsChatParticipantWrapupcodes(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationsChatParticipantWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsChatParticipantWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getconversationschats": {
    "operationId": "getconversationschats",
    "functionName": "getConversationsChats",
    "signature": "getConversationsChats()",
    "return": "ChatConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get active chat conversations for the logged in user\napiInstance.getConversationsChats()\n  .then((data) => {\n    console.log(`getConversationsChats success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsChats\");\n    console.error(err);\n  });"
  },
  "getconversationscobrowsesession": {
    "operationId": "getconversationscobrowsesession",
    "functionName": "getConversationsCobrowsesession",
    "signature": "getConversationsCobrowsesession(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CobrowseConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get cobrowse conversation\napiInstance.getConversationsCobrowsesession(conversationId)\n  .then((data) => {\n    console.log(`getConversationsCobrowsesession success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCobrowsesession\");\n    console.error(err);\n  });"
  },
  "getconversationscobrowsesessionparticipantcommunicationwrapup": {
    "operationId": "getconversationscobrowsesessionparticipantcommunicationwrapup",
    "functionName": "getConversationsCobrowsesessionParticipantCommunicationWrapup",
    "signature": "getConversationsCobrowsesessionParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsCobrowsesessionParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsCobrowsesessionParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCobrowsesessionParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationscobrowsesessionparticipantwrapup": {
    "operationId": "getconversationscobrowsesessionparticipantwrapup",
    "functionName": "getConversationsCobrowsesessionParticipantWrapup",
    "signature": "getConversationsCobrowsesessionParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation participant. \napiInstance.getConversationsCobrowsesessionParticipantWrapup(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`getConversationsCobrowsesessionParticipantWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCobrowsesessionParticipantWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationscobrowsesessionparticipantwrapupcodes": {
    "operationId": "getconversationscobrowsesessionparticipantwrapupcodes",
    "functionName": "getConversationsCobrowsesessionParticipantWrapupcodes",
    "signature": "getConversationsCobrowsesessionParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Get list of wrapup codes for this conversation participant\napiInstance.getConversationsCobrowsesessionParticipantWrapupcodes(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationsCobrowsesessionParticipantWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCobrowsesessionParticipantWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getconversationscobrowsesessions": {
    "operationId": "getconversationscobrowsesessions",
    "functionName": "getConversationsCobrowsesessions",
    "signature": "getConversationsCobrowsesessions()",
    "return": "CobrowseConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get active cobrowse conversations for the logged in user\napiInstance.getConversationsCobrowsesessions()\n  .then((data) => {\n    console.log(`getConversationsCobrowsesessions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsCobrowsesessions\");\n    console.error(err);\n  });"
  },
  "getconversationsemail": {
    "operationId": "getconversationsemail",
    "functionName": "getConversationsEmail",
    "signature": "getConversationsEmail(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get email conversation\napiInstance.getConversationsEmail(conversationId)\n  .then((data) => {\n    console.log(`getConversationsEmail success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmail\");\n    console.error(err);\n  });"
  },
  "getconversationsemailmessage": {
    "operationId": "getconversationsemailmessage",
    "functionName": "getConversationsEmailMessage",
    "signature": "getConversationsEmailMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n// Get conversation message\napiInstance.getConversationsEmailMessage(conversationId, messageId)\n  .then((data) => {\n    console.log(`getConversationsEmailMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmailMessage\");\n    console.error(err);\n  });"
  },
  "getconversationsemailmessages": {
    "operationId": "getconversationsemailmessages",
    "functionName": "getConversationsEmailMessages",
    "signature": "getConversationsEmailMessages(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessagePreviewListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get conversation messages\napiInstance.getConversationsEmailMessages(conversationId)\n  .then((data) => {\n    console.log(`getConversationsEmailMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmailMessages\");\n    console.error(err);\n  });"
  },
  "getconversationsemailmessagesdraft": {
    "operationId": "getconversationsemailmessagesdraft",
    "functionName": "getConversationsEmailMessagesDraft",
    "signature": "getConversationsEmailMessagesDraft(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get conversation draft reply\napiInstance.getConversationsEmailMessagesDraft(conversationId)\n  .then((data) => {\n    console.log(`getConversationsEmailMessagesDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmailMessagesDraft\");\n    console.error(err);\n  });"
  },
  "getconversationsemailparticipantcommunicationwrapup": {
    "operationId": "getconversationsemailparticipantcommunicationwrapup",
    "functionName": "getConversationsEmailParticipantCommunicationWrapup",
    "signature": "getConversationsEmailParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsEmailParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsEmailParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmailParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationsemailparticipantwrapup": {
    "operationId": "getconversationsemailparticipantwrapup",
    "functionName": "getConversationsEmailParticipantWrapup",
    "signature": "getConversationsEmailParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation participant. \napiInstance.getConversationsEmailParticipantWrapup(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`getConversationsEmailParticipantWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmailParticipantWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationsemailparticipantwrapupcodes": {
    "operationId": "getconversationsemailparticipantwrapupcodes",
    "functionName": "getConversationsEmailParticipantWrapupcodes",
    "signature": "getConversationsEmailParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Get list of wrapup codes for this conversation participant\napiInstance.getConversationsEmailParticipantWrapupcodes(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationsEmailParticipantWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmailParticipantWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getconversationsemailsettings": {
    "operationId": "getconversationsemailsettings",
    "functionName": "getConversationsEmailSettings",
    "signature": "getConversationsEmailSettings(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailsSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get emails settings for a given conversation\napiInstance.getConversationsEmailSettings(conversationId)\n  .then((data) => {\n    console.log(`getConversationsEmailSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmailSettings\");\n    console.error(err);\n  });"
  },
  "getconversationsemails": {
    "operationId": "getconversationsemails",
    "functionName": "getConversationsEmails",
    "signature": "getConversationsEmails()",
    "return": "EmailConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get active email conversations for the logged in user\napiInstance.getConversationsEmails()\n  .then((data) => {\n    console.log(`getConversationsEmails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsEmails\");\n    console.error(err);\n  });"
  },
  "getconversationskeyconfiguration": {
    "operationId": "getconversationskeyconfiguration",
    "functionName": "getConversationsKeyconfiguration",
    "signature": "getConversationsKeyconfiguration(keyconfigurationsId)",
    "parameters": [
      {
        "name": "keyconfigurationsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ConversationEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet keyconfigurationsId = \"keyconfigurationsId_example\"; // String | Key Configurations Id\n\n// Get the encryption key configurations\napiInstance.getConversationsKeyconfiguration(keyconfigurationsId)\n  .then((data) => {\n    console.log(`getConversationsKeyconfiguration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsKeyconfiguration\");\n    console.error(err);\n  });"
  },
  "getconversationskeyconfigurations": {
    "operationId": "getconversationskeyconfigurations",
    "functionName": "getConversationsKeyconfigurations",
    "signature": "getConversationsKeyconfigurations()",
    "return": "ConversationEncryptionConfigurationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get a list of key configurations data\napiInstance.getConversationsKeyconfigurations()\n  .then((data) => {\n    console.log(`getConversationsKeyconfigurations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsKeyconfigurations\");\n    console.error(err);\n  });"
  },
  "getconversationsmessage": {
    "operationId": "getconversationsmessage",
    "functionName": "getConversationsMessage",
    "signature": "getConversationsMessage(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get message conversation\napiInstance.getConversationsMessage(conversationId)\n  .then((data) => {\n    console.log(`getConversationsMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessage\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagecommunicationmessagesmediamediaid": {
    "operationId": "getconversationsmessagecommunicationmessagesmediamediaid",
    "functionName": "getConversationsMessageCommunicationMessagesMediaMediaId",
    "signature": "getConversationsMessageCommunicationMessagesMediaMediaId(conversationId, communicationId, mediaId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageMediaData",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet mediaId = \"mediaId_example\"; // String | mediaId\n\n// Get media\napiInstance.getConversationsMessageCommunicationMessagesMediaMediaId(conversationId, communicationId, mediaId)\n  .then((data) => {\n    console.log(`getConversationsMessageCommunicationMessagesMediaMediaId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessageCommunicationMessagesMediaMediaId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagedetails": {
    "operationId": "getconversationsmessagedetails",
    "functionName": "getConversationsMessageDetails",
    "signature": "getConversationsMessageDetails(messageId, useNormalizedMessage)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "useNormalizedMessage",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "MessageData",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet messageId = \"messageId_example\"; // String | messageId\nlet opts = { \n  \"useNormalizedMessage\": false // Boolean | If true, response removes deprecated fields (textBody, media, stickers)\n};\n\n// Get message\napiInstance.getConversationsMessageDetails(messageId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessageDetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessageDetails\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagemessage": {
    "operationId": "getconversationsmessagemessage",
    "functionName": "getConversationsMessageMessage",
    "signature": "getConversationsMessageMessage(conversationId, messageId, useNormalizedMessage)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "useNormalizedMessage",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "MessageData",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\nlet opts = { \n  \"useNormalizedMessage\": false // Boolean | If true, response removes deprecated fields (textBody, media, stickers)\n};\n\n// Get conversation message\napiInstance.getConversationsMessageMessage(conversationId, messageId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessageMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessageMessage\");\n    console.error(err);\n  });"
  },
  "getconversationsmessageparticipantcommunicationwrapup": {
    "operationId": "getconversationsmessageparticipantcommunicationwrapup",
    "functionName": "getConversationsMessageParticipantCommunicationWrapup",
    "signature": "getConversationsMessageParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsMessageParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessageParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessageParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationsmessageparticipantwrapup": {
    "operationId": "getconversationsmessageparticipantwrapup",
    "functionName": "getConversationsMessageParticipantWrapup",
    "signature": "getConversationsMessageParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation participant. \napiInstance.getConversationsMessageParticipantWrapup(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessageParticipantWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessageParticipantWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationsmessageparticipantwrapupcodes": {
    "operationId": "getconversationsmessageparticipantwrapupcodes",
    "functionName": "getConversationsMessageParticipantWrapupcodes",
    "signature": "getConversationsMessageParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Get list of wrapup codes for this conversation participant\napiInstance.getConversationsMessageParticipantWrapupcodes(conversationId, participantId)\n  .then((data) => {\n    console.log(`getConversationsMessageParticipantWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessageParticipantWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getconversationsmessages": {
    "operationId": "getconversationsmessages",
    "functionName": "getConversationsMessages",
    "signature": "getConversationsMessages()",
    "return": "MessageConversationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get active message conversations for the logged in user\napiInstance.getConversationsMessages()\n  .then((data) => {\n    console.log(`getConversationsMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessages\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagescachedmedia": {
    "operationId": "getconversationsmessagescachedmedia",
    "functionName": "getConversationsMessagesCachedmedia",
    "signature": "getConversationsMessagesCachedmedia(pageSize, pageNumber, url)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "url",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CachedMediaItemEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"url\": \"url_example\" // String | URL to search for\n};\n\n// Get a list of cached media items\napiInstance.getConversationsMessagesCachedmedia(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagesCachedmedia success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagesCachedmedia\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagescachedmediacachedmediaitemid": {
    "operationId": "getconversationsmessagescachedmediacachedmediaitemid",
    "functionName": "getConversationsMessagesCachedmediaCachedMediaItemId",
    "signature": "getConversationsMessagesCachedmediaCachedMediaItemId(cachedMediaItemId)",
    "parameters": [
      {
        "name": "cachedMediaItemId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CachedMediaItem",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet cachedMediaItemId = \"cachedMediaItemId_example\"; // String | cachedMediaItemId\n\n// Get a cached media item\napiInstance.getConversationsMessagesCachedmediaCachedMediaItemId(cachedMediaItemId)\n  .then((data) => {\n    console.log(`getConversationsMessagesCachedmediaCachedMediaItemId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagesCachedmediaCachedMediaItemId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingfacebookapp": {
    "operationId": "getconversationsmessagingfacebookapp",
    "functionName": "getConversationsMessagingFacebookApp",
    "signature": "getConversationsMessagingFacebookApp()",
    "return": "FacebookAppCredentials",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get Genesys Facebook App Id\napiInstance.getConversationsMessagingFacebookApp()\n  .then((data) => {\n    console.log(`getConversationsMessagingFacebookApp success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingFacebookApp\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrations": {
    "operationId": "getconversationsmessagingintegrations",
    "functionName": "getConversationsMessagingIntegrations",
    "signature": "getConversationsMessagingIntegrations(pageSize, pageNumber, expand, supportedContentId, messagingSettingId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messagingSettingId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MessagingIntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": [\"expand_example\"], // [String] | Expand instructions for the return value.\n  \"supportedContentId\": \"supportedContentId_example\", // String | Filter integrations returned based on the supported content ID\n  \"messagingSettingId\": \"messagingSettingId_example\" // String | Filter integrations returned based on the setting ID\n};\n\n// Get a list of Integrations\napiInstance.getConversationsMessagingIntegrations(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrations\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationsfacebook": {
    "operationId": "getconversationsmessagingintegrationsfacebook",
    "functionName": "getConversationsMessagingIntegrationsFacebook",
    "signature": "getConversationsMessagingIntegrationsFacebook(pageSize, pageNumber, expand, supportedContentId, messagingSettingId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messagingSettingId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FacebookIntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand instructions for the return value.\n  \"supportedContentId\": \"supportedContentId_example\", // String | Filter integrations returned based on the supported content ID\n  \"messagingSettingId\": \"messagingSettingId_example\" // String | Filter integrations returned based on the setting ID\n};\n\n// Get a list of Facebook Integrations\napiInstance.getConversationsMessagingIntegrationsFacebook(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsFacebook success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsFacebook\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "getconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "getConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FacebookIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Get a Facebook messaging integration\napiInstance.getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsFacebookIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsFacebookIntegrationId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationsinstagram": {
    "operationId": "getconversationsmessagingintegrationsinstagram",
    "functionName": "getConversationsMessagingIntegrationsInstagram",
    "signature": "getConversationsMessagingIntegrationsInstagram(pageSize, pageNumber, expand, supportedContentId, messagingSettingId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messagingSettingId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InstagramIntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand instructions for the return value.\n  \"supportedContentId\": \"supportedContentId_example\", // String | Filter integrations returned based on the supported content ID\n  \"messagingSettingId\": \"messagingSettingId_example\" // String | Filter integrations returned based on the setting ID\n};\n\n// Get a list of Instagram Integrations\napiInstance.getConversationsMessagingIntegrationsInstagram(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsInstagram success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsInstagram\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationsinstagramintegrationid": {
    "operationId": "getconversationsmessagingintegrationsinstagramintegrationid",
    "functionName": "getConversationsMessagingIntegrationsInstagramIntegrationId",
    "signature": "getConversationsMessagingIntegrationsInstagramIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InstagramIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Get Instagram messaging integration\napiInstance.getConversationsMessagingIntegrationsInstagramIntegrationId(integrationId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsInstagramIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsInstagramIntegrationId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationsline": {
    "operationId": "getconversationsmessagingintegrationsline",
    "functionName": "getConversationsMessagingIntegrationsLine",
    "signature": "getConversationsMessagingIntegrationsLine(pageSize, pageNumber, expand, supportedContentId, messagingSettingId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messagingSettingId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LineIntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand instructions for the return value.\n  \"supportedContentId\": \"supportedContentId_example\", // String | Filter integrations returned based on the supported content ID\n  \"messagingSettingId\": \"messagingSettingId_example\" // String | Filter integrations returned based on the setting ID\n};\n\n// Get a list of LINE messenger Integrations\napiInstance.getConversationsMessagingIntegrationsLine(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsLine success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsLine\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationslineintegrationid": {
    "operationId": "getconversationsmessagingintegrationslineintegrationid",
    "functionName": "getConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "getConversationsMessagingIntegrationsLineIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LineIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Get a LINE messenger integration\napiInstance.getConversationsMessagingIntegrationsLineIntegrationId(integrationId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsLineIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsLineIntegrationId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationsopen": {
    "operationId": "getconversationsmessagingintegrationsopen",
    "functionName": "getConversationsMessagingIntegrationsOpen",
    "signature": "getConversationsMessagingIntegrationsOpen(pageSize, pageNumber, expand, supportedContentId, messagingSettingId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messagingSettingId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OpenIntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand instructions for the return value.\n  \"supportedContentId\": \"supportedContentId_example\", // String | Filter integrations returned based on the supported content ID\n  \"messagingSettingId\": \"messagingSettingId_example\" // String | Filter integrations returned based on the setting ID\n};\n\n// Get a list of Open messaging integrations\napiInstance.getConversationsMessagingIntegrationsOpen(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsOpen success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsOpen\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "getconversationsmessagingintegrationsopenintegrationid",
    "functionName": "getConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "getConversationsMessagingIntegrationsOpenIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OpenIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Get an Open messaging integration\napiInstance.getConversationsMessagingIntegrationsOpenIntegrationId(integrationId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsOpenIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsOpenIntegrationId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationstwitter": {
    "operationId": "getconversationsmessagingintegrationstwitter",
    "functionName": "getConversationsMessagingIntegrationsTwitter",
    "signature": "getConversationsMessagingIntegrationsTwitter(pageSize, pageNumber, expand, supportedContentId, messagingSettingId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messagingSettingId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TwitterIntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand instructions for the return value.\n  \"supportedContentId\": \"supportedContentId_example\", // String | Filter integrations returned based on the supported content ID\n  \"messagingSettingId\": \"messagingSettingId_example\" // String | Filter integrations returned based on the setting ID\n};\n\n// Get a list of Twitter Integrations\napiInstance.getConversationsMessagingIntegrationsTwitter(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsTwitter success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsTwitter\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "getconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "getConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TwitterIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Get a Twitter messaging integration\napiInstance.getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsTwitterIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsTwitterIntegrationId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationswhatsapp": {
    "operationId": "getconversationsmessagingintegrationswhatsapp",
    "functionName": "getConversationsMessagingIntegrationsWhatsapp",
    "signature": "getConversationsMessagingIntegrationsWhatsapp(pageSize, pageNumber, expand, supportedContentId, messagingSettingId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messagingSettingId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WhatsAppIntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand instructions for the return value.\n  \"supportedContentId\": \"supportedContentId_example\", // String | Filter integrations returned based on the supported content ID\n  \"messagingSettingId\": \"messagingSettingId_example\" // String | Filter integrations returned based on the setting ID\n};\n\n// Get a list of WhatsApp Integrations\napiInstance.getConversationsMessagingIntegrationsWhatsapp(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsWhatsapp success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsWhatsapp\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "getconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "getConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Get a WhatsApp messaging integration\napiInstance.getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingIntegrationsWhatsappIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingIntegrationsWhatsappIntegrationId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingsetting": {
    "operationId": "getconversationsmessagingsetting",
    "functionName": "getConversationsMessagingSetting",
    "signature": "getConversationsMessagingSetting(messageSettingId)",
    "parameters": [
      {
        "name": "messageSettingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet messageSettingId = \"messageSettingId_example\"; // String | Message Setting ID\n\n// Get a messaging setting\napiInstance.getConversationsMessagingSetting(messageSettingId)\n  .then((data) => {\n    console.log(`getConversationsMessagingSetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingSetting\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingsettings": {
    "operationId": "getconversationsmessagingsettings",
    "functionName": "getConversationsMessagingSettings",
    "signature": "getConversationsMessagingSettings(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "MessagingConfigListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of messaging settings\napiInstance.getConversationsMessagingSettings(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingSettings\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingsettingsdefault": {
    "operationId": "getconversationsmessagingsettingsdefault",
    "functionName": "getConversationsMessagingSettingsDefault",
    "signature": "getConversationsMessagingSettingsDefault()",
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get the organization's default settings that will be used as the default when creating an integration.\napiInstance.getConversationsMessagingSettingsDefault()\n  .then((data) => {\n    console.log(`getConversationsMessagingSettingsDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingSettingsDefault\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingsticker": {
    "operationId": "getconversationsmessagingsticker",
    "functionName": "getConversationsMessagingSticker",
    "signature": "getConversationsMessagingSticker(messengerType, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "messengerType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "MessagingStickerEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet messengerType = \"messengerType_example\"; // String | Messenger Type\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of Messaging Stickers\napiInstance.getConversationsMessagingSticker(messengerType, opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingSticker success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingSticker\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingsupportedcontent": {
    "operationId": "getconversationsmessagingsupportedcontent",
    "functionName": "getConversationsMessagingSupportedcontent",
    "signature": "getConversationsMessagingSupportedcontent(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SupportedContentListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of Supported Content profiles\napiInstance.getConversationsMessagingSupportedcontent(opts)\n  .then((data) => {\n    console.log(`getConversationsMessagingSupportedcontent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingSupportedcontent\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingsupportedcontentdefault": {
    "operationId": "getconversationsmessagingsupportedcontentdefault",
    "functionName": "getConversationsMessagingSupportedcontentDefault",
    "signature": "getConversationsMessagingSupportedcontentDefault()",
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get the organization's default supported content profile that will be used as the default when creating an integration.\napiInstance.getConversationsMessagingSupportedcontentDefault()\n  .then((data) => {\n    console.log(`getConversationsMessagingSupportedcontentDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingSupportedcontentDefault\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "getconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "getConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "getConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n// Get a supported content profile\napiInstance.getConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)\n  .then((data) => {\n    console.log(`getConversationsMessagingSupportedcontentSupportedContentId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingSupportedcontentSupportedContentId\");\n    console.error(err);\n  });"
  },
  "getconversationsmessagingthreadingtimeline": {
    "operationId": "getconversationsmessagingthreadingtimeline",
    "functionName": "getConversationsMessagingThreadingtimeline",
    "signature": "getConversationsMessagingThreadingtimeline()",
    "return": "ConversationThreadingWindow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get conversation threading window timeline for each messaging type\napiInstance.getConversationsMessagingThreadingtimeline()\n  .then((data) => {\n    console.log(`getConversationsMessagingThreadingtimeline success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsMessagingThreadingtimeline\");\n    console.error(err);\n  });"
  },
  "getconversationsscreenshareparticipantcommunicationwrapup": {
    "operationId": "getconversationsscreenshareparticipantcommunicationwrapup",
    "functionName": "getConversationsScreenshareParticipantCommunicationWrapup",
    "signature": "getConversationsScreenshareParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsScreenshareParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsScreenshareParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsScreenshareParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationssettings": {
    "operationId": "getconversationssettings",
    "functionName": "getConversationsSettings",
    "signature": "getConversationsSettings()",
    "return": "Settings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\n// Get Settings\napiInstance.getConversationsSettings()\n  .then((data) => {\n    console.log(`getConversationsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsSettings\");\n    console.error(err);\n  });"
  },
  "getconversationssocialparticipantcommunicationwrapup": {
    "operationId": "getconversationssocialparticipantcommunicationwrapup",
    "functionName": "getConversationsSocialParticipantCommunicationWrapup",
    "signature": "getConversationsSocialParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsSocialParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsSocialParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsSocialParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationsvideodetails": {
    "operationId": "getconversationsvideodetails",
    "functionName": "getConversationsVideoDetails",
    "signature": "getConversationsVideoDetails(conferenceId)",
    "parameters": [
      {
        "name": "conferenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VideoConferenceDetails",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conferenceId = \"conferenceId_example\"; // String | conferenceId\n\n// Get video conference details (e.g. the current number of active participants).\napiInstance.getConversationsVideoDetails(conferenceId)\n  .then((data) => {\n    console.log(`getConversationsVideoDetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsVideoDetails\");\n    console.error(err);\n  });"
  },
  "getconversationsvideoparticipantcommunicationwrapup": {
    "operationId": "getconversationsvideoparticipantcommunicationwrapup",
    "functionName": "getConversationsVideoParticipantCommunicationWrapup",
    "signature": "getConversationsVideoParticipantCommunicationWrapup(conversationId, participantId, communicationId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"provisional\": false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n// Get the wrap-up for this conversation communication. \napiInstance.getConversationsVideoParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then((data) => {\n    console.log(`getConversationsVideoParticipantCommunicationWrapup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsVideoParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "getconversationsvideosmeeting": {
    "operationId": "getconversationsvideosmeeting",
    "functionName": "getConversationsVideosMeeting",
    "signature": "getConversationsVideosMeeting(meetingId)",
    "parameters": [
      {
        "name": "meetingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MeetingIdRecord",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet meetingId = \"meetingId_example\"; // String | meetingId\n\n// Gets a record for a given meetingId\napiInstance.getConversationsVideosMeeting(meetingId)\n  .then((data) => {\n    console.log(`getConversationsVideosMeeting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationsVideosMeeting\");\n    console.error(err);\n  });"
  },
  "patchconversationparticipant": {
    "operationId": "patchconversationparticipant",
    "functionName": "patchConversationParticipant",
    "signature": "patchConversationParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Update request\n\n// Update a participant.\napiInstance.patchConversationParticipant(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"patchConversationParticipant returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationParticipant\");\n    console.error(err);\n  });"
  },
  "patchconversationparticipantattributes": {
    "operationId": "patchconversationparticipantattributes",
    "functionName": "patchConversationParticipantAttributes",
    "signature": "patchConversationParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Participant attributes\n\n// Update the attributes on a conversation participant.\napiInstance.patchConversationParticipantAttributes(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"patchConversationParticipantAttributes returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationParticipantAttributes\");\n    console.error(err);\n  });"
  },
  "patchconversationsecureattributes": {
    "operationId": "patchconversationsecureattributes",
    "functionName": "patchConversationSecureattributes",
    "signature": "patchConversationSecureattributes(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet body = {}; // Object | Conversation Secure Attributes\n\n// Update the secure attributes on a conversation.\napiInstance.patchConversationSecureattributes(conversationId, body)\n  .then((data) => {\n    console.log(`patchConversationSecureattributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationSecureattributes\");\n    console.error(err);\n  });"
  },
  "patchconversationsaftercallworkconversationidparticipantcommunication": {
    "operationId": "patchconversationsaftercallworkconversationidparticipantcommunication",
    "functionName": "patchConversationsAftercallworkConversationIdParticipantCommunication",
    "signature": "patchConversationsAftercallworkConversationIdParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AfterCallWorkUpdate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | AfterCallWorkUpdate\n\n// Update after-call work for this conversation communication.\napiInstance.patchConversationsAftercallworkConversationIdParticipantCommunication(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`patchConversationsAftercallworkConversationIdParticipantCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsAftercallworkConversationIdParticipantCommunication\");\n    console.error(err);\n  });"
  },
  "patchconversationscall": {
    "operationId": "patchconversationscall",
    "functionName": "patchConversationsCall",
    "signature": "patchConversationsCall(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Update a conversation by setting its recording state, merging in other conversations to create a conference, or disconnecting all of the participants\napiInstance.patchConversationsCall(conversationId, body)\n  .then((data) => {\n    console.log(`patchConversationsCall success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCall\");\n    console.error(err);\n  });"
  },
  "patchconversationscallparticipant": {
    "operationId": "patchconversationscallparticipant",
    "functionName": "patchConversationsCallParticipant",
    "signature": "patchConversationsCallParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant request\n\n// Update conversation participant\napiInstance.patchConversationsCallParticipant(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"patchConversationsCallParticipant returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallParticipant\");\n    console.error(err);\n  });"
  },
  "patchconversationscallparticipantattributes": {
    "operationId": "patchconversationscallparticipantattributes",
    "functionName": "patchConversationsCallParticipantAttributes",
    "signature": "patchConversationsCallParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ParticipantAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant attributes\n\n// Update the attributes on a conversation participant.\napiInstance.patchConversationsCallParticipantAttributes(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`patchConversationsCallParticipantAttributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallParticipantAttributes\");\n    console.error(err);\n  });"
  },
  "patchconversationscallparticipantcommunication": {
    "operationId": "patchconversationscallparticipantcommunication",
    "functionName": "patchConversationsCallParticipantCommunication",
    "signature": "patchConversationsCallParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n// Update conversation participant's communication by disconnecting it.\napiInstance.patchConversationsCallParticipantCommunication(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`patchConversationsCallParticipantCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallParticipantCommunication\");\n    console.error(err);\n  });"
  },
  "patchconversationscallparticipantconsult": {
    "operationId": "patchconversationscallparticipantconsult",
    "functionName": "patchConversationsCallParticipantConsult",
    "signature": "patchConversationsCallParticipantConsult(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | new speak to\n\n// Change who can speak\napiInstance.patchConversationsCallParticipantConsult(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`patchConversationsCallParticipantConsult success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallParticipantConsult\");\n    console.error(err);\n  });"
  },
  "patchconversationscallback": {
    "operationId": "patchconversationscallback",
    "functionName": "patchConversationsCallback",
    "signature": "patchConversationsCallback(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Update a conversation by disconnecting all of the participants\napiInstance.patchConversationsCallback(conversationId, body)\n  .then((data) => {\n    console.log(`patchConversationsCallback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallback\");\n    console.error(err);\n  });"
  },
  "patchconversationscallbackparticipant": {
    "operationId": "patchconversationscallbackparticipant",
    "functionName": "patchConversationsCallbackParticipant",
    "signature": "patchConversationsCallbackParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant\n\n// Update conversation participant\napiInstance.patchConversationsCallbackParticipant(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"patchConversationsCallbackParticipant returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallbackParticipant\");\n    console.error(err);\n  });"
  },
  "patchconversationscallbackparticipantattributes": {
    "operationId": "patchconversationscallbackparticipantattributes",
    "functionName": "patchConversationsCallbackParticipantAttributes",
    "signature": "patchConversationsCallbackParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ParticipantAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Attributes\n\n// Update the attributes on a conversation participant.\napiInstance.patchConversationsCallbackParticipantAttributes(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`patchConversationsCallbackParticipantAttributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallbackParticipantAttributes\");\n    console.error(err);\n  });"
  },
  "patchconversationscallbackparticipantcommunication": {
    "operationId": "patchconversationscallbackparticipantcommunication",
    "functionName": "patchConversationsCallbackParticipantCommunication",
    "signature": "patchConversationsCallbackParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n// Update conversation participant's communication by disconnecting it.\napiInstance.patchConversationsCallbackParticipantCommunication(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`patchConversationsCallbackParticipantCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallbackParticipantCommunication\");\n    console.error(err);\n  });"
  },
  "patchconversationscallbacks": {
    "operationId": "patchconversationscallbacks",
    "functionName": "patchConversationsCallbacks",
    "signature": "patchConversationsCallbacks(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PatchCallbackResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | PatchCallbackRequest\n\n// Update a scheduled callback\napiInstance.patchConversationsCallbacks(body)\n  .then((data) => {\n    console.log(`patchConversationsCallbacks success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCallbacks\");\n    console.error(err);\n  });"
  },
  "patchconversationschat": {
    "operationId": "patchconversationschat",
    "functionName": "patchConversationsChat",
    "signature": "patchConversationsChat(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Update a conversation by disconnecting all of the participants\napiInstance.patchConversationsChat(conversationId, body)\n  .then((data) => {\n    console.log(`patchConversationsChat success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsChat\");\n    console.error(err);\n  });"
  },
  "patchconversationschatparticipant": {
    "operationId": "patchconversationschatparticipant",
    "functionName": "patchConversationsChatParticipant",
    "signature": "patchConversationsChatParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Update request\n\n// Update conversation participant\napiInstance.patchConversationsChatParticipant(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"patchConversationsChatParticipant returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsChatParticipant\");\n    console.error(err);\n  });"
  },
  "patchconversationschatparticipantattributes": {
    "operationId": "patchconversationschatparticipantattributes",
    "functionName": "patchConversationsChatParticipantAttributes",
    "signature": "patchConversationsChatParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ParticipantAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant attributes\n\n// Update the attributes on a conversation participant.\napiInstance.patchConversationsChatParticipantAttributes(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`patchConversationsChatParticipantAttributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsChatParticipantAttributes\");\n    console.error(err);\n  });"
  },
  "patchconversationschatparticipantcommunication": {
    "operationId": "patchconversationschatparticipantcommunication",
    "functionName": "patchConversationsChatParticipantCommunication",
    "signature": "patchConversationsChatParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n// Update conversation participant's communication by disconnecting it.\napiInstance.patchConversationsChatParticipantCommunication(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`patchConversationsChatParticipantCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsChatParticipantCommunication\");\n    console.error(err);\n  });"
  },
  "patchconversationscobrowsesession": {
    "operationId": "patchconversationscobrowsesession",
    "functionName": "patchConversationsCobrowsesession",
    "signature": "patchConversationsCobrowsesession(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Update a conversation by disconnecting all of the participants\napiInstance.patchConversationsCobrowsesession(conversationId, body)\n  .then((data) => {\n    console.log(`patchConversationsCobrowsesession success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCobrowsesession\");\n    console.error(err);\n  });"
  },
  "patchconversationscobrowsesessionparticipant": {
    "operationId": "patchconversationscobrowsesessionparticipant",
    "functionName": "patchConversationsCobrowsesessionParticipant",
    "signature": "patchConversationsCobrowsesessionParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update conversation participant\napiInstance.patchConversationsCobrowsesessionParticipant(conversationId, participantId, opts)\n  .then(() => {\n    console.log(\"patchConversationsCobrowsesessionParticipant returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCobrowsesessionParticipant\");\n    console.error(err);\n  });"
  },
  "patchconversationscobrowsesessionparticipantattributes": {
    "operationId": "patchconversationscobrowsesessionparticipantattributes",
    "functionName": "patchConversationsCobrowsesessionParticipantAttributes",
    "signature": "patchConversationsCobrowsesessionParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ParticipantAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update the attributes on a conversation participant.\napiInstance.patchConversationsCobrowsesessionParticipantAttributes(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`patchConversationsCobrowsesessionParticipantAttributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCobrowsesessionParticipantAttributes\");\n    console.error(err);\n  });"
  },
  "patchconversationscobrowsesessionparticipantcommunication": {
    "operationId": "patchconversationscobrowsesessionparticipantcommunication",
    "functionName": "patchConversationsCobrowsesessionParticipantCommunication",
    "signature": "patchConversationsCobrowsesessionParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n// Update conversation participant's communication by disconnecting it.\napiInstance.patchConversationsCobrowsesessionParticipantCommunication(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`patchConversationsCobrowsesessionParticipantCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsCobrowsesessionParticipantCommunication\");\n    console.error(err);\n  });"
  },
  "patchconversationsemail": {
    "operationId": "patchconversationsemail",
    "functionName": "patchConversationsEmail",
    "signature": "patchConversationsEmail(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Update a conversation by disconnecting all of the participants\napiInstance.patchConversationsEmail(conversationId, body)\n  .then((data) => {\n    console.log(`patchConversationsEmail success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsEmail\");\n    console.error(err);\n  });"
  },
  "patchconversationsemailmessagesdraft": {
    "operationId": "patchconversationsemailmessagesdraft",
    "functionName": "patchConversationsEmailMessagesDraft",
    "signature": "patchConversationsEmailMessagesDraft(conversationId, autoFill, discard, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "autoFill",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "discard",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "EmailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  \"autoFill\": true, // Boolean | autoFill\n  \"discard\": true, // Boolean | discard\n  \"body\": {} // Object | Draft Manipulation Request\n};\n\n// Reset conversation draft to its initial state and/or auto-fill draft content\napiInstance.patchConversationsEmailMessagesDraft(conversationId, opts)\n  .then((data) => {\n    console.log(`patchConversationsEmailMessagesDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsEmailMessagesDraft\");\n    console.error(err);\n  });"
  },
  "patchconversationsemailparticipant": {
    "operationId": "patchconversationsemailparticipant",
    "functionName": "patchConversationsEmailParticipant",
    "signature": "patchConversationsEmailParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Update request\n\n// Update conversation participant\napiInstance.patchConversationsEmailParticipant(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"patchConversationsEmailParticipant returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsEmailParticipant\");\n    console.error(err);\n  });"
  },
  "patchconversationsemailparticipantattributes": {
    "operationId": "patchconversationsemailparticipantattributes",
    "functionName": "patchConversationsEmailParticipantAttributes",
    "signature": "patchConversationsEmailParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ParticipantAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant attributes\n\n// Update the attributes on a conversation participant.\napiInstance.patchConversationsEmailParticipantAttributes(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`patchConversationsEmailParticipantAttributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsEmailParticipantAttributes\");\n    console.error(err);\n  });"
  },
  "patchconversationsemailparticipantcommunication": {
    "operationId": "patchconversationsemailparticipantcommunication",
    "functionName": "patchConversationsEmailParticipantCommunication",
    "signature": "patchConversationsEmailParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n// Update conversation participant's communication by disconnecting it.\napiInstance.patchConversationsEmailParticipantCommunication(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`patchConversationsEmailParticipantCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsEmailParticipantCommunication\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessage": {
    "operationId": "patchconversationsmessage",
    "functionName": "patchConversationsMessage",
    "signature": "patchConversationsMessage(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Update a conversation by disconnecting all of the participants\napiInstance.patchConversationsMessage(conversationId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessage\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessageparticipant": {
    "operationId": "patchconversationsmessageparticipant",
    "functionName": "patchConversationsMessageParticipant",
    "signature": "patchConversationsMessageParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update conversation participant\napiInstance.patchConversationsMessageParticipant(conversationId, participantId, opts)\n  .then(() => {\n    console.log(\"patchConversationsMessageParticipant returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessageParticipant\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessageparticipantattributes": {
    "operationId": "patchconversationsmessageparticipantattributes",
    "functionName": "patchConversationsMessageParticipantAttributes",
    "signature": "patchConversationsMessageParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ParticipantAttributes",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update the attributes on a conversation participant.\napiInstance.patchConversationsMessageParticipantAttributes(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`patchConversationsMessageParticipantAttributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessageParticipantAttributes\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessageparticipantcommunication": {
    "operationId": "patchconversationsmessageparticipantcommunication",
    "functionName": "patchConversationsMessageParticipantCommunication",
    "signature": "patchConversationsMessageParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n// Update conversation participant's communication by disconnecting it.\napiInstance.patchConversationsMessageParticipantCommunication(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessageParticipantCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessageParticipantCommunication\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "patchconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FacebookIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | FacebookIntegrationUpdateRequest\n\n// Update Facebook messaging integration\napiInstance.patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessagingIntegrationsFacebookIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessagingIntegrationsFacebookIntegrationId\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessagingintegrationsinstagramintegrationid": {
    "operationId": "patchconversationsmessagingintegrationsinstagramintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsInstagramIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsInstagramIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InstagramIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | InstagramIntegrationUpdateRequest\n\n// Update Instagram messaging integration\napiInstance.patchConversationsMessagingIntegrationsInstagramIntegrationId(integrationId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessagingIntegrationsInstagramIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessagingIntegrationsInstagramIntegrationId\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "patchconversationsmessagingintegrationsopenintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsOpenIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | OpenIntegrationUpdateRequest\n\n// Update an Open messaging integration\napiInstance.patchConversationsMessagingIntegrationsOpenIntegrationId(integrationId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessagingIntegrationsOpenIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessagingIntegrationsOpenIntegrationId\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "patchconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TwitterIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | TwitterIntegrationRequest\n\n// Update Twitter messaging integration\napiInstance.patchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessagingIntegrationsTwitterIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessagingIntegrationsTwitterIntegrationId\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "patchconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | WhatsAppIntegrationUpdateRequest\n\n// Update or activate a WhatsApp messaging integration\napiInstance.patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessagingIntegrationsWhatsappIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessagingIntegrationsWhatsappIntegrationId\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessagingsetting": {
    "operationId": "patchconversationsmessagingsetting",
    "functionName": "patchConversationsMessagingSetting",
    "signature": "patchConversationsMessagingSetting(messageSettingId, body)",
    "parameters": [
      {
        "name": "messageSettingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet messageSettingId = \"messageSettingId_example\"; // String | Message Setting ID\nlet body = {}; // Object | MessagingSetting\n\n// Update a messaging setting\napiInstance.patchConversationsMessagingSetting(messageSettingId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessagingSetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessagingSetting\");\n    console.error(err);\n  });"
  },
  "patchconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "patchconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "patchConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "patchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\nlet body = {}; // Object | SupportedContent\n\n// Update a supported content profile\napiInstance.patchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, body)\n  .then((data) => {\n    console.log(`patchConversationsMessagingSupportedcontentSupportedContentId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsMessagingSupportedcontentSupportedContentId\");\n    console.error(err);\n  });"
  },
  "patchconversationssettings": {
    "operationId": "patchconversationssettings",
    "functionName": "patchConversationsSettings",
    "signature": "patchConversationsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Settings\n\n// Update Settings\napiInstance.patchConversationsSettings(body)\n  .then(() => {\n    console.log(\"patchConversationsSettings returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchConversationsSettings\");\n    console.error(err);\n  });"
  },
  "postconversationassign": {
    "operationId": "postconversationassign",
    "functionName": "postConversationAssign",
    "signature": "postConversationAssign(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet body = {}; // Object | Targeted user\n\n// Attempts to manually assign a specified conversation to a specified user.  Ignores bullseye ring, PAR score, skills, and languages.\napiInstance.postConversationAssign(conversationId, body)\n  .then((data) => {\n    console.log(`postConversationAssign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationAssign\");\n    console.error(err);\n  });"
  },
  "postconversationbarge": {
    "operationId": "postconversationbarge",
    "functionName": "postConversationBarge",
    "signature": "postConversationBarge(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\n\n// Barge a conversation creating a barged in conference of connected participants.\napiInstance.postConversationBarge(conversationId)\n  .then(() => {\n    console.log(\"postConversationBarge returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationBarge\");\n    console.error(err);\n  });"
  },
  "postconversationcobrowse": {
    "operationId": "postconversationcobrowse",
    "functionName": "postConversationCobrowse",
    "signature": "postConversationCobrowse(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CobrowseWebMessagingSession",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\n\n// Creates a cobrowse session. Requires conversation:cobrowse:add (for web messaging) or conversation:cobrowsevoice:add permission.\napiInstance.postConversationCobrowse(conversationId)\n  .then((data) => {\n    console.log(`postConversationCobrowse success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationCobrowse\");\n    console.error(err);\n  });"
  },
  "postconversationdisconnect": {
    "operationId": "postconversationdisconnect",
    "functionName": "postConversationDisconnect",
    "signature": "postConversationDisconnect(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\n\n// Performs a full conversation teardown. Issues disconnect requests for any connected media. Applies a system wrap-up code to any participants that are pending wrap-up. This is not intended to be the normal way of ending interactions but is available in the event of problems with the application to allow a resynchronization of state across all components. It is recommended that users submit a support case if they are relying on this endpoint systematically as there is likely something that needs investigation.\napiInstance.postConversationDisconnect(conversationId)\n  .then((data) => {\n    console.log(`postConversationDisconnect success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationDisconnect\");\n    console.error(err);\n  });"
  },
  "postconversationparticipantcallbacks": {
    "operationId": "postconversationparticipantcallbacks",
    "functionName": "postConversationParticipantCallbacks",
    "signature": "postConversationParticipantCallbacks(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a new callback for the specified participant on the conversation.\napiInstance.postConversationParticipantCallbacks(conversationId, participantId, opts)\n  .then(() => {\n    console.log(\"postConversationParticipantCallbacks returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationParticipantCallbacks\");\n    console.error(err);\n  });"
  },
  "postconversationparticipantdigits": {
    "operationId": "postconversationparticipantdigits",
    "functionName": "postConversationParticipantDigits",
    "signature": "postConversationParticipantDigits(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  \"body\": {} // Object | Digits\n};\n\n// Sends DTMF to the participant\napiInstance.postConversationParticipantDigits(conversationId, participantId, opts)\n  .then(() => {\n    console.log(\"postConversationParticipantDigits returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationParticipantDigits\");\n    console.error(err);\n  });"
  },
  "postconversationparticipantreplace": {
    "operationId": "postconversationparticipantreplace",
    "functionName": "postConversationParticipantReplace",
    "signature": "postConversationParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified user and/or address\napiInstance.postConversationParticipantReplace(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationParticipantReplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationParticipantReplace\");\n    console.error(err);\n  });"
  },
  "postconversationparticipantreplaceagent": {
    "operationId": "postconversationparticipantreplaceagent",
    "functionName": "postConversationParticipantReplaceAgent",
    "signature": "postConversationParticipantReplaceAgent(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified agent\napiInstance.postConversationParticipantReplaceAgent(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationParticipantReplaceAgent returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationParticipantReplaceAgent\");\n    console.error(err);\n  });"
  },
  "postconversationparticipantreplaceexternal": {
    "operationId": "postconversationparticipantreplaceexternal",
    "functionName": "postConversationParticipantReplaceExternal",
    "signature": "postConversationParticipantReplaceExternal(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the an external contact\napiInstance.postConversationParticipantReplaceExternal(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationParticipantReplaceExternal returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationParticipantReplaceExternal\");\n    console.error(err);\n  });"
  },
  "postconversationparticipantreplacequeue": {
    "operationId": "postconversationparticipantreplacequeue",
    "functionName": "postConversationParticipantReplaceQueue",
    "signature": "postConversationParticipantReplaceQueue(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified queue\napiInstance.postConversationParticipantReplaceQueue(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationParticipantReplaceQueue returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationParticipantReplaceQueue\");\n    console.error(err);\n  });"
  },
  "postconversationparticipantsecureivrsessions": {
    "operationId": "postconversationparticipantsecureivrsessions",
    "functionName": "postConversationParticipantSecureivrsessions",
    "signature": "postConversationParticipantSecureivrsessions(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "SecureSession",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create secure IVR session. Only a participant in the conversation can invoke a secure IVR.\napiInstance.postConversationParticipantSecureivrsessions(conversationId, participantId, opts)\n  .then((data) => {\n    console.log(`postConversationParticipantSecureivrsessions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationParticipantSecureivrsessions\");\n    console.error(err);\n  });"
  },
  "postconversationscall": {
    "operationId": "postconversationscall",
    "functionName": "postConversationsCall",
    "signature": "postConversationsCall(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Place a new call as part of a callback conversation.\napiInstance.postConversationsCall(conversationId, body)\n  .then((data) => {\n    console.log(`postConversationsCall success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCall\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantbarge": {
    "operationId": "postconversationscallparticipantbarge",
    "functionName": "postConversationsCallParticipantBarge",
    "signature": "postConversationsCallParticipantBarge(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Barge a given participant's call creating a barged in conference of connected participants.\napiInstance.postConversationsCallParticipantBarge(conversationId, participantId)\n  .then(() => {\n    console.log(\"postConversationsCallParticipantBarge returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantBarge\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantcoach": {
    "operationId": "postconversationscallparticipantcoach",
    "functionName": "postConversationsCallParticipantCoach",
    "signature": "postConversationsCallParticipantCoach(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Listen in on the conversation from the point of view of a given participant while speaking to just the given participant.\napiInstance.postConversationsCallParticipantCoach(conversationId, participantId)\n  .then(() => {\n    console.log(\"postConversationsCallParticipantCoach returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantCoach\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantcommunicationwrapup": {
    "operationId": "postconversationscallparticipantcommunicationwrapup",
    "functionName": "postConversationsCallParticipantCommunicationWrapup",
    "signature": "postConversationsCallParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsCallParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsCallParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantconsult": {
    "operationId": "postconversationscallparticipantconsult",
    "functionName": "postConversationsCallParticipantConsult",
    "signature": "postConversationsCallParticipantConsult(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Destination address and initial speak to\n\n// Initiate and update consult transfer\napiInstance.postConversationsCallParticipantConsult(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`postConversationsCallParticipantConsult success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantConsult\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantconsultagent": {
    "operationId": "postconversationscallparticipantconsultagent",
    "functionName": "postConversationsCallParticipantConsultAgent",
    "signature": "postConversationsCallParticipantConsultAgent(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Destination agent and initial speak to\n\n// Initiate a consult transfer to an agent\napiInstance.postConversationsCallParticipantConsultAgent(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`postConversationsCallParticipantConsultAgent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantConsultAgent\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantconsultexternal": {
    "operationId": "postconversationscallparticipantconsultexternal",
    "functionName": "postConversationsCallParticipantConsultExternal",
    "signature": "postConversationsCallParticipantConsultExternal(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Destination address and initial speak to\n\n// Initiate a consult transfer to an external contact\napiInstance.postConversationsCallParticipantConsultExternal(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`postConversationsCallParticipantConsultExternal success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantConsultExternal\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantconsultqueue": {
    "operationId": "postconversationscallparticipantconsultqueue",
    "functionName": "postConversationsCallParticipantConsultQueue",
    "signature": "postConversationsCallParticipantConsultQueue(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Destination queue and initial speak to\n\n// Initiate a consult transfer to a queue\napiInstance.postConversationsCallParticipantConsultQueue(conversationId, participantId, body)\n  .then((data) => {\n    console.log(`postConversationsCallParticipantConsultQueue success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantConsultQueue\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantmonitor": {
    "operationId": "postconversationscallparticipantmonitor",
    "functionName": "postConversationsCallParticipantMonitor",
    "signature": "postConversationsCallParticipantMonitor(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Listen in on the conversation from the point of view of a given participant.\napiInstance.postConversationsCallParticipantMonitor(conversationId, participantId)\n  .then(() => {\n    console.log(\"postConversationsCallParticipantMonitor returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantMonitor\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipantreplace": {
    "operationId": "postconversationscallparticipantreplace",
    "functionName": "postConversationsCallParticipantReplace",
    "signature": "postConversationsCallParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified user and/or address\napiInstance.postConversationsCallParticipantReplace(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationsCallParticipantReplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipantReplace\");\n    console.error(err);\n  });"
  },
  "postconversationscallparticipants": {
    "operationId": "postconversationscallparticipants",
    "functionName": "postConversationsCallParticipants",
    "signature": "postConversationsCallParticipants(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n// Add participants to a conversation\napiInstance.postConversationsCallParticipants(conversationId, body)\n  .then((data) => {\n    console.log(`postConversationsCallParticipants success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallParticipants\");\n    console.error(err);\n  });"
  },
  "postconversationscallbackparticipantcommunicationwrapup": {
    "operationId": "postconversationscallbackparticipantcommunicationwrapup",
    "functionName": "postConversationsCallbackParticipantCommunicationWrapup",
    "signature": "postConversationsCallbackParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsCallbackParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsCallbackParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallbackParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationscallbackparticipantreplace": {
    "operationId": "postconversationscallbackparticipantreplace",
    "functionName": "postConversationsCallbackParticipantReplace",
    "signature": "postConversationsCallbackParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified user and/or address\napiInstance.postConversationsCallbackParticipantReplace(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationsCallbackParticipantReplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallbackParticipantReplace\");\n    console.error(err);\n  });"
  },
  "postconversationscallbacks": {
    "operationId": "postconversationscallbacks",
    "functionName": "postConversationsCallbacks",
    "signature": "postConversationsCallbacks(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateCallbackResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Callback\n\n// Create a Callback\napiInstance.postConversationsCallbacks(body)\n  .then((data) => {\n    console.log(`postConversationsCallbacks success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallbacks\");\n    console.error(err);\n  });"
  },
  "postconversationscallbacksbulkdisconnect": {
    "operationId": "postconversationscallbacksbulkdisconnect",
    "functionName": "postConversationsCallbacksBulkDisconnect",
    "signature": "postConversationsCallbacksBulkDisconnect(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | BulkCallbackDisconnectRequest\n\n// Disconnect multiple scheduled callbacks\napiInstance.postConversationsCallbacksBulkDisconnect(body)\n  .then(() => {\n    console.log(\"postConversationsCallbacksBulkDisconnect returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallbacksBulkDisconnect\");\n    console.error(err);\n  });"
  },
  "postconversationscallbacksbulkupdate": {
    "operationId": "postconversationscallbacksbulkupdate",
    "functionName": "postConversationsCallbacksBulkUpdate",
    "signature": "postConversationsCallbacksBulkUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkCallbackPatchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | BulkCallbackPatchRequest\n\n// Update multiple scheduled callbacks\napiInstance.postConversationsCallbacksBulkUpdate(body)\n  .then((data) => {\n    console.log(`postConversationsCallbacksBulkUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCallbacksBulkUpdate\");\n    console.error(err);\n  });"
  },
  "postconversationscalls": {
    "operationId": "postconversationscalls",
    "functionName": "postConversationsCalls",
    "signature": "postConversationsCalls(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateCallResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Call request\n\n// Create a call conversation\napiInstance.postConversationsCalls(body)\n  .then((data) => {\n    console.log(`postConversationsCalls success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCalls\");\n    console.error(err);\n  });"
  },
  "postconversationschatcommunicationmessages": {
    "operationId": "postconversationschatcommunicationmessages",
    "functionName": "postConversationsChatCommunicationMessages",
    "signature": "postConversationsChatCommunicationMessages(conversationId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Message\n\n// Send a message on behalf of a communication in a chat conversation.\napiInstance.postConversationsChatCommunicationMessages(conversationId, communicationId, body)\n  .then((data) => {\n    console.log(`postConversationsChatCommunicationMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsChatCommunicationMessages\");\n    console.error(err);\n  });"
  },
  "postconversationschatcommunicationtyping": {
    "operationId": "postconversationschatcommunicationtyping",
    "functionName": "postConversationsChatCommunicationTyping",
    "signature": "postConversationsChatCommunicationTyping(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatTyping",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\n\n// Send a typing-indicator on behalf of a communication in a chat conversation.\napiInstance.postConversationsChatCommunicationTyping(conversationId, communicationId)\n  .then((data) => {\n    console.log(`postConversationsChatCommunicationTyping success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsChatCommunicationTyping\");\n    console.error(err);\n  });"
  },
  "postconversationschatparticipantcommunicationwrapup": {
    "operationId": "postconversationschatparticipantcommunicationwrapup",
    "functionName": "postConversationsChatParticipantCommunicationWrapup",
    "signature": "postConversationsChatParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsChatParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsChatParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsChatParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationschatparticipantreplace": {
    "operationId": "postconversationschatparticipantreplace",
    "functionName": "postConversationsChatParticipantReplace",
    "signature": "postConversationsChatParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified user and/or address\napiInstance.postConversationsChatParticipantReplace(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationsChatParticipantReplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsChatParticipantReplace\");\n    console.error(err);\n  });"
  },
  "postconversationschats": {
    "operationId": "postconversationschats",
    "functionName": "postConversationsChats",
    "signature": "postConversationsChats(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Create web chat request\n\n// Create a web chat conversation\napiInstance.postConversationsChats(body)\n  .then((data) => {\n    console.log(`postConversationsChats success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsChats\");\n    console.error(err);\n  });"
  },
  "postconversationscobrowsesessionparticipantcommunicationwrapup": {
    "operationId": "postconversationscobrowsesessionparticipantcommunicationwrapup",
    "functionName": "postConversationsCobrowsesessionParticipantCommunicationWrapup",
    "signature": "postConversationsCobrowsesessionParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsCobrowsesessionParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsCobrowsesessionParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCobrowsesessionParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationscobrowsesessionparticipantreplace": {
    "operationId": "postconversationscobrowsesessionparticipantreplace",
    "functionName": "postConversationsCobrowsesessionParticipantReplace",
    "signature": "postConversationsCobrowsesessionParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Replace this participant with the specified user and/or address\napiInstance.postConversationsCobrowsesessionParticipantReplace(conversationId, participantId, opts)\n  .then(() => {\n    console.log(\"postConversationsCobrowsesessionParticipantReplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsCobrowsesessionParticipantReplace\");\n    console.error(err);\n  });"
  },
  "postconversationsemailinboundmessages": {
    "operationId": "postconversationsemailinboundmessages",
    "functionName": "postConversationsEmailInboundmessages",
    "signature": "postConversationsEmailInboundmessages(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Send external email reply\n\n// Send an email to an external conversation. An external conversation is one where the provider is not PureCloud based. This endpoint allows the sender of the external email to reply or send a new message to the existing conversation. The new message will be treated as part of the existing conversation and chained to it.\napiInstance.postConversationsEmailInboundmessages(conversationId, body)\n  .then((data) => {\n    console.log(`postConversationsEmailInboundmessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsEmailInboundmessages\");\n    console.error(err);\n  });"
  },
  "postconversationsemailmessages": {
    "operationId": "postconversationsemailmessages",
    "functionName": "postConversationsEmailMessages",
    "signature": "postConversationsEmailMessages(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailMessageReply",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Reply\n\n// Send an email reply\napiInstance.postConversationsEmailMessages(conversationId, body)\n  .then((data) => {\n    console.log(`postConversationsEmailMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsEmailMessages\");\n    console.error(err);\n  });"
  },
  "postconversationsemailmessagesdraftattachmentscopy": {
    "operationId": "postconversationsemailmessagesdraftattachmentscopy",
    "functionName": "postConversationsEmailMessagesDraftAttachmentsCopy",
    "signature": "postConversationsEmailMessagesDraftAttachmentsCopy(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Copy Attachment Request\n\n// Copy attachments from an email message to the current draft.\napiInstance.postConversationsEmailMessagesDraftAttachmentsCopy(conversationId, body)\n  .then((data) => {\n    console.log(`postConversationsEmailMessagesDraftAttachmentsCopy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsEmailMessagesDraftAttachmentsCopy\");\n    console.error(err);\n  });"
  },
  "postconversationsemailparticipantcommunicationwrapup": {
    "operationId": "postconversationsemailparticipantcommunicationwrapup",
    "functionName": "postConversationsEmailParticipantCommunicationWrapup",
    "signature": "postConversationsEmailParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsEmailParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsEmailParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsEmailParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationsemailparticipantreplace": {
    "operationId": "postconversationsemailparticipantreplace",
    "functionName": "postConversationsEmailParticipantReplace",
    "signature": "postConversationsEmailParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified user and/or address\napiInstance.postConversationsEmailParticipantReplace(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationsEmailParticipantReplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsEmailParticipantReplace\");\n    console.error(err);\n  });"
  },
  "postconversationsemails": {
    "operationId": "postconversationsemails",
    "functionName": "postConversationsEmails",
    "signature": "postConversationsEmails(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Create email request\n\n// Create an email conversation\napiInstance.postConversationsEmails(body)\n  .then((data) => {\n    console.log(`postConversationsEmails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsEmails\");\n    console.error(err);\n  });"
  },
  "postconversationsemailsagentless": {
    "operationId": "postconversationsemailsagentless",
    "functionName": "postConversationsEmailsAgentless",
    "signature": "postConversationsEmailsAgentless(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AgentlessEmailSendResponseDto",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Create agentless email request\n\n// Create an email conversation, per API\napiInstance.postConversationsEmailsAgentless(body)\n  .then((data) => {\n    console.log(`postConversationsEmailsAgentless success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsEmailsAgentless\");\n    console.error(err);\n  });"
  },
  "postconversationsfaxes": {
    "operationId": "postconversationsfaxes",
    "functionName": "postConversationsFaxes",
    "signature": "postConversationsFaxes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FaxSendResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Fax\n\n// Create Fax Conversation\napiInstance.postConversationsFaxes(body)\n  .then((data) => {\n    console.log(`postConversationsFaxes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsFaxes\");\n    console.error(err);\n  });"
  },
  "postconversationskeyconfigurations": {
    "operationId": "postconversationskeyconfigurations",
    "functionName": "postConversationsKeyconfigurations",
    "signature": "postConversationsKeyconfigurations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConversationEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Encryption Configuration\n\n// Setup configurations for encryption key creation\napiInstance.postConversationsKeyconfigurations(body)\n  .then((data) => {\n    console.log(`postConversationsKeyconfigurations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsKeyconfigurations\");\n    console.error(err);\n  });"
  },
  "postconversationskeyconfigurationsvalidate": {
    "operationId": "postconversationskeyconfigurationsvalidate",
    "functionName": "postConversationsKeyconfigurationsValidate",
    "signature": "postConversationsKeyconfigurationsValidate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConversationEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Encryption Configuration\n\n// Validate encryption key configurations without saving it\napiInstance.postConversationsKeyconfigurationsValidate(body)\n  .then((data) => {\n    console.log(`postConversationsKeyconfigurationsValidate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsKeyconfigurationsValidate\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagecommunicationmessages": {
    "operationId": "postconversationsmessagecommunicationmessages",
    "functionName": "postConversationsMessageCommunicationMessages",
    "signature": "postConversationsMessageCommunicationMessages(conversationId, communicationId, body, useNormalizedMessage)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "useNormalizedMessage",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "MessageData",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Message\nlet opts = { \n  \"useNormalizedMessage\": false // Boolean | If true, response removes deprecated fields (textBody, media, stickers)\n};\n\n// Send message\napiInstance.postConversationsMessageCommunicationMessages(conversationId, communicationId, body, opts)\n  .then((data) => {\n    console.log(`postConversationsMessageCommunicationMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageCommunicationMessages\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagecommunicationmessagesmedia": {
    "operationId": "postconversationsmessagecommunicationmessagesmedia",
    "functionName": "postConversationsMessageCommunicationMessagesMedia",
    "signature": "postConversationsMessageCommunicationMessagesMedia(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageMediaData",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\n\n// Create media\napiInstance.postConversationsMessageCommunicationMessagesMedia(conversationId, communicationId)\n  .then((data) => {\n    console.log(`postConversationsMessageCommunicationMessagesMedia success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageCommunicationMessagesMedia\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagecommunicationtyping": {
    "operationId": "postconversationsmessagecommunicationtyping",
    "functionName": "postConversationsMessageCommunicationTyping",
    "signature": "postConversationsMessageCommunicationTyping(conversationId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | MessageTypingEvent\n\n// Send message typing event\napiInstance.postConversationsMessageCommunicationTyping(conversationId, communicationId, body)\n  .then(() => {\n    console.log(\"postConversationsMessageCommunicationTyping returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageCommunicationTyping\");\n    console.error(err);\n  });"
  },
  "postconversationsmessageinboundopenevent": {
    "operationId": "postconversationsmessageinboundopenevent",
    "functionName": "postConversationsMessageInboundOpenEvent",
    "signature": "postConversationsMessageInboundOpenEvent(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenEventNormalizedMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | integrationId\nlet body = {}; // Object | NormalizedMessage\n\n// Send an inbound Open Event Message\napiInstance.postConversationsMessageInboundOpenEvent(integrationId, body)\n  .then((data) => {\n    console.log(`postConversationsMessageInboundOpenEvent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageInboundOpenEvent\");\n    console.error(err);\n  });"
  },
  "postconversationsmessageinboundopenmessage": {
    "operationId": "postconversationsmessageinboundopenmessage",
    "functionName": "postConversationsMessageInboundOpenMessage",
    "signature": "postConversationsMessageInboundOpenMessage(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenMessageNormalizedMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | integrationId\nlet body = {}; // Object | NormalizedMessage\n\n// Send inbound Open Message\napiInstance.postConversationsMessageInboundOpenMessage(integrationId, body)\n  .then((data) => {\n    console.log(`postConversationsMessageInboundOpenMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageInboundOpenMessage\");\n    console.error(err);\n  });"
  },
  "postconversationsmessageinboundopenreceipt": {
    "operationId": "postconversationsmessageinboundopenreceipt",
    "functionName": "postConversationsMessageInboundOpenReceipt",
    "signature": "postConversationsMessageInboundOpenReceipt(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenReceiptNormalizedMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | integrationId\nlet body = {}; // Object | NormalizedMessage\n\n// Send an inbound Open Receipt Message\napiInstance.postConversationsMessageInboundOpenReceipt(integrationId, body)\n  .then((data) => {\n    console.log(`postConversationsMessageInboundOpenReceipt success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageInboundOpenReceipt\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagemessagesbulk": {
    "operationId": "postconversationsmessagemessagesbulk",
    "functionName": "postConversationsMessageMessagesBulk",
    "signature": "postConversationsMessageMessagesBulk(conversationId, useNormalizedMessage, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "useNormalizedMessage",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TextMessageListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | \nlet opts = { \n  \"useNormalizedMessage\": false, // Boolean | If true, response removes deprecated fields (textBody, media, stickers)\n  \"body\": [\"body_example\"] // [String] | messageIds\n};\n\n// Get messages in batch\napiInstance.postConversationsMessageMessagesBulk(conversationId, opts)\n  .then((data) => {\n    console.log(`postConversationsMessageMessagesBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageMessagesBulk\");\n    console.error(err);\n  });"
  },
  "postconversationsmessageparticipantcommunicationwrapup": {
    "operationId": "postconversationsmessageparticipantcommunicationwrapup",
    "functionName": "postConversationsMessageParticipantCommunicationWrapup",
    "signature": "postConversationsMessageParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsMessageParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsMessageParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationsmessageparticipantmonitor": {
    "operationId": "postconversationsmessageparticipantmonitor",
    "functionName": "postConversationsMessageParticipantMonitor",
    "signature": "postConversationsMessageParticipantMonitor(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n// Listen in on the conversation from the point of view of a given participant.\napiInstance.postConversationsMessageParticipantMonitor(conversationId, participantId)\n  .then(() => {\n    console.log(\"postConversationsMessageParticipantMonitor returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageParticipantMonitor\");\n    console.error(err);\n  });"
  },
  "postconversationsmessageparticipantreplace": {
    "operationId": "postconversationsmessageparticipantreplace",
    "functionName": "postConversationsMessageParticipantReplace",
    "signature": "postConversationsMessageParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n// Replace this participant with the specified user and/or address\napiInstance.postConversationsMessageParticipantReplace(conversationId, participantId, body)\n  .then(() => {\n    console.log(\"postConversationsMessageParticipantReplace returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessageParticipantReplace\");\n    console.error(err);\n  });"
  },
  "postconversationsmessages": {
    "operationId": "postconversationsmessages",
    "functionName": "postConversationsMessages",
    "signature": "postConversationsMessages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessageConversation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Create outbound messaging conversation\n\n// Create an outbound messaging conversation.\napiInstance.postConversationsMessages(body)\n  .then((data) => {\n    console.log(`postConversationsMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessages\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagesagentless": {
    "operationId": "postconversationsmessagesagentless",
    "functionName": "postConversationsMessagesAgentless",
    "signature": "postConversationsMessagesAgentless(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SendAgentlessOutboundMessageResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | Create agentless outbound messaging request\n\n// Send an agentless outbound message\napiInstance.postConversationsMessagesAgentless(body)\n  .then((data) => {\n    console.log(`postConversationsMessagesAgentless success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagesAgentless\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagesinboundopen": {
    "operationId": "postconversationsmessagesinboundopen",
    "functionName": "postConversationsMessagesInboundOpen",
    "signature": "postConversationsMessagesInboundOpen(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenNormalizedMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | NormalizedMessage\n\n// Send an inbound Open Message\napiInstance.postConversationsMessagesInboundOpen(body)\n  .then((data) => {\n    console.log(`postConversationsMessagesInboundOpen success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagesInboundOpen\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingintegrationsfacebook": {
    "operationId": "postconversationsmessagingintegrationsfacebook",
    "functionName": "postConversationsMessagingIntegrationsFacebook",
    "signature": "postConversationsMessagingIntegrationsFacebook(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FacebookIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | FacebookIntegrationRequest\n\n// Create a Facebook Integration\napiInstance.postConversationsMessagingIntegrationsFacebook(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingIntegrationsFacebook success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingIntegrationsFacebook\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingintegrationsinstagram": {
    "operationId": "postconversationsmessagingintegrationsinstagram",
    "functionName": "postConversationsMessagingIntegrationsInstagram",
    "signature": "postConversationsMessagingIntegrationsInstagram(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InstagramIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | InstagramIntegrationRequest\n\n// Create Instagram Integration\napiInstance.postConversationsMessagingIntegrationsInstagram(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingIntegrationsInstagram success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingIntegrationsInstagram\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingintegrationsline": {
    "operationId": "postconversationsmessagingintegrationsline",
    "functionName": "postConversationsMessagingIntegrationsLine",
    "signature": "postConversationsMessagingIntegrationsLine(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LineIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | LineIntegrationRequest\n\n// Create a LINE messenger Integration\napiInstance.postConversationsMessagingIntegrationsLine(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingIntegrationsLine success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingIntegrationsLine\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingintegrationsopen": {
    "operationId": "postconversationsmessagingintegrationsopen",
    "functionName": "postConversationsMessagingIntegrationsOpen",
    "signature": "postConversationsMessagingIntegrationsOpen(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | OpenIntegrationRequest\n\n// Create an Open messaging integration\napiInstance.postConversationsMessagingIntegrationsOpen(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingIntegrationsOpen success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingIntegrationsOpen\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingintegrationstwitter": {
    "operationId": "postconversationsmessagingintegrationstwitter",
    "functionName": "postConversationsMessagingIntegrationsTwitter",
    "signature": "postConversationsMessagingIntegrationsTwitter(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TwitterIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | TwitterIntegrationRequest\n\n// Create a Twitter Integration\napiInstance.postConversationsMessagingIntegrationsTwitter(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingIntegrationsTwitter success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingIntegrationsTwitter\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingintegrationswhatsapp": {
    "operationId": "postconversationsmessagingintegrationswhatsapp",
    "functionName": "postConversationsMessagingIntegrationsWhatsapp",
    "signature": "postConversationsMessagingIntegrationsWhatsapp(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | WhatsAppIntegrationRequest\n\n// Create a WhatsApp Integration\napiInstance.postConversationsMessagingIntegrationsWhatsapp(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingIntegrationsWhatsapp success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingIntegrationsWhatsapp\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingsettings": {
    "operationId": "postconversationsmessagingsettings",
    "functionName": "postConversationsMessagingSettings",
    "signature": "postConversationsMessagingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | MessagingSetting\n\n// Create a messaging setting\napiInstance.postConversationsMessagingSettings(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingSettings\");\n    console.error(err);\n  });"
  },
  "postconversationsmessagingsupportedcontent": {
    "operationId": "postconversationsmessagingsupportedcontent",
    "functionName": "postConversationsMessagingSupportedcontent",
    "signature": "postConversationsMessagingSupportedcontent(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | SupportedContent\n\n// Create a Supported Content profile\napiInstance.postConversationsMessagingSupportedcontent(body)\n  .then((data) => {\n    console.log(`postConversationsMessagingSupportedcontent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsMessagingSupportedcontent\");\n    console.error(err);\n  });"
  },
  "postconversationsparticipantsattributessearch": {
    "operationId": "postconversationsparticipantsattributessearch",
    "functionName": "postConversationsParticipantsAttributesSearch",
    "signature": "postConversationsParticipantsAttributesSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "JsonCursorSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet body = {}; // Object | Search request options\n\n// Search conversations\napiInstance.postConversationsParticipantsAttributesSearch(body)\n  .then((data) => {\n    console.log(`postConversationsParticipantsAttributesSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsParticipantsAttributesSearch\");\n    console.error(err);\n  });"
  },
  "postconversationsscreenshareparticipantcommunicationwrapup": {
    "operationId": "postconversationsscreenshareparticipantcommunicationwrapup",
    "functionName": "postConversationsScreenshareParticipantCommunicationWrapup",
    "signature": "postConversationsScreenshareParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsScreenshareParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsScreenshareParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsScreenshareParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationssocialparticipantcommunicationwrapup": {
    "operationId": "postconversationssocialparticipantcommunicationwrapup",
    "functionName": "postConversationsSocialParticipantCommunicationWrapup",
    "signature": "postConversationsSocialParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsSocialParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsSocialParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsSocialParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationsvideoparticipantcommunicationwrapup": {
    "operationId": "postconversationsvideoparticipantcommunicationwrapup",
    "functionName": "postConversationsVideoParticipantCommunicationWrapup",
    "signature": "postConversationsVideoParticipantCommunicationWrapup(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet opts = { \n  \"body\": {} // Object | Wrap-up\n};\n\n// Apply wrap-up for this conversation communication\napiInstance.postConversationsVideoParticipantCommunicationWrapup(conversationId, participantId, communicationId, opts)\n  .then(() => {\n    console.log(\"postConversationsVideoParticipantCommunicationWrapup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsVideoParticipantCommunicationWrapup\");\n    console.error(err);\n  });"
  },
  "postconversationsvideosmeetings": {
    "operationId": "postconversationsvideosmeetings",
    "functionName": "postConversationsVideosMeetings",
    "signature": "postConversationsVideosMeetings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MeetingIdRecord",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | MeetingIdRequest\n\n// Generate a meetingId for a given conferenceId\napiInstance.postConversationsVideosMeetings(body)\n  .then((data) => {\n    console.log(`postConversationsVideosMeetings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationsVideosMeetings\");\n    console.error(err);\n  });"
  },
  "putconversationparticipantflaggedreason": {
    "operationId": "putconversationparticipantflaggedreason",
    "functionName": "putConversationParticipantFlaggedreason",
    "signature": "putConversationParticipantFlaggedreason(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n// Set flagged reason on conversation participant to indicate bad conversation quality.\napiInstance.putConversationParticipantFlaggedreason(conversationId, participantId)\n  .then(() => {\n    console.log(\"putConversationParticipantFlaggedreason returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationParticipantFlaggedreason\");\n    console.error(err);\n  });"
  },
  "putconversationsecureattributes": {
    "operationId": "putconversationsecureattributes",
    "functionName": "putConversationSecureattributes",
    "signature": "putConversationSecureattributes(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet body = {}; // Object | Conversation Secure Attributes\n\n// Set the secure attributes on a conversation.\napiInstance.putConversationSecureattributes(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationSecureattributes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationSecureattributes\");\n    console.error(err);\n  });"
  },
  "putconversationtags": {
    "operationId": "putconversationtags",
    "functionName": "putConversationTags",
    "signature": "putConversationTags(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet body = {}; // Object | Conversation Tags\n\n// Update the tags on a conversation.\napiInstance.putConversationTags(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationTags success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationTags\");\n    console.error(err);\n  });"
  },
  "putconversationscallparticipantcommunicationuuidata": {
    "operationId": "putconversationscallparticipantcommunicationuuidata",
    "functionName": "putConversationsCallParticipantCommunicationUuidata",
    "signature": "putConversationsCallParticipantCommunicationUuidata(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | UUIData Request\n\n// Set uuiData to be sent on future commands.\napiInstance.putConversationsCallParticipantCommunicationUuidata(conversationId, participantId, communicationId, body)\n  .then((data) => {\n    console.log(`putConversationsCallParticipantCommunicationUuidata success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsCallParticipantCommunicationUuidata\");\n    console.error(err);\n  });"
  },
  "putconversationscallrecordingstate": {
    "operationId": "putconversationscallrecordingstate",
    "functionName": "putConversationsCallRecordingstate",
    "signature": "putConversationsCallRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsCallRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsCallRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsCallRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationscallbackrecordingstate": {
    "operationId": "putconversationscallbackrecordingstate",
    "functionName": "putConversationsCallbackRecordingstate",
    "signature": "putConversationsCallbackRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsCallbackRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsCallbackRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsCallbackRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationschatrecordingstate": {
    "operationId": "putconversationschatrecordingstate",
    "functionName": "putConversationsChatRecordingstate",
    "signature": "putConversationsChatRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsChatRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsChatRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsChatRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationscobrowsesessionrecordingstate": {
    "operationId": "putconversationscobrowsesessionrecordingstate",
    "functionName": "putConversationsCobrowsesessionRecordingstate",
    "signature": "putConversationsCobrowsesessionRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsCobrowsesessionRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsCobrowsesessionRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsCobrowsesessionRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationsemailmessagesdraft": {
    "operationId": "putconversationsemailmessagesdraft",
    "functionName": "putConversationsEmailMessagesDraft",
    "signature": "putConversationsEmailMessagesDraft(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Draft\n\n// Update conversation draft reply\napiInstance.putConversationsEmailMessagesDraft(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsEmailMessagesDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsEmailMessagesDraft\");\n    console.error(err);\n  });"
  },
  "putconversationsemailrecordingstate": {
    "operationId": "putconversationsemailrecordingstate",
    "functionName": "putConversationsEmailRecordingstate",
    "signature": "putConversationsEmailRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsEmailRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsEmailRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsEmailRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationskeyconfiguration": {
    "operationId": "putconversationskeyconfiguration",
    "functionName": "putConversationsKeyconfiguration",
    "signature": "putConversationsKeyconfiguration(keyconfigurationsId, body)",
    "parameters": [
      {
        "name": "keyconfigurationsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConversationEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet keyconfigurationsId = \"keyconfigurationsId_example\"; // String | Key Configurations Id\nlet body = {}; // Object | Encryption key configuration metadata\n\n// Update the encryption key configurations\napiInstance.putConversationsKeyconfiguration(keyconfigurationsId, body)\n  .then((data) => {\n    console.log(`putConversationsKeyconfiguration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsKeyconfiguration\");\n    console.error(err);\n  });"
  },
  "putconversationsmessagerecordingstate": {
    "operationId": "putconversationsmessagerecordingstate",
    "functionName": "putConversationsMessageRecordingstate",
    "signature": "putConversationsMessageRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsMessageRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsMessageRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsMessageRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationsmessagingintegrationslineintegrationid": {
    "operationId": "putconversationsmessagingintegrationslineintegrationid",
    "functionName": "putConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "putConversationsMessagingIntegrationsLineIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LineIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | LineIntegrationRequest\n\n// Update a LINE messenger integration\napiInstance.putConversationsMessagingIntegrationsLineIntegrationId(integrationId, body)\n  .then((data) => {\n    console.log(`putConversationsMessagingIntegrationsLineIntegrationId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsMessagingIntegrationsLineIntegrationId\");\n    console.error(err);\n  });"
  },
  "putconversationsmessagingsettingsdefault": {
    "operationId": "putconversationsmessagingsettingsdefault",
    "functionName": "putConversationsMessagingSettingsDefault",
    "signature": "putConversationsMessagingSettingsDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | MessagingSetting\n\n// Set the organization's default setting that may be applied to to integrations without settings\napiInstance.putConversationsMessagingSettingsDefault(body)\n  .then((data) => {\n    console.log(`putConversationsMessagingSettingsDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsMessagingSettingsDefault\");\n    console.error(err);\n  });"
  },
  "putconversationsmessagingsupportedcontentdefault": {
    "operationId": "putconversationsmessagingsupportedcontentdefault",
    "functionName": "putConversationsMessagingSupportedcontentDefault",
    "signature": "putConversationsMessagingSupportedcontentDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | SupportedContent\n\n// Set the organization's default supported content profile that may be assigned to an integration when it is created.\napiInstance.putConversationsMessagingSupportedcontentDefault(body)\n  .then((data) => {\n    console.log(`putConversationsMessagingSupportedcontentDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsMessagingSupportedcontentDefault\");\n    console.error(err);\n  });"
  },
  "putconversationsmessagingthreadingtimeline": {
    "operationId": "putconversationsmessagingthreadingtimeline",
    "functionName": "putConversationsMessagingThreadingtimeline",
    "signature": "putConversationsMessagingThreadingtimeline(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConversationThreadingWindow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet body = {}; // Object | ConversationThreadingWindowRequest\n\n// Update conversation threading window timeline for each messaging type\napiInstance.putConversationsMessagingThreadingtimeline(body)\n  .then((data) => {\n    console.log(`putConversationsMessagingThreadingtimeline success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsMessagingThreadingtimeline\");\n    console.error(err);\n  });"
  },
  "putconversationsscreensharerecordingstate": {
    "operationId": "putconversationsscreensharerecordingstate",
    "functionName": "putConversationsScreenshareRecordingstate",
    "signature": "putConversationsScreenshareRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsScreenshareRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsScreenshareRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsScreenshareRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationssocialrecordingstate": {
    "operationId": "putconversationssocialrecordingstate",
    "functionName": "putConversationsSocialRecordingstate",
    "signature": "putConversationsSocialRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsSocialRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsSocialRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsSocialRecordingstate\");\n    console.error(err);\n  });"
  },
  "putconversationsvideorecordingstate": {
    "operationId": "putconversationsvideorecordingstate",
    "functionName": "putConversationsVideoRecordingstate",
    "signature": "putConversationsVideoRecordingstate(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ConversationsApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | SetRecordingState\n\n// Update a conversation by setting its recording state\napiInstance.putConversationsVideoRecordingstate(conversationId, body)\n  .then((data) => {\n    console.log(`putConversationsVideoRecordingstate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationsVideoRecordingstate\");\n    console.error(err);\n  });"
  },
  "getdataextensionscoretype": {
    "operationId": "getdataextensionscoretype",
    "functionName": "getDataextensionsCoretype",
    "signature": "getDataextensionsCoretype(coretypeName)",
    "parameters": [
      {
        "name": "coretypeName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Coretype",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.DataExtensionsApi();\n\nlet coretypeName = \"coretypeName_example\"; // String | The core type's name\n\n// Get a specific named core type.\napiInstance.getDataextensionsCoretype(coretypeName)\n  .then((data) => {\n    console.log(`getDataextensionsCoretype success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getDataextensionsCoretype\");\n    console.error(err);\n  });"
  },
  "getdataextensionscoretypes": {
    "operationId": "getdataextensionscoretypes",
    "functionName": "getDataextensionsCoretypes",
    "signature": "getDataextensionsCoretypes()",
    "return": "CoretypeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.DataExtensionsApi();\n\n// Get the core types from which all schemas are built.\napiInstance.getDataextensionsCoretypes()\n  .then((data) => {\n    console.log(`getDataextensionsCoretypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getDataextensionsCoretypes\");\n    console.error(err);\n  });"
  },
  "getdataextensionslimits": {
    "operationId": "getdataextensionslimits",
    "functionName": "getDataextensionsLimits",
    "signature": "getDataextensionsLimits()",
    "return": "SchemaQuantityLimits",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.DataExtensionsApi();\n\n// Get quantitative limits on schemas\napiInstance.getDataextensionsLimits()\n  .then((data) => {\n    console.log(`getDataextensionsLimits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getDataextensionsLimits\");\n    console.error(err);\n  });"
  },
  "getdownload": {
    "operationId": "getdownload",
    "functionName": "getDownload",
    "signature": "getDownload(downloadId, contentDisposition, issueRedirect, redirectToAuth)",
    "parameters": [
      {
        "name": "downloadId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contentDisposition",
        "type": "String",
        "required": "false"
      },
      {
        "name": "issueRedirect",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "redirectToAuth",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "UrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.DownloadsApi();\n\nlet downloadId = \"downloadId_example\"; // String | Download ID\nlet opts = { \n  \"contentDisposition\": \"contentDisposition_example\", // String | \n  \"issueRedirect\": true, // Boolean | \n  \"redirectToAuth\": true // Boolean | \n};\n\n// Issues a redirect to a signed secure download URL for specified download\napiInstance.getDownload(downloadId, opts)\n  .then((data) => {\n    console.log(`getDownload success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getDownload\");\n    console.error(err);\n  });"
  },
  "getemailssettings": {
    "operationId": "getemailssettings",
    "functionName": "getEmailsSettings",
    "signature": "getEmailsSettings()",
    "return": "EmailSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SettingsApi();\n\n// Get email Contact Center settings\napiInstance.getEmailsSettings()\n  .then((data) => {\n    console.log(`getEmailsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getEmailsSettings\");\n    console.error(err);\n  });"
  },
  "patchemailssettings": {
    "operationId": "patchemailssettings",
    "functionName": "patchEmailsSettings",
    "signature": "patchEmailsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "EmailSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SettingsApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Patch email Contact Center settings\napiInstance.patchEmailsSettings(opts)\n  .then((data) => {\n    console.log(`patchEmailsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchEmailsSettings\");\n    console.error(err);\n  });"
  },
  "posteventsconversations": {
    "operationId": "posteventsconversations",
    "functionName": "postEventsConversations",
    "signature": "postEventsConversations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BatchEventResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.EventsApi();\n\nlet body = {}; // Object | batchRequest\n\n// Publish Conversation Batch Events\napiInstance.postEventsConversations(body)\n  .then((data) => {\n    console.log(`postEventsConversations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postEventsConversations\");\n    console.error(err);\n  });"
  },
  "posteventsuserspresence": {
    "operationId": "posteventsuserspresence",
    "functionName": "postEventsUsersPresence",
    "signature": "postEventsUsersPresence(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BatchEventResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.EventsApi();\n\nlet body = {}; // Object | batchRequest\n\n// Publish User Presence Status Batch Events\napiInstance.postEventsUsersPresence(body)\n  .then((data) => {\n    console.log(`postEventsUsersPresence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postEventsUsersPresence\");\n    console.error(err);\n  });"
  },
  "posteventsusersroutingstatus": {
    "operationId": "posteventsusersroutingstatus",
    "functionName": "postEventsUsersRoutingstatus",
    "signature": "postEventsUsersRoutingstatus(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BatchEventResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.EventsApi();\n\nlet body = {}; // Object | batchRequest\n\n// Publish Agent Routing Status Batch Events\napiInstance.postEventsUsersRoutingstatus(body)\n  .then((data) => {\n    console.log(`postEventsUsersRoutingstatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postEventsUsersRoutingstatus\");\n    console.error(err);\n  });"
  },
  "deleteexternalcontactscontact": {
    "operationId": "deleteexternalcontactscontact",
    "functionName": "deleteExternalcontactsContact",
    "signature": "deleteExternalcontactsContact(contactId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\n\n// Delete an external contact\napiInstance.deleteExternalcontactsContact(contactId)\n  .then((data) => {\n    console.log(`deleteExternalcontactsContact success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteExternalcontactsContact\");\n    console.error(err);\n  });"
  },
  "deleteexternalcontactscontactnote": {
    "operationId": "deleteexternalcontactscontactnote",
    "functionName": "deleteExternalcontactsContactNote",
    "signature": "deleteExternalcontactsContactNote(contactId, noteId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet noteId = \"noteId_example\"; // String | Note Id\n\n// Delete a note for an external contact\napiInstance.deleteExternalcontactsContactNote(contactId, noteId)\n  .then((data) => {\n    console.log(`deleteExternalcontactsContactNote success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteExternalcontactsContactNote\");\n    console.error(err);\n  });"
  },
  "deleteexternalcontactscontactsschema": {
    "operationId": "deleteexternalcontactscontactsschema",
    "functionName": "deleteExternalcontactsContactsSchema",
    "signature": "deleteExternalcontactsContactsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Delete a schema\napiInstance.deleteExternalcontactsContactsSchema(schemaId)\n  .then(() => {\n    console.log(\"deleteExternalcontactsContactsSchema returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteExternalcontactsContactsSchema\");\n    console.error(err);\n  });"
  },
  "deleteexternalcontactsorganization": {
    "operationId": "deleteexternalcontactsorganization",
    "functionName": "deleteExternalcontactsOrganization",
    "signature": "deleteExternalcontactsOrganization(externalOrganizationId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\n\n// Delete an external organization\napiInstance.deleteExternalcontactsOrganization(externalOrganizationId)\n  .then((data) => {\n    console.log(`deleteExternalcontactsOrganization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteExternalcontactsOrganization\");\n    console.error(err);\n  });"
  },
  "deleteexternalcontactsorganizationnote": {
    "operationId": "deleteexternalcontactsorganizationnote",
    "functionName": "deleteExternalcontactsOrganizationNote",
    "signature": "deleteExternalcontactsOrganizationNote(externalOrganizationId, noteId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet noteId = \"noteId_example\"; // String | Note Id\n\n// Delete a note for an external organization\napiInstance.deleteExternalcontactsOrganizationNote(externalOrganizationId, noteId)\n  .then((data) => {\n    console.log(`deleteExternalcontactsOrganizationNote success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteExternalcontactsOrganizationNote\");\n    console.error(err);\n  });"
  },
  "deleteexternalcontactsorganizationtrustor": {
    "operationId": "deleteexternalcontactsorganizationtrustor",
    "functionName": "deleteExternalcontactsOrganizationTrustor",
    "signature": "deleteExternalcontactsOrganizationTrustor(externalOrganizationId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\n\n// Unlink the Trustor for this External Organization\napiInstance.deleteExternalcontactsOrganizationTrustor(externalOrganizationId)\n  .then(() => {\n    console.log(\"deleteExternalcontactsOrganizationTrustor returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteExternalcontactsOrganizationTrustor\");\n    console.error(err);\n  });"
  },
  "deleteexternalcontactsrelationship": {
    "operationId": "deleteexternalcontactsrelationship",
    "functionName": "deleteExternalcontactsRelationship",
    "signature": "deleteExternalcontactsRelationship(relationshipId)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet relationshipId = \"relationshipId_example\"; // String | Relationship Id\n\n// Delete a relationship\napiInstance.deleteExternalcontactsRelationship(relationshipId)\n  .then((data) => {\n    console.log(`deleteExternalcontactsRelationship success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteExternalcontactsRelationship\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontact": {
    "operationId": "getexternalcontactscontact",
    "functionName": "getExternalcontactsContact",
    "signature": "getExternalcontactsContact(contactId, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ExternalContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand (externalOrganization,externalDataSources)\n};\n\n// Fetch an external contact\napiInstance.getExternalcontactsContact(contactId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsContact success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContact\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactidentifiers": {
    "operationId": "getexternalcontactscontactidentifiers",
    "functionName": "getExternalcontactsContactIdentifiers",
    "signature": "getExternalcontactsContactIdentifiers(contactId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\n\n// List the identifiers for a contact\napiInstance.getExternalcontactsContactIdentifiers(contactId)\n  .then((data) => {\n    console.log(`getExternalcontactsContactIdentifiers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactIdentifiers\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactjourneysessions": {
    "operationId": "getexternalcontactscontactjourneysessions",
    "functionName": "getExternalcontactsContactJourneySessions",
    "signature": "getExternalcontactsContactJourneySessions(contactId, pageSize, after, includeMerged)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeMerged",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "SessionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\nlet opts = { \n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"includeMerged\": true // Boolean | Indicates whether to return sessions from all external contacts in the merge-set of the given one.\n};\n\n// Retrieve all sessions for a given external contact.\napiInstance.getExternalcontactsContactJourneySessions(contactId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsContactJourneySessions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactJourneySessions\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactnote": {
    "operationId": "getexternalcontactscontactnote",
    "functionName": "getExternalcontactsContactNote",
    "signature": "getExternalcontactsContactNote(contactId, noteId, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Note",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n// Fetch a note for an external contact\napiInstance.getExternalcontactsContactNote(contactId, noteId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsContactNote success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactNote\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactnotes": {
    "operationId": "getexternalcontactscontactnotes",
    "functionName": "getExternalcontactsContactNotes",
    "signature": "getExternalcontactsContactNotes(contactId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NoteListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet opts = { \n  \"pageSize\": 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"pageNumber\": 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"sortOrder\": \"sortOrder_example\", // String | Sort order\n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n// List notes for an external contact\napiInstance.getExternalcontactsContactNotes(contactId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsContactNotes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactNotes\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactunresolved": {
    "operationId": "getexternalcontactscontactunresolved",
    "functionName": "getExternalcontactsContactUnresolved",
    "signature": "getExternalcontactsContactUnresolved(contactId, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ExternalContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand (externalOrganization,externalDataSources)\n};\n\n// Fetch an unresolved external contact\napiInstance.getExternalcontactsContactUnresolved(contactId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsContactUnresolved success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactUnresolved\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontacts": {
    "operationId": "getexternalcontactscontacts",
    "functionName": "getExternalcontactsContacts",
    "signature": "getExternalcontactsContacts(pageSize, pageNumber, q, sortOrder, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ContactListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet opts = { \n  \"pageSize\": 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"pageNumber\": 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"q\": \"q_example\", // String | User supplied search keywords (no special syntax is currently supported)\n  \"sortOrder\": \"sortOrder_example\", // String | Sort order\n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n// Search for external contacts\napiInstance.getExternalcontactsContacts(opts)\n  .then((data) => {\n    console.log(`getExternalcontactsContacts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContacts\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactsschema": {
    "operationId": "getexternalcontactscontactsschema",
    "functionName": "getExternalcontactsContactsSchema",
    "signature": "getExternalcontactsContactsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Get a schema\napiInstance.getExternalcontactsContactsSchema(schemaId)\n  .then((data) => {\n    console.log(`getExternalcontactsContactsSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactsSchema\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactsschemaversion": {
    "operationId": "getexternalcontactscontactsschemaversion",
    "functionName": "getExternalcontactsContactsSchemaVersion",
    "signature": "getExternalcontactsContactsSchemaVersion(schemaId, versionId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet versionId = \"versionId_example\"; // String | Schema version\n\n// Get a specific version of a schema\napiInstance.getExternalcontactsContactsSchemaVersion(schemaId, versionId)\n  .then((data) => {\n    console.log(`getExternalcontactsContactsSchemaVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactsSchemaVersion\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactsschemaversions": {
    "operationId": "getexternalcontactscontactsschemaversions",
    "functionName": "getExternalcontactsContactsSchemaVersions",
    "signature": "getExternalcontactsContactsSchemaVersions(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Get all versions of an external contact's schema\napiInstance.getExternalcontactsContactsSchemaVersions(schemaId)\n  .then((data) => {\n    console.log(`getExternalcontactsContactsSchemaVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactsSchemaVersions\");\n    console.error(err);\n  });"
  },
  "getexternalcontactscontactsschemas": {
    "operationId": "getexternalcontactscontactsschemas",
    "functionName": "getExternalcontactsContactsSchemas",
    "signature": "getExternalcontactsContactsSchemas()",
    "return": "DataSchemaListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\n// Get a list of schemas.\napiInstance.getExternalcontactsContactsSchemas()\n  .then((data) => {\n    console.log(`getExternalcontactsContactsSchemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsContactsSchemas\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganization": {
    "operationId": "getexternalcontactsorganization",
    "functionName": "getExternalcontactsOrganization",
    "signature": "getExternalcontactsOrganization(externalOrganizationId, expand, includeTrustors)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeTrustors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ExternalOrganization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet opts = { \n  \"expand\": \"expand_example\", // String | which fields, if any, to expand (externalDataSources)\n  \"includeTrustors\": true // Boolean | (true or false) whether or not to include trustor information embedded in the externalOrganization\n};\n\n// Fetch an external organization\napiInstance.getExternalcontactsOrganization(externalOrganizationId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganization\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationcontacts": {
    "operationId": "getexternalcontactsorganizationcontacts",
    "functionName": "getExternalcontactsOrganizationContacts",
    "signature": "getExternalcontactsOrganizationContacts(externalOrganizationId, pageSize, pageNumber, q, sortOrder, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ContactListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet opts = { \n  \"pageSize\": 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"pageNumber\": 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"q\": \"q_example\", // String | User supplied search keywords (no special syntax is currently supported)\n  \"sortOrder\": \"sortOrder_example\", // String | Sort order\n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n// Search for external contacts in an external organization\napiInstance.getExternalcontactsOrganizationContacts(externalOrganizationId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationContacts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationContacts\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationnote": {
    "operationId": "getexternalcontactsorganizationnote",
    "functionName": "getExternalcontactsOrganizationNote",
    "signature": "getExternalcontactsOrganizationNote(externalOrganizationId, noteId, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Note",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n// Fetch a note for an external organization\napiInstance.getExternalcontactsOrganizationNote(externalOrganizationId, noteId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationNote success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationNote\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationnotes": {
    "operationId": "getexternalcontactsorganizationnotes",
    "functionName": "getExternalcontactsOrganizationNotes",
    "signature": "getExternalcontactsOrganizationNotes(externalOrganizationId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NoteListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet opts = { \n  \"pageSize\": 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"pageNumber\": 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"sortOrder\": \"sortOrder_example\", // String | Sort order\n  \"expand\": [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n// List notes for an external organization\napiInstance.getExternalcontactsOrganizationNotes(externalOrganizationId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationNotes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationNotes\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationrelationships": {
    "operationId": "getexternalcontactsorganizationrelationships",
    "functionName": "getExternalcontactsOrganizationRelationships",
    "signature": "getExternalcontactsOrganizationRelationships(externalOrganizationId, pageSize, pageNumber, expand, sortOrder)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RelationshipListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet opts = { \n  \"pageSize\": 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"pageNumber\": 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"expand\": \"expand_example\", // String | which fields, if any, to expand\n  \"sortOrder\": \"sortOrder_example\" // String | Sort order\n};\n\n// Fetch a relationship for an external organization\napiInstance.getExternalcontactsOrganizationRelationships(externalOrganizationId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationRelationships success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationRelationships\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizations": {
    "operationId": "getexternalcontactsorganizations",
    "functionName": "getExternalcontactsOrganizations",
    "signature": "getExternalcontactsOrganizations(pageSize, pageNumber, q, trustorId, sortOrder, expand, includeTrustors)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trustorId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includeTrustors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ExternalOrganizationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet opts = { \n  \"pageSize\": 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"pageNumber\": 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  \"q\": \"q_example\", // String | Search query\n  \"trustorId\": [\"trustorId_example\"], // [String] | Search for external organizations by trustorIds (limit 25). If supplied, the 'q' parameters is ignored. Items are returned in the order requested\n  \"sortOrder\": \"sortOrder_example\", // String | Sort order\n  \"expand\": [\"expand_example\"], // [String] | which fields, if any, to expand\n  \"includeTrustors\": true // Boolean | (true or false) whether or not to include trustor information embedded in the externalOrganization\n};\n\n// Search for external organizations\napiInstance.getExternalcontactsOrganizations(opts)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizations\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationsschema": {
    "operationId": "getexternalcontactsorganizationsschema",
    "functionName": "getExternalcontactsOrganizationsSchema",
    "signature": "getExternalcontactsOrganizationsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Get a schema\napiInstance.getExternalcontactsOrganizationsSchema(schemaId)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationsSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationsSchema\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationsschemaversion": {
    "operationId": "getexternalcontactsorganizationsschemaversion",
    "functionName": "getExternalcontactsOrganizationsSchemaVersion",
    "signature": "getExternalcontactsOrganizationsSchemaVersion(schemaId, versionId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet versionId = \"versionId_example\"; // String | Schema version\n\n// Get a specific version of a schema\napiInstance.getExternalcontactsOrganizationsSchemaVersion(schemaId, versionId)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationsSchemaVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationsSchemaVersion\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationsschemaversions": {
    "operationId": "getexternalcontactsorganizationsschemaversions",
    "functionName": "getExternalcontactsOrganizationsSchemaVersions",
    "signature": "getExternalcontactsOrganizationsSchemaVersions(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Get all versions of an external organization's schema\napiInstance.getExternalcontactsOrganizationsSchemaVersions(schemaId)\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationsSchemaVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationsSchemaVersions\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsorganizationsschemas": {
    "operationId": "getexternalcontactsorganizationsschemas",
    "functionName": "getExternalcontactsOrganizationsSchemas",
    "signature": "getExternalcontactsOrganizationsSchemas()",
    "return": "DataSchemaListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\n// Get a list of schemas.\napiInstance.getExternalcontactsOrganizationsSchemas()\n  .then((data) => {\n    console.log(`getExternalcontactsOrganizationsSchemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsOrganizationsSchemas\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsrelationship": {
    "operationId": "getexternalcontactsrelationship",
    "functionName": "getExternalcontactsRelationship",
    "signature": "getExternalcontactsRelationship(relationshipId, expand)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Relationship",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet relationshipId = \"relationshipId_example\"; // String | Relationship Id\nlet opts = { \n  \"expand\": \"expand_example\" // String | which fields, if any, to expand\n};\n\n// Fetch a relationship\napiInstance.getExternalcontactsRelationship(relationshipId, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsRelationship success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsRelationship\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsreversewhitepageslookup": {
    "operationId": "getexternalcontactsreversewhitepageslookup",
    "functionName": "getExternalcontactsReversewhitepageslookup",
    "signature": "getExternalcontactsReversewhitepageslookup(lookupVal, expand)",
    "parameters": [
      {
        "name": "lookupVal",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ReverseWhitepagesLookupResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet lookupVal = \"lookupVal_example\"; // String | User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names)\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | which field, if any, to expand\n};\n\n// Look up contacts and externalOrganizations based on an attribute. Maximum of 25 values returned.\napiInstance.getExternalcontactsReversewhitepageslookup(lookupVal, opts)\n  .then((data) => {\n    console.log(`getExternalcontactsReversewhitepageslookup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsReversewhitepageslookup\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsscancontacts": {
    "operationId": "getexternalcontactsscancontacts",
    "functionName": "getExternalcontactsScanContacts",
    "signature": "getExternalcontactsScanContacts(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorContactListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet opts = { \n  \"limit\": 3.4, // Number | The number of contacts per page; must be between 10 and 200, default is 100)\n  \"cursor\": \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n// Scan for external contacts using paging\napiInstance.getExternalcontactsScanContacts(opts)\n  .then((data) => {\n    console.log(`getExternalcontactsScanContacts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsScanContacts\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsscannotes": {
    "operationId": "getexternalcontactsscannotes",
    "functionName": "getExternalcontactsScanNotes",
    "signature": "getExternalcontactsScanNotes(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorNoteListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet opts = { \n  \"limit\": 3.4, // Number | The number of notes per page; must be between 10 and 200, default is 100)\n  \"cursor\": \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n// Scan for notes using paging\napiInstance.getExternalcontactsScanNotes(opts)\n  .then((data) => {\n    console.log(`getExternalcontactsScanNotes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsScanNotes\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsscanorganizations": {
    "operationId": "getexternalcontactsscanorganizations",
    "functionName": "getExternalcontactsScanOrganizations",
    "signature": "getExternalcontactsScanOrganizations(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorOrganizationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet opts = { \n  \"limit\": 3.4, // Number | The number of organizations per page; must be between 10 and 200, default is 100)\n  \"cursor\": \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n// Scan for external organizations using paging\napiInstance.getExternalcontactsScanOrganizations(opts)\n  .then((data) => {\n    console.log(`getExternalcontactsScanOrganizations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsScanOrganizations\");\n    console.error(err);\n  });"
  },
  "getexternalcontactsscanrelationships": {
    "operationId": "getexternalcontactsscanrelationships",
    "functionName": "getExternalcontactsScanRelationships",
    "signature": "getExternalcontactsScanRelationships(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorRelationshipListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet opts = { \n  \"limit\": 3.4, // Number | The number of relationships per page; must be between 10 and 200, default is 100)\n  \"cursor\": \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n// Scan for relationships\napiInstance.getExternalcontactsScanRelationships(opts)\n  .then((data) => {\n    console.log(`getExternalcontactsScanRelationships success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getExternalcontactsScanRelationships\");\n    console.error(err);\n  });"
  },
  "patchexternalcontactscontactidentifiers": {
    "operationId": "patchexternalcontactscontactidentifiers",
    "functionName": "patchExternalcontactsContactIdentifiers",
    "signature": "patchExternalcontactsContactIdentifiers(contactId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactIdentifier",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\nlet body = {}; // Object | ClaimRequest\n\n// Claim or release identifiers for a contact\napiInstance.patchExternalcontactsContactIdentifiers(contactId, body)\n  .then((data) => {\n    console.log(`patchExternalcontactsContactIdentifiers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchExternalcontactsContactIdentifiers\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkcontacts": {
    "operationId": "postexternalcontactsbulkcontacts",
    "functionName": "postExternalcontactsBulkContacts",
    "signature": "postExternalcontactsBulkContacts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchContactsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Contact ids\n\n// Bulk fetch contacts\napiInstance.postExternalcontactsBulkContacts(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkContacts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkContacts\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkcontactsadd": {
    "operationId": "postexternalcontactsbulkcontactsadd",
    "functionName": "postExternalcontactsBulkContactsAdd",
    "signature": "postExternalcontactsBulkContactsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkContactsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Contacts\n\n// Bulk add contacts\napiInstance.postExternalcontactsBulkContactsAdd(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkContactsAdd success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkContactsAdd\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkcontactsremove": {
    "operationId": "postexternalcontactsbulkcontactsremove",
    "functionName": "postExternalcontactsBulkContactsRemove",
    "signature": "postExternalcontactsBulkContactsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Contact ids\n\n// Bulk remove contacts\napiInstance.postExternalcontactsBulkContactsRemove(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkContactsRemove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkContactsRemove\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkcontactsunresolved": {
    "operationId": "postexternalcontactsbulkcontactsunresolved",
    "functionName": "postExternalcontactsBulkContactsUnresolved",
    "signature": "postExternalcontactsBulkContactsUnresolved(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchContactsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Contact ids\n\n// Bulk fetch unresolved ancestor contacts\napiInstance.postExternalcontactsBulkContactsUnresolved(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkContactsUnresolved success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkContactsUnresolved\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkcontactsupdate": {
    "operationId": "postexternalcontactsbulkcontactsupdate",
    "functionName": "postExternalcontactsBulkContactsUpdate",
    "signature": "postExternalcontactsBulkContactsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkContactsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Contacts\n\n// Bulk update contacts\napiInstance.postExternalcontactsBulkContactsUpdate(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkContactsUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkContactsUpdate\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulknotes": {
    "operationId": "postexternalcontactsbulknotes",
    "functionName": "postExternalcontactsBulkNotes",
    "signature": "postExternalcontactsBulkNotes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchNotesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Note ids\n\n// Bulk fetch notes\napiInstance.postExternalcontactsBulkNotes(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkNotes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkNotes\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulknotesadd": {
    "operationId": "postexternalcontactsbulknotesadd",
    "functionName": "postExternalcontactsBulkNotesAdd",
    "signature": "postExternalcontactsBulkNotesAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkNotesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Notes\n\n// Bulk add notes\napiInstance.postExternalcontactsBulkNotesAdd(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkNotesAdd success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkNotesAdd\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulknotesremove": {
    "operationId": "postexternalcontactsbulknotesremove",
    "functionName": "postExternalcontactsBulkNotesRemove",
    "signature": "postExternalcontactsBulkNotesRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Note ids\n\n// Bulk remove notes\napiInstance.postExternalcontactsBulkNotesRemove(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkNotesRemove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkNotesRemove\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulknotesupdate": {
    "operationId": "postexternalcontactsbulknotesupdate",
    "functionName": "postExternalcontactsBulkNotesUpdate",
    "signature": "postExternalcontactsBulkNotesUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkNotesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Notes\n\n// Bulk update notes\napiInstance.postExternalcontactsBulkNotesUpdate(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkNotesUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkNotesUpdate\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkorganizations": {
    "operationId": "postexternalcontactsbulkorganizations",
    "functionName": "postExternalcontactsBulkOrganizations",
    "signature": "postExternalcontactsBulkOrganizations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchOrganizationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Organizations ids\n\n// Bulk fetch organizations\napiInstance.postExternalcontactsBulkOrganizations(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkOrganizations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkOrganizations\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkorganizationsadd": {
    "operationId": "postexternalcontactsbulkorganizationsadd",
    "functionName": "postExternalcontactsBulkOrganizationsAdd",
    "signature": "postExternalcontactsBulkOrganizationsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkOrganizationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Organizations\n\n// Bulk add organizations\napiInstance.postExternalcontactsBulkOrganizationsAdd(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkOrganizationsAdd success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkOrganizationsAdd\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkorganizationsremove": {
    "operationId": "postexternalcontactsbulkorganizationsremove",
    "functionName": "postExternalcontactsBulkOrganizationsRemove",
    "signature": "postExternalcontactsBulkOrganizationsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Organization ids\n\n// Bulk remove organizations\napiInstance.postExternalcontactsBulkOrganizationsRemove(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkOrganizationsRemove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkOrganizationsRemove\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkorganizationsupdate": {
    "operationId": "postexternalcontactsbulkorganizationsupdate",
    "functionName": "postExternalcontactsBulkOrganizationsUpdate",
    "signature": "postExternalcontactsBulkOrganizationsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkOrganizationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Organizations\n\n// Bulk update organizations\napiInstance.postExternalcontactsBulkOrganizationsUpdate(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkOrganizationsUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkOrganizationsUpdate\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkrelationships": {
    "operationId": "postexternalcontactsbulkrelationships",
    "functionName": "postExternalcontactsBulkRelationships",
    "signature": "postExternalcontactsBulkRelationships(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchRelationshipsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Relationships ids\n\n// Bulk fetch relationships\napiInstance.postExternalcontactsBulkRelationships(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkRelationships success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkRelationships\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkrelationshipsadd": {
    "operationId": "postexternalcontactsbulkrelationshipsadd",
    "functionName": "postExternalcontactsBulkRelationshipsAdd",
    "signature": "postExternalcontactsBulkRelationshipsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkRelationshipsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Relationships\n\n// Bulk add relationships\napiInstance.postExternalcontactsBulkRelationshipsAdd(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkRelationshipsAdd success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkRelationshipsAdd\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkrelationshipsremove": {
    "operationId": "postexternalcontactsbulkrelationshipsremove",
    "functionName": "postExternalcontactsBulkRelationshipsRemove",
    "signature": "postExternalcontactsBulkRelationshipsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Relationships ids\n\n// Bulk remove relationships\napiInstance.postExternalcontactsBulkRelationshipsRemove(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkRelationshipsRemove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkRelationshipsRemove\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsbulkrelationshipsupdate": {
    "operationId": "postexternalcontactsbulkrelationshipsupdate",
    "functionName": "postExternalcontactsBulkRelationshipsUpdate",
    "signature": "postExternalcontactsBulkRelationshipsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkRelationshipsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Relationships\n\n// Bulk update relationships\napiInstance.postExternalcontactsBulkRelationshipsUpdate(body)\n  .then((data) => {\n    console.log(`postExternalcontactsBulkRelationshipsUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsBulkRelationshipsUpdate\");\n    console.error(err);\n  });"
  },
  "postexternalcontactscontactnotes": {
    "operationId": "postexternalcontactscontactnotes",
    "functionName": "postExternalcontactsContactNotes",
    "signature": "postExternalcontactsContactNotes(contactId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet body = {}; // Object | ExternalContact\n\n// Create a note for an external contact\napiInstance.postExternalcontactsContactNotes(contactId, body)\n  .then((data) => {\n    console.log(`postExternalcontactsContactNotes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsContactNotes\");\n    console.error(err);\n  });"
  },
  "postexternalcontactscontactpromotion": {
    "operationId": "postexternalcontactscontactpromotion",
    "functionName": "postExternalcontactsContactPromotion",
    "signature": "postExternalcontactsContactPromotion(contactId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\n\n// Promote an observed contact (ephemeral or identified) to a curated contact\napiInstance.postExternalcontactsContactPromotion(contactId)\n  .then((data) => {\n    console.log(`postExternalcontactsContactPromotion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsContactPromotion\");\n    console.error(err);\n  });"
  },
  "postexternalcontactscontacts": {
    "operationId": "postexternalcontactscontacts",
    "functionName": "postExternalcontactsContacts",
    "signature": "postExternalcontactsContacts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | ExternalContact\n\n// Create an external contact\napiInstance.postExternalcontactsContacts(body)\n  .then((data) => {\n    console.log(`postExternalcontactsContacts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsContacts\");\n    console.error(err);\n  });"
  },
  "postexternalcontactscontactsschemas": {
    "operationId": "postexternalcontactscontactsschemas",
    "functionName": "postExternalcontactsContactsSchemas",
    "signature": "postExternalcontactsContactsSchemas(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Schema\n\n// Create a schema\napiInstance.postExternalcontactsContactsSchemas(body)\n  .then((data) => {\n    console.log(`postExternalcontactsContactsSchemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsContactsSchemas\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsidentifierlookup": {
    "operationId": "postexternalcontactsidentifierlookup",
    "functionName": "postExternalcontactsIdentifierlookup",
    "signature": "postExternalcontactsIdentifierlookup(identifier)",
    "parameters": [
      {
        "name": "identifier",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet identifier = {}; // Object | \n\n// Fetch a contact using an identifier type and value.\napiInstance.postExternalcontactsIdentifierlookup(identifier)\n  .then((data) => {\n    console.log(`postExternalcontactsIdentifierlookup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsIdentifierlookup\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsmergecontacts": {
    "operationId": "postexternalcontactsmergecontacts",
    "functionName": "postExternalcontactsMergeContacts",
    "signature": "postExternalcontactsMergeContacts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | MergeRequest\n\n// Merge two contacts into a new contact record\napiInstance.postExternalcontactsMergeContacts(body)\n  .then((data) => {\n    console.log(`postExternalcontactsMergeContacts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsMergeContacts\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsorganizationnotes": {
    "operationId": "postexternalcontactsorganizationnotes",
    "functionName": "postExternalcontactsOrganizationNotes",
    "signature": "postExternalcontactsOrganizationNotes(externalOrganizationId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet body = {}; // Object | ExternalContact\n\n// Create a note for an external organization\napiInstance.postExternalcontactsOrganizationNotes(externalOrganizationId, body)\n  .then((data) => {\n    console.log(`postExternalcontactsOrganizationNotes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsOrganizationNotes\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsorganizations": {
    "operationId": "postexternalcontactsorganizations",
    "functionName": "postExternalcontactsOrganizations",
    "signature": "postExternalcontactsOrganizations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalOrganization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | ExternalOrganization\n\n// Create an external organization\napiInstance.postExternalcontactsOrganizations(body)\n  .then((data) => {\n    console.log(`postExternalcontactsOrganizations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsOrganizations\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsorganizationsschemas": {
    "operationId": "postexternalcontactsorganizationsschemas",
    "functionName": "postExternalcontactsOrganizationsSchemas",
    "signature": "postExternalcontactsOrganizationsSchemas(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Schema\n\n// Create a schema\napiInstance.postExternalcontactsOrganizationsSchemas(body)\n  .then((data) => {\n    console.log(`postExternalcontactsOrganizationsSchemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsOrganizationsSchemas\");\n    console.error(err);\n  });"
  },
  "postexternalcontactsrelationships": {
    "operationId": "postexternalcontactsrelationships",
    "functionName": "postExternalcontactsRelationships",
    "signature": "postExternalcontactsRelationships(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Relationship",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet body = {}; // Object | Relationship\n\n// Create a relationship\napiInstance.postExternalcontactsRelationships(body)\n  .then((data) => {\n    console.log(`postExternalcontactsRelationships success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postExternalcontactsRelationships\");\n    console.error(err);\n  });"
  },
  "putexternalcontactscontact": {
    "operationId": "putexternalcontactscontact",
    "functionName": "putExternalcontactsContact",
    "signature": "putExternalcontactsContact(contactId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\nlet body = {}; // Object | ExternalContact\n\n// Update an external contact\napiInstance.putExternalcontactsContact(contactId, body)\n  .then((data) => {\n    console.log(`putExternalcontactsContact success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsContact\");\n    console.error(err);\n  });"
  },
  "putexternalcontactscontactnote": {
    "operationId": "putexternalcontactscontactnote",
    "functionName": "putExternalcontactsContactNote",
    "signature": "putExternalcontactsContactNote(contactId, noteId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet body = {}; // Object | Note\n\n// Update a note for an external contact\napiInstance.putExternalcontactsContactNote(contactId, noteId, body)\n  .then((data) => {\n    console.log(`putExternalcontactsContactNote success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsContactNote\");\n    console.error(err);\n  });"
  },
  "putexternalcontactscontactsschema": {
    "operationId": "putexternalcontactscontactsschema",
    "functionName": "putExternalcontactsContactsSchema",
    "signature": "putExternalcontactsContactsSchema(schemaId, body)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet body = {}; // Object | Data Schema\n\n// Update a schema\napiInstance.putExternalcontactsContactsSchema(schemaId, body)\n  .then((data) => {\n    console.log(`putExternalcontactsContactsSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsContactsSchema\");\n    console.error(err);\n  });"
  },
  "putexternalcontactsconversation": {
    "operationId": "putexternalcontactsconversation",
    "functionName": "putExternalcontactsConversation",
    "signature": "putExternalcontactsConversation(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet body = {}; // Object | ConversationAssociation\n\n// Associate/disassociate an external contact with a conversation\napiInstance.putExternalcontactsConversation(conversationId, body)\n  .then(() => {\n    console.log(\"putExternalcontactsConversation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsConversation\");\n    console.error(err);\n  });"
  },
  "putexternalcontactsorganization": {
    "operationId": "putexternalcontactsorganization",
    "functionName": "putExternalcontactsOrganization",
    "signature": "putExternalcontactsOrganization(externalOrganizationId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalOrganization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet body = {}; // Object | ExternalOrganization\n\n// Update an external organization\napiInstance.putExternalcontactsOrganization(externalOrganizationId, body)\n  .then((data) => {\n    console.log(`putExternalcontactsOrganization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsOrganization\");\n    console.error(err);\n  });"
  },
  "putexternalcontactsorganizationnote": {
    "operationId": "putexternalcontactsorganizationnote",
    "functionName": "putExternalcontactsOrganizationNote",
    "signature": "putExternalcontactsOrganizationNote(externalOrganizationId, noteId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet body = {}; // Object | Note\n\n// Update a note for an external organization\napiInstance.putExternalcontactsOrganizationNote(externalOrganizationId, noteId, body)\n  .then((data) => {\n    console.log(`putExternalcontactsOrganizationNote success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsOrganizationNote\");\n    console.error(err);\n  });"
  },
  "putexternalcontactsorganizationtrustortrustorid": {
    "operationId": "putexternalcontactsorganizationtrustortrustorid",
    "functionName": "putExternalcontactsOrganizationTrustorTrustorId",
    "signature": "putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trustorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExternalOrganizationTrustorLink",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet trustorId = \"trustorId_example\"; // String | Trustor ID\n\n// Links a Trustor with an External Organization\napiInstance.putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId)\n  .then((data) => {\n    console.log(`putExternalcontactsOrganizationTrustorTrustorId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsOrganizationTrustorTrustorId\");\n    console.error(err);\n  });"
  },
  "putexternalcontactsorganizationsschema": {
    "operationId": "putexternalcontactsorganizationsschema",
    "functionName": "putExternalcontactsOrganizationsSchema",
    "signature": "putExternalcontactsOrganizationsSchema(schemaId, body)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet body = {}; // Object | Data Schema\n\n// Update a schema\napiInstance.putExternalcontactsOrganizationsSchema(schemaId, body)\n  .then((data) => {\n    console.log(`putExternalcontactsOrganizationsSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsOrganizationsSchema\");\n    console.error(err);\n  });"
  },
  "putexternalcontactsrelationship": {
    "operationId": "putexternalcontactsrelationship",
    "functionName": "putExternalcontactsRelationship",
    "signature": "putExternalcontactsRelationship(relationshipId, body)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Relationship",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ExternalContactsApi();\n\nlet relationshipId = \"relationshipId_example\"; // String | Relationship Id\nlet body = {}; // Object | Relationship\n\n// Update a relationship\napiInstance.putExternalcontactsRelationship(relationshipId, body)\n  .then((data) => {\n    console.log(`putExternalcontactsRelationship success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putExternalcontactsRelationship\");\n    console.error(err);\n  });"
  },
  "deletefaxdocument": {
    "operationId": "deletefaxdocument",
    "functionName": "deleteFaxDocument",
    "signature": "deleteFaxDocument(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FaxApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\n\n// Delete a fax document.\napiInstance.deleteFaxDocument(documentId)\n  .then(() => {\n    console.log(\"deleteFaxDocument returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteFaxDocument\");\n    console.error(err);\n  });"
  },
  "getfaxdocument": {
    "operationId": "getfaxdocument",
    "functionName": "getFaxDocument",
    "signature": "getFaxDocument(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FaxDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FaxApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\n\n// Get a document.\napiInstance.getFaxDocument(documentId)\n  .then((data) => {\n    console.log(`getFaxDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFaxDocument\");\n    console.error(err);\n  });"
  },
  "getfaxdocumentcontent": {
    "operationId": "getfaxdocumentcontent",
    "functionName": "getFaxDocumentContent",
    "signature": "getFaxDocumentContent(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DownloadResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FaxApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\n\n// Download a fax document.\napiInstance.getFaxDocumentContent(documentId)\n  .then((data) => {\n    console.log(`getFaxDocumentContent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFaxDocumentContent\");\n    console.error(err);\n  });"
  },
  "getfaxdocuments": {
    "operationId": "getfaxdocuments",
    "functionName": "getFaxDocuments",
    "signature": "getFaxDocuments(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "FaxDocumentEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FaxApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of fax documents.\napiInstance.getFaxDocuments(opts)\n  .then((data) => {\n    console.log(`getFaxDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFaxDocuments\");\n    console.error(err);\n  });"
  },
  "getfaxsummary": {
    "operationId": "getfaxsummary",
    "functionName": "getFaxSummary",
    "signature": "getFaxSummary()",
    "return": "FaxSummary",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FaxApi();\n\n// Get fax summary\napiInstance.getFaxSummary()\n  .then((data) => {\n    console.log(`getFaxSummary success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFaxSummary\");\n    console.error(err);\n  });"
  },
  "putfaxdocument": {
    "operationId": "putfaxdocument",
    "functionName": "putFaxDocument",
    "signature": "putFaxDocument(documentId, body)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FaxDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.FaxApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet body = {}; // Object | Document\n\n// Update a fax document.\napiInstance.putFaxDocument(documentId, body)\n  .then((data) => {\n    console.log(`putFaxDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putFaxDocument\");\n    console.error(err);\n  });"
  },
  "deleteemployeeperformanceexternalmetricsdefinition": {
    "operationId": "deleteemployeeperformanceexternalmetricsdefinition",
    "functionName": "deleteEmployeeperformanceExternalmetricsDefinition",
    "signature": "deleteEmployeeperformanceExternalmetricsDefinition(metricId)",
    "parameters": [
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet metricId = \"metricId_example\"; // String | Specifies the External Metric Definition ID\n\n// Delete an External Metric Definition\napiInstance.deleteEmployeeperformanceExternalmetricsDefinition(metricId)\n  .then(() => {\n    console.log(\"deleteEmployeeperformanceExternalmetricsDefinition returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteEmployeeperformanceExternalmetricsDefinition\");\n    console.error(err);\n  });"
  },
  "getemployeeperformanceexternalmetricsdefinition": {
    "operationId": "getemployeeperformanceexternalmetricsdefinition",
    "functionName": "getEmployeeperformanceExternalmetricsDefinition",
    "signature": "getEmployeeperformanceExternalmetricsDefinition(metricId)",
    "parameters": [
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExternalMetricDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet metricId = \"metricId_example\"; // String | Specifies the External Metric Definition ID\n\n// Get an External Metric Definition\napiInstance.getEmployeeperformanceExternalmetricsDefinition(metricId)\n  .then((data) => {\n    console.log(`getEmployeeperformanceExternalmetricsDefinition success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getEmployeeperformanceExternalmetricsDefinition\");\n    console.error(err);\n  });"
  },
  "getemployeeperformanceexternalmetricsdefinitions": {
    "operationId": "getemployeeperformanceexternalmetricsdefinitions",
    "functionName": "getEmployeeperformanceExternalmetricsDefinitions",
    "signature": "getEmployeeperformanceExternalmetricsDefinitions(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ExternalMetricDefinitionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of External Metric Definitions of an organization, sorted by name in ascending order\napiInstance.getEmployeeperformanceExternalmetricsDefinitions(opts)\n  .then((data) => {\n    console.log(`getEmployeeperformanceExternalmetricsDefinitions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getEmployeeperformanceExternalmetricsDefinitions\");\n    console.error(err);\n  });"
  },
  "getgamificationinsights": {
    "operationId": "getgamificationinsights",
    "functionName": "getGamificationInsights",
    "signature": "getGamificationInsights(filterType, filterId, granularity, comparativePeriodStartWorkday, primaryPeriodStartWorkday, pageSize, pageNumber, sortKey, sortMetricId, sortOrder, userIds)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortKey",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortMetricId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InsightsSummary",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet comparativePeriodStartWorkday = \"comparativePeriodStartWorkday_example\"; // String | The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodStartWorkday = \"primaryPeriodStartWorkday_example\"; // String | The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortKey\": \"sortKey_example\", // String | Sort key\n  \"sortMetricId\": \"sortMetricId_example\", // String | Sort Metric Id\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"userIds\": \"userIds_example\" // String | A list of up to 100 comma-separated user Ids\n};\n\n// Get insights summary\napiInstance.getGamificationInsights(filterType, filterId, granularity, comparativePeriodStartWorkday, primaryPeriodStartWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationInsights success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsights\");\n    console.error(err);\n  });"
  },
  "getgamificationinsightsdetails": {
    "operationId": "getgamificationinsightsdetails",
    "functionName": "getGamificationInsightsDetails",
    "signature": "getGamificationInsightsDetails(filterType, filterId, granularity, comparativePeriodStartWorkday, primaryPeriodStartWorkday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodStartWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InsightsDetails",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet comparativePeriodStartWorkday = \"comparativePeriodStartWorkday_example\"; // String | The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodStartWorkday = \"primaryPeriodStartWorkday_example\"; // String | The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get insights details for the current user\napiInstance.getGamificationInsightsDetails(filterType, filterId, granularity, comparativePeriodStartWorkday, primaryPeriodStartWorkday)\n  .then((data) => {\n    console.log(`getGamificationInsightsDetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsightsDetails\");\n    console.error(err);\n  });"
  },
  "getgamificationinsightsgroupstrends": {
    "operationId": "getgamificationinsightsgroupstrends",
    "functionName": "getGamificationInsightsGroupsTrends",
    "signature": "getGamificationInsightsGroupsTrends(filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodEndWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodEndWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InsightsTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet comparativePeriodStartWorkday = \"comparativePeriodStartWorkday_example\"; // String | The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet comparativePeriodEndWorkday = \"comparativePeriodEndWorkday_example\"; // String | The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodStartWorkday = \"primaryPeriodStartWorkday_example\"; // String | The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodEndWorkday = \"primaryPeriodEndWorkday_example\"; // String | The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get insights overall trend for the current user\napiInstance.getGamificationInsightsGroupsTrends(filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)\n  .then((data) => {\n    console.log(`getGamificationInsightsGroupsTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsightsGroupsTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationinsightsgroupstrendsall": {
    "operationId": "getgamificationinsightsgroupstrendsall",
    "functionName": "getGamificationInsightsGroupsTrendsAll",
    "signature": "getGamificationInsightsGroupsTrendsAll(filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodEndWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodEndWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InsightsTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet comparativePeriodStartWorkday = \"comparativePeriodStartWorkday_example\"; // String | The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet comparativePeriodEndWorkday = \"comparativePeriodEndWorkday_example\"; // String | The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodStartWorkday = \"primaryPeriodStartWorkday_example\"; // String | The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodEndWorkday = \"primaryPeriodEndWorkday_example\"; // String | The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get insights overall trend\napiInstance.getGamificationInsightsGroupsTrendsAll(filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)\n  .then((data) => {\n    console.log(`getGamificationInsightsGroupsTrendsAll success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsightsGroupsTrendsAll\");\n    console.error(err);\n  });"
  },
  "getgamificationinsightsmembers": {
    "operationId": "getgamificationinsightsmembers",
    "functionName": "getGamificationInsightsMembers",
    "signature": "getGamificationInsightsMembers(filterType, filterId, granularity, startWorkday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InsightsAgents",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet startWorkday = \"startWorkday_example\"; // String | The start work day. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Query users in a profile during a period of time\napiInstance.getGamificationInsightsMembers(filterType, filterId, granularity, startWorkday)\n  .then((data) => {\n    console.log(`getGamificationInsightsMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsightsMembers\");\n    console.error(err);\n  });"
  },
  "getgamificationinsightstrends": {
    "operationId": "getgamificationinsightstrends",
    "functionName": "getGamificationInsightsTrends",
    "signature": "getGamificationInsightsTrends(filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodEndWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodEndWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserInsightsTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet comparativePeriodStartWorkday = \"comparativePeriodStartWorkday_example\"; // String | The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet comparativePeriodEndWorkday = \"comparativePeriodEndWorkday_example\"; // String | The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodStartWorkday = \"primaryPeriodStartWorkday_example\"; // String | The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodEndWorkday = \"primaryPeriodEndWorkday_example\"; // String | The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get insights user trend for the current user\napiInstance.getGamificationInsightsTrends(filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)\n  .then((data) => {\n    console.log(`getGamificationInsightsTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsightsTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationinsightsuserdetails": {
    "operationId": "getgamificationinsightsuserdetails",
    "functionName": "getGamificationInsightsUserDetails",
    "signature": "getGamificationInsightsUserDetails(userId, filterType, filterId, granularity, comparativePeriodStartWorkday, primaryPeriodStartWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodStartWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InsightsDetails",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user.\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet comparativePeriodStartWorkday = \"comparativePeriodStartWorkday_example\"; // String | The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodStartWorkday = \"primaryPeriodStartWorkday_example\"; // String | The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get insights details for the user\napiInstance.getGamificationInsightsUserDetails(userId, filterType, filterId, granularity, comparativePeriodStartWorkday, primaryPeriodStartWorkday)\n  .then((data) => {\n    console.log(`getGamificationInsightsUserDetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsightsUserDetails\");\n    console.error(err);\n  });"
  },
  "getgamificationinsightsusertrends": {
    "operationId": "getgamificationinsightsusertrends",
    "functionName": "getGamificationInsightsUserTrends",
    "signature": "getGamificationInsightsUserTrends(userId, filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "granularity",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparativePeriodEndWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodStartWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "primaryPeriodEndWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserInsightsTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user.\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet granularity = \"granularity_example\"; // String | Granularity\nlet comparativePeriodStartWorkday = \"comparativePeriodStartWorkday_example\"; // String | The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet comparativePeriodEndWorkday = \"comparativePeriodEndWorkday_example\"; // String | The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodStartWorkday = \"primaryPeriodStartWorkday_example\"; // String | The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet primaryPeriodEndWorkday = \"primaryPeriodEndWorkday_example\"; // String | The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get insights user trend for the user\napiInstance.getGamificationInsightsUserTrends(userId, filterType, filterId, granularity, comparativePeriodStartWorkday, comparativePeriodEndWorkday, primaryPeriodStartWorkday, primaryPeriodEndWorkday)\n  .then((data) => {\n    console.log(`getGamificationInsightsUserTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationInsightsUserTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationleaderboard": {
    "operationId": "getgamificationleaderboard",
    "functionName": "getGamificationLeaderboard",
    "signature": "getGamificationLeaderboard(startWorkday, endWorkday, metricId)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Leaderboard",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet startWorkday = \"startWorkday_example\"; // String | Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"metricId\": \"metricId_example\" // String | Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given.\n};\n\n// Leaderboard of the requesting user's division or performance profile\napiInstance.getGamificationLeaderboard(startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationLeaderboard success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationLeaderboard\");\n    console.error(err);\n  });"
  },
  "getgamificationleaderboardall": {
    "operationId": "getgamificationleaderboardall",
    "functionName": "getGamificationLeaderboardAll",
    "signature": "getGamificationLeaderboardAll(filterType, filterId, startWorkday, endWorkday, metricId)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Leaderboard",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type. For example, division or performance profile Id\nlet startWorkday = \"startWorkday_example\"; // String | Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"metricId\": \"metricId_example\" // String | Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given.\n};\n\n// Leaderboard by filter type\napiInstance.getGamificationLeaderboardAll(filterType, filterId, startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationLeaderboardAll success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationLeaderboardAll\");\n    console.error(err);\n  });"
  },
  "getgamificationleaderboardallbestpoints": {
    "operationId": "getgamificationleaderboardallbestpoints",
    "functionName": "getGamificationLeaderboardAllBestpoints",
    "signature": "getGamificationLeaderboardAllBestpoints(filterType, filterId)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OverallBestPoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type. For example, division or performance profile Id\n\n// Best Points by division or performance profile\napiInstance.getGamificationLeaderboardAllBestpoints(filterType, filterId)\n  .then((data) => {\n    console.log(`getGamificationLeaderboardAllBestpoints success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationLeaderboardAllBestpoints\");\n    console.error(err);\n  });"
  },
  "getgamificationleaderboardbestpoints": {
    "operationId": "getgamificationleaderboardbestpoints",
    "functionName": "getGamificationLeaderboardBestpoints",
    "signature": "getGamificationLeaderboardBestpoints()",
    "return": "OverallBestPoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\n// Best Points of the requesting user's current performance profile or division\napiInstance.getGamificationLeaderboardBestpoints()\n  .then((data) => {\n    console.log(`getGamificationLeaderboardBestpoints success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationLeaderboardBestpoints\");\n    console.error(err);\n  });"
  },
  "getgamificationmetricdefinition": {
    "operationId": "getgamificationmetricdefinition",
    "functionName": "getGamificationMetricdefinition",
    "signature": "getGamificationMetricdefinition(metricDefinitionId)",
    "parameters": [
      {
        "name": "metricDefinitionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MetricDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet metricDefinitionId = \"metricDefinitionId_example\"; // String | metric definition id\n\n// Metric definition by id\napiInstance.getGamificationMetricdefinition(metricDefinitionId)\n  .then((data) => {\n    console.log(`getGamificationMetricdefinition success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationMetricdefinition\");\n    console.error(err);\n  });"
  },
  "getgamificationmetricdefinitions": {
    "operationId": "getgamificationmetricdefinitions",
    "functionName": "getGamificationMetricdefinitions",
    "signature": "getGamificationMetricdefinitions()",
    "return": "GetMetricDefinitionsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\n// All metric definitions\napiInstance.getGamificationMetricdefinitions()\n  .then((data) => {\n    console.log(`getGamificationMetricdefinitions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationMetricdefinitions\");\n    console.error(err);\n  });"
  },
  "getgamificationprofile": {
    "operationId": "getgamificationprofile",
    "functionName": "getGamificationProfile",
    "signature": "getGamificationProfile(profileId)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | performanceProfileId\n\n// Performance profile by id\napiInstance.getGamificationProfile(profileId)\n  .then((data) => {\n    console.log(`getGamificationProfile success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfile\");\n    console.error(err);\n  });"
  },
  "getgamificationprofilemembers": {
    "operationId": "getgamificationprofilemembers",
    "functionName": "getGamificationProfileMembers",
    "signature": "getGamificationProfileMembers(profileId)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MemberListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Profile Id\n\n// Members of a given performance profile\napiInstance.getGamificationProfileMembers(profileId)\n  .then((data) => {\n    console.log(`getGamificationProfileMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfileMembers\");\n    console.error(err);\n  });"
  },
  "getgamificationprofilemetric": {
    "operationId": "getgamificationprofilemetric",
    "functionName": "getGamificationProfileMetric",
    "signature": "getGamificationProfileMetric(profileId, metricId, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Metric",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet metricId = \"metricId_example\"; // String | Metric Id\nlet opts = { \n  \"workday\": \"workday_example\" // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n// Performance profile gamified metric by id\napiInstance.getGamificationProfileMetric(profileId, metricId, opts)\n  .then((data) => {\n    console.log(`getGamificationProfileMetric success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfileMetric\");\n    console.error(err);\n  });"
  },
  "getgamificationprofilemetrics": {
    "operationId": "getgamificationprofilemetrics",
    "functionName": "getGamificationProfileMetrics",
    "signature": "getGamificationProfileMetrics(profileId, expand, workday, metricIds)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      },
      {
        "name": "metricIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GetMetricResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  \"workday\": \"workday_example\", // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"metricIds\": \"metricIds_example\" // String | List of metric ids to filter the response (Optional, comma-separated).\n};\n\n// All gamified metrics for a given performance profile\napiInstance.getGamificationProfileMetrics(profileId, opts)\n  .then((data) => {\n    console.log(`getGamificationProfileMetrics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfileMetrics\");\n    console.error(err);\n  });"
  },
  "getgamificationprofilemetricsobjectivedetails": {
    "operationId": "getgamificationprofilemetricsobjectivedetails",
    "functionName": "getGamificationProfileMetricsObjectivedetails",
    "signature": "getGamificationProfileMetricsObjectivedetails(profileId, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GetMetricsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet opts = { \n  \"workday\": \"workday_example\" // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n// All metrics for a given performance profile with objective details such as order and maxPoints\napiInstance.getGamificationProfileMetricsObjectivedetails(profileId, opts)\n  .then((data) => {\n    console.log(`getGamificationProfileMetricsObjectivedetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfileMetricsObjectivedetails\");\n    console.error(err);\n  });"
  },
  "getgamificationprofiles": {
    "operationId": "getgamificationprofiles",
    "functionName": "getGamificationProfiles",
    "signature": "getGamificationProfiles()",
    "return": "GetProfilesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\n// All performance profiles\napiInstance.getGamificationProfiles()\n  .then((data) => {\n    console.log(`getGamificationProfiles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfiles\");\n    console.error(err);\n  });"
  },
  "getgamificationprofilesuser": {
    "operationId": "getgamificationprofilesuser",
    "functionName": "getGamificationProfilesUser",
    "signature": "getGamificationProfilesUser(userId, workday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | \nlet opts = { \n  \"workday\": \"workday_example\" // String | Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n// Performance profile of a user\napiInstance.getGamificationProfilesUser(userId, opts)\n  .then((data) => {\n    console.log(`getGamificationProfilesUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfilesUser\");\n    console.error(err);\n  });"
  },
  "getgamificationprofilesusersme": {
    "operationId": "getgamificationprofilesusersme",
    "functionName": "getGamificationProfilesUsersMe",
    "signature": "getGamificationProfilesUsersMe(workday)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet opts = { \n  \"workday\": \"workday_example\" // String | Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n// Performance profile of the requesting user\napiInstance.getGamificationProfilesUsersMe(opts)\n  .then((data) => {\n    console.log(`getGamificationProfilesUsersMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationProfilesUsersMe\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecards": {
    "operationId": "getgamificationscorecards",
    "functionName": "getGamificationScorecards",
    "signature": "getGamificationScorecards(workday, expand)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkdayMetricListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet workday = \"workday_example\"; // String | Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Workday performance metrics of the requesting user\napiInstance.getGamificationScorecards(workday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecards success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecards\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsattendance": {
    "operationId": "getgamificationscorecardsattendance",
    "functionName": "getGamificationScorecardsAttendance",
    "signature": "getGamificationScorecardsAttendance(startWorkday, endWorkday)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AttendanceStatusListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Attendance status metrics of the requesting user\napiInstance.getGamificationScorecardsAttendance(startWorkday, endWorkday)\n  .then((data) => {\n    console.log(`getGamificationScorecardsAttendance success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsAttendance\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsbestpoints": {
    "operationId": "getgamificationscorecardsbestpoints",
    "functionName": "getGamificationScorecardsBestpoints",
    "signature": "getGamificationScorecardsBestpoints()",
    "return": "UserBestPoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\n// Best points of the requesting user\napiInstance.getGamificationScorecardsBestpoints()\n  .then((data) => {\n    console.log(`getGamificationScorecardsBestpoints success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsBestpoints\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardspointsalltime": {
    "operationId": "getgamificationscorecardspointsalltime",
    "functionName": "getGamificationScorecardsPointsAlltime",
    "signature": "getGamificationScorecardsPointsAlltime(endWorkday)",
    "parameters": [
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AllTimePoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// All-time points of the requesting user\napiInstance.getGamificationScorecardsPointsAlltime(endWorkday)\n  .then((data) => {\n    console.log(`getGamificationScorecardsPointsAlltime success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsPointsAlltime\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardspointsaverage": {
    "operationId": "getgamificationscorecardspointsaverage",
    "functionName": "getGamificationScorecardsPointsAverage",
    "signature": "getGamificationScorecardsPointsAverage(workday)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SingleWorkdayAveragePoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet workday = \"workday_example\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Average points of the requesting user's division or performance profile\napiInstance.getGamificationScorecardsPointsAverage(workday)\n  .then((data) => {\n    console.log(`getGamificationScorecardsPointsAverage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsPointsAverage\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardspointstrends": {
    "operationId": "getgamificationscorecardspointstrends",
    "functionName": "getGamificationScorecardsPointsTrends",
    "signature": "getGamificationScorecardsPointsTrends(startWorkday, endWorkday, dayOfWeek)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "dayOfWeek",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayPointsTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"dayOfWeek\": \"dayOfWeek_example\" // String | Optional filter to specify which day of weeks to be included in the response\n};\n\n// Points trends of the requesting user\napiInstance.getGamificationScorecardsPointsTrends(startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsPointsTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsPointsTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsprofilemetricuservaluestrends": {
    "operationId": "getgamificationscorecardsprofilemetricuservaluestrends",
    "functionName": "getGamificationScorecardsProfileMetricUserValuesTrends",
    "signature": "getGamificationScorecardsProfileMetricUserValuesTrends(profileId, metricId, userId, startWorkday, endWorkday, referenceWorkday, timeZone)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "referenceWorkday",
        "type": "String",
        "required": "false"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MetricValueTrendAverage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | performanceProfileId\nlet metricId = \"metricId_example\"; // String | metricId\nlet userId = \"userId_example\"; // String | \nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"referenceWorkday\": \"referenceWorkday_example\", // String | Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Average performance values trends by metric of a user\napiInstance.getGamificationScorecardsProfileMetricUserValuesTrends(profileId, metricId, userId, startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsProfileMetricUserValuesTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsProfileMetricUserValuesTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsprofilemetricusersvaluestrends": {
    "operationId": "getgamificationscorecardsprofilemetricusersvaluestrends",
    "functionName": "getGamificationScorecardsProfileMetricUsersValuesTrends",
    "signature": "getGamificationScorecardsProfileMetricUsersValuesTrends(profileId, metricId, filterType, startWorkday, endWorkday, filterId, referenceWorkday, timeZone)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "referenceWorkday",
        "type": "String",
        "required": "false"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MetricValueTrendAverage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | performanceProfileId\nlet metricId = \"metricId_example\"; // String | metricId\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"filterId\": \"filterId_example\", // String | ID for the filter type. Only required when filterType is Division.\n  \"referenceWorkday\": \"referenceWorkday_example\", // String | Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Average performance values trends by metric of a division or a performance profile\napiInstance.getGamificationScorecardsProfileMetricUsersValuesTrends(profileId, metricId, filterType, startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsProfileMetricUsersValuesTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsProfileMetricUsersValuesTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsprofilemetricvaluestrends": {
    "operationId": "getgamificationscorecardsprofilemetricvaluestrends",
    "functionName": "getGamificationScorecardsProfileMetricValuesTrends",
    "signature": "getGamificationScorecardsProfileMetricValuesTrends(profileId, metricId, startWorkday, endWorkday, filterType, referenceWorkday, timeZone)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "referenceWorkday",
        "type": "String",
        "required": "false"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MetricValueTrendAverage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | performanceProfileId\nlet metricId = \"metricId_example\"; // String | metricId\nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"filterType\": \"filterType_example\", // String | Filter type for the query request. If not set, returns the values trends of the requesting user\n  \"referenceWorkday\": \"referenceWorkday_example\", // String | Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Average performance values trends by metric of the requesting user\napiInstance.getGamificationScorecardsProfileMetricValuesTrends(profileId, metricId, startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsProfileMetricValuesTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsProfileMetricValuesTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsuser": {
    "operationId": "getgamificationscorecardsuser",
    "functionName": "getGamificationScorecardsUser",
    "signature": "getGamificationScorecardsUser(userId, workday, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkdayMetricListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | \nlet workday = \"workday_example\"; // String | Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Workday performance metrics for a user\napiInstance.getGamificationScorecardsUser(userId, workday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUser\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsuserattendance": {
    "operationId": "getgamificationscorecardsuserattendance",
    "functionName": "getGamificationScorecardsUserAttendance",
    "signature": "getGamificationScorecardsUserAttendance(userId, startWorkday, endWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AttendanceStatusListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | \nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Attendance status metrics for a user\napiInstance.getGamificationScorecardsUserAttendance(userId, startWorkday, endWorkday)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUserAttendance success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUserAttendance\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsuserbestpoints": {
    "operationId": "getgamificationscorecardsuserbestpoints",
    "functionName": "getGamificationScorecardsUserBestpoints",
    "signature": "getGamificationScorecardsUserBestpoints(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserBestPoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | \n\n// Best points of a user\napiInstance.getGamificationScorecardsUserBestpoints(userId)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUserBestpoints success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUserBestpoints\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsuserpointsalltime": {
    "operationId": "getgamificationscorecardsuserpointsalltime",
    "functionName": "getGamificationScorecardsUserPointsAlltime",
    "signature": "getGamificationScorecardsUserPointsAlltime(userId, endWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AllTimePoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | \nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// All-time points for a user\napiInstance.getGamificationScorecardsUserPointsAlltime(userId, endWorkday)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUserPointsAlltime success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUserPointsAlltime\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsuserpointstrends": {
    "operationId": "getgamificationscorecardsuserpointstrends",
    "functionName": "getGamificationScorecardsUserPointsTrends",
    "signature": "getGamificationScorecardsUserPointsTrends(userId, startWorkday, endWorkday, dayOfWeek)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "dayOfWeek",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayPointsTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | \nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"dayOfWeek\": \"dayOfWeek_example\" // String | Optional filter to specify which day of weeks to be included in the response\n};\n\n// Points trend for a user\napiInstance.getGamificationScorecardsUserPointsTrends(userId, startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUserPointsTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUserPointsTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsuservaluestrends": {
    "operationId": "getgamificationscorecardsuservaluestrends",
    "functionName": "getGamificationScorecardsUserValuesTrends",
    "signature": "getGamificationScorecardsUserValuesTrends(userId, startWorkday, endWorkday, timeZone)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | \nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Values trends of a user\napiInstance.getGamificationScorecardsUserValuesTrends(userId, startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUserValuesTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUserValuesTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsuserspointsaverage": {
    "operationId": "getgamificationscorecardsuserspointsaverage",
    "functionName": "getGamificationScorecardsUsersPointsAverage",
    "signature": "getGamificationScorecardsUsersPointsAverage(filterType, filterId, workday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SingleWorkdayAveragePoints",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet workday = \"workday_example\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Workday average points by target group\napiInstance.getGamificationScorecardsUsersPointsAverage(filterType, filterId, workday)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUsersPointsAverage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUsersPointsAverage\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsusersvaluesaverage": {
    "operationId": "getgamificationscorecardsusersvaluesaverage",
    "functionName": "getGamificationScorecardsUsersValuesAverage",
    "signature": "getGamificationScorecardsUsersValuesAverage(filterType, filterId, workday, timeZone)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SingleWorkdayAverageValues",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type. For example, division Id\nlet workday = \"workday_example\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Workday average values by target group\napiInstance.getGamificationScorecardsUsersValuesAverage(filterType, filterId, workday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUsersValuesAverage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUsersValuesAverage\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsusersvaluestrends": {
    "operationId": "getgamificationscorecardsusersvaluestrends",
    "functionName": "getGamificationScorecardsUsersValuesTrends",
    "signature": "getGamificationScorecardsUsersValuesTrends(filterType, filterId, startWorkday, endWorkday, timeZone)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Values trend by target group\napiInstance.getGamificationScorecardsUsersValuesTrends(filterType, filterId, startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsUsersValuesTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsUsersValuesTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsvaluesaverage": {
    "operationId": "getgamificationscorecardsvaluesaverage",
    "functionName": "getGamificationScorecardsValuesAverage",
    "signature": "getGamificationScorecardsValuesAverage(workday, timeZone)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SingleWorkdayAverageValues",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet workday = \"workday_example\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Average values of the requesting user's division or performance profile\napiInstance.getGamificationScorecardsValuesAverage(workday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsValuesAverage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsValuesAverage\");\n    console.error(err);\n  });"
  },
  "getgamificationscorecardsvaluestrends": {
    "operationId": "getgamificationscorecardsvaluestrends",
    "functionName": "getGamificationScorecardsValuesTrends",
    "signature": "getGamificationScorecardsValuesTrends(startWorkday, endWorkday, filterType, referenceWorkday, timeZone)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "referenceWorkday",
        "type": "String",
        "required": "false"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet startWorkday = \"startWorkday_example\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"endWorkday_example\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"filterType\": \"filterType_example\", // String | Filter type for the query request. If not set, then the request is for the requesting user.\n  \"referenceWorkday\": \"referenceWorkday_example\", // String | Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user's current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"timeZone\": \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n// Values trends of the requesting user or group\napiInstance.getGamificationScorecardsValuesTrends(startWorkday, endWorkday, opts)\n  .then((data) => {\n    console.log(`getGamificationScorecardsValuesTrends success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationScorecardsValuesTrends\");\n    console.error(err);\n  });"
  },
  "getgamificationstatus": {
    "operationId": "getgamificationstatus",
    "functionName": "getGamificationStatus",
    "signature": "getGamificationStatus()",
    "return": "GamificationStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\n// Gamification activation status\napiInstance.getGamificationStatus()\n  .then((data) => {\n    console.log(`getGamificationStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationStatus\");\n    console.error(err);\n  });"
  },
  "getgamificationtemplate": {
    "operationId": "getgamificationtemplate",
    "functionName": "getGamificationTemplate",
    "signature": "getGamificationTemplate(templateId)",
    "parameters": [
      {
        "name": "templateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ObjectiveTemplate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet templateId = \"templateId_example\"; // String | template id\n\n// Objective template by id\napiInstance.getGamificationTemplate(templateId)\n  .then((data) => {\n    console.log(`getGamificationTemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationTemplate\");\n    console.error(err);\n  });"
  },
  "getgamificationtemplates": {
    "operationId": "getgamificationtemplates",
    "functionName": "getGamificationTemplates",
    "signature": "getGamificationTemplates()",
    "return": "GetTemplatesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\n// All objective templates\napiInstance.getGamificationTemplates()\n  .then((data) => {\n    console.log(`getGamificationTemplates success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGamificationTemplates\");\n    console.error(err);\n  });"
  },
  "patchemployeeperformanceexternalmetricsdefinition": {
    "operationId": "patchemployeeperformanceexternalmetricsdefinition",
    "functionName": "patchEmployeeperformanceExternalmetricsDefinition",
    "signature": "patchEmployeeperformanceExternalmetricsDefinition(metricId, body)",
    "parameters": [
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalMetricDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet metricId = \"metricId_example\"; // String | Specifies the metric definition ID\nlet body = {}; // Object | The External Metric Definition parameters to be updated\n\n// Update External Metric Definition\napiInstance.patchEmployeeperformanceExternalmetricsDefinition(metricId, body)\n  .then((data) => {\n    console.log(`patchEmployeeperformanceExternalmetricsDefinition success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchEmployeeperformanceExternalmetricsDefinition\");\n    console.error(err);\n  });"
  },
  "postemployeeperformanceexternalmetricsdata": {
    "operationId": "postemployeeperformanceexternalmetricsdata",
    "functionName": "postEmployeeperformanceExternalmetricsData",
    "signature": "postEmployeeperformanceExternalmetricsData(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ExternalMetricDataWriteResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet opts = { \n  \"body\": {} // Object | The External Metric Data to be added\n};\n\n// Write External Metric Data\napiInstance.postEmployeeperformanceExternalmetricsData(opts)\n  .then((data) => {\n    console.log(`postEmployeeperformanceExternalmetricsData success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postEmployeeperformanceExternalmetricsData\");\n    console.error(err);\n  });"
  },
  "postemployeeperformanceexternalmetricsdefinitions": {
    "operationId": "postemployeeperformanceexternalmetricsdefinitions",
    "functionName": "postEmployeeperformanceExternalmetricsDefinitions",
    "signature": "postEmployeeperformanceExternalmetricsDefinitions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ExternalMetricDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet opts = { \n  \"body\": {} // Object | The External Metric Definition to be created\n};\n\n// Create External Metric Definition\napiInstance.postEmployeeperformanceExternalmetricsDefinitions(opts)\n  .then((data) => {\n    console.log(`postEmployeeperformanceExternalmetricsDefinitions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postEmployeeperformanceExternalmetricsDefinitions\");\n    console.error(err);\n  });"
  },
  "postgamificationprofileactivate": {
    "operationId": "postgamificationprofileactivate",
    "functionName": "postGamificationProfileActivate",
    "signature": "postGamificationProfileActivate(profileId)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | performanceProfileId\n\n// Activate a performance profile\napiInstance.postGamificationProfileActivate(profileId)\n  .then((data) => {\n    console.log(`postGamificationProfileActivate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfileActivate\");\n    console.error(err);\n  });"
  },
  "postgamificationprofiledeactivate": {
    "operationId": "postgamificationprofiledeactivate",
    "functionName": "postGamificationProfileDeactivate",
    "signature": "postGamificationProfileDeactivate(profileId)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | performanceProfileId\n\n// Deactivate a performance profile\napiInstance.postGamificationProfileDeactivate(profileId)\n  .then((data) => {\n    console.log(`postGamificationProfileDeactivate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfileDeactivate\");\n    console.error(err);\n  });"
  },
  "postgamificationprofilemembers": {
    "operationId": "postgamificationprofilemembers",
    "functionName": "postGamificationProfileMembers",
    "signature": "postGamificationProfileMembers(profileId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Assignment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Profile Id\nlet body = {}; // Object | assignUsers\n\n// Assign members to a given performance profile\napiInstance.postGamificationProfileMembers(profileId, body)\n  .then((data) => {\n    console.log(`postGamificationProfileMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfileMembers\");\n    console.error(err);\n  });"
  },
  "postgamificationprofilemembersvalidate": {
    "operationId": "postgamificationprofilemembersvalidate",
    "functionName": "postGamificationProfileMembersValidate",
    "signature": "postGamificationProfileMembersValidate(profileId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AssignmentValidation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Profile Id\nlet body = {}; // Object | memberAssignments\n\n// Validate member assignment\napiInstance.postGamificationProfileMembersValidate(profileId, body)\n  .then((data) => {\n    console.log(`postGamificationProfileMembersValidate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfileMembersValidate\");\n    console.error(err);\n  });"
  },
  "postgamificationprofilemetriclink": {
    "operationId": "postgamificationprofilemetriclink",
    "functionName": "postGamificationProfileMetricLink",
    "signature": "postGamificationProfileMetricLink(sourceProfileId, sourceMetricId, body)",
    "parameters": [
      {
        "name": "sourceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceMetricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet sourceProfileId = \"sourceProfileId_example\"; // String | Source Performance Profile Id\nlet sourceMetricId = \"sourceMetricId_example\"; // String | Source Metric Id\nlet body = {}; // Object | linkedMetric\n\n// Creates a linked metric\napiInstance.postGamificationProfileMetricLink(sourceProfileId, sourceMetricId, body)\n  .then((data) => {\n    console.log(`postGamificationProfileMetricLink success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfileMetricLink\");\n    console.error(err);\n  });"
  },
  "postgamificationprofilemetrics": {
    "operationId": "postgamificationprofilemetrics",
    "functionName": "postGamificationProfileMetrics",
    "signature": "postGamificationProfileMetrics(profileId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet body = {}; // Object | Metric\n\n// Creates a gamified metric with a given metric definition and metric objective under in a performance profile\napiInstance.postGamificationProfileMetrics(profileId, body)\n  .then((data) => {\n    console.log(`postGamificationProfileMetrics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfileMetrics\");\n    console.error(err);\n  });"
  },
  "postgamificationprofiles": {
    "operationId": "postgamificationprofiles",
    "functionName": "postGamificationProfiles",
    "signature": "postGamificationProfiles(body, copyMetrics)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "copyMetrics",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet body = {}; // Object | performanceProfile\nlet opts = { \n  \"copyMetrics\": true // Boolean | Flag to copy metrics. If set to false, there will be no metrics associated with the new profile. If set to true or is absent (the default behavior), all metrics from the default profile will be copied over into the new profile.\n};\n\n// Create a new custom performance profile\napiInstance.postGamificationProfiles(body, opts)\n  .then((data) => {\n    console.log(`postGamificationProfiles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfiles\");\n    console.error(err);\n  });"
  },
  "postgamificationprofilesuserquery": {
    "operationId": "postgamificationprofilesuserquery",
    "functionName": "postGamificationProfilesUserQuery",
    "signature": "postGamificationProfilesUserQuery(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserProfilesInDateRange",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user.\nlet body = {}; // Object | The date range of work day.\n\n// Query performance profiles in date range for a user\napiInstance.postGamificationProfilesUserQuery(userId, body)\n  .then((data) => {\n    console.log(`postGamificationProfilesUserQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfilesUserQuery\");\n    console.error(err);\n  });"
  },
  "postgamificationprofilesusersmequery": {
    "operationId": "postgamificationprofilesusersmequery",
    "functionName": "postGamificationProfilesUsersMeQuery",
    "signature": "postGamificationProfilesUsersMeQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserProfilesInDateRange",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet body = {}; // Object | The date range of work day.\n\n// Query performance profiles in date range for the current user\napiInstance.postGamificationProfilesUsersMeQuery(body)\n  .then((data) => {\n    console.log(`postGamificationProfilesUsersMeQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGamificationProfilesUsersMeQuery\");\n    console.error(err);\n  });"
  },
  "putgamificationprofile": {
    "operationId": "putgamificationprofile",
    "functionName": "putGamificationProfile",
    "signature": "putGamificationProfile(profileId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | performanceProfileId\nlet opts = { \n  \"body\": {} // Object | performanceProfile\n};\n\n// Updates a performance profile\napiInstance.putGamificationProfile(profileId, opts)\n  .then((data) => {\n    console.log(`putGamificationProfile success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGamificationProfile\");\n    console.error(err);\n  });"
  },
  "putgamificationprofilemetric": {
    "operationId": "putgamificationprofilemetric",
    "functionName": "putGamificationProfileMetric",
    "signature": "putGamificationProfileMetric(profileId, metricId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet metricId = \"metricId_example\"; // String | Metric Id\nlet body = {}; // Object | Metric\n\n// Updates a metric in performance profile\napiInstance.putGamificationProfileMetric(profileId, metricId, body)\n  .then((data) => {\n    console.log(`putGamificationProfileMetric success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGamificationProfileMetric\");\n    console.error(err);\n  });"
  },
  "putgamificationstatus": {
    "operationId": "putgamificationstatus",
    "functionName": "putGamificationStatus",
    "signature": "putGamificationStatus(status)",
    "parameters": [
      {
        "name": "status",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GamificationStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GamificationApi();\n\nlet status = {}; // Object | Gamification status\n\n// Update gamification activation status\napiInstance.putGamificationStatus(status)\n  .then((data) => {\n    console.log(`putGamificationStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGamificationStatus\");\n    console.error(err);\n  });"
  },
  "getgdprrequest": {
    "operationId": "getgdprrequest",
    "functionName": "getGdprRequest",
    "signature": "getGdprRequest(requestId)",
    "parameters": [
      {
        "name": "requestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GDPRRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GeneralDataProtectionRegulationApi();\n\nlet requestId = \"requestId_example\"; // String | Request id\n\n// Get an existing GDPR request\napiInstance.getGdprRequest(requestId)\n  .then((data) => {\n    console.log(`getGdprRequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGdprRequest\");\n    console.error(err);\n  });"
  },
  "getgdprrequests": {
    "operationId": "getgdprrequests",
    "functionName": "getGdprRequests",
    "signature": "getGdprRequests(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "GDPRRequestEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GeneralDataProtectionRegulationApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get all GDPR requests\napiInstance.getGdprRequests(opts)\n  .then((data) => {\n    console.log(`getGdprRequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGdprRequests\");\n    console.error(err);\n  });"
  },
  "getgdprsubjects": {
    "operationId": "getgdprsubjects",
    "functionName": "getGdprSubjects",
    "signature": "getGdprSubjects(searchType, searchValue)",
    "parameters": [
      {
        "name": "searchType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "searchValue",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GDPRSubjectEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GeneralDataProtectionRegulationApi();\n\nlet searchType = \"searchType_example\"; // String | Search Type\nlet searchValue = \"searchValue_example\"; // String | Search Value\n\n// Get GDPR subjects\napiInstance.getGdprSubjects(searchType, searchValue)\n  .then((data) => {\n    console.log(`getGdprSubjects success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGdprSubjects\");\n    console.error(err);\n  });"
  },
  "postgdprrequests": {
    "operationId": "postgdprrequests",
    "functionName": "postGdprRequests",
    "signature": "postGdprRequests(body, deleteConfirmed)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "deleteConfirmed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "GDPRRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GeneralDataProtectionRegulationApi();\n\nlet body = {}; // Object | GDPR request\nlet opts = { \n  \"deleteConfirmed\": false // Boolean | Confirm delete\n};\n\n// Submit a new GDPR request\napiInstance.postGdprRequests(body, opts)\n  .then((data) => {\n    console.log(`postGdprRequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGdprRequests\");\n    console.error(err);\n  });"
  },
  "getgeolocationssettings": {
    "operationId": "getgeolocationssettings",
    "functionName": "getGeolocationsSettings",
    "signature": "getGeolocationsSettings()",
    "return": "GeolocationSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GeolocationApi();\n\n// Get a organization's GeolocationSettings\napiInstance.getGeolocationsSettings()\n  .then((data) => {\n    console.log(`getGeolocationsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGeolocationsSettings\");\n    console.error(err);\n  });"
  },
  "getusergeolocation": {
    "operationId": "getusergeolocation",
    "functionName": "getUserGeolocation",
    "signature": "getUserGeolocation(userId, clientId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Geolocation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | user Id\nlet clientId = \"clientId_example\"; // String | client Id\n\n// Get a user's Geolocation\napiInstance.getUserGeolocation(userId, clientId)\n  .then((data) => {\n    console.log(`getUserGeolocation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserGeolocation\");\n    console.error(err);\n  });"
  },
  "patchgeolocationssettings": {
    "operationId": "patchgeolocationssettings",
    "functionName": "patchGeolocationsSettings",
    "signature": "patchGeolocationsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GeolocationSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GeolocationApi();\n\nlet body = {}; // Object | Geolocation settings\n\n// Patch a organization's GeolocationSettings\napiInstance.patchGeolocationsSettings(body)\n  .then((data) => {\n    console.log(`patchGeolocationsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchGeolocationsSettings\");\n    console.error(err);\n  });"
  },
  "patchusergeolocation": {
    "operationId": "patchusergeolocation",
    "functionName": "patchUserGeolocation",
    "signature": "patchUserGeolocation(userId, clientId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Geolocation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | user Id\nlet clientId = \"clientId_example\"; // String | client Id\nlet body = {}; // Object | Geolocation\n\n// Patch a user's Geolocation\napiInstance.patchUserGeolocation(userId, clientId, body)\n  .then((data) => {\n    console.log(`patchUserGeolocation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserGeolocation\");\n    console.error(err);\n  });"
  },
  "deletegreeting": {
    "operationId": "deletegreeting",
    "functionName": "deleteGreeting",
    "signature": "deleteGreeting(greetingId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\n\n// Deletes a Greeting with the given GreetingId\napiInstance.deleteGreeting(greetingId)\n  .then(() => {\n    console.log(\"deleteGreeting returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteGreeting\");\n    console.error(err);\n  });"
  },
  "getgreeting": {
    "operationId": "getgreeting",
    "functionName": "getGreeting",
    "signature": "getGreeting(greetingId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\n\n// Get a Greeting with the given GreetingId\napiInstance.getGreeting(greetingId)\n  .then((data) => {\n    console.log(`getGreeting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGreeting\");\n    console.error(err);\n  });"
  },
  "getgreetingmedia": {
    "operationId": "getgreetingmedia",
    "functionName": "getGreetingMedia",
    "signature": "getGreetingMedia(greetingId, formatId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GreetingMediaInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\nlet opts = { \n  \"formatId\": \"WAV\" // String | The desired media format.\n};\n\n// Get media playback URI for this greeting\napiInstance.getGreetingMedia(greetingId, opts)\n  .then((data) => {\n    console.log(`getGreetingMedia success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGreetingMedia\");\n    console.error(err);\n  });"
  },
  "getgreetings": {
    "operationId": "getgreetings",
    "functionName": "getGreetings",
    "signature": "getGreetings(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Gets an Organization's Greetings\napiInstance.getGreetings(opts)\n  .then((data) => {\n    console.log(`getGreetings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGreetings\");\n    console.error(err);\n  });"
  },
  "getgreetingsdefaults": {
    "operationId": "getgreetingsdefaults",
    "functionName": "getGreetingsDefaults",
    "signature": "getGreetingsDefaults()",
    "return": "DefaultGreetingList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\n// Get an Organization's DefaultGreetingList\napiInstance.getGreetingsDefaults()\n  .then((data) => {\n    console.log(`getGreetingsDefaults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGreetingsDefaults\");\n    console.error(err);\n  });"
  },
  "getgroupgreetings": {
    "operationId": "getgroupgreetings",
    "functionName": "getGroupGreetings",
    "signature": "getGroupGreetings(groupId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "GreetingListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of the Group's Greetings\napiInstance.getGroupGreetings(groupId, opts)\n  .then((data) => {\n    console.log(`getGroupGreetings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroupGreetings\");\n    console.error(err);\n  });"
  },
  "getgroupgreetingsdefaults": {
    "operationId": "getgroupgreetingsdefaults",
    "functionName": "getGroupGreetingsDefaults",
    "signature": "getGroupGreetingsDefaults(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n// Grabs the list of Default Greetings given a Group's ID\napiInstance.getGroupGreetingsDefaults(groupId)\n  .then((data) => {\n    console.log(`getGroupGreetingsDefaults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroupGreetingsDefaults\");\n    console.error(err);\n  });"
  },
  "getusergreetings": {
    "operationId": "getusergreetings",
    "functionName": "getUserGreetings",
    "signature": "getUserGreetings(userId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of the User's Greetings\napiInstance.getUserGreetings(userId, opts)\n  .then((data) => {\n    console.log(`getUserGreetings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserGreetings\");\n    console.error(err);\n  });"
  },
  "getusergreetingsdefaults": {
    "operationId": "getusergreetingsdefaults",
    "functionName": "getUserGreetingsDefaults",
    "signature": "getUserGreetingsDefaults(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Grabs the list of Default Greetings given a User's ID\napiInstance.getUserGreetingsDefaults(userId)\n  .then((data) => {\n    console.log(`getUserGreetingsDefaults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserGreetingsDefaults\");\n    console.error(err);\n  });"
  },
  "postgreetings": {
    "operationId": "postgreetings",
    "functionName": "postGreetings",
    "signature": "postGreetings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet body = {}; // Object | The Greeting to create\n\n// Create a Greeting for an Organization\napiInstance.postGreetings(body)\n  .then((data) => {\n    console.log(`postGreetings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGreetings\");\n    console.error(err);\n  });"
  },
  "postgroupgreetings": {
    "operationId": "postgroupgreetings",
    "functionName": "postGroupGreetings",
    "signature": "postGroupGreetings(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | The Greeting to create\n\n// Creates a Greeting for a Group\napiInstance.postGroupGreetings(groupId, body)\n  .then((data) => {\n    console.log(`postGroupGreetings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGroupGreetings\");\n    console.error(err);\n  });"
  },
  "postusergreetings": {
    "operationId": "postusergreetings",
    "functionName": "postUserGreetings",
    "signature": "postUserGreetings(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The Greeting to create\n\n// Creates a Greeting for a User\napiInstance.postUserGreetings(userId, body)\n  .then((data) => {\n    console.log(`postUserGreetings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUserGreetings\");\n    console.error(err);\n  });"
  },
  "putgreeting": {
    "operationId": "putgreeting",
    "functionName": "putGreeting",
    "signature": "putGreeting(greetingId, body)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\nlet body = {}; // Object | The updated Greeting\n\n// Updates the Greeting with the given GreetingId\napiInstance.putGreeting(greetingId, body)\n  .then((data) => {\n    console.log(`putGreeting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGreeting\");\n    console.error(err);\n  });"
  },
  "putgreetingsdefaults": {
    "operationId": "putgreetingsdefaults",
    "functionName": "putGreetingsDefaults",
    "signature": "putGreetingsDefaults(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet body = {}; // Object | The updated defaultGreetingList\n\n// Update an Organization's DefaultGreetingList\napiInstance.putGreetingsDefaults(body)\n  .then((data) => {\n    console.log(`putGreetingsDefaults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGreetingsDefaults\");\n    console.error(err);\n  });"
  },
  "putgroupgreetingsdefaults": {
    "operationId": "putgroupgreetingsdefaults",
    "functionName": "putGroupGreetingsDefaults",
    "signature": "putGroupGreetingsDefaults(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | The updated defaultGreetingList\n\n// Updates the DefaultGreetingList of the specified Group\napiInstance.putGroupGreetingsDefaults(groupId, body)\n  .then((data) => {\n    console.log(`putGroupGreetingsDefaults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGroupGreetingsDefaults\");\n    console.error(err);\n  });"
  },
  "putusergreetingsdefaults": {
    "operationId": "putusergreetingsdefaults",
    "functionName": "putUserGreetingsDefaults",
    "signature": "putUserGreetingsDefaults(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GreetingsApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The updated defaultGreetingList\n\n// Updates the DefaultGreetingList of the specified User\napiInstance.putUserGreetingsDefaults(userId, body)\n  .then((data) => {\n    console.log(`putUserGreetingsDefaults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserGreetingsDefaults\");\n    console.error(err);\n  });"
  },
  "deletegroup": {
    "operationId": "deletegroup",
    "functionName": "deleteGroup",
    "signature": "deleteGroup(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n// Delete group\napiInstance.deleteGroup(groupId)\n  .then(() => {\n    console.log(\"deleteGroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteGroup\");\n    console.error(err);\n  });"
  },
  "deletegroupdynamicsettings": {
    "operationId": "deletegroupdynamicsettings",
    "functionName": "deleteGroupDynamicsettings",
    "signature": "deleteGroupDynamicsettings(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n// Remove dynamic group definition\napiInstance.deleteGroupDynamicsettings(groupId)\n  .then(() => {\n    console.log(\"deleteGroupDynamicsettings returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteGroupDynamicsettings\");\n    console.error(err);\n  });"
  },
  "deletegroupmembers": {
    "operationId": "deletegroupmembers",
    "functionName": "deleteGroupMembers",
    "signature": "deleteGroupMembers(groupId, ids)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet ids = \"ids_example\"; // String | Comma separated list of userIds to remove\n\n// Remove members\napiInstance.deleteGroupMembers(groupId, ids)\n  .then((data) => {\n    console.log(`deleteGroupMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteGroupMembers\");\n    console.error(err);\n  });"
  },
  "getfieldconfig": {
    "operationId": "getfieldconfig",
    "functionName": "getFieldconfig",
    "signature": "getFieldconfig(type)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FieldConfig",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet type = \"type_example\"; // String | Field type\n\n// Fetch field config for an entity type\napiInstance.getFieldconfig(type)\n  .then((data) => {\n    console.log(`getFieldconfig success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getFieldconfig\");\n    console.error(err);\n  });"
  },
  "getgroup": {
    "operationId": "getgroup",
    "functionName": "getGroup",
    "signature": "getGroup(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n// Get group\napiInstance.getGroup(groupId)\n  .then((data) => {\n    console.log(`getGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroup\");\n    console.error(err);\n  });"
  },
  "getgroupdynamicsettings": {
    "operationId": "getgroupdynamicsettings",
    "functionName": "getGroupDynamicsettings",
    "signature": "getGroupDynamicsettings(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DynamicGroupDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n// Get dynamic group definition\napiInstance.getGroupDynamicsettings(groupId)\n  .then((data) => {\n    console.log(`getGroupDynamicsettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroupDynamicsettings\");\n    console.error(err);\n  });"
  },
  "getgroupindividuals": {
    "operationId": "getgroupindividuals",
    "functionName": "getGroupIndividuals",
    "signature": "getGroupIndividuals(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n// Get all individuals associated with the group\napiInstance.getGroupIndividuals(groupId)\n  .then((data) => {\n    console.log(`getGroupIndividuals success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroupIndividuals\");\n    console.error(err);\n  });"
  },
  "getgroupmembers": {
    "operationId": "getgroupmembers",
    "functionName": "getGroupMembers",
    "signature": "getGroupMembers(groupId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ASC\", // String | Ascending or descending sort order\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get group members, includes individuals, owners, and dynamically included people\napiInstance.getGroupMembers(groupId, opts)\n  .then((data) => {\n    console.log(`getGroupMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroupMembers\");\n    console.error(err);\n  });"
  },
  "getgroupprofile": {
    "operationId": "getgroupprofile",
    "functionName": "getGroupProfile",
    "signature": "getGroupProfile(groupId, fields)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fields",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | groupId\nlet opts = { \n  \"fields\": \"fields_example\" // String | Comma separated fields to return.  Allowable values can be found by querying /api/v2/fieldconfig?type=group and using the key for the elements returned by the fieldList\n};\n\n// Get group profile\napiInstance.getGroupProfile(groupId, opts)\n  .then((data) => {\n    console.log(`getGroupProfile success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroupProfile\");\n    console.error(err);\n  });"
  },
  "getgroups": {
    "operationId": "getgroups",
    "functionName": "getGroups",
    "signature": "getGroups(pageSize, pageNumber, id, jabberId, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jabberId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"id\": [\"id_example\"], // [String] | id\n  \"jabberId\": [\"jabberId_example\"], // [String] | A list of jabberIds to fetch by bulk (cannot be used with the id parameter)\n  \"sortOrder\": \"ASC\" // String | Ascending or descending sort order\n};\n\n// Get a group list\napiInstance.getGroups(opts)\n  .then((data) => {\n    console.log(`getGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroups\");\n    console.error(err);\n  });"
  },
  "getgroupssearch": {
    "operationId": "getgroupssearch",
    "functionName": "getGroupsSearch",
    "signature": "getGroupsSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "GroupsSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | expand\n};\n\n// Search groups using the q64 value returned from a previous search\napiInstance.getGroupsSearch(q64, opts)\n  .then((data) => {\n    console.log(`getGroupsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getGroupsSearch\");\n    console.error(err);\n  });"
  },
  "getprofilesgroups": {
    "operationId": "getprofilesgroups",
    "functionName": "getProfilesGroups",
    "signature": "getProfilesGroups(pageSize, pageNumber, id, jabberId, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jabberId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupProfileEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"id\": [\"id_example\"], // [String] | id\n  \"jabberId\": [\"jabberId_example\"], // [String] | A list of jabberIds to fetch by bulk (cannot be used with the id parameter)\n  \"sortOrder\": \"ASC\" // String | Ascending or descending sort order\n};\n\n// Get group profile listing\napiInstance.getProfilesGroups(opts)\n  .then((data) => {\n    console.log(`getProfilesGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getProfilesGroups\");\n    console.error(err);\n  });"
  },
  "postgroupmembers": {
    "operationId": "postgroupmembers",
    "functionName": "postGroupMembers",
    "signature": "postGroupMembers(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | Add members\n\n// Add members\napiInstance.postGroupMembers(groupId, body)\n  .then((data) => {\n    console.log(`postGroupMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGroupMembers\");\n    console.error(err);\n  });"
  },
  "postgroups": {
    "operationId": "postgroups",
    "functionName": "postGroups",
    "signature": "postGroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet body = {}; // Object | Group\n\n// Create a group\napiInstance.postGroups(body)\n  .then((data) => {\n    console.log(`postGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGroups\");\n    console.error(err);\n  });"
  },
  "postgroupsdynamicsettingspreview": {
    "operationId": "postgroupsdynamicsettingspreview",
    "functionName": "postGroupsDynamicsettingsPreview",
    "signature": "postGroupsDynamicsettingsPreview(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DynamicGroupQueryPreview",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet body = {}; // Object | Group query to preview\n\n// Preview the number of users selected for a dynamic group definition query\napiInstance.postGroupsDynamicsettingsPreview(body)\n  .then((data) => {\n    console.log(`postGroupsDynamicsettingsPreview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGroupsDynamicsettingsPreview\");\n    console.error(err);\n  });"
  },
  "postgroupssearch": {
    "operationId": "postgroupssearch",
    "functionName": "postGroupsSearch",
    "signature": "postGroupsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GroupsSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet body = {}; // Object | Search request options\n\n// Search groups\napiInstance.postGroupsSearch(body)\n  .then((data) => {\n    console.log(`postGroupsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postGroupsSearch\");\n    console.error(err);\n  });"
  },
  "putgroup": {
    "operationId": "putgroup",
    "functionName": "putGroup",
    "signature": "putGroup(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  \"body\": {} // Object | Group\n};\n\n// Update group\napiInstance.putGroup(groupId, opts)\n  .then((data) => {\n    console.log(`putGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGroup\");\n    console.error(err);\n  });"
  },
  "putgroupdynamicsettings": {
    "operationId": "putgroupdynamicsettings",
    "functionName": "putGroupDynamicsettings",
    "signature": "putGroupDynamicsettings(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.GroupsApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | Create/Update dynamic groups\n\n// Create / Update dynamic group definition\napiInstance.putGroupDynamicsettings(groupId, body)\n  .then(() => {\n    console.log(\"putGroupDynamicsettings returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putGroupDynamicsettings\");\n    console.error(err);\n  });"
  },
  "deleteidentityprovidersadfs": {
    "operationId": "deleteidentityprovidersadfs",
    "functionName": "deleteIdentityprovidersAdfs",
    "signature": "deleteIdentityprovidersAdfs()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete ADFS Identity Provider\napiInstance.deleteIdentityprovidersAdfs()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersAdfs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersAdfs\");\n    console.error(err);\n  });"
  },
  "deleteidentityproviderscic": {
    "operationId": "deleteidentityproviderscic",
    "functionName": "deleteIdentityprovidersCic",
    "signature": "deleteIdentityprovidersCic()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete Customer Interaction Center (CIC) Identity Provider\napiInstance.deleteIdentityprovidersCic()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersCic success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersCic\");\n    console.error(err);\n  });"
  },
  "deleteidentityprovidersgeneric": {
    "operationId": "deleteidentityprovidersgeneric",
    "functionName": "deleteIdentityprovidersGeneric",
    "signature": "deleteIdentityprovidersGeneric()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete Generic SAML Identity Provider\napiInstance.deleteIdentityprovidersGeneric()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersGeneric success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersGeneric\");\n    console.error(err);\n  });"
  },
  "deleteidentityprovidersgsuite": {
    "operationId": "deleteidentityprovidersgsuite",
    "functionName": "deleteIdentityprovidersGsuite",
    "signature": "deleteIdentityprovidersGsuite()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete G Suite Identity Provider\napiInstance.deleteIdentityprovidersGsuite()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersGsuite success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersGsuite\");\n    console.error(err);\n  });"
  },
  "deleteidentityprovidersidentitynow": {
    "operationId": "deleteidentityprovidersidentitynow",
    "functionName": "deleteIdentityprovidersIdentitynow",
    "signature": "deleteIdentityprovidersIdentitynow()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete IdentityNow Provider\napiInstance.deleteIdentityprovidersIdentitynow()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersIdentitynow success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersIdentitynow\");\n    console.error(err);\n  });"
  },
  "deleteidentityprovidersokta": {
    "operationId": "deleteidentityprovidersokta",
    "functionName": "deleteIdentityprovidersOkta",
    "signature": "deleteIdentityprovidersOkta()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete Okta Identity Provider\napiInstance.deleteIdentityprovidersOkta()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersOkta success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersOkta\");\n    console.error(err);\n  });"
  },
  "deleteidentityprovidersonelogin": {
    "operationId": "deleteidentityprovidersonelogin",
    "functionName": "deleteIdentityprovidersOnelogin",
    "signature": "deleteIdentityprovidersOnelogin()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete OneLogin Identity Provider\napiInstance.deleteIdentityprovidersOnelogin()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersOnelogin success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersOnelogin\");\n    console.error(err);\n  });"
  },
  "deleteidentityprovidersping": {
    "operationId": "deleteidentityprovidersping",
    "functionName": "deleteIdentityprovidersPing",
    "signature": "deleteIdentityprovidersPing()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete Ping Identity Provider\napiInstance.deleteIdentityprovidersPing()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersPing success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersPing\");\n    console.error(err);\n  });"
  },
  "deleteidentityproviderspurecloud": {
    "operationId": "deleteidentityproviderspurecloud",
    "functionName": "deleteIdentityprovidersPurecloud",
    "signature": "deleteIdentityprovidersPurecloud()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete PureCloud Identity Provider\napiInstance.deleteIdentityprovidersPurecloud()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersPurecloud success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersPurecloud\");\n    console.error(err);\n  });"
  },
  "deleteidentityproviderspureengage": {
    "operationId": "deleteidentityproviderspureengage",
    "functionName": "deleteIdentityprovidersPureengage",
    "signature": "deleteIdentityprovidersPureengage()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete PureEngage Identity Provider\napiInstance.deleteIdentityprovidersPureengage()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersPureengage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersPureengage\");\n    console.error(err);\n  });"
  },
  "deleteidentityproviderssalesforce": {
    "operationId": "deleteidentityproviderssalesforce",
    "functionName": "deleteIdentityprovidersSalesforce",
    "signature": "deleteIdentityprovidersSalesforce()",
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Delete Salesforce Identity Provider\napiInstance.deleteIdentityprovidersSalesforce()\n  .then((data) => {\n    console.log(`deleteIdentityprovidersSalesforce success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIdentityprovidersSalesforce\");\n    console.error(err);\n  });"
  },
  "getidentityproviders": {
    "operationId": "getidentityproviders",
    "functionName": "getIdentityproviders",
    "signature": "getIdentityproviders()",
    "return": "OAuthProviderEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// The list of identity providers\napiInstance.getIdentityproviders()\n  .then((data) => {\n    console.log(`getIdentityproviders success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityproviders\");\n    console.error(err);\n  });"
  },
  "getidentityprovidersadfs": {
    "operationId": "getidentityprovidersadfs",
    "functionName": "getIdentityprovidersAdfs",
    "signature": "getIdentityprovidersAdfs()",
    "return": "ADFS",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get ADFS Identity Provider\napiInstance.getIdentityprovidersAdfs()\n  .then((data) => {\n    console.log(`getIdentityprovidersAdfs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersAdfs\");\n    console.error(err);\n  });"
  },
  "getidentityproviderscic": {
    "operationId": "getidentityproviderscic",
    "functionName": "getIdentityprovidersCic",
    "signature": "getIdentityprovidersCic()",
    "return": "CustomerInteractionCenter",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get Customer Interaction Center (CIC) Identity Provider\napiInstance.getIdentityprovidersCic()\n  .then((data) => {\n    console.log(`getIdentityprovidersCic success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersCic\");\n    console.error(err);\n  });"
  },
  "getidentityprovidersgeneric": {
    "operationId": "getidentityprovidersgeneric",
    "functionName": "getIdentityprovidersGeneric",
    "signature": "getIdentityprovidersGeneric()",
    "return": "GenericSAML",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get Generic SAML Identity Provider\napiInstance.getIdentityprovidersGeneric()\n  .then((data) => {\n    console.log(`getIdentityprovidersGeneric success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersGeneric\");\n    console.error(err);\n  });"
  },
  "getidentityprovidersgsuite": {
    "operationId": "getidentityprovidersgsuite",
    "functionName": "getIdentityprovidersGsuite",
    "signature": "getIdentityprovidersGsuite()",
    "return": "GSuite",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get G Suite Identity Provider\napiInstance.getIdentityprovidersGsuite()\n  .then((data) => {\n    console.log(`getIdentityprovidersGsuite success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersGsuite\");\n    console.error(err);\n  });"
  },
  "getidentityprovidersidentitynow": {
    "operationId": "getidentityprovidersidentitynow",
    "functionName": "getIdentityprovidersIdentitynow",
    "signature": "getIdentityprovidersIdentitynow()",
    "return": "IdentityNow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get IdentityNow Provider\napiInstance.getIdentityprovidersIdentitynow()\n  .then((data) => {\n    console.log(`getIdentityprovidersIdentitynow success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersIdentitynow\");\n    console.error(err);\n  });"
  },
  "getidentityprovidersokta": {
    "operationId": "getidentityprovidersokta",
    "functionName": "getIdentityprovidersOkta",
    "signature": "getIdentityprovidersOkta()",
    "return": "Okta",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get Okta Identity Provider\napiInstance.getIdentityprovidersOkta()\n  .then((data) => {\n    console.log(`getIdentityprovidersOkta success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersOkta\");\n    console.error(err);\n  });"
  },
  "getidentityprovidersonelogin": {
    "operationId": "getidentityprovidersonelogin",
    "functionName": "getIdentityprovidersOnelogin",
    "signature": "getIdentityprovidersOnelogin()",
    "return": "OneLogin",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get OneLogin Identity Provider\napiInstance.getIdentityprovidersOnelogin()\n  .then((data) => {\n    console.log(`getIdentityprovidersOnelogin success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersOnelogin\");\n    console.error(err);\n  });"
  },
  "getidentityprovidersping": {
    "operationId": "getidentityprovidersping",
    "functionName": "getIdentityprovidersPing",
    "signature": "getIdentityprovidersPing()",
    "return": "PingIdentity",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get Ping Identity Provider\napiInstance.getIdentityprovidersPing()\n  .then((data) => {\n    console.log(`getIdentityprovidersPing success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersPing\");\n    console.error(err);\n  });"
  },
  "getidentityproviderspurecloud": {
    "operationId": "getidentityproviderspurecloud",
    "functionName": "getIdentityprovidersPurecloud",
    "signature": "getIdentityprovidersPurecloud()",
    "return": "PureCloud",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get PureCloud Identity Provider\napiInstance.getIdentityprovidersPurecloud()\n  .then((data) => {\n    console.log(`getIdentityprovidersPurecloud success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersPurecloud\");\n    console.error(err);\n  });"
  },
  "getidentityproviderspureengage": {
    "operationId": "getidentityproviderspureengage",
    "functionName": "getIdentityprovidersPureengage",
    "signature": "getIdentityprovidersPureengage()",
    "return": "PureEngage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get PureEngage Identity Provider\napiInstance.getIdentityprovidersPureengage()\n  .then((data) => {\n    console.log(`getIdentityprovidersPureengage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersPureengage\");\n    console.error(err);\n  });"
  },
  "getidentityproviderssalesforce": {
    "operationId": "getidentityproviderssalesforce",
    "functionName": "getIdentityprovidersSalesforce",
    "signature": "getIdentityprovidersSalesforce()",
    "return": "Salesforce",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\n// Get Salesforce Identity Provider\napiInstance.getIdentityprovidersSalesforce()\n  .then((data) => {\n    console.log(`getIdentityprovidersSalesforce success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIdentityprovidersSalesforce\");\n    console.error(err);\n  });"
  },
  "putidentityprovidersadfs": {
    "operationId": "putidentityprovidersadfs",
    "functionName": "putIdentityprovidersAdfs",
    "signature": "putIdentityprovidersAdfs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create ADFS Identity Provider\napiInstance.putIdentityprovidersAdfs(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersAdfs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersAdfs\");\n    console.error(err);\n  });"
  },
  "putidentityproviderscic": {
    "operationId": "putidentityproviderscic",
    "functionName": "putIdentityprovidersCic",
    "signature": "putIdentityprovidersCic(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create Customer Interaction Center (CIC) Identity Provider\napiInstance.putIdentityprovidersCic(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersCic success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersCic\");\n    console.error(err);\n  });"
  },
  "putidentityprovidersgeneric": {
    "operationId": "putidentityprovidersgeneric",
    "functionName": "putIdentityprovidersGeneric",
    "signature": "putIdentityprovidersGeneric(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create Generic SAML Identity Provider\napiInstance.putIdentityprovidersGeneric(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersGeneric success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersGeneric\");\n    console.error(err);\n  });"
  },
  "putidentityprovidersgsuite": {
    "operationId": "putidentityprovidersgsuite",
    "functionName": "putIdentityprovidersGsuite",
    "signature": "putIdentityprovidersGsuite(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create G Suite Identity Provider\napiInstance.putIdentityprovidersGsuite(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersGsuite success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersGsuite\");\n    console.error(err);\n  });"
  },
  "putidentityprovidersidentitynow": {
    "operationId": "putidentityprovidersidentitynow",
    "functionName": "putIdentityprovidersIdentitynow",
    "signature": "putIdentityprovidersIdentitynow(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IdentityNow",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create IdentityNow Provider\napiInstance.putIdentityprovidersIdentitynow(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersIdentitynow success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersIdentitynow\");\n    console.error(err);\n  });"
  },
  "putidentityprovidersokta": {
    "operationId": "putidentityprovidersokta",
    "functionName": "putIdentityprovidersOkta",
    "signature": "putIdentityprovidersOkta(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create Okta Identity Provider\napiInstance.putIdentityprovidersOkta(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersOkta success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersOkta\");\n    console.error(err);\n  });"
  },
  "putidentityprovidersonelogin": {
    "operationId": "putidentityprovidersonelogin",
    "functionName": "putIdentityprovidersOnelogin",
    "signature": "putIdentityprovidersOnelogin(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create OneLogin Identity Provider\napiInstance.putIdentityprovidersOnelogin(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersOnelogin success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersOnelogin\");\n    console.error(err);\n  });"
  },
  "putidentityprovidersping": {
    "operationId": "putidentityprovidersping",
    "functionName": "putIdentityprovidersPing",
    "signature": "putIdentityprovidersPing(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create Ping Identity Provider\napiInstance.putIdentityprovidersPing(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersPing success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersPing\");\n    console.error(err);\n  });"
  },
  "putidentityproviderspurecloud": {
    "operationId": "putidentityproviderspurecloud",
    "functionName": "putIdentityprovidersPurecloud",
    "signature": "putIdentityprovidersPurecloud(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create PureCloud Identity Provider\napiInstance.putIdentityprovidersPurecloud(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersPurecloud success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersPurecloud\");\n    console.error(err);\n  });"
  },
  "putidentityproviderspureengage": {
    "operationId": "putidentityproviderspureengage",
    "functionName": "putIdentityprovidersPureengage",
    "signature": "putIdentityprovidersPureengage(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create PureEngage Identity Provider\napiInstance.putIdentityprovidersPureengage(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersPureengage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersPureengage\");\n    console.error(err);\n  });"
  },
  "putidentityproviderssalesforce": {
    "operationId": "putidentityproviderssalesforce",
    "functionName": "putIdentityprovidersSalesforce",
    "signature": "putIdentityprovidersSalesforce(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IdentityProviderApi();\n\nlet body = {}; // Object | Provider\n\n// Update/Create Salesforce Identity Provider\napiInstance.putIdentityprovidersSalesforce(body)\n  .then((data) => {\n    console.log(`putIdentityprovidersSalesforce success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIdentityprovidersSalesforce\");\n    console.error(err);\n  });"
  },
  "getinfrastructureascodeaccelerator": {
    "operationId": "getinfrastructureascodeaccelerator",
    "functionName": "getInfrastructureascodeAccelerator",
    "signature": "getInfrastructureascodeAccelerator(acceleratorId, preferredLanguage)",
    "parameters": [
      {
        "name": "acceleratorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "preferredLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AcceleratorSpecification",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.InfrastructureAsCodeApi();\n\nlet acceleratorId = \"acceleratorId_example\"; // String | Accelerator ID\nlet opts = { \n  \"preferredLanguage\": \"en-US\" // String | Preferred Language\n};\n\n// Get information about an accelerator\napiInstance.getInfrastructureascodeAccelerator(acceleratorId, opts)\n  .then((data) => {\n    console.log(`getInfrastructureascodeAccelerator success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getInfrastructureascodeAccelerator\");\n    console.error(err);\n  });"
  },
  "getinfrastructureascodeaccelerators": {
    "operationId": "getinfrastructureascodeaccelerators",
    "functionName": "getInfrastructureascodeAccelerators",
    "signature": "getInfrastructureascodeAccelerators(pageSize, pageNumber, sortBy, sortOrder, name, description, origin, type, classification, tags)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "origin",
        "type": "String",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "classification",
        "type": "String",
        "required": "false"
      },
      {
        "name": "tags",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AcceleratorList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.InfrastructureAsCodeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"name\": \"name_example\", // String | Filter by name\n  \"description\": \"description_example\", // String | Filter by description\n  \"origin\": \"origin_example\", // String | Filter by origin\n  \"type\": \"type_example\", // String | Filter by type\n  \"classification\": \"classification_example\", // String | Filter by classification\n  \"tags\": \"tags_example\" // String | Filter by tags\n};\n\n// Get a list of available accelerators\napiInstance.getInfrastructureascodeAccelerators(opts)\n  .then((data) => {\n    console.log(`getInfrastructureascodeAccelerators success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getInfrastructureascodeAccelerators\");\n    console.error(err);\n  });"
  },
  "getinfrastructureascodejob": {
    "operationId": "getinfrastructureascodejob",
    "functionName": "getInfrastructureascodeJob",
    "signature": "getInfrastructureascodeJob(jobId, details)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "details",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "InfrastructureascodeJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.InfrastructureAsCodeApi();\n\nlet jobId = \"jobId_example\"; // String | Job ID\nlet opts = { \n  \"details\": false // Boolean | Include details of execution, including job results or error information\n};\n\n// Get job status and results\napiInstance.getInfrastructureascodeJob(jobId, opts)\n  .then((data) => {\n    console.log(`getInfrastructureascodeJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getInfrastructureascodeJob\");\n    console.error(err);\n  });"
  },
  "getinfrastructureascodejobs": {
    "operationId": "getinfrastructureascodejobs",
    "functionName": "getInfrastructureascodeJobs",
    "signature": "getInfrastructureascodeJobs(maxResults, includeErrors, sortBy, sortOrder, acceleratorId, submittedBy, status)",
    "parameters": [
      {
        "name": "maxResults",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "includeErrors",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "acceleratorId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "submittedBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "status",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InfrastructureascodeJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.InfrastructureAsCodeApi();\n\nlet opts = { \n  \"maxResults\": 1, // Number | Number of jobs to show\n  \"includeErrors\": false, // Boolean | Include error messages\n  \"sortBy\": \"dateSubmitted\", // String | Sort by\n  \"sortOrder\": \"desc\", // String | Sort order\n  \"acceleratorId\": \"acceleratorId_example\", // String | Find only jobs associated with this accelerator\n  \"submittedBy\": \"submittedBy_example\", // String | Find only jobs submitted by this user\n  \"status\": \"status_example\" // String | Find only jobs in this state\n};\n\n// Get job history\napiInstance.getInfrastructureascodeJobs(opts)\n  .then((data) => {\n    console.log(`getInfrastructureascodeJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getInfrastructureascodeJobs\");\n    console.error(err);\n  });"
  },
  "postinfrastructureascodejobs": {
    "operationId": "postinfrastructureascodejobs",
    "functionName": "postInfrastructureascodeJobs",
    "signature": "postInfrastructureascodeJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InfrastructureascodeJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.InfrastructureAsCodeApi();\n\nlet body = {}; // Object | \n\n// Create a Job\napiInstance.postInfrastructureascodeJobs(body)\n  .then((data) => {\n    console.log(`postInfrastructureascodeJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postInfrastructureascodeJobs\");\n    console.error(err);\n  });"
  },
  "deleteintegration": {
    "operationId": "deleteintegration",
    "functionName": "deleteIntegration",
    "signature": "deleteIntegration(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Integration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\n\n// Delete integration.\napiInstance.deleteIntegration(integrationId)\n  .then((data) => {\n    console.log(`deleteIntegration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIntegration\");\n    console.error(err);\n  });"
  },
  "deleteintegrationsaction": {
    "operationId": "deleteintegrationsaction",
    "functionName": "deleteIntegrationsAction",
    "signature": "deleteIntegrationsAction(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n// Delete an Action\napiInstance.deleteIntegrationsAction(actionId)\n  .then(() => {\n    console.log(\"deleteIntegrationsAction returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIntegrationsAction\");\n    console.error(err);\n  });"
  },
  "deleteintegrationsactiondraft": {
    "operationId": "deleteintegrationsactiondraft",
    "functionName": "deleteIntegrationsActionDraft",
    "signature": "deleteIntegrationsActionDraft(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n// Delete a Draft\napiInstance.deleteIntegrationsActionDraft(actionId)\n  .then(() => {\n    console.log(\"deleteIntegrationsActionDraft returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIntegrationsActionDraft\");\n    console.error(err);\n  });"
  },
  "deleteintegrationscredential": {
    "operationId": "deleteintegrationscredential",
    "functionName": "deleteIntegrationsCredential",
    "signature": "deleteIntegrationsCredential(credentialId)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet credentialId = \"credentialId_example\"; // String | Credential ID\n\n// Delete a set of credentials\napiInstance.deleteIntegrationsCredential(credentialId)\n  .then(() => {\n    console.log(\"deleteIntegrationsCredential returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteIntegrationsCredential\");\n    console.error(err);\n  });"
  },
  "getintegration": {
    "operationId": "getintegration",
    "functionName": "getIntegration",
    "signature": "getIntegration(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\" // String | Previous page token\n};\n\n// Get integration.\napiInstance.getIntegration(integrationId, opts)\n  .then((data) => {\n    console.log(`getIntegration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegration\");\n    console.error(err);\n  });"
  },
  "getintegrationconfigcurrent": {
    "operationId": "getintegrationconfigcurrent",
    "functionName": "getIntegrationConfigCurrent",
    "signature": "getIntegrationConfigCurrent(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\n\n// Get integration configuration.\napiInstance.getIntegrationConfigCurrent(integrationId)\n  .then((data) => {\n    console.log(`getIntegrationConfigCurrent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationConfigCurrent\");\n    console.error(err);\n  });"
  },
  "getintegrations": {
    "operationId": "getintegrations",
    "functionName": "getIntegrations",
    "signature": "getIntegrations(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\" // String | Previous page token\n};\n\n// List integrations\napiInstance.getIntegrations(opts)\n  .then((data) => {\n    console.log(`getIntegrations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrations\");\n    console.error(err);\n  });"
  },
  "getintegrationsaction": {
    "operationId": "getintegrationsaction",
    "functionName": "getIntegrationsAction",
    "signature": "getIntegrationsAction(actionId, expand, includeConfig)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeConfig",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet opts = { \n  \"expand\": \"expand_example\", // String | Indicates a field in the response which should be expanded.\n  \"includeConfig\": false // Boolean | Return config in response.\n};\n\n// Retrieves a single Action matching id.\napiInstance.getIntegrationsAction(actionId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsAction success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsAction\");\n    console.error(err);\n  });"
  },
  "getintegrationsactiondraft": {
    "operationId": "getintegrationsactiondraft",
    "functionName": "getIntegrationsActionDraft",
    "signature": "getIntegrationsActionDraft(actionId, expand, includeConfig)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeConfig",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet opts = { \n  \"expand\": \"expand_example\", // String | Indicates a field in the response which should be expanded.\n  \"includeConfig\": false // Boolean | Return config in response.\n};\n\n// Retrieve a Draft\napiInstance.getIntegrationsActionDraft(actionId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsActionDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionDraft\");\n    console.error(err);\n  });"
  },
  "getintegrationsactiondraftschema": {
    "operationId": "getintegrationsactiondraftschema",
    "functionName": "getIntegrationsActionDraftSchema",
    "signature": "getIntegrationsActionDraftSchema(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of schema file to be retrieved for this draft.\n\n// Retrieve schema for a Draft based on filename.\napiInstance.getIntegrationsActionDraftSchema(actionId, fileName)\n  .then((data) => {\n    console.log(`getIntegrationsActionDraftSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionDraftSchema\");\n    console.error(err);\n  });"
  },
  "getintegrationsactiondrafttemplate": {
    "operationId": "getintegrationsactiondrafttemplate",
    "functionName": "getIntegrationsActionDraftTemplate",
    "signature": "getIntegrationsActionDraftTemplate(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of template file to be retrieved for this action draft.\n\n// Retrieve templates for a Draft based on filename.\napiInstance.getIntegrationsActionDraftTemplate(actionId, fileName)\n  .then((data) => {\n    console.log(`getIntegrationsActionDraftTemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionDraftTemplate\");\n    console.error(err);\n  });"
  },
  "getintegrationsactiondraftvalidation": {
    "operationId": "getintegrationsactiondraftvalidation",
    "functionName": "getIntegrationsActionDraftValidation",
    "signature": "getIntegrationsActionDraftValidation(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DraftValidationResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n// Validate current Draft configuration.\napiInstance.getIntegrationsActionDraftValidation(actionId)\n  .then((data) => {\n    console.log(`getIntegrationsActionDraftValidation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionDraftValidation\");\n    console.error(err);\n  });"
  },
  "getintegrationsactionschema": {
    "operationId": "getintegrationsactionschema",
    "functionName": "getIntegrationsActionSchema",
    "signature": "getIntegrationsActionSchema(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of schema file to be retrieved for this action.\n\n// Retrieve schema for an action based on filename.\napiInstance.getIntegrationsActionSchema(actionId, fileName)\n  .then((data) => {\n    console.log(`getIntegrationsActionSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionSchema\");\n    console.error(err);\n  });"
  },
  "getintegrationsactiontemplate": {
    "operationId": "getintegrationsactiontemplate",
    "functionName": "getIntegrationsActionTemplate",
    "signature": "getIntegrationsActionTemplate(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of template file to be retrieved for this action.\n\n// Retrieve text of templates for an action based on filename.\napiInstance.getIntegrationsActionTemplate(actionId, fileName)\n  .then((data) => {\n    console.log(`getIntegrationsActionTemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionTemplate\");\n    console.error(err);\n  });"
  },
  "getintegrationsactions": {
    "operationId": "getintegrationsactions",
    "functionName": "getIntegrationsActions",
    "signature": "getIntegrationsActions(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ids",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeAuthActions",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"sortBy\": \"sortBy_example\", // String | Root level field name to sort on.\n  \"sortOrder\": \"asc\", // String | Direction to sort 'sortBy' field.\n  \"category\": \"category_example\", // String | Filter by category name.\n  \"name\": \"name_example\", // String | Filter by partial or complete action name.\n  \"ids\": \"ids_example\", // String | Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids.\n  \"secure\": \"secure_example\", // String | Filter based on 'secure' configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions.\n  \"includeAuthActions\": \"false\" // String | Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions.\n};\n\n// Retrieves all actions associated with filters passed in via query param.\napiInstance.getIntegrationsActions(opts)\n  .then((data) => {\n    console.log(`getIntegrationsActions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActions\");\n    console.error(err);\n  });"
  },
  "getintegrationsactionscategories": {
    "operationId": "getintegrationsactionscategories",
    "functionName": "getIntegrationsActionsCategories",
    "signature": "getIntegrationsActionsCategories(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, secure)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CategoryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"sortBy\": \"sortBy_example\", // String | Root level field name to sort on.  Only 'name' is supported on this endpoint.\n  \"sortOrder\": \"asc\", // String | Direction to sort 'sortBy' field.\n  \"secure\": \"secure_example\" // String | Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions.\n};\n\n// Retrieves all categories of available Actions\napiInstance.getIntegrationsActionsCategories(opts)\n  .then((data) => {\n    console.log(`getIntegrationsActionsCategories success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionsCategories\");\n    console.error(err);\n  });"
  },
  "getintegrationsactionsdrafts": {
    "operationId": "getintegrationsactionsdrafts",
    "functionName": "getIntegrationsActionsDrafts",
    "signature": "getIntegrationsActionsDrafts(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ids",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeAuthActions",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"sortBy\": \"sortBy_example\", // String | Root level field name to sort on.\n  \"sortOrder\": \"asc\", // String | Direction to sort 'sortBy' field.\n  \"category\": \"category_example\", // String | Filter by category name.\n  \"name\": \"name_example\", // String | Filter by partial or complete action name.\n  \"ids\": \"ids_example\", // String | Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids.\n  \"secure\": \"secure_example\", // String | Filter based on 'secure' configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions.\n  \"includeAuthActions\": \"false\" // String | Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions.\n};\n\n// Retrieves all action drafts associated with the filters passed in via query param.\napiInstance.getIntegrationsActionsDrafts(opts)\n  .then((data) => {\n    console.log(`getIntegrationsActionsDrafts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsActionsDrafts\");\n    console.error(err);\n  });"
  },
  "getintegrationsbotconnectorintegrationidbot": {
    "operationId": "getintegrationsbotconnectorintegrationidbot",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBot",
    "signature": "getIntegrationsBotconnectorIntegrationIdBot(integrationId, botId, version)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BotConnectorBot",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\nlet botId = \"botId_example\"; // String | The botID for this bot\nlet opts = { \n  \"version\": \"version_example\" // String | Specific Version\n};\n\n// Get a specific botConnector bot, plus versions, for this integration\napiInstance.getIntegrationsBotconnectorIntegrationIdBot(integrationId, botId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsBotconnectorIntegrationIdBot success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsBotconnectorIntegrationIdBot\");\n    console.error(err);\n  });"
  },
  "getintegrationsbotconnectorintegrationidbotversions": {
    "operationId": "getintegrationsbotconnectorintegrationidbotversions",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBotVersions",
    "signature": "getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId, botId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "BotConnectorBotVersionSummaryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this bot group\nlet botId = \"botId_example\"; // String | The botID for this bot\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get a list of bot versions for a bot\napiInstance.getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId, botId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsBotconnectorIntegrationIdBotVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsBotconnectorIntegrationIdBotVersions\");\n    console.error(err);\n  });"
  },
  "getintegrationsbotconnectorintegrationidbots": {
    "operationId": "getintegrationsbotconnectorintegrationidbots",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBots",
    "signature": "getIntegrationsBotconnectorIntegrationIdBots(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BotList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\n\n// Get a list of botConnector bots for this integration\napiInstance.getIntegrationsBotconnectorIntegrationIdBots(integrationId)\n  .then((data) => {\n    console.log(`getIntegrationsBotconnectorIntegrationIdBots success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsBotconnectorIntegrationIdBots\");\n    console.error(err);\n  });"
  },
  "getintegrationsbotconnectorintegrationidbotssummaries": {
    "operationId": "getintegrationsbotconnectorintegrationidbotssummaries",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBotsSummaries",
    "signature": "getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "BotConnectorBotSummaryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get a summary list of botConnector bots for this integration\napiInstance.getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsBotconnectorIntegrationIdBotsSummaries success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsBotconnectorIntegrationIdBotsSummaries\");\n    console.error(err);\n  });"
  },
  "getintegrationsclientapps": {
    "operationId": "getintegrationsclientapps",
    "functionName": "getIntegrationsClientapps",
    "signature": "getIntegrationsClientapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ClientAppEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\" // String | Previous page token\n};\n\n// List permitted client app integrations for the logged in user\napiInstance.getIntegrationsClientapps(opts)\n  .then((data) => {\n    console.log(`getIntegrationsClientapps success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsClientapps\");\n    console.error(err);\n  });"
  },
  "getintegrationsclientappsunifiedcommunications": {
    "operationId": "getintegrationsclientappsunifiedcommunications",
    "functionName": "getIntegrationsClientappsUnifiedcommunications",
    "signature": "getIntegrationsClientappsUnifiedcommunications(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UCIntegrationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\" // String | Previous page token\n};\n\n// UC integration client application configuration.\napiInstance.getIntegrationsClientappsUnifiedcommunications(opts)\n  .then((data) => {\n    console.log(`getIntegrationsClientappsUnifiedcommunications success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsClientappsUnifiedcommunications\");\n    console.error(err);\n  });"
  },
  "getintegrationscredential": {
    "operationId": "getintegrationscredential",
    "functionName": "getIntegrationsCredential",
    "signature": "getIntegrationsCredential(credentialId)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Credential",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet credentialId = \"credentialId_example\"; // String | Credential ID\n\n// Get a single credential with sensitive fields redacted\napiInstance.getIntegrationsCredential(credentialId)\n  .then((data) => {\n    console.log(`getIntegrationsCredential success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsCredential\");\n    console.error(err);\n  });"
  },
  "getintegrationscredentials": {
    "operationId": "getintegrationscredentials",
    "functionName": "getIntegrationsCredentials",
    "signature": "getIntegrationsCredentials(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CredentialInfoListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// List multiple sets of credentials\napiInstance.getIntegrationsCredentials(opts)\n  .then((data) => {\n    console.log(`getIntegrationsCredentials success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsCredentials\");\n    console.error(err);\n  });"
  },
  "getintegrationscredentialstypes": {
    "operationId": "getintegrationscredentialstypes",
    "functionName": "getIntegrationsCredentialsTypes",
    "signature": "getIntegrationsCredentialsTypes()",
    "return": "CredentialTypeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\n// List all credential types\napiInstance.getIntegrationsCredentialsTypes()\n  .then((data) => {\n    console.log(`getIntegrationsCredentialsTypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsCredentialsTypes\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechdialogflowagent": {
    "operationId": "getintegrationsspeechdialogflowagent",
    "functionName": "getIntegrationsSpeechDialogflowAgent",
    "signature": "getIntegrationsSpeechDialogflowAgent(agentId)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DialogflowAgent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet agentId = \"agentId_example\"; // String | The agent ID\n\n// Get details about a Dialogflow agent\napiInstance.getIntegrationsSpeechDialogflowAgent(agentId)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechDialogflowAgent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechDialogflowAgent\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechdialogflowagents": {
    "operationId": "getintegrationsspeechdialogflowagents",
    "functionName": "getIntegrationsSpeechDialogflowAgents",
    "signature": "getIntegrationsSpeechDialogflowAgents(pageNumber, pageSize, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DialogflowAgentSummaryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"name\": \"name_example\" // String | Filter on agent name\n};\n\n// Get a list of Dialogflow agents in the customers' Google accounts\napiInstance.getIntegrationsSpeechDialogflowAgents(opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechDialogflowAgents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechDialogflowAgents\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechlexbotalias": {
    "operationId": "getintegrationsspeechlexbotalias",
    "functionName": "getIntegrationsSpeechLexBotAlias",
    "signature": "getIntegrationsSpeechLexBotAlias(aliasId)",
    "parameters": [
      {
        "name": "aliasId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LexBotAlias",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet aliasId = \"aliasId_example\"; // String | The alias ID\n\n// Get details about a Lex bot alias\napiInstance.getIntegrationsSpeechLexBotAlias(aliasId)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechLexBotAlias success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechLexBotAlias\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechlexbotbotidaliases": {
    "operationId": "getintegrationsspeechlexbotbotidaliases",
    "functionName": "getIntegrationsSpeechLexBotBotIdAliases",
    "signature": "getIntegrationsSpeechLexBotBotIdAliases(botId, pageNumber, pageSize, status, name)",
    "parameters": [
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "status",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LexBotAliasEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet botId = \"botId_example\"; // String | The bot ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"status\": \"status_example\", // String | Filter on alias status\n  \"name\": \"name_example\" // String | Filter on alias name\n};\n\n// Get a list of aliases for a bot in the customer's AWS accounts\napiInstance.getIntegrationsSpeechLexBotBotIdAliases(botId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechLexBotBotIdAliases success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechLexBotBotIdAliases\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechlexbots": {
    "operationId": "getintegrationsspeechlexbots",
    "functionName": "getIntegrationsSpeechLexBots",
    "signature": "getIntegrationsSpeechLexBots(pageNumber, pageSize, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LexBotEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"name\": \"name_example\" // String | Filter on bot name\n};\n\n// Get a list of Lex bots in the customers' AWS accounts\napiInstance.getIntegrationsSpeechLexBots(opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechLexBots success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechLexBots\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechnuancenuanceintegrationidbot": {
    "operationId": "getintegrationsspeechnuancenuanceintegrationidbot",
    "functionName": "getIntegrationsSpeechNuanceNuanceIntegrationIdBot",
    "signature": "getIntegrationsSpeechNuanceNuanceIntegrationIdBot(nuanceIntegrationId, botId, expand, targetChannel)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "targetChannel",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "NuanceBot",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet botId = \"botId_example\"; // String | The Nuance bot ID to get\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | expand\n  \"targetChannel\": \"targetChannel_example\" // String | targetChannel\n};\n\n// Get a Nuance bot in the specified Integration\napiInstance.getIntegrationsSpeechNuanceNuanceIntegrationIdBot(nuanceIntegrationId, botId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechNuanceNuanceIntegrationIdBot success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechNuanceNuanceIntegrationIdBot\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechnuancenuanceintegrationidbotjob": {
    "operationId": "getintegrationsspeechnuancenuanceintegrationidbotjob",
    "functionName": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotJob",
    "signature": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotJob(nuanceIntegrationId, botId, jobId)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet botId = \"botId_example\"; // String | The Nuance bot ID\nlet jobId = \"jobId_example\"; // String | The asynchronous job ID\n\n// Get the status of an asynchronous Nuance bot GET job\napiInstance.getIntegrationsSpeechNuanceNuanceIntegrationIdBotJob(nuanceIntegrationId, botId, jobId)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechNuanceNuanceIntegrationIdBotJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechNuanceNuanceIntegrationIdBotJob\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechnuancenuanceintegrationidbotjobresults": {
    "operationId": "getintegrationsspeechnuancenuanceintegrationidbotjobresults",
    "functionName": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults",
    "signature": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults(nuanceIntegrationId, botId, jobId)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NuanceBot",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet botId = \"botId_example\"; // String | The Nuance bot ID\nlet jobId = \"jobId_example\"; // String | The asynchronous job ID\n\n// Get the result of an asynchronous Nuance bot GET job\napiInstance.getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults(nuanceIntegrationId, botId, jobId)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechnuancenuanceintegrationidbots": {
    "operationId": "getintegrationsspeechnuancenuanceintegrationidbots",
    "functionName": "getIntegrationsSpeechNuanceNuanceIntegrationIdBots",
    "signature": "getIntegrationsSpeechNuanceNuanceIntegrationIdBots(nuanceIntegrationId, pageNumber, pageSize, onlyRegisteredBots)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "onlyRegisteredBots",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "NuanceBotEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"onlyRegisteredBots\": true // Boolean | Limit bots to the ones configured for Genesys Cloud usage\n};\n\n// Get a list of Nuance bots available in the specified Integration\napiInstance.getIntegrationsSpeechNuanceNuanceIntegrationIdBots(nuanceIntegrationId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechNuanceNuanceIntegrationIdBots success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechNuanceNuanceIntegrationIdBots\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechnuancenuanceintegrationidbotsjob": {
    "operationId": "getintegrationsspeechnuancenuanceintegrationidbotsjob",
    "functionName": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob",
    "signature": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob(nuanceIntegrationId, jobId)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet jobId = \"jobId_example\"; // String | The asynchronous job ID\n\n// Get the status of an asynchronous Nuance bots GET job\napiInstance.getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob(nuanceIntegrationId, jobId)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechnuancenuanceintegrationidbotsjobresults": {
    "operationId": "getintegrationsspeechnuancenuanceintegrationidbotsjobresults",
    "functionName": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults",
    "signature": "getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults(nuanceIntegrationId, jobId)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NuanceBotEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet jobId = \"jobId_example\"; // String | The asynchronous job ID\n\n// Get the result of an asynchronous Nuance bots GET job\napiInstance.getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults(nuanceIntegrationId, jobId)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechttsengine": {
    "operationId": "getintegrationsspeechttsengine",
    "functionName": "getIntegrationsSpeechTtsEngine",
    "signature": "getIntegrationsSpeechTtsEngine(engineId, includeVoices)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeVoices",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TtsEngineEntity",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet engineId = \"engineId_example\"; // String | The engine ID\nlet opts = { \n  \"includeVoices\": false // Boolean | Include voices for the engine\n};\n\n// Get details about a TTS engine\napiInstance.getIntegrationsSpeechTtsEngine(engineId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechTtsEngine success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechTtsEngine\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechttsenginevoice": {
    "operationId": "getintegrationsspeechttsenginevoice",
    "functionName": "getIntegrationsSpeechTtsEngineVoice",
    "signature": "getIntegrationsSpeechTtsEngineVoice(engineId, voiceId)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "voiceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TtsVoiceEntity",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet engineId = \"engineId_example\"; // String | The engine ID\nlet voiceId = \"voiceId_example\"; // String | The voice ID\n\n// Get details about a specific voice for a TTS engine\napiInstance.getIntegrationsSpeechTtsEngineVoice(engineId, voiceId)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechTtsEngineVoice success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechTtsEngineVoice\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechttsenginevoices": {
    "operationId": "getintegrationsspeechttsenginevoices",
    "functionName": "getIntegrationsSpeechTtsEngineVoices",
    "signature": "getIntegrationsSpeechTtsEngineVoices(engineId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TtsVoiceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet engineId = \"engineId_example\"; // String | The engine ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get a list of voices for a TTS engine\napiInstance.getIntegrationsSpeechTtsEngineVoices(engineId, opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechTtsEngineVoices success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechTtsEngineVoices\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechttsengines": {
    "operationId": "getintegrationsspeechttsengines",
    "functionName": "getIntegrationsSpeechTtsEngines",
    "signature": "getIntegrationsSpeechTtsEngines(pageNumber, pageSize, includeVoices, name, language)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "includeVoices",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TtsEngineEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"includeVoices\": false, // Boolean | Include voices for the engine\n  \"name\": \"name_example\", // String | Filter on engine name\n  \"language\": \"language_example\" // String | Filter on supported language. If includeVoices=true then the voices are also filtered.\n};\n\n// Get a list of TTS engines enabled for org\napiInstance.getIntegrationsSpeechTtsEngines(opts)\n  .then((data) => {\n    console.log(`getIntegrationsSpeechTtsEngines success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechTtsEngines\");\n    console.error(err);\n  });"
  },
  "getintegrationsspeechttssettings": {
    "operationId": "getintegrationsspeechttssettings",
    "functionName": "getIntegrationsSpeechTtsSettings",
    "signature": "getIntegrationsSpeechTtsSettings()",
    "return": "TtsSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\n// Get TTS settings for an org\napiInstance.getIntegrationsSpeechTtsSettings()\n  .then((data) => {\n    console.log(`getIntegrationsSpeechTtsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsSpeechTtsSettings\");\n    console.error(err);\n  });"
  },
  "getintegrationstype": {
    "operationId": "getintegrationstype",
    "functionName": "getIntegrationsType",
    "signature": "getIntegrationsType(typeId)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationType",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet typeId = \"typeId_example\"; // String | Integration Type Id\n\n// Get integration type.\napiInstance.getIntegrationsType(typeId)\n  .then((data) => {\n    console.log(`getIntegrationsType success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsType\");\n    console.error(err);\n  });"
  },
  "getintegrationstypeconfigschema": {
    "operationId": "getintegrationstypeconfigschema",
    "functionName": "getIntegrationsTypeConfigschema",
    "signature": "getIntegrationsTypeConfigschema(typeId, configType)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "configType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet typeId = \"typeId_example\"; // String | Integration Type Id\nlet configType = \"configType_example\"; // String | Config schema type\n\n// Get properties config schema for an integration type.\napiInstance.getIntegrationsTypeConfigschema(typeId, configType)\n  .then((data) => {\n    console.log(`getIntegrationsTypeConfigschema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsTypeConfigschema\");\n    console.error(err);\n  });"
  },
  "getintegrationstypes": {
    "operationId": "getintegrationstypes",
    "functionName": "getIntegrationsTypes",
    "signature": "getIntegrationsTypes(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationTypeEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\" // String | Previous page token\n};\n\n// List integration types\napiInstance.getIntegrationsTypes(opts)\n  .then((data) => {\n    console.log(`getIntegrationsTypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsTypes\");\n    console.error(err);\n  });"
  },
  "getintegrationsuserapps": {
    "operationId": "getintegrationsuserapps",
    "functionName": "getIntegrationsUserapps",
    "signature": "getIntegrationsUserapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, appHost)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "appHost",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserAppEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"appHost\": \"appHost_example\" // String | The type of UserApp to filter by\n};\n\n// List permitted user app integrations for the logged in user\napiInstance.getIntegrationsUserapps(opts)\n  .then((data) => {\n    console.log(`getIntegrationsUserapps success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIntegrationsUserapps\");\n    console.error(err);\n  });"
  },
  "patchintegration": {
    "operationId": "patchintegration",
    "functionName": "patchIntegration",
    "signature": "patchIntegration(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"body\": {} // Object | Integration Update\n};\n\n// Update an integration.\napiInstance.patchIntegration(integrationId, opts)\n  .then((data) => {\n    console.log(`patchIntegration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchIntegration\");\n    console.error(err);\n  });"
  },
  "patchintegrationsaction": {
    "operationId": "patchintegrationsaction",
    "functionName": "patchIntegrationsAction",
    "signature": "patchIntegrationsAction(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = {}; // Object | Input used to patch the Action.\n\n// Patch an Action\napiInstance.patchIntegrationsAction(actionId, body)\n  .then((data) => {\n    console.log(`patchIntegrationsAction success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchIntegrationsAction\");\n    console.error(err);\n  });"
  },
  "patchintegrationsactiondraft": {
    "operationId": "patchintegrationsactiondraft",
    "functionName": "patchIntegrationsActionDraft",
    "signature": "patchIntegrationsActionDraft(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = {}; // Object | Input used to patch the Action Draft.\n\n// Update an existing Draft\napiInstance.patchIntegrationsActionDraft(actionId, body)\n  .then((data) => {\n    console.log(`patchIntegrationsActionDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchIntegrationsActionDraft\");\n    console.error(err);\n  });"
  },
  "postintegrations": {
    "operationId": "postintegrations",
    "functionName": "postIntegrations",
    "signature": "postIntegrations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"body\": {} // Object | Integration\n};\n\n// Create an integration.\napiInstance.postIntegrations(opts)\n  .then((data) => {\n    console.log(`postIntegrations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrations\");\n    console.error(err);\n  });"
  },
  "postintegrationsactiondraft": {
    "operationId": "postintegrationsactiondraft",
    "functionName": "postIntegrationsActionDraft",
    "signature": "postIntegrationsActionDraft(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n// Create a new Draft from existing Action\napiInstance.postIntegrationsActionDraft(actionId)\n  .then((data) => {\n    console.log(`postIntegrationsActionDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsActionDraft\");\n    console.error(err);\n  });"
  },
  "postintegrationsactiondraftpublish": {
    "operationId": "postintegrationsactiondraftpublish",
    "functionName": "postIntegrationsActionDraftPublish",
    "signature": "postIntegrationsActionDraftPublish(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = {}; // Object | Input used to patch the Action.\n\n// Publish a Draft and make it the active Action configuration\napiInstance.postIntegrationsActionDraftPublish(actionId, body)\n  .then((data) => {\n    console.log(`postIntegrationsActionDraftPublish success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsActionDraftPublish\");\n    console.error(err);\n  });"
  },
  "postintegrationsactiondrafttest": {
    "operationId": "postintegrationsactiondrafttest",
    "functionName": "postIntegrationsActionDraftTest",
    "signature": "postIntegrationsActionDraftTest(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "{String: Object}",
        "required": "true"
      }
    ],
    "return": "TestExecutionResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = null; // {String: Object} | Map of parameters used for variable substitution.\n\n// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.\napiInstance.postIntegrationsActionDraftTest(actionId, body)\n  .then((data) => {\n    console.log(`postIntegrationsActionDraftTest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsActionDraftTest\");\n    console.error(err);\n  });"
  },
  "postintegrationsactionexecute": {
    "operationId": "postintegrationsactionexecute",
    "functionName": "postIntegrationsActionExecute",
    "signature": "postIntegrationsActionExecute(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "{String: Object}",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = null; // {String: Object} | Map of parameters used for variable substitution.\n\n// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.\napiInstance.postIntegrationsActionExecute(actionId, body)\n  .then((data) => {\n    console.log(`postIntegrationsActionExecute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsActionExecute\");\n    console.error(err);\n  });"
  },
  "postintegrationsactiontest": {
    "operationId": "postintegrationsactiontest",
    "functionName": "postIntegrationsActionTest",
    "signature": "postIntegrationsActionTest(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "{String: Object}",
        "required": "true"
      }
    ],
    "return": "TestExecutionResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = null; // {String: Object} | Map of parameters used for variable substitution.\n\n// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.\napiInstance.postIntegrationsActionTest(actionId, body)\n  .then((data) => {\n    console.log(`postIntegrationsActionTest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsActionTest\");\n    console.error(err);\n  });"
  },
  "postintegrationsactions": {
    "operationId": "postintegrationsactions",
    "functionName": "postIntegrationsActions",
    "signature": "postIntegrationsActions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet body = {}; // Object | Input used to create Action.\n\n// Create a new Action\napiInstance.postIntegrationsActions(body)\n  .then((data) => {\n    console.log(`postIntegrationsActions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsActions\");\n    console.error(err);\n  });"
  },
  "postintegrationsactionsdrafts": {
    "operationId": "postintegrationsactionsdrafts",
    "functionName": "postIntegrationsActionsDrafts",
    "signature": "postIntegrationsActionsDrafts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet body = {}; // Object | Input used to create Action Draft.\n\n// Create a new Draft\napiInstance.postIntegrationsActionsDrafts(body)\n  .then((data) => {\n    console.log(`postIntegrationsActionsDrafts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsActionsDrafts\");\n    console.error(err);\n  });"
  },
  "postintegrationscredentials": {
    "operationId": "postintegrationscredentials",
    "functionName": "postIntegrationsCredentials",
    "signature": "postIntegrationsCredentials(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "CredentialInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet opts = { \n  \"body\": {} // Object | Credential\n};\n\n// Create a set of credentials\napiInstance.postIntegrationsCredentials(opts)\n  .then((data) => {\n    console.log(`postIntegrationsCredentials success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsCredentials\");\n    console.error(err);\n  });"
  },
  "postintegrationsspeechnuancenuanceintegrationidbotjobs": {
    "operationId": "postintegrationsspeechnuancenuanceintegrationidbotjobs",
    "functionName": "postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs",
    "signature": "postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs(nuanceIntegrationId, botId, expand, body)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "body",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AsyncJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet botId = \"botId_example\"; // String | The Nuance bot ID\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | expand\n  \"body\": \"body_example\" // String | targetChannel\n};\n\n// Get a Nuance bot in the specified Integration asynchronously\napiInstance.postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs(nuanceIntegrationId, botId, opts)\n  .then((data) => {\n    console.log(`postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs\");\n    console.error(err);\n  });"
  },
  "postintegrationsspeechnuancenuanceintegrationidbotsjobs": {
    "operationId": "postintegrationsspeechnuancenuanceintegrationidbotsjobs",
    "functionName": "postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs",
    "signature": "postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs(nuanceIntegrationId, pageNumber, pageSize, onlyRegisteredBots)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "onlyRegisteredBots",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AsyncJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"onlyRegisteredBots\": true // Boolean | Limit bots to the ones configured for Genesys Cloud usage\n};\n\n// Get a list of Nuance bots in the specified Integration asynchronously\napiInstance.postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs(nuanceIntegrationId, opts)\n  .then((data) => {\n    console.log(`postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs\");\n    console.error(err);\n  });"
  },
  "postintegrationsspeechnuancenuanceintegrationidbotslaunchvalidate": {
    "operationId": "postintegrationsspeechnuancenuanceintegrationidbotslaunchvalidate",
    "functionName": "postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate",
    "signature": "postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate(nuanceIntegrationId, settings)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "settings",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet settings = {}; // Object | \n\n// Try out a single credential for a Nuance bot to know if the secret is correct\napiInstance.postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate(nuanceIntegrationId, settings)\n  .then(() => {\n    console.log(\"postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate\");\n    console.error(err);\n  });"
  },
  "putintegrationconfigcurrent": {
    "operationId": "putintegrationconfigcurrent",
    "functionName": "putIntegrationConfigCurrent",
    "signature": "putIntegrationConfigCurrent(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "IntegrationConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\nlet opts = { \n  \"body\": {} // Object | Integration Configuration\n};\n\n// Update integration configuration.\napiInstance.putIntegrationConfigCurrent(integrationId, opts)\n  .then((data) => {\n    console.log(`putIntegrationConfigCurrent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIntegrationConfigCurrent\");\n    console.error(err);\n  });"
  },
  "putintegrationsbotconnectorintegrationidbots": {
    "operationId": "putintegrationsbotconnectorintegrationidbots",
    "functionName": "putIntegrationsBotconnectorIntegrationIdBots",
    "signature": "putIntegrationsBotconnectorIntegrationIdBots(integrationId, botList)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botList",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\nlet botList = {}; // Object | \n\n// Set a list of botConnector bots plus versions for this integration\napiInstance.putIntegrationsBotconnectorIntegrationIdBots(integrationId, botList)\n  .then(() => {\n    console.log(\"putIntegrationsBotconnectorIntegrationIdBots returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIntegrationsBotconnectorIntegrationIdBots\");\n    console.error(err);\n  });"
  },
  "putintegrationscredential": {
    "operationId": "putintegrationscredential",
    "functionName": "putIntegrationsCredential",
    "signature": "putIntegrationsCredential(credentialId, body)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "CredentialInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet credentialId = \"credentialId_example\"; // String | Credential ID\nlet opts = { \n  \"body\": {} // Object | Credential\n};\n\n// Update a set of credentials\napiInstance.putIntegrationsCredential(credentialId, opts)\n  .then((data) => {\n    console.log(`putIntegrationsCredential success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIntegrationsCredential\");\n    console.error(err);\n  });"
  },
  "putintegrationsspeechnuancenuanceintegrationidbotslaunchsettings": {
    "operationId": "putintegrationsspeechnuancenuanceintegrationidbotslaunchsettings",
    "functionName": "putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings",
    "signature": "putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings(nuanceIntegrationId, settings)",
    "parameters": [
      {
        "name": "nuanceIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "settings",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet nuanceIntegrationId = \"nuanceIntegrationId_example\"; // String | The integration ID for this group of bots\nlet settings = {}; // Object | \n\n// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration\napiInstance.putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings(nuanceIntegrationId, settings)\n  .then(() => {\n    console.log(\"putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings\");\n    console.error(err);\n  });"
  },
  "putintegrationsspeechttssettings": {
    "operationId": "putintegrationsspeechttssettings",
    "functionName": "putIntegrationsSpeechTtsSettings",
    "signature": "putIntegrationsSpeechTtsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TtsSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet body = {}; // Object | Updated TtsSettings\n\n// Update TTS settings for an org\napiInstance.putIntegrationsSpeechTtsSettings(body)\n  .then((data) => {\n    console.log(`putIntegrationsSpeechTtsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIntegrationsSpeechTtsSettings\");\n    console.error(err);\n  });"
  },
  "putintegrationsunifiedcommunicationthirdpartypresences": {
    "operationId": "putintegrationsunifiedcommunicationthirdpartypresences",
    "functionName": "putIntegrationsUnifiedcommunicationThirdpartypresences",
    "signature": "putIntegrationsUnifiedcommunicationThirdpartypresences(ucIntegrationId, body)",
    "parameters": [
      {
        "name": "ucIntegrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.IntegrationsApi();\n\nlet ucIntegrationId = \"ucIntegrationId_example\"; // String | UC Integration ID\nlet body = [{}]; // Object | List of User presences\n\n// Bulk integration presence ingestion\napiInstance.putIntegrationsUnifiedcommunicationThirdpartypresences(ucIntegrationId, body)\n  .then((data) => {\n    console.log(`putIntegrationsUnifiedcommunicationThirdpartypresences success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putIntegrationsUnifiedcommunicationThirdpartypresences\");\n    console.error(err);\n  });"
  },
  "deletejourneyactionmap": {
    "operationId": "deletejourneyactionmap",
    "functionName": "deleteJourneyActionmap",
    "signature": "deleteJourneyActionmap(actionMapId)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionMapId = \"actionMapId_example\"; // String | ID of the action map.\n\n// Delete single action map.\napiInstance.deleteJourneyActionmap(actionMapId)\n  .then(() => {\n    console.log(\"deleteJourneyActionmap returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteJourneyActionmap\");\n    console.error(err);\n  });"
  },
  "deletejourneyactiontemplate": {
    "operationId": "deletejourneyactiontemplate",
    "functionName": "deleteJourneyActiontemplate",
    "signature": "deleteJourneyActiontemplate(actionTemplateId, hardDelete)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "hardDelete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionTemplateId = \"actionTemplateId_example\"; // String | ID of the action template.\nlet opts = { \n  \"hardDelete\": true // Boolean | Determines whether Action Template should be soft-deleted (have it's state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default.\n};\n\n// Delete a single action template.\napiInstance.deleteJourneyActiontemplate(actionTemplateId, opts)\n  .then(() => {\n    console.log(\"deleteJourneyActiontemplate returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteJourneyActiontemplate\");\n    console.error(err);\n  });"
  },
  "deletejourneyoutcome": {
    "operationId": "deletejourneyoutcome",
    "functionName": "deleteJourneyOutcome",
    "signature": "deleteJourneyOutcome(outcomeId)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet outcomeId = \"outcomeId_example\"; // String | ID of the outcome.\n\n// Delete an outcome.\napiInstance.deleteJourneyOutcome(outcomeId)\n  .then(() => {\n    console.log(\"deleteJourneyOutcome returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteJourneyOutcome\");\n    console.error(err);\n  });"
  },
  "deletejourneyoutcomespredictor": {
    "operationId": "deletejourneyoutcomespredictor",
    "functionName": "deleteJourneyOutcomesPredictor",
    "signature": "deleteJourneyOutcomesPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet predictorId = \"predictorId_example\"; // String | ID of predictor\n\n// Delete an outcome predictor.\napiInstance.deleteJourneyOutcomesPredictor(predictorId)\n  .then(() => {\n    console.log(\"deleteJourneyOutcomesPredictor returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteJourneyOutcomesPredictor\");\n    console.error(err);\n  });"
  },
  "deletejourneysegment": {
    "operationId": "deletejourneysegment",
    "functionName": "deleteJourneySegment",
    "signature": "deleteJourneySegment(segmentId)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet segmentId = \"segmentId_example\"; // String | ID of the segment.\n\n// Delete a segment.\napiInstance.deleteJourneySegment(segmentId)\n  .then(() => {\n    console.log(\"deleteJourneySegment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteJourneySegment\");\n    console.error(err);\n  });"
  },
  "getjourneyactionmap": {
    "operationId": "getjourneyactionmap",
    "functionName": "getJourneyActionmap",
    "signature": "getJourneyActionmap(actionMapId)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionMap",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionMapId = \"actionMapId_example\"; // String | ID of the action map.\n\n// Retrieve a single action map.\napiInstance.getJourneyActionmap(actionMapId)\n  .then((data) => {\n    console.log(`getJourneyActionmap success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActionmap\");\n    console.error(err);\n  });"
  },
  "getjourneyactionmaps": {
    "operationId": "getjourneyactionmaps",
    "functionName": "getJourneyActionmaps",
    "signature": "getJourneyActionmaps(pageNumber, pageSize, sortBy, filterField, filterValue, actionMapIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "filterField",
        "type": "String",
        "required": "false"
      },
      {
        "name": "filterValue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "actionMapIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionMapListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"sortBy_example\", // String | Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\n  \"filterField\": \"filterField_example\", // String | Field to filter by (e.g. filterField=weight or filterField=action.actionTemplate.id). Requires 'filterField' to also be set.\n  \"filterValue\": \"filterValue_example\", // String | Value to filter by. Requires 'filterValue' to also be set.\n  \"actionMapIds\": [\"actionMapIds_example\"], // [String] | IDs of action maps to return. Use of this parameter is not compatible with pagination, filtering, sorting or querying. A maximum of 100 action maps are allowed per request.\n  \"queryFields\": [\"queryFields_example\"], // [String] | Action Map field(s) to query on. Requires 'queryValue' to also be set.\n  \"queryValue\": \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n// Retrieve all action maps.\napiInstance.getJourneyActionmaps(opts)\n  .then((data) => {\n    console.log(`getJourneyActionmaps success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActionmaps\");\n    console.error(err);\n  });"
  },
  "getjourneyactionmapsestimatesjob": {
    "operationId": "getjourneyactionmapsestimatesjob",
    "functionName": "getJourneyActionmapsEstimatesJob",
    "signature": "getJourneyActionmapsEstimatesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet jobId = \"jobId_example\"; // String | ID of the job.\n\n// Get status of job.\napiInstance.getJourneyActionmapsEstimatesJob(jobId)\n  .then((data) => {\n    console.log(`getJourneyActionmapsEstimatesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActionmapsEstimatesJob\");\n    console.error(err);\n  });"
  },
  "getjourneyactionmapsestimatesjobresults": {
    "operationId": "getjourneyactionmapsestimatesjobresults",
    "functionName": "getJourneyActionmapsEstimatesJobResults",
    "signature": "getJourneyActionmapsEstimatesJobResults(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionMapEstimateResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet jobId = \"jobId_example\"; // String | ID of the job.\n\n// Get estimates from completed job.\napiInstance.getJourneyActionmapsEstimatesJobResults(jobId)\n  .then((data) => {\n    console.log(`getJourneyActionmapsEstimatesJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActionmapsEstimatesJobResults\");\n    console.error(err);\n  });"
  },
  "getjourneyactiontarget": {
    "operationId": "getjourneyactiontarget",
    "functionName": "getJourneyActiontarget",
    "signature": "getJourneyActiontarget(actionTargetId)",
    "parameters": [
      {
        "name": "actionTargetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionTarget",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionTargetId = \"actionTargetId_example\"; // String | ID of the action target.\n\n// Retrieve a single action target.\napiInstance.getJourneyActiontarget(actionTargetId)\n  .then((data) => {\n    console.log(`getJourneyActiontarget success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActiontarget\");\n    console.error(err);\n  });"
  },
  "getjourneyactiontargets": {
    "operationId": "getjourneyactiontargets",
    "functionName": "getJourneyActiontargets",
    "signature": "getJourneyActiontargets(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ActionTargetListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Retrieve all action targets.\napiInstance.getJourneyActiontargets(opts)\n  .then((data) => {\n    console.log(`getJourneyActiontargets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActiontargets\");\n    console.error(err);\n  });"
  },
  "getjourneyactiontemplate": {
    "operationId": "getjourneyactiontemplate",
    "functionName": "getJourneyActiontemplate",
    "signature": "getJourneyActiontemplate(actionTemplateId)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionTemplate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionTemplateId = \"actionTemplateId_example\"; // String | ID of the action template.\n\n// Retrieve a single action template.\napiInstance.getJourneyActiontemplate(actionTemplateId)\n  .then((data) => {\n    console.log(`getJourneyActiontemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActiontemplate\");\n    console.error(err);\n  });"
  },
  "getjourneyactiontemplates": {
    "operationId": "getjourneyactiontemplates",
    "functionName": "getJourneyActiontemplates",
    "signature": "getJourneyActiontemplates(pageNumber, pageSize, sortBy, mediaType, state, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionTemplateListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"sortBy_example\", // String | Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=name,-createdDate).\n  \"mediaType\": \"mediaType_example\", // String | Media type\n  \"state\": \"state_example\", // String | Action template state.\n  \"queryFields\": [\"queryFields_example\"], // [String] | ActionTemplate field(s) to query on. Requires 'queryValue' to also be set.\n  \"queryValue\": \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n// Retrieve all action templates.\napiInstance.getJourneyActiontemplates(opts)\n  .then((data) => {\n    console.log(`getJourneyActiontemplates success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyActiontemplates\");\n    console.error(err);\n  });"
  },
  "getjourneyoutcome": {
    "operationId": "getjourneyoutcome",
    "functionName": "getJourneyOutcome",
    "signature": "getJourneyOutcome(outcomeId)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Outcome",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet outcomeId = \"outcomeId_example\"; // String | ID of the outcome.\n\n// Retrieve a single outcome.\napiInstance.getJourneyOutcome(outcomeId)\n  .then((data) => {\n    console.log(`getJourneyOutcome success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyOutcome\");\n    console.error(err);\n  });"
  },
  "getjourneyoutcomes": {
    "operationId": "getjourneyoutcomes",
    "functionName": "getJourneyOutcomes",
    "signature": "getJourneyOutcomes(pageNumber, pageSize, sortBy, outcomeIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "outcomeIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutcomeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"sortBy_example\", // String | Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\n  \"outcomeIds\": [\"outcomeIds_example\"], // [String] | IDs of outcomes to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 20 outcomes are allowed per request.\n  \"queryFields\": [\"queryFields_example\"], // [String] | Outcome field(s) to query on. Requires 'queryValue' to also be set.\n  \"queryValue\": \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n// Retrieve all outcomes.\napiInstance.getJourneyOutcomes(opts)\n  .then((data) => {\n    console.log(`getJourneyOutcomes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyOutcomes\");\n    console.error(err);\n  });"
  },
  "getjourneyoutcomesattributionsjob": {
    "operationId": "getjourneyoutcomesattributionsjob",
    "functionName": "getJourneyOutcomesAttributionsJob",
    "signature": "getJourneyOutcomesAttributionsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutcomeAttributionJobStateResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet jobId = \"jobId_example\"; // String | ID of the job.\n\n// Get job status.\napiInstance.getJourneyOutcomesAttributionsJob(jobId)\n  .then((data) => {\n    console.log(`getJourneyOutcomesAttributionsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyOutcomesAttributionsJob\");\n    console.error(err);\n  });"
  },
  "getjourneyoutcomesattributionsjobresults": {
    "operationId": "getjourneyoutcomesattributionsjobresults",
    "functionName": "getJourneyOutcomesAttributionsJobResults",
    "signature": "getJourneyOutcomesAttributionsJobResults(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutcomeAttributionResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet jobId = \"jobId_example\"; // String | ID of the job.\n\n// Get outcome attribution entities from completed job.\napiInstance.getJourneyOutcomesAttributionsJobResults(jobId)\n  .then((data) => {\n    console.log(`getJourneyOutcomesAttributionsJobResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyOutcomesAttributionsJobResults\");\n    console.error(err);\n  });"
  },
  "getjourneyoutcomespredictor": {
    "operationId": "getjourneyoutcomespredictor",
    "functionName": "getJourneyOutcomesPredictor",
    "signature": "getJourneyOutcomesPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutcomePredictor",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet predictorId = \"predictorId_example\"; // String | ID of predictor\n\n// Retrieve a single outcome predictor.\napiInstance.getJourneyOutcomesPredictor(predictorId)\n  .then((data) => {\n    console.log(`getJourneyOutcomesPredictor success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyOutcomesPredictor\");\n    console.error(err);\n  });"
  },
  "getjourneyoutcomespredictors": {
    "operationId": "getjourneyoutcomespredictors",
    "functionName": "getJourneyOutcomesPredictors",
    "signature": "getJourneyOutcomesPredictors()",
    "return": "OutcomePredictorListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\n// Retrieve all outcome predictors.\napiInstance.getJourneyOutcomesPredictors()\n  .then((data) => {\n    console.log(`getJourneyOutcomesPredictors success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneyOutcomesPredictors\");\n    console.error(err);\n  });"
  },
  "getjourneysegment": {
    "operationId": "getjourneysegment",
    "functionName": "getJourneySegment",
    "signature": "getJourneySegment(segmentId)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JourneySegment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet segmentId = \"segmentId_example\"; // String | ID of the segment.\n\n// Retrieve a single segment.\napiInstance.getJourneySegment(segmentId)\n  .then((data) => {\n    console.log(`getJourneySegment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneySegment\");\n    console.error(err);\n  });"
  },
  "getjourneysegments": {
    "operationId": "getjourneysegments",
    "functionName": "getJourneySegments",
    "signature": "getJourneySegments(sortBy, pageSize, pageNumber, isActive, segmentIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "isActive",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "segmentIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SegmentListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"sortBy\": \"sortBy_example\", // String | Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"isActive\": true, // Boolean | Determines whether or not to show only active segments.\n  \"segmentIds\": [\"segmentIds_example\"], // [String] | IDs of segments to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 100 segments are allowed per request.\n  \"queryFields\": [\"queryFields_example\"], // [String] | Segment field(s) to query on. Requires 'queryValue' to also be set.\n  \"queryValue\": \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n// Retrieve all segments.\napiInstance.getJourneySegments(opts)\n  .then((data) => {\n    console.log(`getJourneySegments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneySegments\");\n    console.error(err);\n  });"
  },
  "getjourneysession": {
    "operationId": "getjourneysession",
    "functionName": "getJourneySession",
    "signature": "getJourneySession(sessionId)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Session",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet sessionId = \"sessionId_example\"; // String | ID of the session.\n\n// Retrieve a single session.\napiInstance.getJourneySession(sessionId)\n  .then((data) => {\n    console.log(`getJourneySession success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneySession\");\n    console.error(err);\n  });"
  },
  "getjourneysessionevents": {
    "operationId": "getjourneysessionevents",
    "functionName": "getJourneySessionEvents",
    "signature": "getJourneySessionEvents(sessionId, pageSize, after)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EventListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet sessionId = \"sessionId_example\"; // String | System-generated UUID that represents the session the event is a part of.\nlet opts = { \n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"after\": \"after_example\" // String | The cursor that points to the end of the set of entities that has been returned.\n};\n\n// Retrieve all events for a given session.\napiInstance.getJourneySessionEvents(sessionId, opts)\n  .then((data) => {\n    console.log(`getJourneySessionEvents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneySessionEvents\");\n    console.error(err);\n  });"
  },
  "getjourneysessionoutcomescores": {
    "operationId": "getjourneysessionoutcomescores",
    "functionName": "getJourneySessionOutcomescores",
    "signature": "getJourneySessionOutcomescores(sessionId)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutcomeScoresResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet sessionId = \"sessionId_example\"; // String | ID of the session.\n\n// Retrieve latest outcome score associated with a session for all outcomes.\napiInstance.getJourneySessionOutcomescores(sessionId)\n  .then((data) => {\n    console.log(`getJourneySessionOutcomescores success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneySessionOutcomescores\");\n    console.error(err);\n  });"
  },
  "getjourneysessionsegments": {
    "operationId": "getjourneysessionsegments",
    "functionName": "getJourneySessionSegments",
    "signature": "getJourneySessionSegments(sessionId, pageSize, after, segmentScope, assignmentState)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "segmentScope",
        "type": "String",
        "required": "false"
      },
      {
        "name": "assignmentState",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SegmentAssignmentListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet sessionId = \"sessionId_example\"; // String | ID of the session to query for segment assignments.\nlet opts = { \n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"segmentScope\": \"segmentScope_example\", // String | Scope to filter on. If not specified, both session-scoped and customer-scoped assignments are returned.\n  \"assignmentState\": \"assignmentState_example\" // String | Assignment state to filter on. If not specified, both assigned and unassigned assignments are returned.\n};\n\n// Retrieve segment assignments by session ID.\napiInstance.getJourneySessionSegments(sessionId, opts)\n  .then((data) => {\n    console.log(`getJourneySessionSegments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getJourneySessionSegments\");\n    console.error(err);\n  });"
  },
  "patchjourneyactionmap": {
    "operationId": "patchjourneyactionmap",
    "functionName": "patchJourneyActionmap",
    "signature": "patchJourneyActionmap(actionMapId, body)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionMap",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionMapId = \"actionMapId_example\"; // String | ID of the action map.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update single action map.\napiInstance.patchJourneyActionmap(actionMapId, opts)\n  .then((data) => {\n    console.log(`patchJourneyActionmap success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchJourneyActionmap\");\n    console.error(err);\n  });"
  },
  "patchjourneyactiontarget": {
    "operationId": "patchjourneyactiontarget",
    "functionName": "patchJourneyActiontarget",
    "signature": "patchJourneyActiontarget(actionTargetId, body)",
    "parameters": [
      {
        "name": "actionTargetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionTarget",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionTargetId = \"actionTargetId_example\"; // String | ID of the action target.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update a single action target.\napiInstance.patchJourneyActiontarget(actionTargetId, opts)\n  .then((data) => {\n    console.log(`patchJourneyActiontarget success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchJourneyActiontarget\");\n    console.error(err);\n  });"
  },
  "patchjourneyactiontemplate": {
    "operationId": "patchjourneyactiontemplate",
    "functionName": "patchJourneyActiontemplate",
    "signature": "patchJourneyActiontemplate(actionTemplateId, body)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionTemplate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet actionTemplateId = \"actionTemplateId_example\"; // String | ID of the action template.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update a single action template.\napiInstance.patchJourneyActiontemplate(actionTemplateId, opts)\n  .then((data) => {\n    console.log(`patchJourneyActiontemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchJourneyActiontemplate\");\n    console.error(err);\n  });"
  },
  "patchjourneyoutcome": {
    "operationId": "patchjourneyoutcome",
    "functionName": "patchJourneyOutcome",
    "signature": "patchJourneyOutcome(outcomeId, body)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Outcome",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet outcomeId = \"outcomeId_example\"; // String | ID of the outcome.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update an outcome.\napiInstance.patchJourneyOutcome(outcomeId, opts)\n  .then((data) => {\n    console.log(`patchJourneyOutcome success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchJourneyOutcome\");\n    console.error(err);\n  });"
  },
  "patchjourneysegment": {
    "operationId": "patchjourneysegment",
    "functionName": "patchJourneySegment",
    "signature": "patchJourneySegment(segmentId, body)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "JourneySegment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet segmentId = \"segmentId_example\"; // String | ID of the segment.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update a segment.\napiInstance.patchJourneySegment(segmentId, opts)\n  .then((data) => {\n    console.log(`patchJourneySegment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchJourneySegment\");\n    console.error(err);\n  });"
  },
  "postjourneyactionmaps": {
    "operationId": "postjourneyactionmaps",
    "functionName": "postJourneyActionmaps",
    "signature": "postJourneyActionmaps(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionMap",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create an action map.\napiInstance.postJourneyActionmaps(opts)\n  .then((data) => {\n    console.log(`postJourneyActionmaps success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneyActionmaps\");\n    console.error(err);\n  });"
  },
  "postjourneyactionmapsestimatesjobs": {
    "operationId": "postjourneyactionmapsestimatesjobs",
    "functionName": "postJourneyActionmapsEstimatesJobs",
    "signature": "postJourneyActionmapsEstimatesJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EstimateJobAsyncResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet body = {}; // Object | audience estimator request\n\n// Query for estimates\napiInstance.postJourneyActionmapsEstimatesJobs(body)\n  .then((data) => {\n    console.log(`postJourneyActionmapsEstimatesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneyActionmapsEstimatesJobs\");\n    console.error(err);\n  });"
  },
  "postjourneyactiontemplates": {
    "operationId": "postjourneyactiontemplates",
    "functionName": "postJourneyActiontemplates",
    "signature": "postJourneyActiontemplates(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionTemplate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a single action template.\napiInstance.postJourneyActiontemplates(opts)\n  .then((data) => {\n    console.log(`postJourneyActiontemplates success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneyActiontemplates\");\n    console.error(err);\n  });"
  },
  "postjourneydeploymentappevents": {
    "operationId": "postjourneydeploymentappevents",
    "functionName": "postJourneyDeploymentAppevents",
    "signature": "postJourneyDeploymentAppevents(deploymentId, body)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "AppEventResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | The ID of the deployment sending the app event.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Send a journey app event, used for tracking customer activity on an application.\napiInstance.postJourneyDeploymentAppevents(deploymentId, opts)\n  .then((data) => {\n    console.log(`postJourneyDeploymentAppevents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneyDeploymentAppevents\");\n    console.error(err);\n  });"
  },
  "postjourneyoutcomes": {
    "operationId": "postjourneyoutcomes",
    "functionName": "postJourneyOutcomes",
    "signature": "postJourneyOutcomes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Outcome",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create an outcome.\napiInstance.postJourneyOutcomes(opts)\n  .then((data) => {\n    console.log(`postJourneyOutcomes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneyOutcomes\");\n    console.error(err);\n  });"
  },
  "postjourneyoutcomesattributionsjobs": {
    "operationId": "postjourneyoutcomesattributionsjobs",
    "functionName": "postJourneyOutcomesAttributionsJobs",
    "signature": "postJourneyOutcomesAttributionsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "OutcomeAttributionAsyncResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"body\": {} // Object | outcome attribution request\n};\n\n// Create Outcome Attributions\napiInstance.postJourneyOutcomesAttributionsJobs(opts)\n  .then((data) => {\n    console.log(`postJourneyOutcomesAttributionsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneyOutcomesAttributionsJobs\");\n    console.error(err);\n  });"
  },
  "postjourneyoutcomespredictors": {
    "operationId": "postjourneyoutcomespredictors",
    "functionName": "postJourneyOutcomesPredictors",
    "signature": "postJourneyOutcomesPredictors(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "OutcomePredictor",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create an outcome predictor.\napiInstance.postJourneyOutcomesPredictors(opts)\n  .then((data) => {\n    console.log(`postJourneyOutcomesPredictors success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneyOutcomesPredictors\");\n    console.error(err);\n  });"
  },
  "postjourneysegments": {
    "operationId": "postjourneysegments",
    "functionName": "postJourneySegments",
    "signature": "postJourneySegments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "JourneySegment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.JourneyApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a segment.\napiInstance.postJourneySegments(opts)\n  .then((data) => {\n    console.log(`postJourneySegments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postJourneySegments\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebase": {
    "operationId": "deleteknowledgeknowledgebase",
    "functionName": "deleteKnowledgeKnowledgebase",
    "signature": "deleteKnowledgeKnowledgebase(knowledgeBaseId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\n\n// Delete knowledge base\napiInstance.deleteKnowledgeKnowledgebase(knowledgeBaseId)\n  .then((data) => {\n    console.log(`deleteKnowledgeKnowledgebase success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebase\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebasecategory": {
    "operationId": "deleteknowledgeknowledgebasecategory",
    "functionName": "deleteKnowledgeKnowledgebaseCategory",
    "signature": "deleteKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CategoryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet categoryId = \"categoryId_example\"; // String | Category ID\n\n// Delete category\napiInstance.deleteKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId)\n  .then((data) => {\n    console.log(`deleteKnowledgeKnowledgebaseCategory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseCategory\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebasedocument": {
    "operationId": "deleteknowledgeknowledgebasedocument",
    "functionName": "deleteKnowledgeKnowledgebaseDocument",
    "signature": "deleteKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\n\n// Delete document.\napiInstance.deleteKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId)\n  .then(() => {\n    console.log(\"deleteKnowledgeKnowledgebaseDocument returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseDocument\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebasedocumentvariation": {
    "operationId": "deleteknowledgeknowledgebasedocumentvariation",
    "functionName": "deleteKnowledgeKnowledgebaseDocumentVariation",
    "signature": "deleteKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId)",
    "parameters": [
      {
        "name": "documentVariationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentVariationId = \"documentVariationId_example\"; // String | Globally unique identifier for a document variation.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for a document.\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for a knowledge base.\n\n// Delete a variation for a document.\napiInstance.deleteKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId)\n  .then(() => {\n    console.log(\"deleteKnowledgeKnowledgebaseDocumentVariation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseDocumentVariation\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebaseexportjob": {
    "operationId": "deleteknowledgeknowledgebaseexportjob",
    "functionName": "deleteKnowledgeKnowledgebaseExportJob",
    "signature": "deleteKnowledgeKnowledgebaseExportJob(knowledgeBaseId, exportJobId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "exportJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet exportJobId = \"exportJobId_example\"; // String | Export job ID\n\n// Delete export job\napiInstance.deleteKnowledgeKnowledgebaseExportJob(knowledgeBaseId, exportJobId)\n  .then(() => {\n    console.log(\"deleteKnowledgeKnowledgebaseExportJob returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseExportJob\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebaseimportjob": {
    "operationId": "deleteknowledgeknowledgebaseimportjob",
    "functionName": "deleteKnowledgeKnowledgebaseImportJob",
    "signature": "deleteKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet importJobId = \"importJobId_example\"; // String | Import job ID\n\n// Delete import job\napiInstance.deleteKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId)\n  .then(() => {\n    console.log(\"deleteKnowledgeKnowledgebaseImportJob returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseImportJob\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebaselabel": {
    "operationId": "deleteknowledgeknowledgebaselabel",
    "functionName": "deleteKnowledgeKnowledgebaseLabel",
    "signature": "deleteKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "labelId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LabelResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet labelId = \"labelId_example\"; // String | Label ID\n\n// Delete label\napiInstance.deleteKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId)\n  .then((data) => {\n    console.log(`deleteKnowledgeKnowledgebaseLabel success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseLabel\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebaselanguagecategory": {
    "operationId": "deleteknowledgeknowledgebaselanguagecategory",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageCategory",
    "signature": "deleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeCategory",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet categoryId = \"categoryId_example\"; // String | Category ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\n\n// Delete category\napiInstance.deleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)\n  .then((data) => {\n    console.log(`deleteKnowledgeKnowledgebaseLanguageCategory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseLanguageCategory\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebaselanguagedocument": {
    "operationId": "deleteknowledgeknowledgebaselanguagedocument",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageDocument",
    "signature": "deleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\n\n// Delete document\napiInstance.deleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)\n  .then((data) => {\n    console.log(`deleteKnowledgeKnowledgebaseLanguageDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseLanguageDocument\");\n    console.error(err);\n  });"
  },
  "deleteknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "deleteknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet importId = \"importId_example\"; // String | Import ID\n\n// Delete import operation\napiInstance.deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)\n  .then(() => {\n    console.log(\"deleteKnowledgeKnowledgebaseLanguageDocumentsImport returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteKnowledgeKnowledgebaseLanguageDocumentsImport\");\n    console.error(err);\n  });"
  },
  "getknowledgeguestsessioncategories": {
    "operationId": "getknowledgeguestsessioncategories",
    "functionName": "getKnowledgeGuestSessionCategories",
    "signature": "getKnowledgeGuestSessionCategories(sessionId, before, after, pageSize, parentId, isRoot, name, sortBy, expand, includeDocumentCount)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "parentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "isRoot",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeDocumentCount",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "GuestCategoryResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet sessionId = \"sessionId_example\"; // String | Knowledge guest session ID.\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"parentId\": \"parentId_example\", // String | If specified, retrieves the children categories by parent category ID.\n  \"isRoot\": true, // Boolean | If specified, retrieves only the root categories.\n  \"name\": \"name_example\", // String | Filter to return the categories that starts with the given category name.\n  \"sortBy\": \"Name\", // String | Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically\n  \"expand\": \"expand_example\", // String | The specified entity attribute will be filled. Supported value:Ancestors: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors.\n  \"includeDocumentCount\": true // Boolean | If specified, retrieves the number of documents related to category.\n};\n\n// Get categories\napiInstance.getKnowledgeGuestSessionCategories(sessionId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeGuestSessionCategories success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeGuestSessionCategories\");\n    console.error(err);\n  });"
  },
  "getknowledgeguestsessiondocument": {
    "operationId": "getknowledgeguestsessiondocument",
    "functionName": "getKnowledgeGuestSessionDocument",
    "signature": "getKnowledgeGuestSessionDocument(sessionId, documentId)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeGuestDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet sessionId = \"sessionId_example\"; // String | Knowledge guest session ID.\nlet documentId = \"documentId_example\"; // String | Document ID\n\n// Get a knowledge document by ID.\napiInstance.getKnowledgeGuestSessionDocument(sessionId, documentId)\n  .then((data) => {\n    console.log(`getKnowledgeGuestSessionDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeGuestSessionDocument\");\n    console.error(err);\n  });"
  },
  "getknowledgeguestsessiondocuments": {
    "operationId": "getknowledgeguestsessiondocuments",
    "functionName": "getKnowledgeGuestSessionDocuments",
    "signature": "getKnowledgeGuestSessionDocuments(sessionId, categoryId, pageSize)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "categoryId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "KnowledgeGuestDocumentResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet sessionId = \"sessionId_example\"; // String | Knowledge guest session ID.\nlet opts = { \n  \"categoryId\": [\"categoryId_example\"], // [String] | If specified, retrieves documents associated with category ids, comma separated values expected.\n  \"pageSize\": 3.4 // Number | Number of entities to return. Maximum of 200.\n};\n\n// Get documents.\napiInstance.getKnowledgeGuestSessionDocuments(sessionId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeGuestSessionDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeGuestSessionDocuments\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebase": {
    "operationId": "getknowledgeknowledgebase",
    "functionName": "getKnowledgeKnowledgebase",
    "signature": "getKnowledgeKnowledgebase(knowledgeBaseId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\n\n// Get knowledge base\napiInstance.getKnowledgeKnowledgebase(knowledgeBaseId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebase success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebase\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasecategories": {
    "operationId": "getknowledgeknowledgebasecategories",
    "functionName": "getKnowledgeKnowledgebaseCategories",
    "signature": "getKnowledgeKnowledgebaseCategories(knowledgeBaseId, before, after, pageSize, parentId, isRoot, name, sortBy, expand, includeDocumentCount)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "parentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "isRoot",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeDocumentCount",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "CategoryResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"parentId\": \"parentId_example\", // String | If specified, retrieves the children categories by parent category ID.\n  \"isRoot\": true, // Boolean | If specified, retrieves only the root categories.\n  \"name\": \"name_example\", // String | Filter to return the categories that starts with the given category name.\n  \"sortBy\": \"Name\", // String | Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically\n  \"expand\": \"expand_example\", // String | The specified entity attribute will be filled. Supported value:Ancestors: every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors.\n  \"includeDocumentCount\": true // Boolean | If specified, retrieves the number of documents related to category.\n};\n\n// Get categories\napiInstance.getKnowledgeKnowledgebaseCategories(knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseCategories success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseCategories\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasecategory": {
    "operationId": "getknowledgeknowledgebasecategory",
    "functionName": "getKnowledgeKnowledgebaseCategory",
    "signature": "getKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CategoryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet categoryId = \"categoryId_example\"; // String | Category ID\n\n// Get category\napiInstance.getKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseCategory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseCategory\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocument": {
    "operationId": "getknowledgeknowledgebasedocument",
    "functionName": "getKnowledgeKnowledgebaseDocument",
    "signature": "getKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId, expand, state)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20.\n  \"state\": \"state_example\" // String | when state is Draft, draft version of the document is returned,otherwise by default published version is returned in the response.\n};\n\n// Get document.\napiInstance.getKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocument\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentfeedback": {
    "operationId": "getknowledgeknowledgebasedocumentfeedback",
    "functionName": "getKnowledgeKnowledgebaseDocumentFeedback",
    "signature": "getKnowledgeKnowledgebaseDocumentFeedback(knowledgeBaseId, documentId, before, after, pageSize, onlyCommented, documentVersionId, documentVariationId, appType, queryType, userId, queueId, state)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyCommented",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "documentVersionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "documentVariationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "appType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queryType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentFeedbackResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"onlyCommented\": true, // Boolean | If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false.\n  \"documentVersionId\": \"documentVersionId_example\", // String | Document version ID to filter by. Supported only if onlyCommented=true is set.\n  \"documentVariationId\": \"documentVariationId_example\", // String | Document variation ID to filter by. Supported only if onlyCommented=true is set.\n  \"appType\": \"appType_example\", // String | Application type to filter by. Supported only if onlyCommented=true is set.\n  \"queryType\": \"queryType_example\", // String | Query type to filter by. Supported only if onlyCommented=true is set.\n  \"userId\": \"userId_example\", // String | The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented=true is set.\n  \"queueId\": \"queueId_example\", // String | Queue ID to filter by. Supported only if onlyCommented=true is set.\n  \"state\": \"state_example\" // String | State to filter by. Supported only if onlyCommented=true is set. Default: Final\n};\n\n// Get a list of feedback records given on a document\napiInstance.getKnowledgeKnowledgebaseDocumentFeedback(knowledgeBaseId, documentId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentFeedback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentFeedback\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentfeedbackfeedbackid": {
    "operationId": "getknowledgeknowledgebasedocumentfeedbackfeedbackid",
    "functionName": "getKnowledgeKnowledgebaseDocumentFeedbackFeedbackId",
    "signature": "getKnowledgeKnowledgebaseDocumentFeedbackFeedbackId(knowledgeBaseId, documentId, feedbackId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feedbackId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocumentFeedbackResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\nlet feedbackId = \"feedbackId_example\"; // String | Feedback ID.\n\n// Get a single feedback record given on a document\napiInstance.getKnowledgeKnowledgebaseDocumentFeedbackFeedbackId(knowledgeBaseId, documentId, feedbackId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentFeedbackFeedbackId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentFeedbackFeedbackId\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentvariation": {
    "operationId": "getknowledgeknowledgebasedocumentvariation",
    "functionName": "getKnowledgeKnowledgebaseDocumentVariation",
    "signature": "getKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId, documentState)",
    "parameters": [
      {
        "name": "documentVariationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentState",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentVariation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentVariationId = \"documentVariationId_example\"; // String | Globally unique identifier for a document variation.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for a document.\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for a knowledge base.\nlet opts = { \n  \"documentState\": \"documentState_example\" // String | The state of the document.\n};\n\n// Get a variation for a document.\napiInstance.getKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentVariation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentVariation\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentvariations": {
    "operationId": "getknowledgeknowledgebasedocumentvariations",
    "functionName": "getKnowledgeKnowledgebaseDocumentVariations",
    "signature": "getKnowledgeKnowledgebaseDocumentVariations(knowledgeBaseId, documentId, before, after, pageSize, documentState)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "documentState",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentVariationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for the knowledge base.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for the document.\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"documentState\": \"documentState_example\" // String | The state of the document.\n};\n\n// Get variations for a document.\napiInstance.getKnowledgeKnowledgebaseDocumentVariations(knowledgeBaseId, documentId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentVariations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentVariations\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentversion": {
    "operationId": "getknowledgeknowledgebasedocumentversion",
    "functionName": "getKnowledgeKnowledgebaseDocumentVersion",
    "signature": "getKnowledgeKnowledgebaseDocumentVersion(knowledgeBaseId, documentId, versionId, expand)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for the knowledge base.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for the document.\nlet versionId = \"versionId_example\"; // String | Globally unique identifier for the document version.\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | The specified entity attributes will be filled. Comma separated values expected.\n};\n\n// Get document version.\napiInstance.getKnowledgeKnowledgebaseDocumentVersion(knowledgeBaseId, documentId, versionId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentVersion\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentversionvariation": {
    "operationId": "getknowledgeknowledgebasedocumentversionvariation",
    "functionName": "getKnowledgeKnowledgebaseDocumentVersionVariation",
    "signature": "getKnowledgeKnowledgebaseDocumentVersionVariation(knowledgeBaseId, documentId, versionId, variationId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "variationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocumentVersionVariation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for the knowledge base.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for the document.\nlet versionId = \"versionId_example\"; // String | Globally unique identifier for the document version.\nlet variationId = \"variationId_example\"; // String | Globally unique identifier for the document version variation.\n\n// Get variation for the given document version.\napiInstance.getKnowledgeKnowledgebaseDocumentVersionVariation(knowledgeBaseId, documentId, versionId, variationId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentVersionVariation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentVersionVariation\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentversionvariations": {
    "operationId": "getknowledgeknowledgebasedocumentversionvariations",
    "functionName": "getKnowledgeKnowledgebaseDocumentVersionVariations",
    "signature": "getKnowledgeKnowledgebaseDocumentVersionVariations(knowledgeBaseId, documentId, versionId, before, after, pageSize)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentVersionVariationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for the knowledge base.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for the document.\nlet versionId = \"versionId_example\"; // String | Globally unique identifier for the document version.\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\" // String | Number of entities to return. Maximum of 200.\n};\n\n// Get variations for the given document version.\napiInstance.getKnowledgeKnowledgebaseDocumentVersionVariations(knowledgeBaseId, documentId, versionId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentVersionVariations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentVersionVariations\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocumentversions": {
    "operationId": "getknowledgeknowledgebasedocumentversions",
    "functionName": "getKnowledgeKnowledgebaseDocumentVersions",
    "signature": "getKnowledgeKnowledgebaseDocumentVersions(knowledgeBaseId, documentId, before, after, pageSize, expand)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentVersionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for the knowledge base.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for the document.\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"expand\": [\"expand_example\"] // [String] | The specified entity attributes will be filled. Comma separated values expected.\n};\n\n// Get document versions.\napiInstance.getKnowledgeKnowledgebaseDocumentVersions(knowledgeBaseId, documentId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocumentVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocumentVersions\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebasedocuments": {
    "operationId": "getknowledgeknowledgebasedocuments",
    "functionName": "getKnowledgeKnowledgebaseDocuments",
    "signature": "getKnowledgeKnowledgebaseDocuments(knowledgeBaseId, before, after, pageSize, interval, documentId, categoryId, includeSubcategories, includeDrafts, labelIds, expand, externalIds)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "documentId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "categoryId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includeSubcategories",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeDrafts",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "labelIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "externalIds",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"interval\": \"interval_example\", // String | Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ\n  \"documentId\": [\"documentId_example\"], // [String] | Retrieves the specified documents, comma separated values expected.\n  \"categoryId\": [\"categoryId_example\"], // [String] | If specified, retrieves documents associated with category ids, comma separated values expected.\n  \"includeSubcategories\": true, // Boolean | Works along with 'categoryId' query parameter. If specified, retrieves documents associated with category ids and its children categories.\n  \"includeDrafts\": true, // Boolean | If includeDrafts is true, Documents in the draft state are also returned in the response.\n  \"labelIds\": [\"labelIds_example\"], // [String] | If specified, retrieves documents associated with label ids, comma separated values expected.\n  \"expand\": [\"expand_example\"], // [String] | The specified entity attributes will be filled. Comma separated values expected.\n  \"externalIds\": [\"externalIds_example\"] // [String] | If specified, retrieves documents associated with external ids, comma separated values expected.\n};\n\n// Get documents.\napiInstance.getKnowledgeKnowledgebaseDocuments(knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseDocuments\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaseexportjob": {
    "operationId": "getknowledgeknowledgebaseexportjob",
    "functionName": "getKnowledgeKnowledgebaseExportJob",
    "signature": "getKnowledgeKnowledgebaseExportJob(knowledgeBaseId, exportJobId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "exportJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeExportJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet exportJobId = \"exportJobId_example\"; // String | Export job ID\n\n// Get export job report\napiInstance.getKnowledgeKnowledgebaseExportJob(knowledgeBaseId, exportJobId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseExportJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseExportJob\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaseimportjob": {
    "operationId": "getknowledgeknowledgebaseimportjob",
    "functionName": "getKnowledgeKnowledgebaseImportJob",
    "signature": "getKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId, expand)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importJobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "KnowledgeImportJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet importJobId = \"importJobId_example\"; // String | Import job ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | If expand contains 'urls' downloadURL and failedEntitiesURL will be filled.\n};\n\n// Get import job report\napiInstance.getKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseImportJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseImportJob\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselabel": {
    "operationId": "getknowledgeknowledgebaselabel",
    "functionName": "getKnowledgeKnowledgebaseLabel",
    "signature": "getKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "labelId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LabelResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet labelId = \"labelId_example\"; // String | Label ID\n\n// Get label\napiInstance.getKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLabel success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLabel\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselabels": {
    "operationId": "getknowledgeknowledgebaselabels",
    "functionName": "getKnowledgeKnowledgebaseLabels",
    "signature": "getKnowledgeKnowledgebaseLabels(knowledgeBaseId, before, after, pageSize, name, includeDocumentCount)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeDocumentCount",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "LabelListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"name\": \"name_example\", // String | Filter to return the labels that contains the given phrase in the name.\n  \"includeDocumentCount\": true // Boolean | If specified, retrieves the number of documents related to label.\n};\n\n// Get labels\napiInstance.getKnowledgeKnowledgebaseLabels(knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLabels success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLabels\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagecategories": {
    "operationId": "getknowledgeknowledgebaselanguagecategories",
    "functionName": "getKnowledgeKnowledgebaseLanguageCategories",
    "signature": "getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, before, after, limit, pageSize, name)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CategoryListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"limit\": \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"name\": \"name_example\" // String | Filter to return the categories that starts with the given category name.\n};\n\n// Get categories\napiInstance.getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageCategories success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageCategories\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagecategory": {
    "operationId": "getknowledgeknowledgebaselanguagecategory",
    "functionName": "getKnowledgeKnowledgebaseLanguageCategory",
    "signature": "getKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet categoryId = \"categoryId_example\"; // String | Category ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\n\n// Get category\napiInstance.getKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageCategory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageCategory\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagedocument": {
    "operationId": "getknowledgeknowledgebaselanguagedocument",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocument",
    "signature": "getKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\n\n// Get document\napiInstance.getKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageDocument\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagedocumentupload": {
    "operationId": "getknowledgeknowledgebaselanguagedocumentupload",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocumentUpload",
    "signature": "getKnowledgeKnowledgebaseLanguageDocumentUpload(documentId, knowledgeBaseId, languageCode, uploadId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "uploadId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocumentContentUpload",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet uploadId = \"uploadId_example\"; // String | UploadId\n\n// Get document content upload status\napiInstance.getKnowledgeKnowledgebaseLanguageDocumentUpload(documentId, knowledgeBaseId, languageCode, uploadId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageDocumentUpload success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageDocumentUpload\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagedocuments": {
    "operationId": "getknowledgeknowledgebaselanguagedocuments",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, before, after, limit, pageSize, categories, title, sortBy, sortOrder, documentIds)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "categories",
        "type": "String",
        "required": "false"
      },
      {
        "name": "title",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "documentIds",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DocumentListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"limit\": \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"categories\": \"categories_example\", // String | Filter by categories ids, comma separated values expected.\n  \"title\": \"title_example\", // String | Filter by document title.\n  \"sortBy\": \"sortBy_example\", // String | Sort by.\n  \"sortOrder\": \"sortOrder_example\", // String | Sort Order.\n  \"documentIds\": [\"documentIds_example\"] // [String] | Comma-separated list of document identifiers to fetch by.\n};\n\n// Get documents\napiInstance.getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageDocuments\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "getknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet importId = \"importId_example\"; // String | Import ID\n\n// Get import operation report\napiInstance.getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageDocumentsImport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageDocumentsImport\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagetraining": {
    "operationId": "getknowledgeknowledgebaselanguagetraining",
    "functionName": "getKnowledgeKnowledgebaseLanguageTraining",
    "signature": "getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trainingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet trainingId = \"trainingId_example\"; // String | Training ID\n\n// Get training detail\napiInstance.getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageTraining success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageTraining\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaselanguagetrainings": {
    "operationId": "getknowledgeknowledgebaselanguagetrainings",
    "functionName": "getKnowledgeKnowledgebaseLanguageTrainings",
    "signature": "getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, before, after, limit, pageSize, knowledgeDocumentsState)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "knowledgeDocumentsState",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrainingListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"limit\": \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"knowledgeDocumentsState\": \"knowledgeDocumentsState_example\" // String | Return the training with the specified state of the trained documents.\n};\n\n// Get all trainings information for a knowledgebase\napiInstance.getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseLanguageTrainings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseLanguageTrainings\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaseunansweredgroup": {
    "operationId": "getknowledgeknowledgebaseunansweredgroup",
    "functionName": "getKnowledgeKnowledgebaseUnansweredGroup",
    "signature": "getKnowledgeKnowledgebaseUnansweredGroup(knowledgeBaseId, groupId, app, dateStart, dateEnd)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "app",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateStart",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateEnd",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UnansweredGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet groupId = \"groupId_example\"; // String | The ID of the group to be retrieved.\nlet opts = { \n  \"app\": \"app_example\", // String | The app value to be used for filtering phrases.\n  \"dateStart\": \"dateStart_example\", // String | The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"dateEnd\": \"dateEnd_example\" // String | The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n// Get knowledge base unanswered group for a particular groupId\napiInstance.getKnowledgeKnowledgebaseUnansweredGroup(knowledgeBaseId, groupId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseUnansweredGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseUnansweredGroup\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaseunansweredgroupphrasegroup": {
    "operationId": "getknowledgeknowledgebaseunansweredgroupphrasegroup",
    "functionName": "getKnowledgeKnowledgebaseUnansweredGroupPhrasegroup",
    "signature": "getKnowledgeKnowledgebaseUnansweredGroupPhrasegroup(knowledgeBaseId, groupId, phraseGroupId, app, dateStart, dateEnd)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "phraseGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "app",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateStart",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateEnd",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UnansweredPhraseGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet groupId = \"groupId_example\"; // String | The ID of the group to be retrieved.\nlet phraseGroupId = \"phraseGroupId_example\"; // String | The ID of the phraseGroup to be retrieved.\nlet opts = { \n  \"app\": \"app_example\", // String | The app value to be used for filtering phrases.\n  \"dateStart\": \"dateStart_example\", // String | The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"dateEnd\": \"dateEnd_example\" // String | The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n// Get knowledge base unanswered phrase group for a particular phraseGroupId\napiInstance.getKnowledgeKnowledgebaseUnansweredGroupPhrasegroup(knowledgeBaseId, groupId, phraseGroupId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseUnansweredGroupPhrasegroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseUnansweredGroupPhrasegroup\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebaseunansweredgroups": {
    "operationId": "getknowledgeknowledgebaseunansweredgroups",
    "functionName": "getKnowledgeKnowledgebaseUnansweredGroups",
    "signature": "getKnowledgeKnowledgebaseUnansweredGroups(knowledgeBaseId, app, dateStart, dateEnd)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "app",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateStart",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateEnd",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UnansweredGroups",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet opts = { \n  \"app\": \"app_example\", // String | The app value to be used for filtering phrases.\n  \"dateStart\": \"dateStart_example\", // String | The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  \"dateEnd\": \"dateEnd_example\" // String | The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n// Get knowledge base unanswered groups\napiInstance.getKnowledgeKnowledgebaseUnansweredGroups(knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebaseUnansweredGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebaseUnansweredGroups\");\n    console.error(err);\n  });"
  },
  "getknowledgeknowledgebases": {
    "operationId": "getknowledgeknowledgebases",
    "functionName": "getKnowledgeKnowledgebases",
    "signature": "getKnowledgeKnowledgebases(before, after, limit, pageSize, name, coreLanguage, published, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "coreLanguage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "published",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "KnowledgeBaseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"limit\": \"limit_example\", // String | Number of entities to return. Maximum of 100. Deprecated in favour of pageSize\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 100.\n  \"name\": \"name_example\", // String | Filter by Name.\n  \"coreLanguage\": \"coreLanguage_example\", // String | Filter by core language.\n  \"published\": true, // Boolean | Filter by published status.\n  \"sortBy\": \"sortBy_example\", // String | Sort by.\n  \"sortOrder\": \"sortOrder_example\" // String | Sort Order.\n};\n\n// Get knowledge bases\napiInstance.getKnowledgeKnowledgebases(opts)\n  .then((data) => {\n    console.log(`getKnowledgeKnowledgebases success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getKnowledgeKnowledgebases\");\n    console.error(err);\n  });"
  },
  "patchknowledgeguestsessiondocumentssearchsearchid": {
    "operationId": "patchknowledgeguestsessiondocumentssearchsearchid",
    "functionName": "patchKnowledgeGuestSessionDocumentsSearchSearchId",
    "signature": "patchKnowledgeGuestSessionDocumentsSearchSearchId(sessionId, searchId, body)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "searchId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet sessionId = \"sessionId_example\"; // String | Knowledge guest session ID.\nlet searchId = \"searchId_example\"; // String | Search Result ID\nlet body = {}; // Object | \n\n// Update search result.\napiInstance.patchKnowledgeGuestSessionDocumentsSearchSearchId(sessionId, searchId, body)\n  .then(() => {\n    console.log(\"patchKnowledgeGuestSessionDocumentsSearchSearchId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeGuestSessionDocumentsSearchSearchId\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebase": {
    "operationId": "patchknowledgeknowledgebase",
    "functionName": "patchKnowledgeKnowledgebase",
    "signature": "patchKnowledgeKnowledgebase(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Update knowledge base\napiInstance.patchKnowledgeKnowledgebase(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebase success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebase\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebasecategory": {
    "operationId": "patchknowledgeknowledgebasecategory",
    "functionName": "patchKnowledgeKnowledgebaseCategory",
    "signature": "patchKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CategoryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet categoryId = \"categoryId_example\"; // String | Category ID\nlet body = {}; // Object | \n\n// Update category\napiInstance.patchKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseCategory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseCategory\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebasedocument": {
    "operationId": "patchknowledgeknowledgebasedocument",
    "functionName": "patchKnowledgeKnowledgebaseDocument",
    "signature": "patchKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocumentResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\nlet body = {}; // Object | \n\n// Update document.\napiInstance.patchKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseDocument\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebasedocumentvariation": {
    "operationId": "patchknowledgeknowledgebasedocumentvariation",
    "functionName": "patchKnowledgeKnowledgebaseDocumentVariation",
    "signature": "patchKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "documentVariationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DocumentVariation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentVariationId = \"documentVariationId_example\"; // String | Globally unique identifier for a document variation.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for a document.\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for a knowledge base.\nlet body = {}; // Object | \n\n// Update a variation for a document.\napiInstance.patchKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseDocumentVariation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseDocumentVariation\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebasedocumentssearchsearchid": {
    "operationId": "patchknowledgeknowledgebasedocumentssearchsearchid",
    "functionName": "patchKnowledgeKnowledgebaseDocumentsSearchSearchId",
    "signature": "patchKnowledgeKnowledgebaseDocumentsSearchSearchId(knowledgeBaseId, searchId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "searchId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | The ID of knowledge base containing the documents to query.\nlet searchId = \"searchId_example\"; // String | Search Result ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update search result.\napiInstance.patchKnowledgeKnowledgebaseDocumentsSearchSearchId(knowledgeBaseId, searchId, opts)\n  .then(() => {\n    console.log(\"patchKnowledgeKnowledgebaseDocumentsSearchSearchId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseDocumentsSearchSearchId\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebaseimportjob": {
    "operationId": "patchknowledgeknowledgebaseimportjob",
    "functionName": "patchKnowledgeKnowledgebaseImportJob",
    "signature": "patchKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importJobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeImportJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet importJobId = \"importJobId_example\"; // String | Import job ID\nlet body = {}; // Object | \n\n// Start import job\napiInstance.patchKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseImportJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseImportJob\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebaselabel": {
    "operationId": "patchknowledgeknowledgebaselabel",
    "functionName": "patchKnowledgeKnowledgebaseLabel",
    "signature": "patchKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "labelId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LabelResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet labelId = \"labelId_example\"; // String | Label ID\nlet body = {}; // Object | \n\n// Update label\napiInstance.patchKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseLabel success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseLabel\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebaselanguagecategory": {
    "operationId": "patchknowledgeknowledgebaselanguagecategory",
    "functionName": "patchKnowledgeKnowledgebaseLanguageCategory",
    "signature": "patchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet categoryId = \"categoryId_example\"; // String | Category ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n// Update category\napiInstance.patchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseLanguageCategory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseLanguageCategory\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebaselanguagedocument": {
    "operationId": "patchknowledgeknowledgebaselanguagedocument",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocument",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n// Update document\napiInstance.patchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseLanguageDocument success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseLanguageDocument\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebaselanguagedocuments": {
    "operationId": "patchknowledgeknowledgebaselanguagedocuments",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DocumentListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet body = [{}]; // Object | \n\n// Update documents collection\napiInstance.patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseLanguageDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseLanguageDocuments\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "patchknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet importId = \"importId_example\"; // String | Import ID\nlet body = {}; // Object | \n\n// Start import operation\napiInstance.patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseLanguageDocumentsImport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseLanguageDocumentsImport\");\n    console.error(err);\n  });"
  },
  "patchknowledgeknowledgebaseunansweredgroupphrasegroup": {
    "operationId": "patchknowledgeknowledgebaseunansweredgroupphrasegroup",
    "functionName": "patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup",
    "signature": "patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup(knowledgeBaseId, groupId, phraseGroupId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "phraseGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UnansweredPhraseGroupUpdateResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet groupId = \"groupId_example\"; // String | The ID of the group to be updated.\nlet phraseGroupId = \"phraseGroupId_example\"; // String | The ID of the phraseGroup to be updated.\nlet body = {}; // Object | Request body of the update unanswered group endpoint.\n\n// Update a Knowledge base unanswered phrase group\napiInstance.patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup(knowledgeBaseId, groupId, phraseGroupId, body)\n  .then((data) => {\n    console.log(`patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup\");\n    console.error(err);\n  });"
  },
  "postknowledgedocumentuploads": {
    "operationId": "postknowledgedocumentuploads",
    "functionName": "postKnowledgeDocumentuploads",
    "signature": "postKnowledgeDocumentuploads(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UploadsApi();\n\nlet body = {}; // Object | query\n\n// Creates a presigned URL for uploading a knowledge import file with a set of documents\napiInstance.postKnowledgeDocumentuploads(body)\n  .then((data) => {\n    console.log(`postKnowledgeDocumentuploads success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeDocumentuploads\");\n    console.error(err);\n  });"
  },
  "postknowledgeguestsessiondocumentfeedback": {
    "operationId": "postknowledgeguestsessiondocumentfeedback",
    "functionName": "postKnowledgeGuestSessionDocumentFeedback",
    "signature": "postKnowledgeGuestSessionDocumentFeedback(sessionId, documentId, body)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeGuestDocumentFeedback",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet sessionId = \"sessionId_example\"; // String | Knowledge guest session ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Give feedback on a document\napiInstance.postKnowledgeGuestSessionDocumentFeedback(sessionId, documentId, opts)\n  .then((data) => {\n    console.log(`postKnowledgeGuestSessionDocumentFeedback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeGuestSessionDocumentFeedback\");\n    console.error(err);\n  });"
  },
  "postknowledgeguestsessiondocumentssearch": {
    "operationId": "postknowledgeguestsessiondocumentssearch",
    "functionName": "postKnowledgeGuestSessionDocumentsSearch",
    "signature": "postKnowledgeGuestSessionDocumentsSearch(sessionId, expand, body)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentGuestSearch",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet sessionId = \"sessionId_example\"; // String | Knowledge guest session ID.\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Fields, if any, to expand for each document in the search result matching the query.\n  \"body\": {} // Object | \n};\n\n// Search the documents in a guest session.\napiInstance.postKnowledgeGuestSessionDocumentsSearch(sessionId, opts)\n  .then((data) => {\n    console.log(`postKnowledgeGuestSessionDocumentsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeGuestSessionDocumentsSearch\");\n    console.error(err);\n  });"
  },
  "postknowledgeguestsessiondocumentssearchsuggestions": {
    "operationId": "postknowledgeguestsessiondocumentssearchsuggestions",
    "functionName": "postKnowledgeGuestSessionDocumentsSearchSuggestions",
    "signature": "postKnowledgeGuestSessionDocumentsSearchSuggestions(sessionId, body)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeGuestDocumentSuggestion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet sessionId = \"sessionId_example\"; // String | Knowledge guest session ID.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Query the knowledge documents to provide suggestions for auto completion.\napiInstance.postKnowledgeGuestSessionDocumentsSearchSuggestions(sessionId, opts)\n  .then((data) => {\n    console.log(`postKnowledgeGuestSessionDocumentsSearchSuggestions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeGuestSessionDocumentsSearchSuggestions\");\n    console.error(err);\n  });"
  },
  "postknowledgeguestsessions": {
    "operationId": "postknowledgeguestsessions",
    "functionName": "postKnowledgeGuestSessions",
    "signature": "postKnowledgeGuestSessions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeGuestSession",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet body = {}; // Object | \n\n// Create guest session\napiInstance.postKnowledgeGuestSessions(body)\n  .then((data) => {\n    console.log(`postKnowledgeGuestSessions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeGuestSessions\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasecategories": {
    "operationId": "postknowledgeknowledgebasecategories",
    "functionName": "postKnowledgeKnowledgebaseCategories",
    "signature": "postKnowledgeKnowledgebaseCategories(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CategoryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Create new category\napiInstance.postKnowledgeKnowledgebaseCategories(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseCategories success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseCategories\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentfeedback": {
    "operationId": "postknowledgeknowledgebasedocumentfeedback",
    "functionName": "postKnowledgeKnowledgebaseDocumentFeedback",
    "signature": "postKnowledgeKnowledgebaseDocumentFeedback(knowledgeBaseId, documentId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentFeedbackResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Give feedback on a document\napiInstance.postKnowledgeKnowledgebaseDocumentFeedback(knowledgeBaseId, documentId, opts)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentFeedback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentFeedback\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentvariations": {
    "operationId": "postknowledgeknowledgebasedocumentvariations",
    "functionName": "postKnowledgeKnowledgebaseDocumentVariations",
    "signature": "postKnowledgeKnowledgebaseDocumentVariations(knowledgeBaseId, documentId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DocumentVariation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for the knowledge base.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for the document.\nlet body = {}; // Object | \n\n// Create a variation for a document.\napiInstance.postKnowledgeKnowledgebaseDocumentVariations(knowledgeBaseId, documentId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentVariations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentVariations\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentversions": {
    "operationId": "postknowledgeknowledgebasedocumentversions",
    "functionName": "postKnowledgeKnowledgebaseDocumentVersions",
    "signature": "postKnowledgeKnowledgebaseDocumentVersions(knowledgeBaseId, documentId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocumentVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Globally unique identifier for the knowledge base.\nlet documentId = \"documentId_example\"; // String | Globally unique identifier for the document.\nlet body = {}; // Object | \n\n// Creates or restores a document version.\napiInstance.postKnowledgeKnowledgebaseDocumentVersions(knowledgeBaseId, documentId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentVersions\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentviews": {
    "operationId": "postknowledgeknowledgebasedocumentviews",
    "functionName": "postKnowledgeKnowledgebaseDocumentViews",
    "signature": "postKnowledgeKnowledgebaseDocumentViews(knowledgeBaseId, documentId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID.\nlet documentId = \"documentId_example\"; // String | Document ID.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create view for a document.\napiInstance.postKnowledgeKnowledgebaseDocumentViews(knowledgeBaseId, documentId, opts)\n  .then(() => {\n    console.log(\"postKnowledgeKnowledgebaseDocumentViews returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentViews\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocuments": {
    "operationId": "postknowledgeknowledgebasedocuments",
    "functionName": "postKnowledgeKnowledgebaseDocuments",
    "signature": "postKnowledgeKnowledgebaseDocuments(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocumentResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Create document.\napiInstance.postKnowledgeKnowledgebaseDocuments(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocuments\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentsbulkremove": {
    "operationId": "postknowledgeknowledgebasedocumentsbulkremove",
    "functionName": "postKnowledgeKnowledgebaseDocumentsBulkRemove",
    "signature": "postKnowledgeKnowledgebaseDocumentsBulkRemove(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Bulk remove documents.\napiInstance.postKnowledgeKnowledgebaseDocumentsBulkRemove(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentsBulkRemove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentsBulkRemove\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentsbulkupdate": {
    "operationId": "postknowledgeknowledgebasedocumentsbulkupdate",
    "functionName": "postKnowledgeKnowledgebaseDocumentsBulkUpdate",
    "signature": "postKnowledgeKnowledgebaseDocumentsBulkUpdate(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Bulk update documents.\napiInstance.postKnowledgeKnowledgebaseDocumentsBulkUpdate(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentsBulkUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentsBulkUpdate\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentssearch": {
    "operationId": "postknowledgeknowledgebasedocumentssearch",
    "functionName": "postKnowledgeKnowledgebaseDocumentsSearch",
    "signature": "postKnowledgeKnowledgebaseDocumentsSearch(knowledgeBaseId, expand, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentSearch",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | The ID of knowledge base containing the documents to query.\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Fields, if any, to expand for each document in the search result matching the query.\n  \"body\": {} // Object | \n};\n\n// Search the documents in a knowledge base.\napiInstance.postKnowledgeKnowledgebaseDocumentsSearch(knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentsSearch\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentssearchsuggestions": {
    "operationId": "postknowledgeknowledgebasedocumentssearchsuggestions",
    "functionName": "postKnowledgeKnowledgebaseDocumentsSearchSuggestions",
    "signature": "postKnowledgeKnowledgebaseDocumentsSearchSuggestions(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeDocumentSuggestion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | The ID of knowledge base containing the documents to query.\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Query the knowledge documents to provide suggestions for auto completion.\napiInstance.postKnowledgeKnowledgebaseDocumentsSearchSuggestions(knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentsSearchSuggestions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentsSearchSuggestions\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasedocumentsversionsbulkadd": {
    "operationId": "postknowledgeknowledgebasedocumentsversionsbulkadd",
    "functionName": "postKnowledgeKnowledgebaseDocumentsVersionsBulkAdd",
    "signature": "postKnowledgeKnowledgebaseDocumentsVersionsBulkAdd(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Bulk add document versions.\napiInstance.postKnowledgeKnowledgebaseDocumentsVersionsBulkAdd(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseDocumentsVersionsBulkAdd success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseDocumentsVersionsBulkAdd\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaseexportjobs": {
    "operationId": "postknowledgeknowledgebaseexportjobs",
    "functionName": "postKnowledgeKnowledgebaseExportJobs",
    "signature": "postKnowledgeKnowledgebaseExportJobs(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeExportJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Create export job\napiInstance.postKnowledgeKnowledgebaseExportJobs(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseExportJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseExportJobs\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaseimportjobs": {
    "operationId": "postknowledgeknowledgebaseimportjobs",
    "functionName": "postKnowledgeKnowledgebaseImportJobs",
    "signature": "postKnowledgeKnowledgebaseImportJobs(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeImportJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Create import job\napiInstance.postKnowledgeKnowledgebaseImportJobs(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseImportJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseImportJobs\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaselabels": {
    "operationId": "postknowledgeknowledgebaselabels",
    "functionName": "postKnowledgeKnowledgebaseLabels",
    "signature": "postKnowledgeKnowledgebaseLabels(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LabelResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n// Create new label\napiInstance.postKnowledgeKnowledgebaseLabels(knowledgeBaseId, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseLabels success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseLabels\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaselanguagecategories": {
    "operationId": "postknowledgeknowledgebaselanguagecategories",
    "functionName": "postKnowledgeKnowledgebaseLanguageCategories",
    "signature": "postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n// Create new category\napiInstance.postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseLanguageCategories success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseLanguageCategories\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaselanguagedocumentuploads": {
    "operationId": "postknowledgeknowledgebaselanguagedocumentuploads",
    "functionName": "postKnowledgeKnowledgebaseLanguageDocumentUploads",
    "signature": "postKnowledgeKnowledgebaseLanguageDocumentUploads(documentId, knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocumentContentUpload",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n// Upload Article Content\napiInstance.postKnowledgeKnowledgebaseLanguageDocumentUploads(documentId, knowledgeBaseId, languageCode, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseLanguageDocumentUploads success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseLanguageDocumentUploads\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaselanguagedocuments": {
    "operationId": "postknowledgeknowledgebaselanguagedocuments",
    "functionName": "postKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n// Create document\napiInstance.postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseLanguageDocuments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseLanguageDocuments\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaselanguagedocumentsimports": {
    "operationId": "postknowledgeknowledgebaselanguagedocumentsimports",
    "functionName": "postKnowledgeKnowledgebaseLanguageDocumentsImports",
    "signature": "postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n// Create import operation\napiInstance.postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseLanguageDocumentsImports success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseLanguageDocumentsImports\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaselanguagetrainingpromote": {
    "operationId": "postknowledgeknowledgebaselanguagetrainingpromote",
    "functionName": "postKnowledgeKnowledgebaseLanguageTrainingPromote",
    "signature": "postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trainingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\nlet trainingId = \"trainingId_example\"; // String | Training ID\n\n// Promote trained documents from draft state to active.\napiInstance.postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseLanguageTrainingPromote success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseLanguageTrainingPromote\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebaselanguagetrainings": {
    "operationId": "postknowledgeknowledgebaselanguagetrainings",
    "functionName": "postKnowledgeKnowledgebaseLanguageTrainings",
    "signature": "postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = en-US; // String | Language code, format: iso2-LOCALE\n\n// Trigger training\napiInstance.postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseLanguageTrainings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseLanguageTrainings\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebasesearch": {
    "operationId": "postknowledgeknowledgebasesearch",
    "functionName": "postKnowledgeKnowledgebaseSearch",
    "signature": "postKnowledgeKnowledgebaseSearch(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Search Documents\napiInstance.postKnowledgeKnowledgebaseSearch(knowledgeBaseId, opts)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebaseSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebaseSearch\");\n    console.error(err);\n  });"
  },
  "postknowledgeknowledgebases": {
    "operationId": "postknowledgeknowledgebases",
    "functionName": "postKnowledgeKnowledgebases",
    "signature": "postKnowledgeKnowledgebases(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.KnowledgeApi();\n\nlet body = {}; // Object | \n\n// Create new knowledge base\napiInstance.postKnowledgeKnowledgebases(body)\n  .then((data) => {\n    console.log(`postKnowledgeKnowledgebases success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postKnowledgeKnowledgebases\");\n    console.error(err);\n  });"
  },
  "deletelanguageunderstandingdomain": {
    "operationId": "deletelanguageunderstandingdomain",
    "functionName": "deleteLanguageunderstandingDomain",
    "signature": "deleteLanguageunderstandingDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\n\n// Delete an NLU Domain.\napiInstance.deleteLanguageunderstandingDomain(domainId)\n  .then(() => {\n    console.log(\"deleteLanguageunderstandingDomain returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLanguageunderstandingDomain\");\n    console.error(err);\n  });"
  },
  "deletelanguageunderstandingdomainfeedbackfeedbackid": {
    "operationId": "deletelanguageunderstandingdomainfeedbackfeedbackid",
    "functionName": "deleteLanguageunderstandingDomainFeedbackFeedbackId",
    "signature": "deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feedbackId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet feedbackId = \"feedbackId_example\"; // String | ID of the Feedback\n\n// Delete the feedback on the NLU Domain Version.\napiInstance.deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId)\n  .then(() => {\n    console.log(\"deleteLanguageunderstandingDomainFeedbackFeedbackId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLanguageunderstandingDomainFeedbackFeedbackId\");\n    console.error(err);\n  });"
  },
  "deletelanguageunderstandingdomainversion": {
    "operationId": "deletelanguageunderstandingdomainversion",
    "functionName": "deleteLanguageunderstandingDomainVersion",
    "signature": "deleteLanguageunderstandingDomainVersion(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n// Delete an NLU Domain Version\napiInstance.deleteLanguageunderstandingDomainVersion(domainId, domainVersionId)\n  .then(() => {\n    console.log(\"deleteLanguageunderstandingDomainVersion returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLanguageunderstandingDomainVersion\");\n    console.error(err);\n  });"
  },
  "deletelanguageunderstandingminer": {
    "operationId": "deletelanguageunderstandingminer",
    "functionName": "deleteLanguageunderstandingMiner",
    "signature": "deleteLanguageunderstandingMiner(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\n\n// Delete a miner.\napiInstance.deleteLanguageunderstandingMiner(minerId)\n  .then(() => {\n    console.log(\"deleteLanguageunderstandingMiner returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLanguageunderstandingMiner\");\n    console.error(err);\n  });"
  },
  "deletelanguageunderstandingminerdraft": {
    "operationId": "deletelanguageunderstandingminerdraft",
    "functionName": "deleteLanguageunderstandingMinerDraft",
    "signature": "deleteLanguageunderstandingMinerDraft(minerId, draftId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet draftId = \"draftId_example\"; // String | Draft ID\n\n// Delete a draft\napiInstance.deleteLanguageunderstandingMinerDraft(minerId, draftId)\n  .then(() => {\n    console.log(\"deleteLanguageunderstandingMinerDraft returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLanguageunderstandingMinerDraft\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingdomain": {
    "operationId": "getlanguageunderstandingdomain",
    "functionName": "getLanguageunderstandingDomain",
    "signature": "getLanguageunderstandingDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\n\n// Find an NLU Domain.\napiInstance.getLanguageunderstandingDomain(domainId)\n  .then((data) => {\n    console.log(`getLanguageunderstandingDomain success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingDomain\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingdomainfeedback": {
    "operationId": "getlanguageunderstandingdomainfeedback",
    "functionName": "getLanguageunderstandingDomainFeedback",
    "signature": "getLanguageunderstandingDomainFeedback(domainId, intentName, assessment, dateStart, dateEnd, includeDeleted, language, pageNumber, pageSize, enableCursorPagination, includeTrainingUtterances, after, fields)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "intentName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "assessment",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateStart",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateEnd",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeDeleted",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "enableCursorPagination",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeTrainingUtterances",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NluFeedbackListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet opts = { \n  \"intentName\": \"intentName_example\", // String | The top intent name to retrieve feedback for.\n  \"assessment\": \"assessment_example\", // String | The top assessment to retrieve feedback for.\n  \"dateStart\": \"dateStart_example\", // String | Begin of time window as ISO-8601 date.\n  \"dateEnd\": \"dateEnd_example\", // String | End of time window as ISO-8601 date.\n  \"includeDeleted\": true, // Boolean | Whether to include soft-deleted items in the result.\n  \"language\": \"language_example\", // String | Whether to filter response based on the language, e.g. en-us, pt-br.\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"enableCursorPagination\": false, // Boolean | Enable Cursor Pagination\n  \"includeTrainingUtterances\": true, // Boolean | Include Training Utterances. By default they're included.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned. This is considered only when enableCursorPagination=true\n  \"fields\": [\"fields_example\"] // [String] | Fields and properties to get, comma-separated\n};\n\n// Get all feedback in the given NLU Domain Version.\napiInstance.getLanguageunderstandingDomainFeedback(domainId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingDomainFeedback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingDomainFeedback\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingdomainfeedbackfeedbackid": {
    "operationId": "getlanguageunderstandingdomainfeedbackfeedbackid",
    "functionName": "getLanguageunderstandingDomainFeedbackFeedbackId",
    "signature": "getLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, fields)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feedbackId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NluFeedbackResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet feedbackId = \"feedbackId_example\"; // String | ID of the Feedback\nlet opts = { \n  \"fields\": [\"fields_example\"] // [String] | Fields and properties to get, comma-separated\n};\n\n// Find a Feedback\napiInstance.getLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingDomainFeedbackFeedbackId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingDomainFeedbackFeedbackId\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingdomainversion": {
    "operationId": "getlanguageunderstandingdomainversion",
    "functionName": "getLanguageunderstandingDomainVersion",
    "signature": "getLanguageunderstandingDomainVersion(domainId, domainVersionId, includeUtterances)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeUtterances",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "NluDomainVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\nlet opts = { \n  \"includeUtterances\": true // Boolean | Whether utterances for intent definition should be included when marshalling response.\n};\n\n// Find an NLU Domain Version.\napiInstance.getLanguageunderstandingDomainVersion(domainId, domainVersionId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingDomainVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingDomainVersion\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingdomainversionreport": {
    "operationId": "getlanguageunderstandingdomainversionreport",
    "functionName": "getLanguageunderstandingDomainVersionReport",
    "signature": "getLanguageunderstandingDomainVersionReport(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersionQualityReport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n// Retrieved quality report for the specified NLU Domain Version\napiInstance.getLanguageunderstandingDomainVersionReport(domainId, domainVersionId)\n  .then((data) => {\n    console.log(`getLanguageunderstandingDomainVersionReport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingDomainVersionReport\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingdomainversions": {
    "operationId": "getlanguageunderstandingdomainversions",
    "functionName": "getLanguageunderstandingDomainVersions",
    "signature": "getLanguageunderstandingDomainVersions(domainId, includeUtterances, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeUtterances",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "NluDomainVersionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet opts = { \n  \"includeUtterances\": true, // Boolean | Whether utterances for intent definition should be included when marshalling response.\n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get all NLU Domain Versions for a given Domain.\napiInstance.getLanguageunderstandingDomainVersions(domainId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingDomainVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingDomainVersions\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingdomains": {
    "operationId": "getlanguageunderstandingdomains",
    "functionName": "getLanguageunderstandingDomains",
    "signature": "getLanguageunderstandingDomains(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "NluDomainListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25 // Number | Page size\n};\n\n// Get all NLU Domains.\napiInstance.getLanguageunderstandingDomains(opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingDomains success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingDomains\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminer": {
    "operationId": "getlanguageunderstandingminer",
    "functionName": "getLanguageunderstandingMiner",
    "signature": "getLanguageunderstandingMiner(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Miner",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\n\n// Get information about a miner.\napiInstance.getLanguageunderstandingMiner(minerId)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMiner success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMiner\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminerdraft": {
    "operationId": "getlanguageunderstandingminerdraft",
    "functionName": "getLanguageunderstandingMinerDraft",
    "signature": "getLanguageunderstandingMinerDraft(minerId, draftId, draftIntentId, draftTopicId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftIntentId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "draftTopicId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Draft",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet draftId = \"draftId_example\"; // String | Draft ID\nlet opts = { \n  \"draftIntentId\": \"draftIntentId_example\", // String | Parameter to filter a specific intent.\n  \"draftTopicId\": \"draftTopicId_example\" // String | Parameter to filter a specific topic.\n};\n\n// Get information about a draft.\napiInstance.getLanguageunderstandingMinerDraft(minerId, draftId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMinerDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMinerDraft\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminerdrafts": {
    "operationId": "getlanguageunderstandingminerdrafts",
    "functionName": "getLanguageunderstandingMinerDrafts",
    "signature": "getLanguageunderstandingMinerDrafts(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DraftListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\n\n// Retrieve the list of drafts created.\napiInstance.getLanguageunderstandingMinerDrafts(minerId)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMinerDrafts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMinerDrafts\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminerintent": {
    "operationId": "getlanguageunderstandingminerintent",
    "functionName": "getLanguageunderstandingMinerIntent",
    "signature": "getLanguageunderstandingMinerIntent(minerId, intentId, expand)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "intentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinerIntent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet intentId = \"intentId_example\"; // String | The ID of the intent to be retrieved.\nlet opts = { \n  \"expand\": \"expand_example\" // String | Option to fetch utterances\n};\n\n// Get information about a mined intent\napiInstance.getLanguageunderstandingMinerIntent(minerId, intentId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMinerIntent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMinerIntent\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminerintents": {
    "operationId": "getlanguageunderstandingminerintents",
    "functionName": "getLanguageunderstandingMinerIntents",
    "signature": "getLanguageunderstandingMinerIntents(minerId, expand)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinedIntentsListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Option to fetch utterances.\n};\n\n// Retrieve a list of mined intents.\napiInstance.getLanguageunderstandingMinerIntents(minerId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMinerIntents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMinerIntents\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminertopic": {
    "operationId": "getlanguageunderstandingminertopic",
    "functionName": "getLanguageunderstandingMinerTopic",
    "signature": "getLanguageunderstandingMinerTopic(minerId, topicId, expand)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinerTopic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet topicId = \"topicId_example\"; // String | The ID of the topic to be retrieved.\nlet opts = { \n  \"expand\": \"expand_example\" // String | Option to fetch phrases\n};\n\n// Retrieves details of a particular topic.\napiInstance.getLanguageunderstandingMinerTopic(minerId, topicId, opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMinerTopic success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMinerTopic\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminertopicphrase": {
    "operationId": "getlanguageunderstandingminertopicphrase",
    "functionName": "getLanguageunderstandingMinerTopicPhrase",
    "signature": "getLanguageunderstandingMinerTopicPhrase(minerId, topicId, phraseId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "phraseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MinerTopicPhrase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet topicId = \"topicId_example\"; // String | The ID of the topic to be retrieved.\nlet phraseId = \"phraseId_example\"; // String | The ID of the phrase to be retrieved.\n\n// Retrieves utterances related to a phrase in a topic.\napiInstance.getLanguageunderstandingMinerTopicPhrase(minerId, topicId, phraseId)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMinerTopicPhrase success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMinerTopicPhrase\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminertopics": {
    "operationId": "getlanguageunderstandingminertopics",
    "functionName": "getLanguageunderstandingMinerTopics",
    "signature": "getLanguageunderstandingMinerTopics(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MinerTopicsListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\n\n// Retrieve a list of mined topics.\napiInstance.getLanguageunderstandingMinerTopics(minerId)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMinerTopics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMinerTopics\");\n    console.error(err);\n  });"
  },
  "getlanguageunderstandingminers": {
    "operationId": "getlanguageunderstandingminers",
    "functionName": "getLanguageunderstandingMiners",
    "signature": "getLanguageunderstandingMiners(minerType)",
    "parameters": [
      {
        "name": "minerType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinerListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet opts = { \n  \"minerType\": \"minerType_example\" // String | Type of miner, either intent or topic\n};\n\n// Retrieve the list of miners created.\napiInstance.getLanguageunderstandingMiners(opts)\n  .then((data) => {\n    console.log(`getLanguageunderstandingMiners success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguageunderstandingMiners\");\n    console.error(err);\n  });"
  },
  "patchlanguageunderstandingdomain": {
    "operationId": "patchlanguageunderstandingdomain",
    "functionName": "patchLanguageunderstandingDomain",
    "signature": "patchLanguageunderstandingDomain(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet body = {}; // Object | The updated NLU Domain.\n\n// Update an NLU Domain.\napiInstance.patchLanguageunderstandingDomain(domainId, body)\n  .then((data) => {\n    console.log(`patchLanguageunderstandingDomain success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchLanguageunderstandingDomain\");\n    console.error(err);\n  });"
  },
  "patchlanguageunderstandingminerdraft": {
    "operationId": "patchlanguageunderstandingminerdraft",
    "functionName": "patchLanguageunderstandingMinerDraft",
    "signature": "patchLanguageunderstandingMinerDraft(minerId, draftId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Draft",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet draftId = \"draftId_example\"; // String | Draft ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Save information for the draft. Either topic draft or intent draft should be sent.\napiInstance.patchLanguageunderstandingMinerDraft(minerId, draftId, opts)\n  .then((data) => {\n    console.log(`patchLanguageunderstandingMinerDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchLanguageunderstandingMinerDraft\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingdomainfeedback": {
    "operationId": "postlanguageunderstandingdomainfeedback",
    "functionName": "postLanguageunderstandingDomainFeedback",
    "signature": "postLanguageunderstandingDomainFeedback(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluFeedbackResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet body = {}; // Object | The Feedback to create.\n\n// Create feedback for the NLU Domain Version.\napiInstance.postLanguageunderstandingDomainFeedback(domainId, body)\n  .then((data) => {\n    console.log(`postLanguageunderstandingDomainFeedback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingDomainFeedback\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingdomainversiondetect": {
    "operationId": "postlanguageunderstandingdomainversiondetect",
    "functionName": "postLanguageunderstandingDomainVersionDetect",
    "signature": "postLanguageunderstandingDomainVersionDetect(domainId, domainVersionId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDetectionResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\nlet body = {}; // Object | The input data to perform detection on.\n\n// Detect intent, entities, etc. in the submitted text using the specified NLU domain version.\napiInstance.postLanguageunderstandingDomainVersionDetect(domainId, domainVersionId, body)\n  .then((data) => {\n    console.log(`postLanguageunderstandingDomainVersionDetect success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingDomainVersionDetect\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingdomainversionpublish": {
    "operationId": "postlanguageunderstandingdomainversionpublish",
    "functionName": "postLanguageunderstandingDomainVersionPublish",
    "signature": "postLanguageunderstandingDomainVersionPublish(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n// Publish the draft NLU Domain Version.\napiInstance.postLanguageunderstandingDomainVersionPublish(domainId, domainVersionId)\n  .then((data) => {\n    console.log(`postLanguageunderstandingDomainVersionPublish success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingDomainVersionPublish\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingdomainversiontrain": {
    "operationId": "postlanguageunderstandingdomainversiontrain",
    "functionName": "postLanguageunderstandingDomainVersionTrain",
    "signature": "postLanguageunderstandingDomainVersionTrain(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersionTrainingResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n// Train the draft NLU Domain Version.\napiInstance.postLanguageunderstandingDomainVersionTrain(domainId, domainVersionId)\n  .then((data) => {\n    console.log(`postLanguageunderstandingDomainVersionTrain success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingDomainVersionTrain\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingdomainversions": {
    "operationId": "postlanguageunderstandingdomainversions",
    "functionName": "postLanguageunderstandingDomainVersions",
    "signature": "postLanguageunderstandingDomainVersions(domainId, body, includeUtterances)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "includeUtterances",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "NluDomainVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet body = {}; // Object | The NLU Domain Version to create.\nlet opts = { \n  \"includeUtterances\": true // Boolean | Whether utterances for intent definition should be included when marshalling response.\n};\n\n// Create an NLU Domain Version.\napiInstance.postLanguageunderstandingDomainVersions(domainId, body, opts)\n  .then((data) => {\n    console.log(`postLanguageunderstandingDomainVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingDomainVersions\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingdomains": {
    "operationId": "postlanguageunderstandingdomains",
    "functionName": "postLanguageunderstandingDomains",
    "signature": "postLanguageunderstandingDomains(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet body = {}; // Object | The NLU Domain to create.\n\n// Create an NLU Domain.\napiInstance.postLanguageunderstandingDomains(body)\n  .then((data) => {\n    console.log(`postLanguageunderstandingDomains success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingDomains\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingminerdrafts": {
    "operationId": "postlanguageunderstandingminerdrafts",
    "functionName": "postLanguageunderstandingMinerDrafts",
    "signature": "postLanguageunderstandingMinerDrafts(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Draft",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet body = {}; // Object | Details for creating draft resource\n\n// Create a new draft resource.\napiInstance.postLanguageunderstandingMinerDrafts(minerId, body)\n  .then((data) => {\n    console.log(`postLanguageunderstandingMinerDrafts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingMinerDrafts\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingminerexecute": {
    "operationId": "postlanguageunderstandingminerexecute",
    "functionName": "postLanguageunderstandingMinerExecute",
    "signature": "postLanguageunderstandingMinerExecute(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Miner",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Start the mining process. Specify date range pair with mediaType, queueIds, participantType for mining data from Genesys Cloud. Specify only uploadKey for mining through an external file.\napiInstance.postLanguageunderstandingMinerExecute(minerId, opts)\n  .then((data) => {\n    console.log(`postLanguageunderstandingMinerExecute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingMinerExecute\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingminers": {
    "operationId": "postlanguageunderstandingminers",
    "functionName": "postLanguageunderstandingMiners",
    "signature": "postLanguageunderstandingMiners(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Miner",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet body = {}; // Object | Details for creating a new miner resource.\n\n// Create a unique miner.\napiInstance.postLanguageunderstandingMiners(body)\n  .then((data) => {\n    console.log(`postLanguageunderstandingMiners success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingMiners\");\n    console.error(err);\n  });"
  },
  "putlanguageunderstandingdomainversion": {
    "operationId": "putlanguageunderstandingdomainversion",
    "functionName": "putLanguageunderstandingDomainVersion",
    "signature": "putLanguageunderstandingDomainVersion(domainId, domainVersionId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguageUnderstandingApi();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\nlet body = {}; // Object | The updated NLU Domain Version.\n\n// Update an NLU Domain Version.\napiInstance.putLanguageunderstandingDomainVersion(domainId, domainVersionId, body)\n  .then((data) => {\n    console.log(`putLanguageunderstandingDomainVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putLanguageunderstandingDomainVersion\");\n    console.error(err);\n  });"
  },
  "deletelanguage": {
    "operationId": "deletelanguage",
    "functionName": "deleteLanguage",
    "signature": "deleteLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n// Delete Language (Deprecated)\napiInstance.deleteLanguage(languageId)\n  .then(() => {\n    console.log(\"deleteLanguage returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLanguage\");\n    console.error(err);\n  });"
  },
  "getlanguage": {
    "operationId": "getlanguage",
    "functionName": "getLanguage",
    "signature": "getLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n// Get Language (Deprecated)\napiInstance.getLanguage(languageId)\n  .then((data) => {\n    console.log(`getLanguage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguage\");\n    console.error(err);\n  });"
  },
  "getlanguages": {
    "operationId": "getlanguages",
    "functionName": "getLanguages",
    "signature": "getLanguages(pageSize, pageNumber, sortOrder, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LanguageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ASC\", // String | Ascending or descending sort order\n  \"name\": \"name_example\" // String | Name\n};\n\n// Get the list of supported languages. (Deprecated)\napiInstance.getLanguages(opts)\n  .then((data) => {\n    console.log(`getLanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguages\");\n    console.error(err);\n  });"
  },
  "getlanguagestranslations": {
    "operationId": "getlanguagestranslations",
    "functionName": "getLanguagesTranslations",
    "signature": "getLanguagesTranslations()",
    "return": "AvailableTranslations",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\n// Get all available languages for translation\napiInstance.getLanguagesTranslations()\n  .then((data) => {\n    console.log(`getLanguagesTranslations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguagesTranslations\");\n    console.error(err);\n  });"
  },
  "getlanguagestranslationsbuiltin": {
    "operationId": "getlanguagestranslationsbuiltin",
    "functionName": "getLanguagesTranslationsBuiltin",
    "signature": "getLanguagesTranslationsBuiltin(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\nlet language = \"language_example\"; // String | The language of the builtin translation to retrieve\n\n// Get the builtin translation for a language\napiInstance.getLanguagesTranslationsBuiltin(language)\n  .then((data) => {\n    console.log(`getLanguagesTranslationsBuiltin success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguagesTranslationsBuiltin\");\n    console.error(err);\n  });"
  },
  "getlanguagestranslationsorganization": {
    "operationId": "getlanguagestranslationsorganization",
    "functionName": "getLanguagesTranslationsOrganization",
    "signature": "getLanguagesTranslationsOrganization(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\nlet language = \"language_example\"; // String | The language of the translation to retrieve for the organization\n\n// Get effective translation for an organization by language\napiInstance.getLanguagesTranslationsOrganization(language)\n  .then((data) => {\n    console.log(`getLanguagesTranslationsOrganization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguagesTranslationsOrganization\");\n    console.error(err);\n  });"
  },
  "getlanguagestranslationsuser": {
    "operationId": "getlanguagestranslationsuser",
    "functionName": "getLanguagesTranslationsUser",
    "signature": "getLanguagesTranslationsUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\nlet userId = \"userId_example\"; // String | The user id\n\n// Get effective language translation for a user\napiInstance.getLanguagesTranslationsUser(userId)\n  .then((data) => {\n    console.log(`getLanguagesTranslationsUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLanguagesTranslationsUser\");\n    console.error(err);\n  });"
  },
  "postlanguages": {
    "operationId": "postlanguages",
    "functionName": "postLanguages",
    "signature": "postLanguages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LanguagesApi();\n\nlet body = {}; // Object | Language\n\n// Create Language (Deprecated)\napiInstance.postLanguages(body)\n  .then((data) => {\n    console.log(`postLanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguages\");\n    console.error(err);\n  });"
  },
  "deletelearningassignment": {
    "operationId": "deletelearningassignment",
    "functionName": "deleteLearningAssignment",
    "signature": "deleteLearningAssignment(assignmentId)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet assignmentId = \"assignmentId_example\"; // String | The Learning Assignment ID\n\n// Delete a learning assignment\napiInstance.deleteLearningAssignment(assignmentId)\n  .then(() => {\n    console.log(\"deleteLearningAssignment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLearningAssignment\");\n    console.error(err);\n  });"
  },
  "deletelearningmodule": {
    "operationId": "deletelearningmodule",
    "functionName": "deleteLearningModule",
    "signature": "deleteLearningModule(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\n\n// Delete a learning module\napiInstance.deleteLearningModule(moduleId)\n  .then(() => {\n    console.log(\"deleteLearningModule returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLearningModule\");\n    console.error(err);\n  });"
  },
  "getlearningassignment": {
    "operationId": "getlearningassignment",
    "functionName": "getLearningAssignment",
    "signature": "getLearningAssignment(assignmentId, expand)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet assignmentId = \"assignmentId_example\"; // String | The ID of Learning Assignment\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in response\n};\n\n// Get Learning Assignment\napiInstance.getLearningAssignment(assignmentId, opts)\n  .then((data) => {\n    console.log(`getLearningAssignment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningAssignment\");\n    console.error(err);\n  });"
  },
  "getlearningassignments": {
    "operationId": "getlearningassignments",
    "functionName": "getLearningAssignments",
    "signature": "getLearningAssignments(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, userId, types, states, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "minPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "maxPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "states",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentsDomainEntity",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet opts = { \n  \"moduleId\": \"moduleId_example\", // String | Specifies the ID of the learning module. Fetch assignments for learning module ID\n  \"interval\": \"interval_example\", // String | Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"completionInterval\": \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"overdue\": \"Any\", // String | Specifies if only the non-overdue (overdue is False) or overdue (overdue is True) assignments are returned. If overdue is Any or if the overdue parameter is not supplied, all assignments are returned\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"pass\": \"Any\", // String | Specifies if only the failed (pass is False) or passed (pass is True) assignments (completed with assessment)are returned. If pass is Any or if the pass parameter is not supplied, all assignments are returned\n  \"minPercentageScore\": 3.4, // Number | The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  \"maxPercentageScore\": 3.4, // Number | The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  \"sortOrder\": \"Desc\", // String | Specifies result set sort order; if not specified, default sort order is descending (Desc)\n  \"sortBy\": \"sortBy_example\", // String | Specifies which field to sort the results by, default sort is by recommendedCompletionDate\n  \"userId\": [\"userId_example\"], // [String] | Specifies the list of user IDs to be queried, up to 100 user IDs.\n  \"types\": [\"types_example\"], // [String] | Specifies the module types to filter by\n  \"states\": [\"states_example\"], // [String] | Specifies the assignment states to filter by\n  \"expand\": [\"expand_example\"] // [String] | Specifies the expand option for returning additional information\n};\n\n// List of Learning module Assignments\napiInstance.getLearningAssignments(opts)\n  .then((data) => {\n    console.log(`getLearningAssignments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningAssignments\");\n    console.error(err);\n  });"
  },
  "getlearningassignmentsme": {
    "operationId": "getlearningassignmentsme",
    "functionName": "getLearningAssignmentsMe",
    "signature": "getLearningAssignmentsMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, types, states, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "minPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "maxPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "states",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentsDomainEntity",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet opts = { \n  \"moduleId\": \"moduleId_example\", // String | Specifies the ID of the learning module. Fetch assignments for learning module ID\n  \"interval\": \"interval_example\", // String | Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"completionInterval\": \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"overdue\": \"Any\", // String | Specifies if only the non-overdue (overdue is False) or overdue (overdue is True) assignments are returned. If overdue is Any or if the overdue parameter is not supplied, all assignments are returned\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"pass\": \"Any\", // String | Specifies if only the failed (pass is False) or passed (pass is True) assignments (completed with assessment)are returned. If pass is Any or if the pass parameter is not supplied, all assignments are returned\n  \"minPercentageScore\": 3.4, // Number | The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  \"maxPercentageScore\": 3.4, // Number | The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  \"sortOrder\": \"Desc\", // String | Specifies result set sort order; if not specified, default sort order is descending (Desc)\n  \"sortBy\": \"sortBy_example\", // String | Specifies which field to sort the results by, default sort is by recommendedCompletionDate\n  \"types\": [\"types_example\"], // [String] | Specifies the module types to filter by\n  \"states\": [\"states_example\"], // [String] | Specifies the assignment states to filter by\n  \"expand\": [\"expand_example\"] // [String] | Specifies the expand option for returning additional information\n};\n\n// List of Learning Assignments assigned to current user\napiInstance.getLearningAssignmentsMe(opts)\n  .then((data) => {\n    console.log(`getLearningAssignmentsMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningAssignmentsMe\");\n    console.error(err);\n  });"
  },
  "getlearningmodule": {
    "operationId": "getlearningmodule",
    "functionName": "getLearningModule",
    "signature": "getLearningModule(moduleId, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningModule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in response(case insensitive)\n};\n\n// Get a learning module\napiInstance.getLearningModule(moduleId, opts)\n  .then((data) => {\n    console.log(`getLearningModule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningModule\");\n    console.error(err);\n  });"
  },
  "getlearningmodulejob": {
    "operationId": "getlearningmodulejob",
    "functionName": "getLearningModuleJob",
    "signature": "getLearningModuleJob(moduleId, jobId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModuleJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet jobId = \"jobId_example\"; // String | The ID of the learning module job\n\n// Get a specific Learning Module job status\napiInstance.getLearningModuleJob(moduleId, jobId)\n  .then((data) => {\n    console.log(`getLearningModuleJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningModuleJob\");\n    console.error(err);\n  });"
  },
  "getlearningmodulerule": {
    "operationId": "getlearningmodulerule",
    "functionName": "getLearningModuleRule",
    "signature": "getLearningModuleRule(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModuleRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\n\n// Get a learning module rule\napiInstance.getLearningModuleRule(moduleId)\n  .then((data) => {\n    console.log(`getLearningModuleRule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningModuleRule\");\n    console.error(err);\n  });"
  },
  "getlearningmoduleversion": {
    "operationId": "getlearningmoduleversion",
    "functionName": "getLearningModuleVersion",
    "signature": "getLearningModuleVersion(moduleId, versionId, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningModule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet versionId = \"versionId_example\"; // String | The version of learning module\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in response(case insensitive)\n};\n\n// Get specific version of a published module\napiInstance.getLearningModuleVersion(moduleId, versionId, opts)\n  .then((data) => {\n    console.log(`getLearningModuleVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningModuleVersion\");\n    console.error(err);\n  });"
  },
  "getlearningmodules": {
    "operationId": "getlearningmodules",
    "functionName": "getLearningModules",
    "signature": "getLearningModules(isArchived, types, pageSize, pageNumber, sortOrder, sortBy, searchTerm, expand, isPublished, statuses)",
    "parameters": [
      {
        "name": "isArchived",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "searchTerm",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "isPublished",
        "type": "String",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningModulesDomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet opts = { \n  \"isArchived\": false, // Boolean | Archive status\n  \"types\": [\"types_example\"], // [String] | Specifies the module types.\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ascending\", // String | Sort order\n  \"sortBy\": \"name\", // String | Sort by\n  \"searchTerm\": \"searchTerm_example\", // String | Search Term (searchable by name)\n  \"expand\": [\"expand_example\"], // [String] | Fields to expand in response(case insensitive)\n  \"isPublished\": \"Any\", // String | Specifies if only the Unpublished (isPublished is False) or Published (isPublished is True) modules are returned. If isPublished is Any or omitted, both types are returned\n  \"statuses\": [\"statuses_example\"] // [String] | Specifies the module statuses to filter by\n};\n\n// Get all learning modules of an organization\napiInstance.getLearningModules(opts)\n  .then((data) => {\n    console.log(`getLearningModules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningModules\");\n    console.error(err);\n  });"
  },
  "getlearningmodulesassignments": {
    "operationId": "getlearningmodulesassignments",
    "functionName": "getLearningModulesAssignments",
    "signature": "getLearningModulesAssignments(userIds, pageSize, pageNumber, searchTerm, overdue, assignmentStates, expand)",
    "parameters": [
      {
        "name": "userIds",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "searchTerm",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "assignmentStates",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AssignedLearningModuleDomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet userIds = [\"userIds_example\"]; // [String] | The IDs of the users to include\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"searchTerm\": \"searchTerm_example\", // String | Search Term (searches by name and description)\n  \"overdue\": \"Any\", // String | Specifies if only modules with overdue/not overdue (overdue is True or False) assignments are returned. If overdue is Any or omitted, both are returned and can including modules that are unassigned.\n  \"assignmentStates\": [\"assignmentStates_example\"], // [String] | Specifies the assignment states to return.\n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in response(case insensitive)\n};\n\n// Get all learning modules of an organization including assignments for a specific user\napiInstance.getLearningModulesAssignments(userIds, opts)\n  .then((data) => {\n    console.log(`getLearningModulesAssignments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningModulesAssignments\");\n    console.error(err);\n  });"
  },
  "getlearningmodulescoverartcoverartid": {
    "operationId": "getlearningmodulescoverartcoverartid",
    "functionName": "getLearningModulesCoverartCoverArtId",
    "signature": "getLearningModulesCoverartCoverArtId(coverArtId)",
    "parameters": [
      {
        "name": "coverArtId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModuleCoverArtResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet coverArtId = \"coverArtId_example\"; // String | Key identifier for the cover art\n\n// Get a specific Learning Module cover art using ID\napiInstance.getLearningModulesCoverartCoverArtId(coverArtId)\n  .then((data) => {\n    console.log(`getLearningModulesCoverartCoverArtId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLearningModulesCoverartCoverArtId\");\n    console.error(err);\n  });"
  },
  "patchlearningassignment": {
    "operationId": "patchlearningassignment",
    "functionName": "patchLearningAssignment",
    "signature": "patchLearningAssignment(assignmentId, body)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet assignmentId = \"assignmentId_example\"; // String | The ID of Learning Assignment\nlet opts = { \n  \"body\": {} // Object | The Learning Assignment to be updated\n};\n\n// Update Learning Assignment\napiInstance.patchLearningAssignment(assignmentId, opts)\n  .then((data) => {\n    console.log(`patchLearningAssignment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchLearningAssignment\");\n    console.error(err);\n  });"
  },
  "patchlearningassignmentreschedule": {
    "operationId": "patchlearningassignmentreschedule",
    "functionName": "patchLearningAssignmentReschedule",
    "signature": "patchLearningAssignmentReschedule(assignmentId, body)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet assignmentId = \"assignmentId_example\"; // String | The ID of Learning Assignment\nlet opts = { \n  \"body\": {} // Object | The Learning assignment reschedule model\n};\n\n// Reschedule Learning Assignment\napiInstance.patchLearningAssignmentReschedule(assignmentId, opts)\n  .then((data) => {\n    console.log(`patchLearningAssignmentReschedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchLearningAssignmentReschedule\");\n    console.error(err);\n  });"
  },
  "postlearningassessmentsscoring": {
    "operationId": "postlearningassessmentsscoring",
    "functionName": "postLearningAssessmentsScoring",
    "signature": "postLearningAssessmentsScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AssessmentScoringSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet body = {}; // Object | Assessment form and answers to score\n\n// Score learning assessment for preview\napiInstance.postLearningAssessmentsScoring(body)\n  .then((data) => {\n    console.log(`postLearningAssessmentsScoring success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningAssessmentsScoring\");\n    console.error(err);\n  });"
  },
  "postlearningassignmentreassign": {
    "operationId": "postlearningassignmentreassign",
    "functionName": "postLearningAssignmentReassign",
    "signature": "postLearningAssignmentReassign(assignmentId)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningAssignment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet assignmentId = \"assignmentId_example\"; // String | The Learning Assignment ID\n\n// Reassign Learning Assignment\napiInstance.postLearningAssignmentReassign(assignmentId)\n  .then((data) => {\n    console.log(`postLearningAssignmentReassign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningAssignmentReassign\");\n    console.error(err);\n  });"
  },
  "postlearningassignmentreset": {
    "operationId": "postlearningassignmentreset",
    "functionName": "postLearningAssignmentReset",
    "signature": "postLearningAssignmentReset(assignmentId)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningAssignment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet assignmentId = \"assignmentId_example\"; // String | The Learning Assignment ID\n\n// Reset Learning Assignment\napiInstance.postLearningAssignmentReset(assignmentId)\n  .then((data) => {\n    console.log(`postLearningAssignmentReset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningAssignmentReset\");\n    console.error(err);\n  });"
  },
  "postlearningassignments": {
    "operationId": "postlearningassignments",
    "functionName": "postLearningAssignments",
    "signature": "postLearningAssignments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet opts = { \n  \"body\": {} // Object | The Learning Assignment to be created\n};\n\n// Create Learning Assignment\napiInstance.postLearningAssignments(opts)\n  .then((data) => {\n    console.log(`postLearningAssignments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningAssignments\");\n    console.error(err);\n  });"
  },
  "postlearningassignmentsaggregatesquery": {
    "operationId": "postlearningassignmentsaggregatesquery",
    "functionName": "postLearningAssignmentsAggregatesQuery",
    "signature": "postLearningAssignmentsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningAssignmentAggregateResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet body = {}; // Object | Aggregate Request\n\n// Retrieve aggregated assignment data\napiInstance.postLearningAssignmentsAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postLearningAssignmentsAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningAssignmentsAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postlearningassignmentsbulkadd": {
    "operationId": "postlearningassignmentsbulkadd",
    "functionName": "postLearningAssignmentsBulkadd",
    "signature": "postLearningAssignmentsBulkadd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentBulkAddResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet opts = { \n  \"body\": [{}] // Object | The learning assignments to be created\n};\n\n// Add multiple learning assignments\napiInstance.postLearningAssignmentsBulkadd(opts)\n  .then((data) => {\n    console.log(`postLearningAssignmentsBulkadd success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningAssignmentsBulkadd\");\n    console.error(err);\n  });"
  },
  "postlearningassignmentsbulkremove": {
    "operationId": "postlearningassignmentsbulkremove",
    "functionName": "postLearningAssignmentsBulkremove",
    "signature": "postLearningAssignmentsBulkremove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentBulkRemoveResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet opts = { \n  \"body\": [\"body_example\"] // [String] | The IDs of the learning assignments to be removed\n};\n\n// Remove multiple Learning Assignments\napiInstance.postLearningAssignmentsBulkremove(opts)\n  .then((data) => {\n    console.log(`postLearningAssignmentsBulkremove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningAssignmentsBulkremove\");\n    console.error(err);\n  });"
  },
  "postlearningmodulejobs": {
    "operationId": "postlearningmodulejobs",
    "functionName": "postLearningModuleJobs",
    "signature": "postLearningModuleJobs(moduleId, body)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningModuleJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet body = {}; // Object | The learning module job request\n\n// Starts a specified operation on learning module\napiInstance.postLearningModuleJobs(moduleId, body)\n  .then((data) => {\n    console.log(`postLearningModuleJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningModuleJobs\");\n    console.error(err);\n  });"
  },
  "postlearningmodulepublish": {
    "operationId": "postlearningmodulepublish",
    "functionName": "postLearningModulePublish",
    "signature": "postLearningModulePublish(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModulePublishResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\n\n// Publish a Learning module\napiInstance.postLearningModulePublish(moduleId)\n  .then((data) => {\n    console.log(`postLearningModulePublish success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningModulePublish\");\n    console.error(err);\n  });"
  },
  "postlearningmodules": {
    "operationId": "postlearningmodules",
    "functionName": "postLearningModules",
    "signature": "postLearningModules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningModule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet body = {}; // Object | The learning module to be created\n\n// Create a new learning module\napiInstance.postLearningModules(body)\n  .then((data) => {\n    console.log(`postLearningModules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningModules\");\n    console.error(err);\n  });"
  },
  "postlearningrulesquery": {
    "operationId": "postlearningrulesquery",
    "functionName": "postLearningRulesQuery",
    "signature": "postLearningRulesQuery(pageSize, pageNumber, body)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningAssignmentUserListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet pageSize = 50; // Number | Page size\nlet pageNumber = 1; // Number | Page number\nlet body = {}; // Object | The learning module rule to fetch users\n\n// Get users for learning module rule\napiInstance.postLearningRulesQuery(pageSize, pageNumber, body)\n  .then((data) => {\n    console.log(`postLearningRulesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningRulesQuery\");\n    console.error(err);\n  });"
  },
  "postlearningscheduleslotsquery": {
    "operationId": "postlearningscheduleslotsquery",
    "functionName": "postLearningScheduleslotsQuery",
    "signature": "postLearningScheduleslotsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningScheduleSlotsQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet body = {}; // Object | The slot search request\n\n// Get list of possible slots where a learning activity can be scheduled.\napiInstance.postLearningScheduleslotsQuery(body)\n  .then((data) => {\n    console.log(`postLearningScheduleslotsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLearningScheduleslotsQuery\");\n    console.error(err);\n  });"
  },
  "putlearningmodule": {
    "operationId": "putlearningmodule",
    "functionName": "putLearningModule",
    "signature": "putLearningModule(moduleId, body)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningModule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet body = {}; // Object | The learning module to be updated\n\n// Update a learning module\napiInstance.putLearningModule(moduleId, body)\n  .then((data) => {\n    console.log(`putLearningModule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putLearningModule\");\n    console.error(err);\n  });"
  },
  "putlearningmodulerule": {
    "operationId": "putlearningmodulerule",
    "functionName": "putLearningModuleRule",
    "signature": "putLearningModuleRule(moduleId, body)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningModuleRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LearningApi();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet body = {}; // Object | The learning module rule to be updated\n\n// Update a learning module rule\napiInstance.putLearningModuleRule(moduleId, body)\n  .then((data) => {\n    console.log(`putLearningModuleRule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putLearningModuleRule\");\n    console.error(err);\n  });"
  },
  "getlicensedefinition": {
    "operationId": "getlicensedefinition",
    "functionName": "getLicenseDefinition",
    "signature": "getLicenseDefinition(licenseId)",
    "parameters": [
      {
        "name": "licenseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet licenseId = \"licenseId_example\"; // String | ID\n\n// Get PureCloud license definition.\napiInstance.getLicenseDefinition(licenseId)\n  .then((data) => {\n    console.log(`getLicenseDefinition success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLicenseDefinition\");\n    console.error(err);\n  });"
  },
  "getlicensedefinitions": {
    "operationId": "getlicensedefinitions",
    "functionName": "getLicenseDefinitions",
    "signature": "getLicenseDefinitions()",
    "return": "[LicenseDefinition]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\n// Get all PureCloud license definitions available for the organization.\napiInstance.getLicenseDefinitions()\n  .then((data) => {\n    console.log(`getLicenseDefinitions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLicenseDefinitions\");\n    console.error(err);\n  });"
  },
  "getlicensetoggle": {
    "operationId": "getlicensetoggle",
    "functionName": "getLicenseToggle",
    "signature": "getLicenseToggle(featureName)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseOrgToggle",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet featureName = \"featureName_example\"; // String | featureName\n\n// Deprecated - no alternative required. This operation will always return 'true' for requested toggles\napiInstance.getLicenseToggle(featureName)\n  .then((data) => {\n    console.log(`getLicenseToggle success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLicenseToggle\");\n    console.error(err);\n  });"
  },
  "getlicenseuser": {
    "operationId": "getlicenseuser",
    "functionName": "getLicenseUser",
    "signature": "getLicenseUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseUser",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet userId = \"userId_example\"; // String | ID\n\n// Get licenses for specified user.\napiInstance.getLicenseUser(userId)\n  .then((data) => {\n    console.log(`getLicenseUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLicenseUser\");\n    console.error(err);\n  });"
  },
  "getlicenseusers": {
    "operationId": "getlicenseusers",
    "functionName": "getLicenseUsers",
    "signature": "getLicenseUsers(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "UserLicensesEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a page of users and their licenses\napiInstance.getLicenseUsers(opts)\n  .then((data) => {\n    console.log(`getLicenseUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLicenseUsers\");\n    console.error(err);\n  });"
  },
  "postlicenseinfer": {
    "operationId": "postlicenseinfer",
    "functionName": "postLicenseInfer",
    "signature": "postLicenseInfer(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet opts = { \n  \"body\": [\"body_example\"] // [String] | The roleIds to use while inferring licenses\n};\n\n// Get a list of licenses inferred based on a list of roleIds\napiInstance.postLicenseInfer(opts)\n  .then((data) => {\n    console.log(`postLicenseInfer success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLicenseInfer\");\n    console.error(err);\n  });"
  },
  "postlicenseorganization": {
    "operationId": "postlicenseorganization",
    "functionName": "postLicenseOrganization",
    "signature": "postLicenseOrganization(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "[LicenseUpdateStatus]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet opts = { \n  \"body\": {} // Object | The license assignments to update.\n};\n\n// Update the organization's license assignments in a batch.\napiInstance.postLicenseOrganization(opts)\n  .then((data) => {\n    console.log(`postLicenseOrganization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLicenseOrganization\");\n    console.error(err);\n  });"
  },
  "postlicensetoggle": {
    "operationId": "postlicensetoggle",
    "functionName": "postLicenseToggle",
    "signature": "postLicenseToggle(featureName)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseOrgToggle",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet featureName = \"featureName_example\"; // String | featureName\n\n// Deprecated. No alternative required - this endpoint has no effect\napiInstance.postLicenseToggle(featureName)\n  .then((data) => {\n    console.log(`postLicenseToggle success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLicenseToggle\");\n    console.error(err);\n  });"
  },
  "postlicenseusers": {
    "operationId": "postlicenseusers",
    "functionName": "postLicenseUsers",
    "signature": "postLicenseUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LicenseApi();\n\nlet opts = { \n  \"body\": [\"body_example\"] // [String] | The user IDs to fetch.\n};\n\n// Fetch user licenses in a batch.\napiInstance.postLicenseUsers(opts)\n  .then((data) => {\n    console.log(`postLicenseUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLicenseUsers\");\n    console.error(err);\n  });"
  },
  "deletelocation": {
    "operationId": "deletelocation",
    "functionName": "deleteLocation",
    "signature": "deleteLocation(locationId)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LocationsApi();\n\nlet locationId = \"locationId_example\"; // String | Location ID\n\n// Delete a location\napiInstance.deleteLocation(locationId)\n  .then(() => {\n    console.log(\"deleteLocation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteLocation\");\n    console.error(err);\n  });"
  },
  "getlocation": {
    "operationId": "getlocation",
    "functionName": "getLocation",
    "signature": "getLocation(locationId, expand)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LocationDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LocationsApi();\n\nlet locationId = \"locationId_example\"; // String | Location ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get Location by ID.\napiInstance.getLocation(locationId, opts)\n  .then((data) => {\n    console.log(`getLocation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLocation\");\n    console.error(err);\n  });"
  },
  "getlocationsublocations": {
    "operationId": "getlocationsublocations",
    "functionName": "getLocationSublocations",
    "signature": "getLocationSublocations(locationId)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LocationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LocationsApi();\n\nlet locationId = \"locationId_example\"; // String | Location ID\n\n// Get sublocations for location ID.\napiInstance.getLocationSublocations(locationId)\n  .then((data) => {\n    console.log(`getLocationSublocations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLocationSublocations\");\n    console.error(err);\n  });"
  },
  "getlocations": {
    "operationId": "getlocations",
    "functionName": "getLocations",
    "signature": "getLocations(pageSize, pageNumber, id, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LocationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LocationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"id\": [\"id_example\"], // [String] | id\n  \"sortOrder\": \"sortOrder_example\" // String | Sort order\n};\n\n// Get a list of all locations.\napiInstance.getLocations(opts)\n  .then((data) => {\n    console.log(`getLocations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLocations\");\n    console.error(err);\n  });"
  },
  "getlocationssearch": {
    "operationId": "getlocationssearch",
    "functionName": "getLocationsSearch",
    "signature": "getLocationsSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LocationsSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Provides more details about a specified resource\n};\n\n// Search locations using the q64 value returned from a previous search\napiInstance.getLocationsSearch(q64, opts)\n  .then((data) => {\n    console.log(`getLocationsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getLocationsSearch\");\n    console.error(err);\n  });"
  },
  "patchlocation": {
    "operationId": "patchlocation",
    "functionName": "patchLocation",
    "signature": "patchLocation(locationId, body)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocationDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LocationsApi();\n\nlet locationId = \"locationId_example\"; // String | Location ID\nlet body = {}; // Object | Location\n\n// Update a location\napiInstance.patchLocation(locationId, body)\n  .then((data) => {\n    console.log(`patchLocation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchLocation\");\n    console.error(err);\n  });"
  },
  "postlocations": {
    "operationId": "postlocations",
    "functionName": "postLocations",
    "signature": "postLocations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocationDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.LocationsApi();\n\nlet body = {}; // Object | Location\n\n// Create a location\napiInstance.postLocations(body)\n  .then((data) => {\n    console.log(`postLocations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLocations\");\n    console.error(err);\n  });"
  },
  "postlocationssearch": {
    "operationId": "postlocationssearch",
    "functionName": "postLocationsSearch",
    "signature": "postLocationsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocationsSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet body = {}; // Object | Search request options\n\n// Search locations\napiInstance.postLocationsSearch(body)\n  .then((data) => {\n    console.log(`postLocationsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLocationsSearch\");\n    console.error(err);\n  });"
  },
  "deletemessagingsetting": {
    "operationId": "deletemessagingsetting",
    "functionName": "deleteMessagingSetting",
    "signature": "deleteMessagingSetting(messageSettingId)",
    "parameters": [
      {
        "name": "messageSettingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet messageSettingId = \"messageSettingId_example\"; // String | Message Settings ID\n\n// Delete a messaging setting\napiInstance.deleteMessagingSetting(messageSettingId)\n  .then(() => {\n    console.log(\"deleteMessagingSetting returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteMessagingSetting\");\n    console.error(err);\n  });"
  },
  "deletemessagingsettingsdefault": {
    "operationId": "deletemessagingsettingsdefault",
    "functionName": "deleteMessagingSettingsDefault",
    "signature": "deleteMessagingSettingsDefault()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\n// Delete the organization's default setting, a global default will be applied to integrations without settings\napiInstance.deleteMessagingSettingsDefault()\n  .then(() => {\n    console.log(\"deleteMessagingSettingsDefault returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteMessagingSettingsDefault\");\n    console.error(err);\n  });"
  },
  "deletemessagingsupportedcontentsupportedcontentid": {
    "operationId": "deletemessagingsupportedcontentsupportedcontentid",
    "functionName": "deleteMessagingSupportedcontentSupportedContentId",
    "signature": "deleteMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n// Delete a supported content profile\napiInstance.deleteMessagingSupportedcontentSupportedContentId(supportedContentId)\n  .then(() => {\n    console.log(\"deleteMessagingSupportedcontentSupportedContentId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteMessagingSupportedcontentSupportedContentId\");\n    console.error(err);\n  });"
  },
  "getmessagingsetting": {
    "operationId": "getmessagingsetting",
    "functionName": "getMessagingSetting",
    "signature": "getMessagingSetting(messageSettingId)",
    "parameters": [
      {
        "name": "messageSettingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet messageSettingId = \"messageSettingId_example\"; // String | Message Settings ID\n\n// Get a messaging setting\napiInstance.getMessagingSetting(messageSettingId)\n  .then((data) => {\n    console.log(`getMessagingSetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getMessagingSetting\");\n    console.error(err);\n  });"
  },
  "getmessagingsettings": {
    "operationId": "getmessagingsettings",
    "functionName": "getMessagingSettings",
    "signature": "getMessagingSettings(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "MessagingConfigListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of messaging settings\napiInstance.getMessagingSettings(opts)\n  .then((data) => {\n    console.log(`getMessagingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getMessagingSettings\");\n    console.error(err);\n  });"
  },
  "getmessagingsettingsdefault": {
    "operationId": "getmessagingsettingsdefault",
    "functionName": "getMessagingSettingsDefault",
    "signature": "getMessagingSettingsDefault()",
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\n// Get the organization's default settings that will be used as the default when creating an integration.\napiInstance.getMessagingSettingsDefault()\n  .then((data) => {\n    console.log(`getMessagingSettingsDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getMessagingSettingsDefault\");\n    console.error(err);\n  });"
  },
  "getmessagingsupportedcontent": {
    "operationId": "getmessagingsupportedcontent",
    "functionName": "getMessagingSupportedcontent",
    "signature": "getMessagingSupportedcontent(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SupportedContentListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of Supported Content profiles\napiInstance.getMessagingSupportedcontent(opts)\n  .then((data) => {\n    console.log(`getMessagingSupportedcontent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getMessagingSupportedcontent\");\n    console.error(err);\n  });"
  },
  "getmessagingsupportedcontentsupportedcontentid": {
    "operationId": "getmessagingsupportedcontentsupportedcontentid",
    "functionName": "getMessagingSupportedcontentSupportedContentId",
    "signature": "getMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n// Get a supported content profile\napiInstance.getMessagingSupportedcontentSupportedContentId(supportedContentId)\n  .then((data) => {\n    console.log(`getMessagingSupportedcontentSupportedContentId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getMessagingSupportedcontentSupportedContentId\");\n    console.error(err);\n  });"
  },
  "patchmessagingsetting": {
    "operationId": "patchmessagingsetting",
    "functionName": "patchMessagingSetting",
    "signature": "patchMessagingSetting(messageSettingId, body)",
    "parameters": [
      {
        "name": "messageSettingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet messageSettingId = \"messageSettingId_example\"; // String | Message Settings ID\nlet body = {}; // Object | MessagingSetting\n\n// Update a messaging setting\napiInstance.patchMessagingSetting(messageSettingId, body)\n  .then((data) => {\n    console.log(`patchMessagingSetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchMessagingSetting\");\n    console.error(err);\n  });"
  },
  "patchmessagingsupportedcontentsupportedcontentid": {
    "operationId": "patchmessagingsupportedcontentsupportedcontentid",
    "functionName": "patchMessagingSupportedcontentSupportedContentId",
    "signature": "patchMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\nlet body = {}; // Object | SupportedContent\n\n// Update a supported content profile\napiInstance.patchMessagingSupportedcontentSupportedContentId(supportedContentId, body)\n  .then((data) => {\n    console.log(`patchMessagingSupportedcontentSupportedContentId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchMessagingSupportedcontentSupportedContentId\");\n    console.error(err);\n  });"
  },
  "postmessagingsettings": {
    "operationId": "postmessagingsettings",
    "functionName": "postMessagingSettings",
    "signature": "postMessagingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet body = {}; // Object | MessagingSetting\n\n// Create a messaging setting\napiInstance.postMessagingSettings(body)\n  .then((data) => {\n    console.log(`postMessagingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postMessagingSettings\");\n    console.error(err);\n  });"
  },
  "postmessagingsupportedcontent": {
    "operationId": "postmessagingsupportedcontent",
    "functionName": "postMessagingSupportedcontent",
    "signature": "postMessagingSupportedcontent(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet body = {}; // Object | SupportedContent\n\n// Create a Supported Content profile\napiInstance.postMessagingSupportedcontent(body)\n  .then((data) => {\n    console.log(`postMessagingSupportedcontent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postMessagingSupportedcontent\");\n    console.error(err);\n  });"
  },
  "putmessagingsettingsdefault": {
    "operationId": "putmessagingsettingsdefault",
    "functionName": "putMessagingSettingsDefault",
    "signature": "putMessagingSettingsDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingSetting",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MessagingApi();\n\nlet body = {}; // Object | Messaging Setting ID\n\n// Set the organization's default settings that may be applied to an integration when it is created.\napiInstance.putMessagingSettingsDefault(body)\n  .then((data) => {\n    console.log(`putMessagingSettingsDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putMessagingSettingsDefault\");\n    console.error(err);\n  });"
  },
  "deletemobiledevice": {
    "operationId": "deletemobiledevice",
    "functionName": "deleteMobiledevice",
    "signature": "deleteMobiledevice(deviceId)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MobileDevicesApi();\n\nlet deviceId = \"deviceId_example\"; // String | Device ID\n\n// Delete device\napiInstance.deleteMobiledevice(deviceId)\n  .then(() => {\n    console.log(\"deleteMobiledevice returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteMobiledevice\");\n    console.error(err);\n  });"
  },
  "getmobiledevice": {
    "operationId": "getmobiledevice",
    "functionName": "getMobiledevice",
    "signature": "getMobiledevice(deviceId)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserDevice",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MobileDevicesApi();\n\nlet deviceId = \"deviceId_example\"; // String | Device ID\n\n// Get device\napiInstance.getMobiledevice(deviceId)\n  .then((data) => {\n    console.log(`getMobiledevice success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getMobiledevice\");\n    console.error(err);\n  });"
  },
  "getmobiledevices": {
    "operationId": "getmobiledevices",
    "functionName": "getMobiledevices",
    "signature": "getMobiledevices(pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DirectoryUserDevicesListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MobileDevicesApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ascending\" // String | Ascending or descending sort order\n};\n\n// Get a list of all devices.\napiInstance.getMobiledevices(opts)\n  .then((data) => {\n    console.log(`getMobiledevices success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getMobiledevices\");\n    console.error(err);\n  });"
  },
  "postmobiledevices": {
    "operationId": "postmobiledevices",
    "functionName": "postMobiledevices",
    "signature": "postMobiledevices(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserDevice",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MobileDevicesApi();\n\nlet body = {}; // Object | Device\n\n// Create User device\napiInstance.postMobiledevices(body)\n  .then((data) => {\n    console.log(`postMobiledevices success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postMobiledevices\");\n    console.error(err);\n  });"
  },
  "putmobiledevice": {
    "operationId": "putmobiledevice",
    "functionName": "putMobiledevice",
    "signature": "putMobiledevice(deviceId, body)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserDevice",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.MobileDevicesApi();\n\nlet deviceId = \"deviceId_example\"; // String | Device ID\nlet opts = { \n  \"body\": {} // Object | Device\n};\n\n// Update device\napiInstance.putMobiledevice(deviceId, opts)\n  .then((data) => {\n    console.log(`putMobiledevice success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putMobiledevice\");\n    console.error(err);\n  });"
  },
  "deletenotificationschannelsubscriptions": {
    "operationId": "deletenotificationschannelsubscriptions",
    "functionName": "deleteNotificationsChannelSubscriptions",
    "signature": "deleteNotificationsChannelSubscriptions(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\n\n// Remove all subscriptions\napiInstance.deleteNotificationsChannelSubscriptions(channelId)\n  .then(() => {\n    console.log(\"deleteNotificationsChannelSubscriptions returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteNotificationsChannelSubscriptions\");\n    console.error(err);\n  });"
  },
  "getnotificationsavailabletopics": {
    "operationId": "getnotificationsavailabletopics",
    "functionName": "getNotificationsAvailabletopics",
    "signature": "getNotificationsAvailabletopics(expand, includePreview)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includePreview",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AvailableTopicEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand\n  \"includePreview\": true // Boolean | Whether or not to include Preview topics\n};\n\n// Get available notification topics.\napiInstance.getNotificationsAvailabletopics(opts)\n  .then((data) => {\n    console.log(`getNotificationsAvailabletopics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getNotificationsAvailabletopics\");\n    console.error(err);\n  });"
  },
  "getnotificationschannelsubscriptions": {
    "operationId": "getnotificationschannelsubscriptions",
    "functionName": "getNotificationsChannelSubscriptions",
    "signature": "getNotificationsChannelSubscriptions(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\n\n// The list of all subscriptions for this channel\napiInstance.getNotificationsChannelSubscriptions(channelId)\n  .then((data) => {\n    console.log(`getNotificationsChannelSubscriptions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getNotificationsChannelSubscriptions\");\n    console.error(err);\n  });"
  },
  "getnotificationschannels": {
    "operationId": "getnotificationschannels",
    "functionName": "getNotificationsChannels",
    "signature": "getNotificationsChannels(includechannels)",
    "parameters": [
      {
        "name": "includechannels",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ChannelEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\nlet opts = { \n  \"includechannels\": \"token\" // String | Show user's channels for this specific token or across all tokens for this user and app.  Channel Ids for other access tokens will not be shown, but will be presented to show their existence.\n};\n\n// The list of existing channels\napiInstance.getNotificationsChannels(opts)\n  .then((data) => {\n    console.log(`getNotificationsChannels success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getNotificationsChannels\");\n    console.error(err);\n  });"
  },
  "headnotificationschannel": {
    "operationId": "headnotificationschannel",
    "functionName": "headNotificationsChannel",
    "signature": "headNotificationsChannel(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\n\n// Verify a channel still exists and is valid\napiInstance.headNotificationsChannel(channelId)\n  .then(() => {\n    console.log(\"headNotificationsChannel returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling headNotificationsChannel\");\n    console.error(err);\n  });"
  },
  "postnotificationschannelsubscriptions": {
    "operationId": "postnotificationschannelsubscriptions",
    "functionName": "postNotificationsChannelSubscriptions",
    "signature": "postNotificationsChannelSubscriptions(channelId, body, ignoreErrors)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ignoreErrors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\nlet body = [{}]; // Object | Body\nlet opts = { \n  \"ignoreErrors\": false // Boolean | Optionally prevent throwing of errors for failed permissions checks.\n};\n\n// Add a list of subscriptions to the existing list of subscriptions\napiInstance.postNotificationsChannelSubscriptions(channelId, body, opts)\n  .then((data) => {\n    console.log(`postNotificationsChannelSubscriptions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postNotificationsChannelSubscriptions\");\n    console.error(err);\n  });"
  },
  "postnotificationschannels": {
    "operationId": "postnotificationschannels",
    "functionName": "postNotificationsChannels",
    "signature": "postNotificationsChannels()",
    "return": "Channel",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\n// Create a new channel\napiInstance.postNotificationsChannels()\n  .then((data) => {\n    console.log(`postNotificationsChannels success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postNotificationsChannels\");\n    console.error(err);\n  });"
  },
  "putnotificationschannelsubscriptions": {
    "operationId": "putnotificationschannelsubscriptions",
    "functionName": "putNotificationsChannelSubscriptions",
    "signature": "putNotificationsChannelSubscriptions(channelId, body, ignoreErrors)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ignoreErrors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.NotificationsApi();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\nlet body = [{}]; // Object | Body\nlet opts = { \n  \"ignoreErrors\": false // Boolean | Optionally prevent throwing of errors for failed permissions checks.\n};\n\n// Replace the current list of subscriptions with a new list.\napiInstance.putNotificationsChannelSubscriptions(channelId, body, opts)\n  .then((data) => {\n    console.log(`putNotificationsChannelSubscriptions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putNotificationsChannelSubscriptions\");\n    console.error(err);\n  });"
  },
  "deleteoauthclient": {
    "operationId": "deleteoauthclient",
    "functionName": "deleteOauthClient",
    "signature": "deleteOauthClient(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet clientId = \"clientId_example\"; // String | Client ID\n\n// Delete OAuth Client\napiInstance.deleteOauthClient(clientId)\n  .then(() => {\n    console.log(\"deleteOauthClient returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOauthClient\");\n    console.error(err);\n  });"
  },
  "getoauthauthorization": {
    "operationId": "getoauthauthorization",
    "functionName": "getOauthAuthorization",
    "signature": "getOauthAuthorization(clientId, acceptLanguage)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet clientId = \"clientId_example\"; // String | The ID of client\nlet opts = { \n  \"acceptLanguage\": \"en-us\" // String | The language in which to display the client descriptions.\n};\n\n// Get a client that is authorized by the resource owner\napiInstance.getOauthAuthorization(clientId, opts)\n  .then((data) => {\n    console.log(`getOauthAuthorization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthAuthorization\");\n    console.error(err);\n  });"
  },
  "getoauthauthorizations": {
    "operationId": "getoauthauthorizations",
    "functionName": "getOauthAuthorizations",
    "signature": "getOauthAuthorizations(acceptLanguage)",
    "parameters": [
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthAuthorizationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet opts = { \n  \"acceptLanguage\": \"en-us\" // String | The language in which to display the client descriptions.\n};\n\n// List clients that have been authorized, requested, or revoked by the resource owner\napiInstance.getOauthAuthorizations(opts)\n  .then((data) => {\n    console.log(`getOauthAuthorizations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthAuthorizations\");\n    console.error(err);\n  });"
  },
  "getoauthclient": {
    "operationId": "getoauthclient",
    "functionName": "getOauthClient",
    "signature": "getOauthClient(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet clientId = \"clientId_example\"; // String | Client ID\n\n// Get OAuth Client\napiInstance.getOauthClient(clientId)\n  .then((data) => {\n    console.log(`getOauthClient success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthClient\");\n    console.error(err);\n  });"
  },
  "getoauthclientusagequeryresult": {
    "operationId": "getoauthclientusagequeryresult",
    "functionName": "getOauthClientUsageQueryResult",
    "signature": "getOauthClientUsageQueryResult(executionId, clientId)",
    "parameters": [
      {
        "name": "executionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ApiUsageQueryResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsageApi();\n\nlet executionId = \"executionId_example\"; // String | ID of the query execution\nlet clientId = \"clientId_example\"; // String | Client ID\n\n// Get the results of a usage query\napiInstance.getOauthClientUsageQueryResult(executionId, clientId)\n  .then((data) => {\n    console.log(`getOauthClientUsageQueryResult success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthClientUsageQueryResult\");\n    console.error(err);\n  });"
  },
  "getoauthclientusagesummary": {
    "operationId": "getoauthclientusagesummary",
    "functionName": "getOauthClientUsageSummary",
    "signature": "getOauthClientUsageSummary(clientId, days)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "days",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsageApi();\n\nlet clientId = \"clientId_example\"; // String | Client ID\nlet opts = { \n  \"days\": \"7\" // String | Previous number of days to query\n};\n\n// Get a summary of OAuth client API usage\napiInstance.getOauthClientUsageSummary(clientId, opts)\n  .then((data) => {\n    console.log(`getOauthClientUsageSummary success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthClientUsageSummary\");\n    console.error(err);\n  });"
  },
  "getoauthclients": {
    "operationId": "getoauthclients",
    "functionName": "getOauthClients",
    "signature": "getOauthClients()",
    "return": "OAuthClientEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\n// The list of OAuth clients\napiInstance.getOauthClients()\n  .then((data) => {\n    console.log(`getOauthClients success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthClients\");\n    console.error(err);\n  });"
  },
  "getoauthscope": {
    "operationId": "getoauthscope",
    "functionName": "getOauthScope",
    "signature": "getOauthScope(scopeId, acceptLanguage)",
    "parameters": [
      {
        "name": "scopeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthScope",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet scopeId = \"scopeId_example\"; // String | Scope ID\nlet opts = { \n  \"acceptLanguage\": \"en-us\" // String | The language with which to display the scope description.\n};\n\n// An OAuth scope\napiInstance.getOauthScope(scopeId, opts)\n  .then((data) => {\n    console.log(`getOauthScope success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthScope\");\n    console.error(err);\n  });"
  },
  "getoauthscopes": {
    "operationId": "getoauthscopes",
    "functionName": "getOauthScopes",
    "signature": "getOauthScopes(acceptLanguage)",
    "parameters": [
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthScopeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet opts = { \n  \"acceptLanguage\": \"en-us\" // String | The language with which to display the scope descriptions.\n};\n\n// The list of OAuth scopes\napiInstance.getOauthScopes(opts)\n  .then((data) => {\n    console.log(`getOauthScopes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOauthScopes\");\n    console.error(err);\n  });"
  },
  "postoauthclientsecret": {
    "operationId": "postoauthclientsecret",
    "functionName": "postOauthClientSecret",
    "signature": "postOauthClientSecret(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet clientId = \"clientId_example\"; // String | Client ID\n\n// Regenerate Client Secret\napiInstance.postOauthClientSecret(clientId)\n  .then((data) => {\n    console.log(`postOauthClientSecret success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOauthClientSecret\");\n    console.error(err);\n  });"
  },
  "postoauthclientusagequery": {
    "operationId": "postoauthclientusagequery",
    "functionName": "postOauthClientUsageQuery",
    "signature": "postOauthClientUsageQuery(clientId, body)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsageApi();\n\nlet clientId = \"clientId_example\"; // String | Client ID\nlet body = {}; // Object | Query\n\n// Query for OAuth client API usage\napiInstance.postOauthClientUsageQuery(clientId, body)\n  .then((data) => {\n    console.log(`postOauthClientUsageQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOauthClientUsageQuery\");\n    console.error(err);\n  });"
  },
  "postoauthclients": {
    "operationId": "postoauthclients",
    "functionName": "postOauthClients",
    "signature": "postOauthClients(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet body = {}; // Object | Client\n\n// Create OAuth client\napiInstance.postOauthClients(body)\n  .then((data) => {\n    console.log(`postOauthClients success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOauthClients\");\n    console.error(err);\n  });"
  },
  "putoauthclient": {
    "operationId": "putoauthclient",
    "functionName": "putOauthClient",
    "signature": "putOauthClient(clientId, body)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OAuthApi();\n\nlet clientId = \"clientId_example\"; // String | Client ID\nlet body = {}; // Object | Client\n\n// Update OAuth Client\napiInstance.putOauthClient(clientId, body)\n  .then((data) => {\n    console.log(`putOauthClient success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOauthClient\");\n    console.error(err);\n  });"
  },
  "getorganizationsauthenticationsettings": {
    "operationId": "getorganizationsauthenticationsettings",
    "functionName": "getOrganizationsAuthenticationSettings",
    "signature": "getOrganizationsAuthenticationSettings()",
    "return": "OrgAuthSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\n// Gets the organization's settings\napiInstance.getOrganizationsAuthenticationSettings()\n  .then((data) => {\n    console.log(`getOrganizationsAuthenticationSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsAuthenticationSettings\");\n    console.error(err);\n  });"
  },
  "getorganizationsembeddedintegration": {
    "operationId": "getorganizationsembeddedintegration",
    "functionName": "getOrganizationsEmbeddedintegration",
    "signature": "getOrganizationsEmbeddedintegration()",
    "return": "EmbeddedIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\n// Get the list of domains that will be allowed to embed PureCloud applications\napiInstance.getOrganizationsEmbeddedintegration()\n  .then((data) => {\n    console.log(`getOrganizationsEmbeddedintegration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsEmbeddedintegration\");\n    console.error(err);\n  });"
  },
  "getorganizationsipaddressauthentication": {
    "operationId": "getorganizationsipaddressauthentication",
    "functionName": "getOrganizationsIpaddressauthentication",
    "signature": "getOrganizationsIpaddressauthentication()",
    "return": "IpAddressAuthentication",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\n// Get organization IP address whitelist settings\napiInstance.getOrganizationsIpaddressauthentication()\n  .then((data) => {\n    console.log(`getOrganizationsIpaddressauthentication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsIpaddressauthentication\");\n    console.error(err);\n  });"
  },
  "getorganizationslimitschangerequest": {
    "operationId": "getorganizationslimitschangerequest",
    "functionName": "getOrganizationsLimitsChangerequest",
    "signature": "getOrganizationsLimitsChangerequest(requestId)",
    "parameters": [
      {
        "name": "requestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitChangeRequestDetails",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet requestId = \"requestId_example\"; // String | Unique id for the limit change request\n\n// Get a limit change request\napiInstance.getOrganizationsLimitsChangerequest(requestId)\n  .then((data) => {\n    console.log(`getOrganizationsLimitsChangerequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsLimitsChangerequest\");\n    console.error(err);\n  });"
  },
  "getorganizationslimitschangerequests": {
    "operationId": "getorganizationslimitschangerequests",
    "functionName": "getOrganizationsLimitsChangerequests",
    "signature": "getOrganizationsLimitsChangerequests(after, before, status, pageSize, expand)",
    "parameters": [
      {
        "name": "after",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "before",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "status",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LimitChangeRequestsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet opts = { \n  \"after\": 3.4, // Number | Timestamp indicating the date to begin after when searching for requests.\n  \"before\": 3.4, // Number | Timestamp indicating the date to end before when searching for requests.\n  \"status\": \"status_example\", // String | Status of the request to be filtered by\n  \"pageSize\": 25, // Number | Page Size\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get the available limit change requests\napiInstance.getOrganizationsLimitsChangerequests(opts)\n  .then((data) => {\n    console.log(`getOrganizationsLimitsChangerequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsLimitsChangerequests\");\n    console.error(err);\n  });"
  },
  "getorganizationslimitsdocs": {
    "operationId": "getorganizationslimitsdocs",
    "functionName": "getOrganizationsLimitsDocs",
    "signature": "getOrganizationsLimitsDocs()",
    "return": "UrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\n// Get a link to the limit documentation\napiInstance.getOrganizationsLimitsDocs()\n  .then((data) => {\n    console.log(`getOrganizationsLimitsDocs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsLimitsDocs\");\n    console.error(err);\n  });"
  },
  "getorganizationslimitsnamespace": {
    "operationId": "getorganizationslimitsnamespace",
    "functionName": "getOrganizationsLimitsNamespace",
    "signature": "getOrganizationsLimitsNamespace(namespaceName)",
    "parameters": [
      {
        "name": "namespaceName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet namespaceName = \"namespaceName_example\"; // String | The namespace to fetch limits for\n\n// Get the effective limits in a namespace for an organization\napiInstance.getOrganizationsLimitsNamespace(namespaceName)\n  .then((data) => {\n    console.log(`getOrganizationsLimitsNamespace success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsLimitsNamespace\");\n    console.error(err);\n  });"
  },
  "getorganizationslimitsnamespacedefaults": {
    "operationId": "getorganizationslimitsnamespacedefaults",
    "functionName": "getOrganizationsLimitsNamespaceDefaults",
    "signature": "getOrganizationsLimitsNamespaceDefaults(namespaceName)",
    "parameters": [
      {
        "name": "namespaceName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet namespaceName = \"namespaceName_example\"; // String | The namespace to fetch defaults limits for\n\n// Get the default limits in a namespace for an organization\napiInstance.getOrganizationsLimitsNamespaceDefaults(namespaceName)\n  .then((data) => {\n    console.log(`getOrganizationsLimitsNamespaceDefaults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsLimitsNamespaceDefaults\");\n    console.error(err);\n  });"
  },
  "getorganizationslimitsnamespaces": {
    "operationId": "getorganizationslimitsnamespaces",
    "functionName": "getOrganizationsLimitsNamespaces",
    "signature": "getOrganizationsLimitsNamespaces(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet opts = { \n  \"pageSize\": 100, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get the available limit namespaces\napiInstance.getOrganizationsLimitsNamespaces(opts)\n  .then((data) => {\n    console.log(`getOrganizationsLimitsNamespaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsLimitsNamespaces\");\n    console.error(err);\n  });"
  },
  "getorganizationsme": {
    "operationId": "getorganizationsme",
    "functionName": "getOrganizationsMe",
    "signature": "getOrganizationsMe()",
    "return": "Organization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\n// Get organization.\napiInstance.getOrganizationsMe()\n  .then((data) => {\n    console.log(`getOrganizationsMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsMe\");\n    console.error(err);\n  });"
  },
  "getorganizationswhitelist": {
    "operationId": "getorganizationswhitelist",
    "functionName": "getOrganizationsWhitelist",
    "signature": "getOrganizationsWhitelist()",
    "return": "OrgWhitelistSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\n// This route is deprecated, please use /api/v2/organizations/authentication/settings instead\napiInstance.getOrganizationsWhitelist()\n  .then((data) => {\n    console.log(`getOrganizationsWhitelist success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrganizationsWhitelist\");\n    console.error(err);\n  });"
  },
  "patchorganizationsauthenticationsettings": {
    "operationId": "patchorganizationsauthenticationsettings",
    "functionName": "patchOrganizationsAuthenticationSettings",
    "signature": "patchOrganizationsAuthenticationSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrgAuthSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet body = {}; // Object | Org settings\n\n// Update the organization's settings\napiInstance.patchOrganizationsAuthenticationSettings(body)\n  .then((data) => {\n    console.log(`patchOrganizationsAuthenticationSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchOrganizationsAuthenticationSettings\");\n    console.error(err);\n  });"
  },
  "patchorganizationsfeature": {
    "operationId": "patchorganizationsfeature",
    "functionName": "patchOrganizationsFeature",
    "signature": "patchOrganizationsFeature(featureName, enabled)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "enabled",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationFeatures",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet featureName = \"featureName_example\"; // String | Organization feature\nlet enabled = {}; // Object | New state of feature\n\n// Update organization\napiInstance.patchOrganizationsFeature(featureName, enabled)\n  .then((data) => {\n    console.log(`patchOrganizationsFeature success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchOrganizationsFeature\");\n    console.error(err);\n  });"
  },
  "putorganizationsembeddedintegration": {
    "operationId": "putorganizationsembeddedintegration",
    "functionName": "putOrganizationsEmbeddedintegration",
    "signature": "putOrganizationsEmbeddedintegration(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmbeddedIntegration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet body = {}; // Object | Whitelist settings\n\n// Update the list of domains that will be allowed to embed PureCloud applications\napiInstance.putOrganizationsEmbeddedintegration(body)\n  .then((data) => {\n    console.log(`putOrganizationsEmbeddedintegration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrganizationsEmbeddedintegration\");\n    console.error(err);\n  });"
  },
  "putorganizationsipaddressauthentication": {
    "operationId": "putorganizationsipaddressauthentication",
    "functionName": "putOrganizationsIpaddressauthentication",
    "signature": "putOrganizationsIpaddressauthentication(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IpAddressAuthentication",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet body = {}; // Object | IP address Whitelist settings\n\n// Update organization IP address whitelist settings\napiInstance.putOrganizationsIpaddressauthentication(body)\n  .then((data) => {\n    console.log(`putOrganizationsIpaddressauthentication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrganizationsIpaddressauthentication\");\n    console.error(err);\n  });"
  },
  "putorganizationsme": {
    "operationId": "putorganizationsme",
    "functionName": "putOrganizationsMe",
    "signature": "putOrganizationsMe(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Organization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet opts = { \n  \"body\": {} // Object | Organization\n};\n\n// Update organization.\napiInstance.putOrganizationsMe(opts)\n  .then((data) => {\n    console.log(`putOrganizationsMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrganizationsMe\");\n    console.error(err);\n  });"
  },
  "putorganizationswhitelist": {
    "operationId": "putorganizationswhitelist",
    "functionName": "putOrganizationsWhitelist",
    "signature": "putOrganizationsWhitelist(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrgWhitelistSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationApi();\n\nlet body = {}; // Object | Whitelist settings\n\n// This route is deprecated, please use /api/v2/organizations/authentication/settings instead\napiInstance.putOrganizationsWhitelist(body)\n  .then((data) => {\n    console.log(`putOrganizationsWhitelist success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrganizationsWhitelist\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrustee": {
    "operationId": "deleteorgauthorizationtrustee",
    "functionName": "deleteOrgauthorizationTrustee",
    "signature": "deleteOrgauthorizationTrustee(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\n\n// Delete Org Trust\napiInstance.deleteOrgauthorizationTrustee(trusteeOrgId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrustee returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrustee\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrusteecloneduser": {
    "operationId": "deleteorgauthorizationtrusteecloneduser",
    "functionName": "deleteOrgauthorizationTrusteeCloneduser",
    "signature": "deleteOrgauthorizationTrusteeCloneduser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Id of the cloned user to delete\n\n// Deletes cloned user\napiInstance.deleteOrgauthorizationTrusteeCloneduser(trusteeOrgId, trusteeUserId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrusteeCloneduser returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrusteeCloneduser\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrusteegroup": {
    "operationId": "deleteorgauthorizationtrusteegroup",
    "functionName": "deleteOrgauthorizationTrusteeGroup",
    "signature": "deleteOrgauthorizationTrusteeGroup(trusteeOrgId, trusteeGroupId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeGroupId = \"trusteeGroupId_example\"; // String | Trustee Group Id\n\n// Delete Trustee Group\napiInstance.deleteOrgauthorizationTrusteeGroup(trusteeOrgId, trusteeGroupId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrusteeGroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrusteeGroup\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrusteegrouproles": {
    "operationId": "deleteorgauthorizationtrusteegrouproles",
    "functionName": "deleteOrgauthorizationTrusteeGroupRoles",
    "signature": "deleteOrgauthorizationTrusteeGroupRoles(trusteeOrgId, trusteeGroupId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeGroupId = \"trusteeGroupId_example\"; // String | Trustee Group Id\n\n// Delete Trustee Group Roles\napiInstance.deleteOrgauthorizationTrusteeGroupRoles(trusteeOrgId, trusteeGroupId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrusteeGroupRoles returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrusteeGroupRoles\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrusteeuser": {
    "operationId": "deleteorgauthorizationtrusteeuser",
    "functionName": "deleteOrgauthorizationTrusteeUser",
    "signature": "deleteOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Delete Trustee User\napiInstance.deleteOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrusteeUser returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrusteeUser\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrusteeuserroles": {
    "operationId": "deleteorgauthorizationtrusteeuserroles",
    "functionName": "deleteOrgauthorizationTrusteeUserRoles",
    "signature": "deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Delete Trustee User Roles\napiInstance.deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrusteeUserRoles returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrusteeUserRoles\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrustees": {
    "operationId": "deleteorgauthorizationtrustees",
    "functionName": "deleteOrgauthorizationTrustees",
    "signature": "deleteOrgauthorizationTrustees(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet id = [\"id_example\"]; // [String] | Comma separated list of trustee ids to remove\n\n// Delete Bulk Org Trustees\napiInstance.deleteOrgauthorizationTrustees(id)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrustees returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrustees\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrustor": {
    "operationId": "deleteorgauthorizationtrustor",
    "functionName": "deleteOrgauthorizationTrustor",
    "signature": "deleteOrgauthorizationTrustor(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\n\n// Delete Org Trust\napiInstance.deleteOrgauthorizationTrustor(trustorOrgId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrustor returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrustor\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrustorcloneduser": {
    "operationId": "deleteorgauthorizationtrustorcloneduser",
    "functionName": "deleteOrgauthorizationTrustorCloneduser",
    "signature": "deleteOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Delete Cloned User\napiInstance.deleteOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrustorCloneduser returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrustorCloneduser\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrustorgroup": {
    "operationId": "deleteorgauthorizationtrustorgroup",
    "functionName": "deleteOrgauthorizationTrustorGroup",
    "signature": "deleteOrgauthorizationTrustorGroup(trustorOrgId, trustorGroupId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trustorGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trustorGroupId = \"trustorGroupId_example\"; // String | Trustor Group Id\n\n// Delete Trustee Group\napiInstance.deleteOrgauthorizationTrustorGroup(trustorOrgId, trustorGroupId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrustorGroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrustorGroup\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrustoruser": {
    "operationId": "deleteorgauthorizationtrustoruser",
    "functionName": "deleteOrgauthorizationTrustorUser",
    "signature": "deleteOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Delete Trustee User\napiInstance.deleteOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrustorUser returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrustorUser\");\n    console.error(err);\n  });"
  },
  "deleteorgauthorizationtrustors": {
    "operationId": "deleteorgauthorizationtrustors",
    "functionName": "deleteOrgauthorizationTrustors",
    "signature": "deleteOrgauthorizationTrustors(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet id = [\"id_example\"]; // [String] | Comma separated list of trustor ids to remove\n\n// Delete Bulk Org Trustors\napiInstance.deleteOrgauthorizationTrustors(id)\n  .then(() => {\n    console.log(\"deleteOrgauthorizationTrustors returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrgauthorizationTrustors\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationpairing": {
    "operationId": "getorgauthorizationpairing",
    "functionName": "getOrgauthorizationPairing",
    "signature": "getOrgauthorizationPairing(pairingId)",
    "parameters": [
      {
        "name": "pairingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet pairingId = \"pairingId_example\"; // String | Pairing Id\n\n// Get Pairing Info\napiInstance.getOrgauthorizationPairing(pairingId)\n  .then((data) => {\n    console.log(`getOrgauthorizationPairing success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationPairing\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustee": {
    "operationId": "getorgauthorizationtrustee",
    "functionName": "getOrgauthorizationTrustee",
    "signature": "getOrgauthorizationTrustee(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\n\n// Get Org Trust\napiInstance.getOrgauthorizationTrustee(trusteeOrgId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustee success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustee\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteeclonedusers": {
    "operationId": "getorgauthorizationtrusteeclonedusers",
    "functionName": "getOrgauthorizationTrusteeClonedusers",
    "signature": "getOrgauthorizationTrusteeClonedusers(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\n\n// The list of cloned users from the trustee organization (i.e. users with a native user record).\napiInstance.getOrgauthorizationTrusteeClonedusers(trusteeOrgId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteeClonedusers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteeClonedusers\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteegroup": {
    "operationId": "getorgauthorizationtrusteegroup",
    "functionName": "getOrgauthorizationTrusteeGroup",
    "signature": "getOrgauthorizationTrusteeGroup(trusteeOrgId, trusteeGroupId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeGroupId = \"trusteeGroupId_example\"; // String | Trustee Group Id\n\n// Get Trustee Group\napiInstance.getOrgauthorizationTrusteeGroup(trusteeOrgId, trusteeGroupId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteeGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteeGroup\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteegrouproles": {
    "operationId": "getorgauthorizationtrusteegrouproles",
    "functionName": "getOrgauthorizationTrusteeGroupRoles",
    "signature": "getOrgauthorizationTrusteeGroupRoles(trusteeOrgId, trusteeGroupId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeGroupId = \"trusteeGroupId_example\"; // String | Trustee Group Id\n\n// Get Trustee Group Roles\napiInstance.getOrgauthorizationTrusteeGroupRoles(trusteeOrgId, trusteeGroupId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteeGroupRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteeGroupRoles\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteegroups": {
    "operationId": "getorgauthorizationtrusteegroups",
    "functionName": "getOrgauthorizationTrusteeGroups",
    "signature": "getOrgauthorizationTrusteeGroups(trusteeOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustGroupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// The list of trustee groups for this organization (i.e. groups granted access to this organization).\napiInstance.getOrgauthorizationTrusteeGroups(trusteeOrgId, opts)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteeGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteeGroups\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteeuser": {
    "operationId": "getorgauthorizationtrusteeuser",
    "functionName": "getOrgauthorizationTrusteeUser",
    "signature": "getOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Get Trustee User\napiInstance.getOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteeUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteeUser\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteeuserroles": {
    "operationId": "getorgauthorizationtrusteeuserroles",
    "functionName": "getOrgauthorizationTrusteeUserRoles",
    "signature": "getOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Get Trustee User Roles\napiInstance.getOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteeUserRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteeUserRoles\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteeusers": {
    "operationId": "getorgauthorizationtrusteeusers",
    "functionName": "getOrgauthorizationTrusteeUsers",
    "signature": "getOrgauthorizationTrusteeUsers(trusteeOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustUserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// The list of trustee users for this organization (i.e. users granted access to this organization).\napiInstance.getOrgauthorizationTrusteeUsers(trusteeOrgId, opts)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteeUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteeUsers\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustees": {
    "operationId": "getorgauthorizationtrustees",
    "functionName": "getOrgauthorizationTrustees",
    "signature": "getOrgauthorizationTrustees(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// The list of trustees for this organization (i.e. organizations granted access to this organization).\napiInstance.getOrgauthorizationTrustees(opts)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustees success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustees\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrusteesdefault": {
    "operationId": "getorgauthorizationtrusteesdefault",
    "functionName": "getOrgauthorizationTrusteesDefault",
    "signature": "getOrgauthorizationTrusteesDefault()",
    "return": "Trustee",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\n// Get organization authorization trust with Customer Care, if one exists.\napiInstance.getOrgauthorizationTrusteesDefault()\n  .then((data) => {\n    console.log(`getOrgauthorizationTrusteesDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrusteesDefault\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustor": {
    "operationId": "getorgauthorizationtrustor",
    "functionName": "getOrgauthorizationTrustor",
    "signature": "getOrgauthorizationTrustor(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trustor",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\n\n// Get Org Trust\napiInstance.getOrgauthorizationTrustor(trustorOrgId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustor success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustor\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustorcloneduser": {
    "operationId": "getorgauthorizationtrustorcloneduser",
    "functionName": "getOrgauthorizationTrustorCloneduser",
    "signature": "getOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUser",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Get Cloned User\napiInstance.getOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustorCloneduser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustorCloneduser\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustorclonedusers": {
    "operationId": "getorgauthorizationtrustorclonedusers",
    "functionName": "getOrgauthorizationTrustorClonedusers",
    "signature": "getOrgauthorizationTrustorClonedusers(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\n\n// The list of cloned users in the trustor organization (i.e. users with a native user record).\napiInstance.getOrgauthorizationTrustorClonedusers(trustorOrgId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustorClonedusers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustorClonedusers\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustorgroup": {
    "operationId": "getorgauthorizationtrustorgroup",
    "functionName": "getOrgauthorizationTrustorGroup",
    "signature": "getOrgauthorizationTrustorGroup(trustorOrgId, trustorGroupId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trustorGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trustorGroupId = \"trustorGroupId_example\"; // String | Trustor Group Id\n\n// Get Trustee Group\napiInstance.getOrgauthorizationTrustorGroup(trustorOrgId, trustorGroupId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustorGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustorGroup\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustorgroups": {
    "operationId": "getorgauthorizationtrustorgroups",
    "functionName": "getOrgauthorizationTrustorGroups",
    "signature": "getOrgauthorizationTrustorGroups(trustorOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustGroupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustee Organization Id\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// The list of groups in the trustor organization (i.e. groups granted access).\napiInstance.getOrgauthorizationTrustorGroups(trustorOrgId, opts)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustorGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustorGroups\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustoruser": {
    "operationId": "getorgauthorizationtrustoruser",
    "functionName": "getOrgauthorizationTrustorUser",
    "signature": "getOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Get Trustee User\napiInstance.getOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustorUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustorUser\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustorusers": {
    "operationId": "getorgauthorizationtrustorusers",
    "functionName": "getOrgauthorizationTrustorUsers",
    "signature": "getOrgauthorizationTrustorUsers(trustorOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustUserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustee Organization Id\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// The list of users in the trustor organization (i.e. users granted access).\napiInstance.getOrgauthorizationTrustorUsers(trustorOrgId, opts)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustorUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustorUsers\");\n    console.error(err);\n  });"
  },
  "getorgauthorizationtrustors": {
    "operationId": "getorgauthorizationtrustors",
    "functionName": "getOrgauthorizationTrustors",
    "signature": "getOrgauthorizationTrustors(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustorEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// The list of organizations that have authorized/trusted your organization.\napiInstance.getOrgauthorizationTrustors(opts)\n  .then((data) => {\n    console.log(`getOrgauthorizationTrustors success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrgauthorizationTrustors\");\n    console.error(err);\n  });"
  },
  "postorgauthorizationpairings": {
    "operationId": "postorgauthorizationpairings",
    "functionName": "postOrgauthorizationPairings",
    "signature": "postOrgauthorizationPairings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrustRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet body = {}; // Object | Pairing Info\n\n// A pairing id is created by the trustee and given to the trustor to create a trust.\napiInstance.postOrgauthorizationPairings(body)\n  .then((data) => {\n    console.log(`postOrgauthorizationPairings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOrgauthorizationPairings\");\n    console.error(err);\n  });"
  },
  "postorgauthorizationtrusteegroups": {
    "operationId": "postorgauthorizationtrusteegroups",
    "functionName": "postOrgauthorizationTrusteeGroups",
    "signature": "postOrgauthorizationTrusteeGroups(trusteeOrgId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrustGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet body = {}; // Object | Trust\n\n// Add a group to the trust.\napiInstance.postOrgauthorizationTrusteeGroups(trusteeOrgId, body)\n  .then((data) => {\n    console.log(`postOrgauthorizationTrusteeGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOrgauthorizationTrusteeGroups\");\n    console.error(err);\n  });"
  },
  "postorgauthorizationtrusteeusers": {
    "operationId": "postorgauthorizationtrusteeusers",
    "functionName": "postOrgauthorizationTrusteeUsers",
    "signature": "postOrgauthorizationTrusteeUsers(trusteeOrgId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet body = {}; // Object | Trust\n\n// Add a user to the trust.\napiInstance.postOrgauthorizationTrusteeUsers(trusteeOrgId, body)\n  .then((data) => {\n    console.log(`postOrgauthorizationTrusteeUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOrgauthorizationTrusteeUsers\");\n    console.error(err);\n  });"
  },
  "postorgauthorizationtrustees": {
    "operationId": "postorgauthorizationtrustees",
    "functionName": "postOrgauthorizationTrustees",
    "signature": "postOrgauthorizationTrustees(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet body = {}; // Object | Trust\n\n// Create a new organization authorization trust. This is required to grant other organizations access to your organization.\napiInstance.postOrgauthorizationTrustees(body)\n  .then((data) => {\n    console.log(`postOrgauthorizationTrustees success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOrgauthorizationTrustees\");\n    console.error(err);\n  });"
  },
  "postorgauthorizationtrusteesaudits": {
    "operationId": "postorgauthorizationtrusteesaudits",
    "functionName": "postOrgauthorizationTrusteesAudits",
    "signature": "postOrgauthorizationTrusteesAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet body = {}; // Object | Values to scope the request.\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"timestamp\", // String | Sort by\n  \"sortOrder\": \"descending\" // String | Sort order\n};\n\n// Get Org Trustee Audits\napiInstance.postOrgauthorizationTrusteesAudits(body, opts)\n  .then((data) => {\n    console.log(`postOrgauthorizationTrusteesAudits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOrgauthorizationTrusteesAudits\");\n    console.error(err);\n  });"
  },
  "postorgauthorizationtrusteesdefault": {
    "operationId": "postorgauthorizationtrusteesdefault",
    "functionName": "postOrgauthorizationTrusteesDefault",
    "signature": "postOrgauthorizationTrusteesDefault(assignDefaultRole, autoExpire)",
    "parameters": [
      {
        "name": "assignDefaultRole",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "autoExpire",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Trustee",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet opts = { \n  \"assignDefaultRole\": true, // Boolean | Assign Admin role to default pairing with Customer Care\n  \"autoExpire\": true // Boolean | Automatically expire pairing after 30 days\n};\n\n// Create a new organization authorization trust with Customer Care. This is required to grant your regional Customer Care organization access to your organization.\napiInstance.postOrgauthorizationTrusteesDefault(opts)\n  .then((data) => {\n    console.log(`postOrgauthorizationTrusteesDefault success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOrgauthorizationTrusteesDefault\");\n    console.error(err);\n  });"
  },
  "postorgauthorizationtrustoraudits": {
    "operationId": "postorgauthorizationtrustoraudits",
    "functionName": "postOrgauthorizationTrustorAudits",
    "signature": "postOrgauthorizationTrustorAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet body = {}; // Object | Values to scope the request.\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"timestamp\", // String | Sort by\n  \"sortOrder\": \"descending\" // String | Sort order\n};\n\n// Get Org Trustor Audits\napiInstance.postOrgauthorizationTrustorAudits(body, opts)\n  .then((data) => {\n    console.log(`postOrgauthorizationTrustorAudits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOrgauthorizationTrustorAudits\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrustee": {
    "operationId": "putorgauthorizationtrustee",
    "functionName": "putOrgauthorizationTrustee",
    "signature": "putOrgauthorizationTrustee(trusteeOrgId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet body = {}; // Object | Client\n\n// Update Org Trust\napiInstance.putOrgauthorizationTrustee(trusteeOrgId, body)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrustee success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrustee\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrusteegrouproledivisions": {
    "operationId": "putorgauthorizationtrusteegrouproledivisions",
    "functionName": "putOrgauthorizationTrusteeGroupRoledivisions",
    "signature": "putOrgauthorizationTrusteeGroupRoledivisions(trusteeOrgId, trusteeGroupId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeGroupId = \"trusteeGroupId_example\"; // String | Trustee Group Id\nlet body = {}; // Object | Set of roles with corresponding divisions to apply\n\n// Update Trustee Group Roles\napiInstance.putOrgauthorizationTrusteeGroupRoledivisions(trusteeOrgId, trusteeGroupId, body)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrusteeGroupRoledivisions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrusteeGroupRoledivisions\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrusteegrouproles": {
    "operationId": "putorgauthorizationtrusteegrouproles",
    "functionName": "putOrgauthorizationTrusteeGroupRoles",
    "signature": "putOrgauthorizationTrusteeGroupRoles(trusteeOrgId, trusteeGroupId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeGroupId = \"trusteeGroupId_example\"; // String | Trustee Group Id\nlet body = [\"body_example\"]; // [String] | List of roles\n\n// Update Trustee Group Roles\napiInstance.putOrgauthorizationTrusteeGroupRoles(trusteeOrgId, trusteeGroupId, body)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrusteeGroupRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrusteeGroupRoles\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrusteeuserroledivisions": {
    "operationId": "putorgauthorizationtrusteeuserroledivisions",
    "functionName": "putOrgauthorizationTrusteeUserRoledivisions",
    "signature": "putOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId, trusteeUserId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\nlet body = {}; // Object | Set of roles with corresponding divisions to apply\n\n// Update Trustee User Roles\napiInstance.putOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId, trusteeUserId, body)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrusteeUserRoledivisions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrusteeUserRoledivisions\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrusteeuserroles": {
    "operationId": "putorgauthorizationtrusteeuserroles",
    "functionName": "putOrgauthorizationTrusteeUserRoles",
    "signature": "putOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\nlet body = [\"body_example\"]; // [String] | List of roles\n\n// Update Trustee User Roles\napiInstance.putOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, body)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrusteeUserRoles success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrusteeUserRoles\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrustorcloneduser": {
    "operationId": "putorgauthorizationtrustorcloneduser",
    "functionName": "putOrgauthorizationTrustorCloneduser",
    "signature": "putOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUser",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Creates a clone of the trustee user in the trustor org.\napiInstance.putOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrustorCloneduser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrustorCloneduser\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrustorgroup": {
    "operationId": "putorgauthorizationtrustorgroup",
    "functionName": "putOrgauthorizationTrustorGroup",
    "signature": "putOrgauthorizationTrustorGroup(trustorOrgId, trustorGroupId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trustorGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trustorGroupId = \"trustorGroupId_example\"; // String | Trustor Group Id\n\n// Add a Trustee Group to the trust.\napiInstance.putOrgauthorizationTrustorGroup(trustorOrgId, trustorGroupId)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrustorGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrustorGroup\");\n    console.error(err);\n  });"
  },
  "putorgauthorizationtrustoruser": {
    "operationId": "putorgauthorizationtrustoruser",
    "functionName": "putOrgauthorizationTrustorUser",
    "signature": "putOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OrganizationAuthorizationApi();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n// Add a Trustee user to the trust.\napiInstance.putOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)\n  .then((data) => {\n    console.log(`putOrgauthorizationTrustorUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrgauthorizationTrustorUser\");\n    console.error(err);\n  });"
  },
  "deleteoutboundattemptlimit": {
    "operationId": "deleteoutboundattemptlimit",
    "functionName": "deleteOutboundAttemptlimit",
    "signature": "deleteOutboundAttemptlimit(attemptLimitsId)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet attemptLimitsId = \"attemptLimitsId_example\"; // String | Attempt limits ID\n\n// Delete attempt limits\napiInstance.deleteOutboundAttemptlimit(attemptLimitsId)\n  .then(() => {\n    console.log(\"deleteOutboundAttemptlimit returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundAttemptlimit\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcallabletimeset": {
    "operationId": "deleteoutboundcallabletimeset",
    "functionName": "deleteOutboundCallabletimeset",
    "signature": "deleteOutboundCallabletimeset(callableTimeSetId)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet callableTimeSetId = \"callableTimeSetId_example\"; // String | Callable Time Set ID\n\n// Delete callable time set\napiInstance.deleteOutboundCallabletimeset(callableTimeSetId)\n  .then(() => {\n    console.log(\"deleteOutboundCallabletimeset returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundCallabletimeset\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcallanalysisresponseset": {
    "operationId": "deleteoutboundcallanalysisresponseset",
    "functionName": "deleteOutboundCallanalysisresponseset",
    "signature": "deleteOutboundCallanalysisresponseset(callAnalysisSetId)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet callAnalysisSetId = \"callAnalysisSetId_example\"; // String | Call Analysis Response Set ID\n\n// Delete a dialer call analysis response set.\napiInstance.deleteOutboundCallanalysisresponseset(callAnalysisSetId)\n  .then(() => {\n    console.log(\"deleteOutboundCallanalysisresponseset returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundCallanalysisresponseset\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcampaign": {
    "operationId": "deleteoutboundcampaign",
    "functionName": "deleteOutboundCampaign",
    "signature": "deleteOutboundCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Delete a campaign.\napiInstance.deleteOutboundCampaign(campaignId)\n  .then((data) => {\n    console.log(`deleteOutboundCampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundCampaign\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcampaignprogress": {
    "operationId": "deleteoutboundcampaignprogress",
    "functionName": "deleteOutboundCampaignProgress",
    "signature": "deleteOutboundCampaignProgress(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Reset campaign progress and recycle the campaign\napiInstance.deleteOutboundCampaignProgress(campaignId)\n  .then(() => {\n    console.log(\"deleteOutboundCampaignProgress returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundCampaignProgress\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcampaignrule": {
    "operationId": "deleteoutboundcampaignrule",
    "functionName": "deleteOutboundCampaignrule",
    "signature": "deleteOutboundCampaignrule(campaignRuleId)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignRuleId = \"campaignRuleId_example\"; // String | Campaign Rule ID\n\n// Delete Campaign Rule\napiInstance.deleteOutboundCampaignrule(campaignRuleId)\n  .then(() => {\n    console.log(\"deleteOutboundCampaignrule returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundCampaignrule\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcontactlist": {
    "operationId": "deleteoutboundcontactlist",
    "functionName": "deleteOutboundContactlist",
    "signature": "deleteOutboundContactlist(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n// Delete a contact list.\napiInstance.deleteOutboundContactlist(contactListId)\n  .then(() => {\n    console.log(\"deleteOutboundContactlist returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundContactlist\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcontactlistcontact": {
    "operationId": "deleteoutboundcontactlistcontact",
    "functionName": "deleteOutboundContactlistContact",
    "signature": "deleteOutboundContactlistContact(contactListId, contactId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactId = \"contactId_example\"; // String | Contact ID\n\n// Delete a contact.\napiInstance.deleteOutboundContactlistContact(contactListId, contactId)\n  .then(() => {\n    console.log(\"deleteOutboundContactlistContact returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundContactlistContact\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcontactlistcontacts": {
    "operationId": "deleteoutboundcontactlistcontacts",
    "functionName": "deleteOutboundContactlistContacts",
    "signature": "deleteOutboundContactlistContacts(contactListId, contactIds)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactIds",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactIds = [\"contactIds_example\"]; // [String] | ContactIds to delete.\n\n// Delete contacts from a contact list.\napiInstance.deleteOutboundContactlistContacts(contactListId, contactIds)\n  .then(() => {\n    console.log(\"deleteOutboundContactlistContacts returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundContactlistContacts\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcontactlistfilter": {
    "operationId": "deleteoutboundcontactlistfilter",
    "functionName": "deleteOutboundContactlistfilter",
    "signature": "deleteOutboundContactlistfilter(contactListFilterId)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListFilterId = \"contactListFilterId_example\"; // String | Contact List Filter ID\n\n// Delete Contact List Filter\napiInstance.deleteOutboundContactlistfilter(contactListFilterId)\n  .then(() => {\n    console.log(\"deleteOutboundContactlistfilter returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundContactlistfilter\");\n    console.error(err);\n  });"
  },
  "deleteoutboundcontactlists": {
    "operationId": "deleteoutboundcontactlists",
    "functionName": "deleteOutboundContactlists",
    "signature": "deleteOutboundContactlists(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet id = [\"id_example\"]; // [String] | contact list id(s) to delete\n\n// Delete multiple contact lists.\napiInstance.deleteOutboundContactlists(id)\n  .then(() => {\n    console.log(\"deleteOutboundContactlists returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundContactlists\");\n    console.error(err);\n  });"
  },
  "deleteoutbounddigitalruleset": {
    "operationId": "deleteoutbounddigitalruleset",
    "functionName": "deleteOutboundDigitalruleset",
    "signature": "deleteOutboundDigitalruleset(digitalRuleSetId)",
    "parameters": [
      {
        "name": "digitalRuleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet digitalRuleSetId = \"digitalRuleSetId_example\"; // String | The Digital Rule Set ID\n\n// Delete an Outbound Digital Rule Set\napiInstance.deleteOutboundDigitalruleset(digitalRuleSetId)\n  .then(() => {\n    console.log(\"deleteOutboundDigitalruleset returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundDigitalruleset\");\n    console.error(err);\n  });"
  },
  "deleteoutbounddnclist": {
    "operationId": "deleteoutbounddnclist",
    "functionName": "deleteOutboundDnclist",
    "signature": "deleteOutboundDnclist(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\n\n// Delete dialer DNC list\napiInstance.deleteOutboundDnclist(dncListId)\n  .then(() => {\n    console.log(\"deleteOutboundDnclist returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundDnclist\");\n    console.error(err);\n  });"
  },
  "deleteoutbounddnclistcustomexclusioncolumns": {
    "operationId": "deleteoutbounddnclistcustomexclusioncolumns",
    "functionName": "deleteOutboundDnclistCustomexclusioncolumns",
    "signature": "deleteOutboundDnclistCustomexclusioncolumns(dncListId, expiredOnly)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expiredOnly",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet opts = { \n  \"expiredOnly\": false // Boolean | Set to true to only remove DNC entries that are expired\n};\n\n// Deletes all or expired custom exclusion column entries from a DNC list.\napiInstance.deleteOutboundDnclistCustomexclusioncolumns(dncListId, opts)\n  .then(() => {\n    console.log(\"deleteOutboundDnclistCustomexclusioncolumns returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundDnclistCustomexclusioncolumns\");\n    console.error(err);\n  });"
  },
  "deleteoutbounddnclistemailaddresses": {
    "operationId": "deleteoutbounddnclistemailaddresses",
    "functionName": "deleteOutboundDnclistEmailaddresses",
    "signature": "deleteOutboundDnclistEmailaddresses(dncListId, expiredOnly)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expiredOnly",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet opts = { \n  \"expiredOnly\": false // Boolean | Set to true to only remove DNC entries that are expired\n};\n\n// Deletes all or expired email addresses from a DNC list.\napiInstance.deleteOutboundDnclistEmailaddresses(dncListId, opts)\n  .then(() => {\n    console.log(\"deleteOutboundDnclistEmailaddresses returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundDnclistEmailaddresses\");\n    console.error(err);\n  });"
  },
  "deleteoutbounddnclistphonenumbers": {
    "operationId": "deleteoutbounddnclistphonenumbers",
    "functionName": "deleteOutboundDnclistPhonenumbers",
    "signature": "deleteOutboundDnclistPhonenumbers(dncListId, expiredOnly)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expiredOnly",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet opts = { \n  \"expiredOnly\": false // Boolean | Set to true to only remove DNC entries that are expired\n};\n\n// Deletes all or expired phone numbers from a DNC list.\napiInstance.deleteOutboundDnclistPhonenumbers(dncListId, opts)\n  .then(() => {\n    console.log(\"deleteOutboundDnclistPhonenumbers returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundDnclistPhonenumbers\");\n    console.error(err);\n  });"
  },
  "deleteoutboundmessagingcampaign": {
    "operationId": "deleteoutboundmessagingcampaign",
    "functionName": "deleteOutboundMessagingcampaign",
    "signature": "deleteOutboundMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n// Delete an Outbound Messaging Campaign\napiInstance.deleteOutboundMessagingcampaign(messagingCampaignId)\n  .then((data) => {\n    console.log(`deleteOutboundMessagingcampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundMessagingcampaign\");\n    console.error(err);\n  });"
  },
  "deleteoutboundmessagingcampaignprogress": {
    "operationId": "deleteoutboundmessagingcampaignprogress",
    "functionName": "deleteOutboundMessagingcampaignProgress",
    "signature": "deleteOutboundMessagingcampaignProgress(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n// Reset messaging campaign progress and recycle the messaging campaign\napiInstance.deleteOutboundMessagingcampaignProgress(messagingCampaignId)\n  .then(() => {\n    console.log(\"deleteOutboundMessagingcampaignProgress returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundMessagingcampaignProgress\");\n    console.error(err);\n  });"
  },
  "deleteoutboundruleset": {
    "operationId": "deleteoutboundruleset",
    "functionName": "deleteOutboundRuleset",
    "signature": "deleteOutboundRuleset(ruleSetId)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet ruleSetId = \"ruleSetId_example\"; // String | Rule Set ID\n\n// Delete a Rule Set.\napiInstance.deleteOutboundRuleset(ruleSetId)\n  .then(() => {\n    console.log(\"deleteOutboundRuleset returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundRuleset\");\n    console.error(err);\n  });"
  },
  "deleteoutboundschedulescampaign": {
    "operationId": "deleteoutboundschedulescampaign",
    "functionName": "deleteOutboundSchedulesCampaign",
    "signature": "deleteOutboundSchedulesCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Delete a dialer campaign schedule.\napiInstance.deleteOutboundSchedulesCampaign(campaignId)\n  .then(() => {\n    console.log(\"deleteOutboundSchedulesCampaign returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundSchedulesCampaign\");\n    console.error(err);\n  });"
  },
  "deleteoutboundschedulesemailcampaign": {
    "operationId": "deleteoutboundschedulesemailcampaign",
    "functionName": "deleteOutboundSchedulesEmailcampaign",
    "signature": "deleteOutboundSchedulesEmailcampaign(emailCampaignId)",
    "parameters": [
      {
        "name": "emailCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet emailCampaignId = \"emailCampaignId_example\"; // String | Email Campaign ID\n\n// Delete an email campaign schedule.\napiInstance.deleteOutboundSchedulesEmailcampaign(emailCampaignId)\n  .then(() => {\n    console.log(\"deleteOutboundSchedulesEmailcampaign returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundSchedulesEmailcampaign\");\n    console.error(err);\n  });"
  },
  "deleteoutboundschedulesmessagingcampaign": {
    "operationId": "deleteoutboundschedulesmessagingcampaign",
    "functionName": "deleteOutboundSchedulesMessagingcampaign",
    "signature": "deleteOutboundSchedulesMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | Messaging Campaign ID\n\n// Delete a messaging campaign schedule.\napiInstance.deleteOutboundSchedulesMessagingcampaign(messagingCampaignId)\n  .then(() => {\n    console.log(\"deleteOutboundSchedulesMessagingcampaign returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundSchedulesMessagingcampaign\");\n    console.error(err);\n  });"
  },
  "deleteoutboundschedulessequence": {
    "operationId": "deleteoutboundschedulessequence",
    "functionName": "deleteOutboundSchedulesSequence",
    "signature": "deleteOutboundSchedulesSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet sequenceId = \"sequenceId_example\"; // String | Sequence ID\n\n// Delete a dialer sequence schedule.\napiInstance.deleteOutboundSchedulesSequence(sequenceId)\n  .then(() => {\n    console.log(\"deleteOutboundSchedulesSequence returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundSchedulesSequence\");\n    console.error(err);\n  });"
  },
  "deleteoutboundsequence": {
    "operationId": "deleteoutboundsequence",
    "functionName": "deleteOutboundSequence",
    "signature": "deleteOutboundSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet sequenceId = \"sequenceId_example\"; // String | Campaign Sequence ID\n\n// Delete a dialer campaign sequence.\napiInstance.deleteOutboundSequence(sequenceId)\n  .then(() => {\n    console.log(\"deleteOutboundSequence returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOutboundSequence\");\n    console.error(err);\n  });"
  },
  "getoutboundattemptlimit": {
    "operationId": "getoutboundattemptlimit",
    "functionName": "getOutboundAttemptlimit",
    "signature": "getOutboundAttemptlimit(attemptLimitsId)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet attemptLimitsId = \"attemptLimitsId_example\"; // String | Attempt limits ID\n\n// Get attempt limits\napiInstance.getOutboundAttemptlimit(attemptLimitsId)\n  .then((data) => {\n    console.log(`getOutboundAttemptlimit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundAttemptlimit\");\n    console.error(err);\n  });"
  },
  "getoutboundattemptlimits": {
    "operationId": "getoutboundattemptlimits",
    "functionName": "getOutboundAttemptlimits",
    "signature": "getOutboundAttemptlimits(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AttemptLimitsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query attempt limits list\napiInstance.getOutboundAttemptlimits(opts)\n  .then((data) => {\n    console.log(`getOutboundAttemptlimits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundAttemptlimits\");\n    console.error(err);\n  });"
  },
  "getoutboundcallabletimeset": {
    "operationId": "getoutboundcallabletimeset",
    "functionName": "getOutboundCallabletimeset",
    "signature": "getOutboundCallabletimeset(callableTimeSetId)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet callableTimeSetId = \"callableTimeSetId_example\"; // String | Callable Time Set ID\n\n// Get callable time set\napiInstance.getOutboundCallabletimeset(callableTimeSetId)\n  .then((data) => {\n    console.log(`getOutboundCallabletimeset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCallabletimeset\");\n    console.error(err);\n  });"
  },
  "getoutboundcallabletimesets": {
    "operationId": "getoutboundcallabletimesets",
    "functionName": "getOutboundCallabletimesets",
    "signature": "getOutboundCallabletimesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CallableTimeSetEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query callable time set list\napiInstance.getOutboundCallabletimesets(opts)\n  .then((data) => {\n    console.log(`getOutboundCallabletimesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCallabletimesets\");\n    console.error(err);\n  });"
  },
  "getoutboundcallanalysisresponseset": {
    "operationId": "getoutboundcallanalysisresponseset",
    "functionName": "getOutboundCallanalysisresponseset",
    "signature": "getOutboundCallanalysisresponseset(callAnalysisSetId)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet callAnalysisSetId = \"callAnalysisSetId_example\"; // String | Call Analysis Response Set ID\n\n// Get a dialer call analysis response set.\napiInstance.getOutboundCallanalysisresponseset(callAnalysisSetId)\n  .then((data) => {\n    console.log(`getOutboundCallanalysisresponseset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCallanalysisresponseset\");\n    console.error(err);\n  });"
  },
  "getoutboundcallanalysisresponsesets": {
    "operationId": "getoutboundcallanalysisresponsesets",
    "functionName": "getOutboundCallanalysisresponsesets",
    "signature": "getOutboundCallanalysisresponsesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ResponseSetEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of dialer call analysis response sets.\napiInstance.getOutboundCallanalysisresponsesets(opts)\n  .then((data) => {\n    console.log(`getOutboundCallanalysisresponsesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCallanalysisresponsesets\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaign": {
    "operationId": "getoutboundcampaign",
    "functionName": "getOutboundCampaign",
    "signature": "getOutboundCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get dialer campaign.\napiInstance.getOutboundCampaign(campaignId)\n  .then((data) => {\n    console.log(`getOutboundCampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaign\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignagentownedmappingpreviewresults": {
    "operationId": "getoutboundcampaignagentownedmappingpreviewresults",
    "functionName": "getOutboundCampaignAgentownedmappingpreviewResults",
    "signature": "getOutboundCampaignAgentownedmappingpreviewResults(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentOwnedMappingPreviewListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get a preview of how agents will be mapped to this campaign's contact list.\napiInstance.getOutboundCampaignAgentownedmappingpreviewResults(campaignId)\n  .then((data) => {\n    console.log(`getOutboundCampaignAgentownedmappingpreviewResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignAgentownedmappingpreviewResults\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaigndiagnostics": {
    "operationId": "getoutboundcampaigndiagnostics",
    "functionName": "getOutboundCampaignDiagnostics",
    "signature": "getOutboundCampaignDiagnostics(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignDiagnostics",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get campaign diagnostics\napiInstance.getOutboundCampaignDiagnostics(campaignId)\n  .then((data) => {\n    console.log(`getOutboundCampaignDiagnostics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignDiagnostics\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaigninteractions": {
    "operationId": "getoutboundcampaigninteractions",
    "functionName": "getOutboundCampaignInteractions",
    "signature": "getOutboundCampaignInteractions(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignInteractions",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get dialer campaign interactions.\napiInstance.getOutboundCampaignInteractions(campaignId)\n  .then((data) => {\n    console.log(`getOutboundCampaignInteractions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignInteractions\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignprogress": {
    "operationId": "getoutboundcampaignprogress",
    "functionName": "getOutboundCampaignProgress",
    "signature": "getOutboundCampaignProgress(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignProgress",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get campaign progress\napiInstance.getOutboundCampaignProgress(campaignId)\n  .then((data) => {\n    console.log(`getOutboundCampaignProgress success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignProgress\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignstats": {
    "operationId": "getoutboundcampaignstats",
    "functionName": "getOutboundCampaignStats",
    "signature": "getOutboundCampaignStats(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignStats",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get statistics about a Dialer Campaign\napiInstance.getOutboundCampaignStats(campaignId)\n  .then((data) => {\n    console.log(`getOutboundCampaignStats success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignStats\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignrule": {
    "operationId": "getoutboundcampaignrule",
    "functionName": "getOutboundCampaignrule",
    "signature": "getOutboundCampaignrule(campaignRuleId)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignRuleId = \"campaignRuleId_example\"; // String | Campaign Rule ID\n\n// Get Campaign Rule\napiInstance.getOutboundCampaignrule(campaignRuleId)\n  .then((data) => {\n    console.log(`getOutboundCampaignrule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignrule\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignrules": {
    "operationId": "getoutboundcampaignrules",
    "functionName": "getOutboundCampaignrules",
    "signature": "getOutboundCampaignrules(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignRuleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query Campaign Rule list\napiInstance.getOutboundCampaignrules(opts)\n  .then((data) => {\n    console.log(`getOutboundCampaignrules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignrules\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaigns": {
    "operationId": "getoutboundcampaigns",
    "functionName": "getOutboundCampaigns",
    "signature": "getOutboundCampaigns(pageSize, pageNumber, filterType, name, id, contactListId, dncListIds, distributionQueueId, edgeGroupId, callAnalysisResponseSetId, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncListIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "distributionQueueId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "callAnalysisResponseSetId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"id\": [\"id_example\"], // [String] | id\n  \"contactListId\": \"contactListId_example\", // String | Contact List ID\n  \"dncListIds\": \"dncListIds_example\", // String | DNC list ID\n  \"distributionQueueId\": \"distributionQueueId_example\", // String | Distribution queue ID\n  \"edgeGroupId\": \"edgeGroupId_example\", // String | Edge group ID\n  \"callAnalysisResponseSetId\": \"callAnalysisResponseSetId_example\", // String | Call analysis response set ID\n  \"divisionId\": [\"divisionId_example\"], // [String] | Division ID(s)\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of dialer campaigns.\napiInstance.getOutboundCampaigns(opts)\n  .then((data) => {\n    console.log(`getOutboundCampaigns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaigns\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignsall": {
    "operationId": "getoutboundcampaignsall",
    "functionName": "getOutboundCampaignsAll",
    "signature": "getOutboundCampaignsAll(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CommonCampaignEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"id\": [\"id_example\"], // [String] | Campaign ID(s)\n  \"name\": \"name_example\", // String | Campaign name(s)\n  \"divisionId\": [\"divisionId_example\"], // [String] | Division ID(s)\n  \"mediaType\": [\"mediaType_example\"], // [String] | Media type(s)\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query across all types of campaigns by division\napiInstance.getOutboundCampaignsAll(opts)\n  .then((data) => {\n    console.log(`getOutboundCampaignsAll success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignsAll\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignsalldivisionviews": {
    "operationId": "getoutboundcampaignsalldivisionviews",
    "functionName": "getOutboundCampaignsAllDivisionviews",
    "signature": "getOutboundCampaignsAllDivisionviews(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CommonCampaignDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"id\": [\"id_example\"], // [String] | Campaign ID(s)\n  \"name\": \"name_example\", // String | Campaign name(s)\n  \"divisionId\": [\"divisionId_example\"], // [String] | Division ID(s)\n  \"mediaType\": [\"mediaType_example\"], // [String] | Media type(s)\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query across all types of campaigns\napiInstance.getOutboundCampaignsAllDivisionviews(opts)\n  .then((data) => {\n    console.log(`getOutboundCampaignsAllDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignsAllDivisionviews\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignsdivisionview": {
    "operationId": "getoutboundcampaignsdivisionview",
    "functionName": "getOutboundCampaignsDivisionview",
    "signature": "getOutboundCampaignsDivisionview(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignDivisionView",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get a basic Campaign information object\napiInstance.getOutboundCampaignsDivisionview(campaignId)\n  .then((data) => {\n    console.log(`getOutboundCampaignsDivisionview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignsDivisionview\");\n    console.error(err);\n  });"
  },
  "getoutboundcampaignsdivisionviews": {
    "operationId": "getoutboundcampaignsdivisionviews",
    "functionName": "getOutboundCampaignsDivisionviews",
    "signature": "getOutboundCampaignsDivisionviews(pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignDivisionViewListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"id\": [\"id_example\"], // [String] | id\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of basic Campaign information objects\napiInstance.getOutboundCampaignsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getOutboundCampaignsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundCampaignsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlist": {
    "operationId": "getoutboundcontactlist",
    "functionName": "getOutboundContactlist",
    "signature": "getOutboundContactlist(contactListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ContactList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Import status\n  \"includeSize\": false // Boolean | Include size\n};\n\n// Get a dialer contact list.\napiInstance.getOutboundContactlist(contactListId, opts)\n  .then((data) => {\n    console.log(`getOutboundContactlist success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlist\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlistcontact": {
    "operationId": "getoutboundcontactlistcontact",
    "functionName": "getOutboundContactlistContact",
    "signature": "getOutboundContactlistContact(contactListId, contactId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DialerContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactId = \"contactId_example\"; // String | Contact ID\n\n// Get a contact.\napiInstance.getOutboundContactlistContact(contactListId, contactId)\n  .then((data) => {\n    console.log(`getOutboundContactlistContact success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistContact\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlistexport": {
    "operationId": "getoutboundcontactlistexport",
    "functionName": "getOutboundContactlistExport",
    "signature": "getOutboundContactlistExport(contactListId, download)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "download",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExportUri",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\nlet opts = { \n  \"download\": \"false\" // String | Redirect to download uri\n};\n\n// Get the URI of a contact list export.\napiInstance.getOutboundContactlistExport(contactListId, opts)\n  .then((data) => {\n    console.log(`getOutboundContactlistExport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistExport\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlistimportstatus": {
    "operationId": "getoutboundcontactlistimportstatus",
    "functionName": "getOutboundContactlistImportstatus",
    "signature": "getOutboundContactlistImportstatus(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ImportStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n// Get dialer contactList import status.\napiInstance.getOutboundContactlistImportstatus(contactListId)\n  .then((data) => {\n    console.log(`getOutboundContactlistImportstatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistImportstatus\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlisttimezonemappingpreview": {
    "operationId": "getoutboundcontactlisttimezonemappingpreview",
    "functionName": "getOutboundContactlistTimezonemappingpreview",
    "signature": "getOutboundContactlistTimezonemappingpreview(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeZoneMappingPreview",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n// Preview the result of applying Automatic Time Zone Mapping to a contact list\napiInstance.getOutboundContactlistTimezonemappingpreview(contactListId)\n  .then((data) => {\n    console.log(`getOutboundContactlistTimezonemappingpreview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistTimezonemappingpreview\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlistfilter": {
    "operationId": "getoutboundcontactlistfilter",
    "functionName": "getOutboundContactlistfilter",
    "signature": "getOutboundContactlistfilter(contactListFilterId)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListFilterId = \"contactListFilterId_example\"; // String | Contact List Filter ID\n\n// Get Contact list filter\napiInstance.getOutboundContactlistfilter(contactListFilterId)\n  .then((data) => {\n    console.log(`getOutboundContactlistfilter success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistfilter\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlistfilters": {
    "operationId": "getoutboundcontactlistfilters",
    "functionName": "getOutboundContactlistfilters",
    "signature": "getOutboundContactlistfilters(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder, contactListId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListFilterEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\", // String | Sort order\n  \"contactListId\": \"contactListId_example\" // String | Contact List ID\n};\n\n// Query Contact list filters\napiInstance.getOutboundContactlistfilters(opts)\n  .then((data) => {\n    console.log(`getOutboundContactlistfilters success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistfilters\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlists": {
    "operationId": "getoutboundcontactlists",
    "functionName": "getOutboundContactlists",
    "signature": "getOutboundContactlists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, id, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Include import status\n  \"includeSize\": false, // Boolean | Include size\n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"id\": [\"id_example\"], // [String] | id\n  \"divisionId\": [\"divisionId_example\"], // [String] | Division ID(s)\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of contact lists.\napiInstance.getOutboundContactlists(opts)\n  .then((data) => {\n    console.log(`getOutboundContactlists success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlists\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlistsdivisionview": {
    "operationId": "getoutboundcontactlistsdivisionview",
    "functionName": "getOutboundContactlistsDivisionview",
    "signature": "getOutboundContactlistsDivisionview(contactListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ContactListDivisionView",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contactlist ID\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Include import status\n  \"includeSize\": false // Boolean | Include size\n};\n\n// Get a basic ContactList information object\napiInstance.getOutboundContactlistsDivisionview(contactListId, opts)\n  .then((data) => {\n    console.log(`getOutboundContactlistsDivisionview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistsDivisionview\");\n    console.error(err);\n  });"
  },
  "getoutboundcontactlistsdivisionviews": {
    "operationId": "getoutboundcontactlistsdivisionviews",
    "functionName": "getOutboundContactlistsDivisionviews",
    "signature": "getOutboundContactlistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListDivisionViewListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Include import status\n  \"includeSize\": false, // Boolean | Include size\n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"id\": [\"id_example\"], // [String] | id\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of simplified contact list objects.\napiInstance.getOutboundContactlistsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getOutboundContactlistsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundContactlistsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getoutbounddigitalruleset": {
    "operationId": "getoutbounddigitalruleset",
    "functionName": "getOutboundDigitalruleset",
    "signature": "getOutboundDigitalruleset(digitalRuleSetId)",
    "parameters": [
      {
        "name": "digitalRuleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DigitalRuleSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet digitalRuleSetId = \"digitalRuleSetId_example\"; // String | The Digital Rule Set ID\n\n// Get an Outbound Digital Rule Set\napiInstance.getOutboundDigitalruleset(digitalRuleSetId)\n  .then((data) => {\n    console.log(`getOutboundDigitalruleset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDigitalruleset\");\n    console.error(err);\n  });"
  },
  "getoutbounddigitalrulesets": {
    "operationId": "getoutbounddigitalrulesets",
    "functionName": "getOutboundDigitalrulesets",
    "signature": "getOutboundDigitalrulesets(pageSize, pageNumber, sortBy, sortOrder, name, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DigitalRuleSetEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"name\", // String | The field to sort by\n  \"sortOrder\": \"ascending\", // String | The direction to sort\n  \"name\": \"name_example\", // String | Name\n  \"id\": [\"id_example\"] // [String] | A list of digital rule set ids to bulk fetch\n};\n\n// Query a list of Outbound Digital Rule Sets\napiInstance.getOutboundDigitalrulesets(opts)\n  .then((data) => {\n    console.log(`getOutboundDigitalrulesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDigitalrulesets\");\n    console.error(err);\n  });"
  },
  "getoutbounddnclist": {
    "operationId": "getoutbounddnclist",
    "functionName": "getOutboundDnclist",
    "signature": "getOutboundDnclist(dncListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DncList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Import status\n  \"includeSize\": false // Boolean | Include size\n};\n\n// Get dialer DNC list\napiInstance.getOutboundDnclist(dncListId, opts)\n  .then((data) => {\n    console.log(`getOutboundDnclist success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDnclist\");\n    console.error(err);\n  });"
  },
  "getoutbounddnclistexport": {
    "operationId": "getoutbounddnclistexport",
    "functionName": "getOutboundDnclistExport",
    "signature": "getOutboundDnclistExport(dncListId, download)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "download",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExportUri",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet opts = { \n  \"download\": \"false\" // String | Redirect to download uri\n};\n\n// Get the URI of a DNC list export.\napiInstance.getOutboundDnclistExport(dncListId, opts)\n  .then((data) => {\n    console.log(`getOutboundDnclistExport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDnclistExport\");\n    console.error(err);\n  });"
  },
  "getoutbounddnclistimportstatus": {
    "operationId": "getoutbounddnclistimportstatus",
    "functionName": "getOutboundDnclistImportstatus",
    "signature": "getOutboundDnclistImportstatus(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ImportStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\n\n// Get dialer dncList import status.\napiInstance.getOutboundDnclistImportstatus(dncListId)\n  .then((data) => {\n    console.log(`getOutboundDnclistImportstatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDnclistImportstatus\");\n    console.error(err);\n  });"
  },
  "getoutbounddnclists": {
    "operationId": "getoutbounddnclists",
    "functionName": "getOutboundDnclists",
    "signature": "getOutboundDnclists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, dncSourceType, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncSourceType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DncListEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Import status\n  \"includeSize\": false, // Boolean | Include size\n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"dncSourceType\": \"dncSourceType_example\", // String | DncSourceType\n  \"divisionId\": [\"divisionId_example\"], // [String] | Division ID(s)\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"sortOrder_example\" // String | Sort order\n};\n\n// Query dialer DNC lists\napiInstance.getOutboundDnclists(opts)\n  .then((data) => {\n    console.log(`getOutboundDnclists success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDnclists\");\n    console.error(err);\n  });"
  },
  "getoutbounddnclistsdivisionview": {
    "operationId": "getoutbounddnclistsdivisionview",
    "functionName": "getOutboundDnclistsDivisionview",
    "signature": "getOutboundDnclistsDivisionview(dncListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DncListDivisionView",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | Dnclist ID\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Include import status\n  \"includeSize\": false // Boolean | Include size\n};\n\n// Get a basic DncList information object\napiInstance.getOutboundDnclistsDivisionview(dncListId, opts)\n  .then((data) => {\n    console.log(`getOutboundDnclistsDivisionview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDnclistsDivisionview\");\n    console.error(err);\n  });"
  },
  "getoutbounddnclistsdivisionviews": {
    "operationId": "getoutbounddnclistsdivisionviews",
    "functionName": "getOutboundDnclistsDivisionviews",
    "signature": "getOutboundDnclistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, dncSourceType, id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncSourceType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DncListDivisionViewListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"includeImportStatus\": false, // Boolean | Include import status\n  \"includeSize\": false, // Boolean | Include size\n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"dncSourceType\": \"dncSourceType_example\", // String | DncSourceType\n  \"id\": [\"id_example\"], // [String] | id\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of simplified dnc list objects.\napiInstance.getOutboundDnclistsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getOutboundDnclistsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundDnclistsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getoutboundevent": {
    "operationId": "getoutboundevent",
    "functionName": "getOutboundEvent",
    "signature": "getOutboundEvent(eventId)",
    "parameters": [
      {
        "name": "eventId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EventLog",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet eventId = \"eventId_example\"; // String | Event Log ID\n\n// Get Dialer Event\napiInstance.getOutboundEvent(eventId)\n  .then((data) => {\n    console.log(`getOutboundEvent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundEvent\");\n    console.error(err);\n  });"
  },
  "getoutboundevents": {
    "operationId": "getoutboundevents",
    "functionName": "getOutboundEvents",
    "signature": "getOutboundEvents(pageSize, pageNumber, filterType, category, level, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "level",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DialerEventEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"category\": \"category_example\", // String | Category\n  \"level\": \"level_example\", // String | Level\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query Event Logs\napiInstance.getOutboundEvents(opts)\n  .then((data) => {\n    console.log(`getOutboundEvents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundEvents\");\n    console.error(err);\n  });"
  },
  "getoutboundmessagingcampaign": {
    "operationId": "getoutboundmessagingcampaign",
    "functionName": "getOutboundMessagingcampaign",
    "signature": "getOutboundMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n// Get an Outbound Messaging Campaign\napiInstance.getOutboundMessagingcampaign(messagingCampaignId)\n  .then((data) => {\n    console.log(`getOutboundMessagingcampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundMessagingcampaign\");\n    console.error(err);\n  });"
  },
  "getoutboundmessagingcampaigndiagnostics": {
    "operationId": "getoutboundmessagingcampaigndiagnostics",
    "functionName": "getOutboundMessagingcampaignDiagnostics",
    "signature": "getOutboundMessagingcampaignDiagnostics(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignDiagnostics",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n// Get messaging campaign diagnostics\napiInstance.getOutboundMessagingcampaignDiagnostics(messagingCampaignId)\n  .then((data) => {\n    console.log(`getOutboundMessagingcampaignDiagnostics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundMessagingcampaignDiagnostics\");\n    console.error(err);\n  });"
  },
  "getoutboundmessagingcampaignprogress": {
    "operationId": "getoutboundmessagingcampaignprogress",
    "functionName": "getOutboundMessagingcampaignProgress",
    "signature": "getOutboundMessagingcampaignProgress(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignProgress",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n// Get messaging campaign's progress\napiInstance.getOutboundMessagingcampaignProgress(messagingCampaignId)\n  .then((data) => {\n    console.log(`getOutboundMessagingcampaignProgress success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundMessagingcampaignProgress\");\n    console.error(err);\n  });"
  },
  "getoutboundmessagingcampaigns": {
    "operationId": "getoutboundmessagingcampaigns",
    "functionName": "getOutboundMessagingcampaigns",
    "signature": "getOutboundMessagingcampaigns(pageSize, pageNumber, sortBy, sortOrder, name, contactListId, divisionId, type, senderSmsPhoneNumber, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "senderSmsPhoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "MessagingCampaignEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"name\", // String | The field to sort by\n  \"sortOrder\": \"ascending\", // String | The direction to sort\n  \"name\": \"name_example\", // String | Name\n  \"contactListId\": \"contactListId_example\", // String | Contact List ID\n  \"divisionId\": [\"divisionId_example\"], // [String] | Division ID(s)\n  \"type\": \"type_example\", // String | Campaign Type\n  \"senderSmsPhoneNumber\": \"senderSmsPhoneNumber_example\", // String | Sender SMS Phone Number\n  \"id\": [\"id_example\"] // [String] | A list of messaging campaign ids to bulk fetch\n};\n\n// Query a list of Messaging Campaigns\napiInstance.getOutboundMessagingcampaigns(opts)\n  .then((data) => {\n    console.log(`getOutboundMessagingcampaigns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundMessagingcampaigns\");\n    console.error(err);\n  });"
  },
  "getoutboundmessagingcampaignsdivisionview": {
    "operationId": "getoutboundmessagingcampaignsdivisionview",
    "functionName": "getOutboundMessagingcampaignsDivisionview",
    "signature": "getOutboundMessagingcampaignsDivisionview(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignDivisionView",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n// Get a basic Messaging Campaign information object\napiInstance.getOutboundMessagingcampaignsDivisionview(messagingCampaignId)\n  .then((data) => {\n    console.log(`getOutboundMessagingcampaignsDivisionview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundMessagingcampaignsDivisionview\");\n    console.error(err);\n  });"
  },
  "getoutboundmessagingcampaignsdivisionviews": {
    "operationId": "getoutboundmessagingcampaignsdivisionviews",
    "functionName": "getOutboundMessagingcampaignsDivisionviews",
    "signature": "getOutboundMessagingcampaignsDivisionviews(pageSize, pageNumber, sortOrder, name, type, id, senderSmsPhoneNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "senderSmsPhoneNumber",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MessagingCampaignDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"a\", // String | The direction to sort\n  \"name\": \"name_example\", // String | Name\n  \"type\": \"type_example\", // String | Campaign Type\n  \"id\": [\"id_example\"], // [String] | id\n  \"senderSmsPhoneNumber\": \"senderSmsPhoneNumber_example\" // String | Sender SMS Phone Number\n};\n\n// Query a list of basic Messaging Campaign information objects\napiInstance.getOutboundMessagingcampaignsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getOutboundMessagingcampaignsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundMessagingcampaignsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getoutboundruleset": {
    "operationId": "getoutboundruleset",
    "functionName": "getOutboundRuleset",
    "signature": "getOutboundRuleset(ruleSetId)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet ruleSetId = \"ruleSetId_example\"; // String | Rule Set ID\n\n// Get a Rule Set by ID.\napiInstance.getOutboundRuleset(ruleSetId)\n  .then((data) => {\n    console.log(`getOutboundRuleset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundRuleset\");\n    console.error(err);\n  });"
  },
  "getoutboundrulesets": {
    "operationId": "getoutboundrulesets",
    "functionName": "getOutboundRulesets",
    "signature": "getOutboundRulesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RuleSetEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of Rule Sets.\napiInstance.getOutboundRulesets(opts)\n  .then((data) => {\n    console.log(`getOutboundRulesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundRulesets\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulescampaign": {
    "operationId": "getoutboundschedulescampaign",
    "functionName": "getOutboundSchedulesCampaign",
    "signature": "getOutboundSchedulesCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Get a dialer campaign schedule.\napiInstance.getOutboundSchedulesCampaign(campaignId)\n  .then((data) => {\n    console.log(`getOutboundSchedulesCampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesCampaign\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulescampaigns": {
    "operationId": "getoutboundschedulescampaigns",
    "functionName": "getOutboundSchedulesCampaigns",
    "signature": "getOutboundSchedulesCampaigns()",
    "return": "[CampaignSchedule]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\n// Query for a list of dialer campaign schedules.\napiInstance.getOutboundSchedulesCampaigns()\n  .then((data) => {\n    console.log(`getOutboundSchedulesCampaigns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesCampaigns\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulesemailcampaign": {
    "operationId": "getoutboundschedulesemailcampaign",
    "functionName": "getOutboundSchedulesEmailcampaign",
    "signature": "getOutboundSchedulesEmailcampaign(emailCampaignId)",
    "parameters": [
      {
        "name": "emailCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailCampaignSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet emailCampaignId = \"emailCampaignId_example\"; // String | Email Campaign ID\n\n// Get an email campaign schedule.\napiInstance.getOutboundSchedulesEmailcampaign(emailCampaignId)\n  .then((data) => {\n    console.log(`getOutboundSchedulesEmailcampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesEmailcampaign\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulesemailcampaigns": {
    "operationId": "getoutboundschedulesemailcampaigns",
    "functionName": "getOutboundSchedulesEmailcampaigns",
    "signature": "getOutboundSchedulesEmailcampaigns()",
    "return": "MessagingCampaignScheduleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\n// Query for a list of email campaign schedules.\napiInstance.getOutboundSchedulesEmailcampaigns()\n  .then((data) => {\n    console.log(`getOutboundSchedulesEmailcampaigns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesEmailcampaigns\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulesmessagingcampaign": {
    "operationId": "getoutboundschedulesmessagingcampaign",
    "functionName": "getOutboundSchedulesMessagingcampaign",
    "signature": "getOutboundSchedulesMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | Messaging Campaign ID\n\n// Get a messaging campaign schedule.\napiInstance.getOutboundSchedulesMessagingcampaign(messagingCampaignId)\n  .then((data) => {\n    console.log(`getOutboundSchedulesMessagingcampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesMessagingcampaign\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulesmessagingcampaigns": {
    "operationId": "getoutboundschedulesmessagingcampaigns",
    "functionName": "getOutboundSchedulesMessagingcampaigns",
    "signature": "getOutboundSchedulesMessagingcampaigns()",
    "return": "MessagingCampaignScheduleEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\n// Query for a list of messaging campaign schedules.\napiInstance.getOutboundSchedulesMessagingcampaigns()\n  .then((data) => {\n    console.log(`getOutboundSchedulesMessagingcampaigns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesMessagingcampaigns\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulessequence": {
    "operationId": "getoutboundschedulessequence",
    "functionName": "getOutboundSchedulesSequence",
    "signature": "getOutboundSchedulesSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SequenceSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet sequenceId = \"sequenceId_example\"; // String | Sequence ID\n\n// Get a dialer sequence schedule.\napiInstance.getOutboundSchedulesSequence(sequenceId)\n  .then((data) => {\n    console.log(`getOutboundSchedulesSequence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesSequence\");\n    console.error(err);\n  });"
  },
  "getoutboundschedulessequences": {
    "operationId": "getoutboundschedulessequences",
    "functionName": "getOutboundSchedulesSequences",
    "signature": "getOutboundSchedulesSequences()",
    "return": "[SequenceSchedule]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\n// Query for a list of dialer sequence schedules.\napiInstance.getOutboundSchedulesSequences()\n  .then((data) => {\n    console.log(`getOutboundSchedulesSequences success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSchedulesSequences\");\n    console.error(err);\n  });"
  },
  "getoutboundsequence": {
    "operationId": "getoutboundsequence",
    "functionName": "getOutboundSequence",
    "signature": "getOutboundSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet sequenceId = \"sequenceId_example\"; // String | Campaign Sequence ID\n\n// Get a dialer campaign sequence.\napiInstance.getOutboundSequence(sequenceId)\n  .then((data) => {\n    console.log(`getOutboundSequence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSequence\");\n    console.error(err);\n  });"
  },
  "getoutboundsequences": {
    "operationId": "getoutboundsequences",
    "functionName": "getOutboundSequences",
    "signature": "getOutboundSequences(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignSequenceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. The max that will be returned is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"allowEmptyResult\": false, // Boolean | Whether to return an empty page when there are no results for that page\n  \"filterType\": \"Prefix\", // String | Filter type\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"sortOrder\": \"a\" // String | Sort order\n};\n\n// Query a list of dialer campaign sequences.\napiInstance.getOutboundSequences(opts)\n  .then((data) => {\n    console.log(`getOutboundSequences success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSequences\");\n    console.error(err);\n  });"
  },
  "getoutboundsettings": {
    "operationId": "getoutboundsettings",
    "functionName": "getOutboundSettings",
    "signature": "getOutboundSettings()",
    "return": "OutboundSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\n// Get the outbound settings for this organization\napiInstance.getOutboundSettings()\n  .then((data) => {\n    console.log(`getOutboundSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundSettings\");\n    console.error(err);\n  });"
  },
  "getoutboundwrapupcodemappings": {
    "operationId": "getoutboundwrapupcodemappings",
    "functionName": "getOutboundWrapupcodemappings",
    "signature": "getOutboundWrapupcodemappings()",
    "return": "WrapUpCodeMapping",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\n// Get the Dialer wrap up code mapping.\napiInstance.getOutboundWrapupcodemappings()\n  .then((data) => {\n    console.log(`getOutboundWrapupcodemappings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOutboundWrapupcodemappings\");\n    console.error(err);\n  });"
  },
  "patchoutbounddnclistcustomexclusioncolumns": {
    "operationId": "patchoutbounddnclistcustomexclusioncolumns",
    "functionName": "patchOutboundDnclistCustomexclusioncolumns",
    "signature": "patchOutboundDnclistCustomexclusioncolumns(dncListId, body)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = {}; // Object | DNC Custom exclusion column entries\n\n// Add entries to or delete entries from a DNC list.\napiInstance.patchOutboundDnclistCustomexclusioncolumns(dncListId, body)\n  .then(() => {\n    console.log(\"patchOutboundDnclistCustomexclusioncolumns returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchOutboundDnclistCustomexclusioncolumns\");\n    console.error(err);\n  });"
  },
  "patchoutbounddnclistemailaddresses": {
    "operationId": "patchoutbounddnclistemailaddresses",
    "functionName": "patchOutboundDnclistEmailaddresses",
    "signature": "patchOutboundDnclistEmailaddresses(dncListId, body)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = {}; // Object | DNC Emails\n\n// Add emails to or Delete emails from a DNC list.\napiInstance.patchOutboundDnclistEmailaddresses(dncListId, body)\n  .then(() => {\n    console.log(\"patchOutboundDnclistEmailaddresses returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchOutboundDnclistEmailaddresses\");\n    console.error(err);\n  });"
  },
  "patchoutbounddnclistphonenumbers": {
    "operationId": "patchoutbounddnclistphonenumbers",
    "functionName": "patchOutboundDnclistPhonenumbers",
    "signature": "patchOutboundDnclistPhonenumbers(dncListId, body)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = {}; // Object | DNC Phone Numbers\n\n// Add numbers to or delete numbers from a DNC list.\napiInstance.patchOutboundDnclistPhonenumbers(dncListId, body)\n  .then(() => {\n    console.log(\"patchOutboundDnclistPhonenumbers returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchOutboundDnclistPhonenumbers\");\n    console.error(err);\n  });"
  },
  "patchoutboundsettings": {
    "operationId": "patchoutboundsettings",
    "functionName": "patchOutboundSettings",
    "signature": "patchOutboundSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | outboundSettings\n\n// Update the outbound settings for this organization\napiInstance.patchOutboundSettings(body)\n  .then(() => {\n    console.log(\"patchOutboundSettings returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchOutboundSettings\");\n    console.error(err);\n  });"
  },
  "postoutboundattemptlimits": {
    "operationId": "postoutboundattemptlimits",
    "functionName": "postOutboundAttemptlimits",
    "signature": "postOutboundAttemptlimits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | AttemptLimits\n\n// Create attempt limits\napiInstance.postOutboundAttemptlimits(body)\n  .then((data) => {\n    console.log(`postOutboundAttemptlimits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundAttemptlimits\");\n    console.error(err);\n  });"
  },
  "postoutboundaudits": {
    "operationId": "postoutboundaudits",
    "functionName": "postOutboundAudits",
    "signature": "postOutboundAudits(body, pageSize, pageNumber, sortBy, sortOrder, facetsOnly)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "facetsOnly",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AuditSearchResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | AuditSearch\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"entity.name\", // String | Sort by\n  \"sortOrder\": \"ascending\", // String | Sort order\n  \"facetsOnly\": false // Boolean | Facets only\n};\n\n// Retrieves audits for dialer.\napiInstance.postOutboundAudits(body, opts)\n  .then((data) => {\n    console.log(`postOutboundAudits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundAudits\");\n    console.error(err);\n  });"
  },
  "postoutboundcallabletimesets": {
    "operationId": "postoutboundcallabletimesets",
    "functionName": "postOutboundCallabletimesets",
    "signature": "postOutboundCallabletimesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | DialerCallableTimeSet\n\n// Create callable time set\napiInstance.postOutboundCallabletimesets(body)\n  .then((data) => {\n    console.log(`postOutboundCallabletimesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundCallabletimesets\");\n    console.error(err);\n  });"
  },
  "postoutboundcallanalysisresponsesets": {
    "operationId": "postoutboundcallanalysisresponsesets",
    "functionName": "postOutboundCallanalysisresponsesets",
    "signature": "postOutboundCallanalysisresponsesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | ResponseSet\n\n// Create a dialer call analysis response set.\napiInstance.postOutboundCallanalysisresponsesets(body)\n  .then((data) => {\n    console.log(`postOutboundCallanalysisresponsesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundCallanalysisresponsesets\");\n    console.error(err);\n  });"
  },
  "postoutboundcampaignagentownedmappingpreview": {
    "operationId": "postoutboundcampaignagentownedmappingpreview",
    "functionName": "postOutboundCampaignAgentownedmappingpreview",
    "signature": "postOutboundCampaignAgentownedmappingpreview(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n// Initiate request for a preview of how agents will be mapped to this campaign's contact list.\napiInstance.postOutboundCampaignAgentownedmappingpreview(campaignId)\n  .then((data) => {\n    console.log(`postOutboundCampaignAgentownedmappingpreview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundCampaignAgentownedmappingpreview\");\n    console.error(err);\n  });"
  },
  "postoutboundcampaigncallbackschedule": {
    "operationId": "postoutboundcampaigncallbackschedule",
    "functionName": "postOutboundCampaignCallbackSchedule",
    "signature": "postOutboundCampaignCallbackSchedule(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactCallbackRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet body = {}; // Object | ContactCallbackRequest\n\n// Schedule a Callback for a Dialer Campaign (Deprecated)\napiInstance.postOutboundCampaignCallbackSchedule(campaignId, body)\n  .then((data) => {\n    console.log(`postOutboundCampaignCallbackSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundCampaignCallbackSchedule\");\n    console.error(err);\n  });"
  },
  "postoutboundcampaignrules": {
    "operationId": "postoutboundcampaignrules",
    "functionName": "postOutboundCampaignrules",
    "signature": "postOutboundCampaignrules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | CampaignRule\n\n// Create Campaign Rule\napiInstance.postOutboundCampaignrules(body)\n  .then((data) => {\n    console.log(`postOutboundCampaignrules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundCampaignrules\");\n    console.error(err);\n  });"
  },
  "postoutboundcampaigns": {
    "operationId": "postoutboundcampaigns",
    "functionName": "postOutboundCampaigns",
    "signature": "postOutboundCampaigns(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | Campaign\n\n// Create a campaign.\napiInstance.postOutboundCampaigns(body)\n  .then((data) => {\n    console.log(`postOutboundCampaigns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundCampaigns\");\n    console.error(err);\n  });"
  },
  "postoutboundcampaignsprogress": {
    "operationId": "postoutboundcampaignsprogress",
    "functionName": "postOutboundCampaignsProgress",
    "signature": "postOutboundCampaignsProgress(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[CampaignProgress]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = [\"body_example\"]; // [String] | Campaign IDs\n\n// Get progress for a list of campaigns\napiInstance.postOutboundCampaignsProgress(body)\n  .then((data) => {\n    console.log(`postOutboundCampaignsProgress success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundCampaignsProgress\");\n    console.error(err);\n  });"
  },
  "postoutboundcontactlistclear": {
    "operationId": "postoutboundcontactlistclear",
    "functionName": "postOutboundContactlistClear",
    "signature": "postOutboundContactlistClear(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\n\n// Deletes all contacts out of a list. All outstanding recalls or rule-scheduled callbacks for non-preview campaigns configured with the contactlist will be cancelled.\napiInstance.postOutboundContactlistClear(contactListId)\n  .then(() => {\n    console.log(\"postOutboundContactlistClear returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundContactlistClear\");\n    console.error(err);\n  });"
  },
  "postoutboundcontactlistcontacts": {
    "operationId": "postoutboundcontactlistcontacts",
    "functionName": "postOutboundContactlistContacts",
    "signature": "postOutboundContactlistContacts(contactListId, body, priority, clearSystemData, doNotQueue)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "priority",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "clearSystemData",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "doNotQueue",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "[DialerContact]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet body = [{}]; // Object | Contact\nlet opts = { \n  \"priority\": true, // Boolean | Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue.\n  \"clearSystemData\": true, // Boolean | Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won't.\n  \"doNotQueue\": true // Boolean | Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the 'priority' parameter.\n};\n\n// Add contacts to a contact list.\napiInstance.postOutboundContactlistContacts(contactListId, body, opts)\n  .then((data) => {\n    console.log(`postOutboundContactlistContacts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundContactlistContacts\");\n    console.error(err);\n  });"
  },
  "postoutboundcontactlistcontactsbulk": {
    "operationId": "postoutboundcontactlistcontactsbulk",
    "functionName": "postOutboundContactlistContactsBulk",
    "signature": "postOutboundContactlistContactsBulk(contactListId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[DialerContact]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet body = [\"body_example\"]; // [String] | ContactIds to get.\n\n// Get contacts from a contact list.\napiInstance.postOutboundContactlistContactsBulk(contactListId, body)\n  .then((data) => {\n    console.log(`postOutboundContactlistContactsBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundContactlistContactsBulk\");\n    console.error(err);\n  });"
  },
  "postoutboundcontactlistexport": {
    "operationId": "postoutboundcontactlistexport",
    "functionName": "postOutboundContactlistExport",
    "signature": "postOutboundContactlistExport(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEntityRef",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n// Initiate the export of a contact list.\napiInstance.postOutboundContactlistExport(contactListId)\n  .then((data) => {\n    console.log(`postOutboundContactlistExport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundContactlistExport\");\n    console.error(err);\n  });"
  },
  "postoutboundcontactlistfilters": {
    "operationId": "postoutboundcontactlistfilters",
    "functionName": "postOutboundContactlistfilters",
    "signature": "postOutboundContactlistfilters(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | ContactListFilter\n\n// Create Contact List Filter\napiInstance.postOutboundContactlistfilters(body)\n  .then((data) => {\n    console.log(`postOutboundContactlistfilters success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundContactlistfilters\");\n    console.error(err);\n  });"
  },
  "postoutboundcontactlistfilterspreview": {
    "operationId": "postoutboundcontactlistfilterspreview",
    "functionName": "postOutboundContactlistfiltersPreview",
    "signature": "postOutboundContactlistfiltersPreview(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FilterPreviewResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | ContactListFilter\n\n// Get a preview of the output of a contact list filter\napiInstance.postOutboundContactlistfiltersPreview(body)\n  .then((data) => {\n    console.log(`postOutboundContactlistfiltersPreview success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundContactlistfiltersPreview\");\n    console.error(err);\n  });"
  },
  "postoutboundcontactlists": {
    "operationId": "postoutboundcontactlists",
    "functionName": "postOutboundContactlists",
    "signature": "postOutboundContactlists(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | ContactList\n\n// Create a contact List.\napiInstance.postOutboundContactlists(body)\n  .then((data) => {\n    console.log(`postOutboundContactlists success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundContactlists\");\n    console.error(err);\n  });"
  },
  "postoutboundconversationdnc": {
    "operationId": "postoutboundconversationdnc",
    "functionName": "postOutboundConversationDnc",
    "signature": "postOutboundConversationDnc(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\n\n// Add phone numbers to a Dialer DNC list.\napiInstance.postOutboundConversationDnc(conversationId)\n  .then(() => {\n    console.log(\"postOutboundConversationDnc returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundConversationDnc\");\n    console.error(err);\n  });"
  },
  "postoutbounddigitalrulesets": {
    "operationId": "postoutbounddigitalrulesets",
    "functionName": "postOutboundDigitalrulesets",
    "signature": "postOutboundDigitalrulesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DigitalRuleSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | Digital Rule Set\n\n// Create an Outbound Digital Rule Set\napiInstance.postOutboundDigitalrulesets(body)\n  .then((data) => {\n    console.log(`postOutboundDigitalrulesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundDigitalrulesets\");\n    console.error(err);\n  });"
  },
  "postoutbounddnclistemailaddresses": {
    "operationId": "postoutbounddnclistemailaddresses",
    "functionName": "postOutboundDnclistEmailaddresses",
    "signature": "postOutboundDnclistEmailaddresses(dncListId, body)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = [\"body_example\"]; // [String] | DNC email addresses\n\n// Add email addresses to a DNC list.\napiInstance.postOutboundDnclistEmailaddresses(dncListId, body)\n  .then(() => {\n    console.log(\"postOutboundDnclistEmailaddresses returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundDnclistEmailaddresses\");\n    console.error(err);\n  });"
  },
  "postoutbounddnclistexport": {
    "operationId": "postoutbounddnclistexport",
    "functionName": "postOutboundDnclistExport",
    "signature": "postOutboundDnclistExport(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEntityRef",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\n\n// Initiate the export of a dnc list.\napiInstance.postOutboundDnclistExport(dncListId)\n  .then((data) => {\n    console.log(`postOutboundDnclistExport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundDnclistExport\");\n    console.error(err);\n  });"
  },
  "postoutbounddnclistphonenumbers": {
    "operationId": "postoutbounddnclistphonenumbers",
    "functionName": "postOutboundDnclistPhonenumbers",
    "signature": "postOutboundDnclistPhonenumbers(dncListId, body, expirationDateTime)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "expirationDateTime",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = [\"body_example\"]; // [String] | DNC Phone Numbers\nlet opts = { \n  \"expirationDateTime\": \"expirationDateTime_example\" // String | Expiration date for DNC phone numbers in yyyy-MM-ddTHH:mmZ format\n};\n\n// Add phone numbers to a DNC list.\napiInstance.postOutboundDnclistPhonenumbers(dncListId, body, opts)\n  .then(() => {\n    console.log(\"postOutboundDnclistPhonenumbers returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundDnclistPhonenumbers\");\n    console.error(err);\n  });"
  },
  "postoutbounddnclists": {
    "operationId": "postoutbounddnclists",
    "functionName": "postOutboundDnclists",
    "signature": "postOutboundDnclists(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DncList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | DncList\n\n// Create dialer DNC list\napiInstance.postOutboundDnclists(body)\n  .then((data) => {\n    console.log(`postOutboundDnclists success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundDnclists\");\n    console.error(err);\n  });"
  },
  "postoutboundmessagingcampaigns": {
    "operationId": "postoutboundmessagingcampaigns",
    "functionName": "postOutboundMessagingcampaigns",
    "signature": "postOutboundMessagingcampaigns(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | Messaging Campaign\n\n// Create a Messaging Campaign\napiInstance.postOutboundMessagingcampaigns(body)\n  .then((data) => {\n    console.log(`postOutboundMessagingcampaigns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundMessagingcampaigns\");\n    console.error(err);\n  });"
  },
  "postoutboundmessagingcampaignsprogress": {
    "operationId": "postoutboundmessagingcampaignsprogress",
    "functionName": "postOutboundMessagingcampaignsProgress",
    "signature": "postOutboundMessagingcampaignsProgress(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[CampaignProgress]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = [\"body_example\"]; // [String] | Messaging Campaign IDs\n\n// Get progress for a list of messaging campaigns\napiInstance.postOutboundMessagingcampaignsProgress(body)\n  .then((data) => {\n    console.log(`postOutboundMessagingcampaignsProgress success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundMessagingcampaignsProgress\");\n    console.error(err);\n  });"
  },
  "postoutboundrulesets": {
    "operationId": "postoutboundrulesets",
    "functionName": "postOutboundRulesets",
    "signature": "postOutboundRulesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | RuleSet\n\n// Create a Rule Set.\napiInstance.postOutboundRulesets(body)\n  .then((data) => {\n    console.log(`postOutboundRulesets success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundRulesets\");\n    console.error(err);\n  });"
  },
  "postoutboundsequences": {
    "operationId": "postoutboundsequences",
    "functionName": "postOutboundSequences",
    "signature": "postOutboundSequences(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | Organization\n\n// Create a new campaign sequence.\napiInstance.postOutboundSequences(body)\n  .then((data) => {\n    console.log(`postOutboundSequences success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postOutboundSequences\");\n    console.error(err);\n  });"
  },
  "putoutboundattemptlimit": {
    "operationId": "putoutboundattemptlimit",
    "functionName": "putOutboundAttemptlimit",
    "signature": "putOutboundAttemptlimit(attemptLimitsId, body)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet attemptLimitsId = \"attemptLimitsId_example\"; // String | Attempt limits ID\nlet body = {}; // Object | AttemptLimits\n\n// Update attempt limits\napiInstance.putOutboundAttemptlimit(attemptLimitsId, body)\n  .then((data) => {\n    console.log(`putOutboundAttemptlimit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundAttemptlimit\");\n    console.error(err);\n  });"
  },
  "putoutboundcallabletimeset": {
    "operationId": "putoutboundcallabletimeset",
    "functionName": "putOutboundCallabletimeset",
    "signature": "putOutboundCallabletimeset(callableTimeSetId, body)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet callableTimeSetId = \"callableTimeSetId_example\"; // String | Callable Time Set ID\nlet body = {}; // Object | DialerCallableTimeSet\n\n// Update callable time set\napiInstance.putOutboundCallabletimeset(callableTimeSetId, body)\n  .then((data) => {\n    console.log(`putOutboundCallabletimeset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundCallabletimeset\");\n    console.error(err);\n  });"
  },
  "putoutboundcallanalysisresponseset": {
    "operationId": "putoutboundcallanalysisresponseset",
    "functionName": "putOutboundCallanalysisresponseset",
    "signature": "putOutboundCallanalysisresponseset(callAnalysisSetId, body)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet callAnalysisSetId = \"callAnalysisSetId_example\"; // String | Call Analysis Response Set ID\nlet body = {}; // Object | ResponseSet\n\n// Update a dialer call analysis response set.\napiInstance.putOutboundCallanalysisresponseset(callAnalysisSetId, body)\n  .then((data) => {\n    console.log(`putOutboundCallanalysisresponseset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundCallanalysisresponseset\");\n    console.error(err);\n  });"
  },
  "putoutboundcampaign": {
    "operationId": "putoutboundcampaign",
    "functionName": "putOutboundCampaign",
    "signature": "putOutboundCampaign(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet body = {}; // Object | Campaign\n\n// Update a campaign.\napiInstance.putOutboundCampaign(campaignId, body)\n  .then((data) => {\n    console.log(`putOutboundCampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundCampaign\");\n    console.error(err);\n  });"
  },
  "putoutboundcampaignagent": {
    "operationId": "putoutboundcampaignagent",
    "functionName": "putOutboundCampaignAgent",
    "signature": "putOutboundCampaignAgent(campaignId, userId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet userId = \"userId_example\"; // String | Agent's user ID\nlet body = {}; // Object | agent\n\n// Send notification that an agent's state changed \napiInstance.putOutboundCampaignAgent(campaignId, userId, body)\n  .then((data) => {\n    console.log(`putOutboundCampaignAgent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundCampaignAgent\");\n    console.error(err);\n  });"
  },
  "putoutboundcampaignrule": {
    "operationId": "putoutboundcampaignrule",
    "functionName": "putOutboundCampaignrule",
    "signature": "putOutboundCampaignrule(campaignRuleId, body)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignRuleId = \"campaignRuleId_example\"; // String | Campaign Rule ID\nlet body = {}; // Object | CampaignRule\n\n// Update Campaign Rule\napiInstance.putOutboundCampaignrule(campaignRuleId, body)\n  .then((data) => {\n    console.log(`putOutboundCampaignrule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundCampaignrule\");\n    console.error(err);\n  });"
  },
  "putoutboundcontactlist": {
    "operationId": "putoutboundcontactlist",
    "functionName": "putOutboundContactlist",
    "signature": "putOutboundContactlist(contactListId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\nlet body = {}; // Object | ContactList\n\n// Update a contact list.\napiInstance.putOutboundContactlist(contactListId, body)\n  .then((data) => {\n    console.log(`putOutboundContactlist success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundContactlist\");\n    console.error(err);\n  });"
  },
  "putoutboundcontactlistcontact": {
    "operationId": "putoutboundcontactlistcontact",
    "functionName": "putOutboundContactlistContact",
    "signature": "putOutboundContactlistContact(contactListId, contactId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DialerContact",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactId = \"contactId_example\"; // String | Contact ID\nlet body = {}; // Object | Contact\n\n// Update a contact.\napiInstance.putOutboundContactlistContact(contactListId, contactId, body)\n  .then((data) => {\n    console.log(`putOutboundContactlistContact success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundContactlistContact\");\n    console.error(err);\n  });"
  },
  "putoutboundcontactlistfilter": {
    "operationId": "putoutboundcontactlistfilter",
    "functionName": "putOutboundContactlistfilter",
    "signature": "putOutboundContactlistfilter(contactListFilterId, body)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet contactListFilterId = \"contactListFilterId_example\"; // String | Contact List Filter ID\nlet body = {}; // Object | ContactListFilter\n\n// Update Contact List Filter\napiInstance.putOutboundContactlistfilter(contactListFilterId, body)\n  .then((data) => {\n    console.log(`putOutboundContactlistfilter success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundContactlistfilter\");\n    console.error(err);\n  });"
  },
  "putoutbounddigitalruleset": {
    "operationId": "putoutbounddigitalruleset",
    "functionName": "putOutboundDigitalruleset",
    "signature": "putOutboundDigitalruleset(digitalRuleSetId, body)",
    "parameters": [
      {
        "name": "digitalRuleSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DigitalRuleSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet digitalRuleSetId = \"digitalRuleSetId_example\"; // String | The Digital Rule Set ID\nlet body = {}; // Object | Digital Rule Set\n\n// Update an Outbound Digital Rule Set\napiInstance.putOutboundDigitalruleset(digitalRuleSetId, body)\n  .then((data) => {\n    console.log(`putOutboundDigitalruleset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundDigitalruleset\");\n    console.error(err);\n  });"
  },
  "putoutbounddnclist": {
    "operationId": "putoutbounddnclist",
    "functionName": "putOutboundDnclist",
    "signature": "putOutboundDnclist(dncListId, body)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DncList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = {}; // Object | DncList\n\n// Update dialer DNC list\napiInstance.putOutboundDnclist(dncListId, body)\n  .then((data) => {\n    console.log(`putOutboundDnclist success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundDnclist\");\n    console.error(err);\n  });"
  },
  "putoutboundmessagingcampaign": {
    "operationId": "putoutboundmessagingcampaign",
    "functionName": "putOutboundMessagingcampaign",
    "signature": "putOutboundMessagingcampaign(messagingCampaignId, body)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\nlet body = {}; // Object | MessagingCampaign\n\n// Update an Outbound Messaging Campaign\napiInstance.putOutboundMessagingcampaign(messagingCampaignId, body)\n  .then((data) => {\n    console.log(`putOutboundMessagingcampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundMessagingcampaign\");\n    console.error(err);\n  });"
  },
  "putoutboundruleset": {
    "operationId": "putoutboundruleset",
    "functionName": "putOutboundRuleset",
    "signature": "putOutboundRuleset(ruleSetId, body)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet ruleSetId = \"ruleSetId_example\"; // String | Rule Set ID\nlet body = {}; // Object | RuleSet\n\n// Update a Rule Set.\napiInstance.putOutboundRuleset(ruleSetId, body)\n  .then((data) => {\n    console.log(`putOutboundRuleset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundRuleset\");\n    console.error(err);\n  });"
  },
  "putoutboundschedulescampaign": {
    "operationId": "putoutboundschedulescampaign",
    "functionName": "putOutboundSchedulesCampaign",
    "signature": "putOutboundSchedulesCampaign(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet body = {}; // Object | CampaignSchedule\n\n// Update a new campaign schedule.\napiInstance.putOutboundSchedulesCampaign(campaignId, body)\n  .then((data) => {\n    console.log(`putOutboundSchedulesCampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundSchedulesCampaign\");\n    console.error(err);\n  });"
  },
  "putoutboundschedulesemailcampaign": {
    "operationId": "putoutboundschedulesemailcampaign",
    "functionName": "putOutboundSchedulesEmailcampaign",
    "signature": "putOutboundSchedulesEmailcampaign(emailCampaignId, body)",
    "parameters": [
      {
        "name": "emailCampaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailCampaignSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet emailCampaignId = \"emailCampaignId_example\"; // String | Email Campaign ID\nlet body = {}; // Object | EmailCampaignSchedule\n\n// Update an email campaign schedule.\napiInstance.putOutboundSchedulesEmailcampaign(emailCampaignId, body)\n  .then((data) => {\n    console.log(`putOutboundSchedulesEmailcampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundSchedulesEmailcampaign\");\n    console.error(err);\n  });"
  },
  "putoutboundschedulesmessagingcampaign": {
    "operationId": "putoutboundschedulesmessagingcampaign",
    "functionName": "putOutboundSchedulesMessagingcampaign",
    "signature": "putOutboundSchedulesMessagingcampaign(messagingCampaignId, body)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | Messaging Campaign ID\nlet body = {}; // Object | MessagingCampaignSchedule\n\n// Update a new messaging campaign schedule.\napiInstance.putOutboundSchedulesMessagingcampaign(messagingCampaignId, body)\n  .then((data) => {\n    console.log(`putOutboundSchedulesMessagingcampaign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundSchedulesMessagingcampaign\");\n    console.error(err);\n  });"
  },
  "putoutboundschedulessequence": {
    "operationId": "putoutboundschedulessequence",
    "functionName": "putOutboundSchedulesSequence",
    "signature": "putOutboundSchedulesSequence(sequenceId, body)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SequenceSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet sequenceId = \"sequenceId_example\"; // String | Sequence ID\nlet body = {}; // Object | SequenceSchedule\n\n// Update a new sequence schedule.\napiInstance.putOutboundSchedulesSequence(sequenceId, body)\n  .then((data) => {\n    console.log(`putOutboundSchedulesSequence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundSchedulesSequence\");\n    console.error(err);\n  });"
  },
  "putoutboundsequence": {
    "operationId": "putoutboundsequence",
    "functionName": "putOutboundSequence",
    "signature": "putOutboundSequence(sequenceId, body)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet sequenceId = \"sequenceId_example\"; // String | Campaign Sequence ID\nlet body = {}; // Object | Organization\n\n// Update a new campaign sequence.\napiInstance.putOutboundSequence(sequenceId, body)\n  .then((data) => {\n    console.log(`putOutboundSequence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundSequence\");\n    console.error(err);\n  });"
  },
  "putoutboundwrapupcodemappings": {
    "operationId": "putoutboundwrapupcodemappings",
    "functionName": "putOutboundWrapupcodemappings",
    "signature": "putOutboundWrapupcodemappings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WrapUpCodeMapping",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.OutboundApi();\n\nlet body = {}; // Object | wrapUpCodeMapping\n\n// Update the Dialer wrap up code mapping.\napiInstance.putOutboundWrapupcodemappings(body)\n  .then((data) => {\n    console.log(`putOutboundWrapupcodemappings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOutboundWrapupcodemappings\");\n    console.error(err);\n  });"
  },
  "deletepresencedefinition0": {
    "operationId": "deletepresencedefinition0",
    "functionName": "deletePresenceDefinition0",
    "signature": "deletePresenceDefinition0(definitionId)",
    "parameters": [
      {
        "name": "definitionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet definitionId = \"definitionId_example\"; // String | Presence Definition ID\n\n// Delete a Presence Definition\napiInstance.deletePresenceDefinition0(definitionId)\n  .then(() => {\n    console.log(\"deletePresenceDefinition0 returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deletePresenceDefinition0\");\n    console.error(err);\n  });"
  },
  "deletepresencesource": {
    "operationId": "deletepresencesource",
    "functionName": "deletePresenceSource",
    "signature": "deletePresenceSource(sourceId)",
    "parameters": [
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet sourceId = \"sourceId_example\"; // String | Presence Source ID\n\n// Delete a Presence Source\napiInstance.deletePresenceSource(sourceId)\n  .then(() => {\n    console.log(\"deletePresenceSource returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deletePresenceSource\");\n    console.error(err);\n  });"
  },
  "deletepresencedefinition": {
    "operationId": "deletepresencedefinition",
    "functionName": "deletePresencedefinition",
    "signature": "deletePresencedefinition(presenceId)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet presenceId = \"presenceId_example\"; // String | Organization Presence ID\n\n// Delete a Presence Definition\napiInstance.deletePresencedefinition(presenceId)\n  .then(() => {\n    console.log(\"deletePresencedefinition returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deletePresencedefinition\");\n    console.error(err);\n  });"
  },
  "getpresencedefinition0": {
    "operationId": "getpresencedefinition0",
    "functionName": "getPresenceDefinition0",
    "signature": "getPresenceDefinition0(definitionId)",
    "parameters": [
      {
        "name": "definitionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OrganizationPresenceDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet definitionId = \"definitionId_example\"; // String | Presence Definition ID\n\n// Get a Presence Definition\napiInstance.getPresenceDefinition0(definitionId)\n  .then((data) => {\n    console.log(`getPresenceDefinition0 success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresenceDefinition0\");\n    console.error(err);\n  });"
  },
  "getpresencedefinitions0": {
    "operationId": "getpresencedefinitions0",
    "functionName": "getPresenceDefinitions0",
    "signature": "getPresenceDefinitions0(deactivated, divisionId)",
    "parameters": [
      {
        "name": "deactivated",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "OrganizationPresenceDefinitionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet opts = { \n  \"deactivated\": \"false\", // String | Deactivated query can be TRUE or FALSE\n  \"divisionId\": [\"divisionId_example\"] // [String] | One or more division IDs. If nothing is provided, the definitions associated withthe list of divisions that the user has access to will be returned.\n};\n\n// Get a list of Presence Definitions\napiInstance.getPresenceDefinitions0(opts)\n  .then((data) => {\n    console.log(`getPresenceDefinitions0 success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresenceDefinitions0\");\n    console.error(err);\n  });"
  },
  "getpresencesettings": {
    "operationId": "getpresencesettings",
    "functionName": "getPresenceSettings",
    "signature": "getPresenceSettings()",
    "return": "PresenceSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\n// Get the presence settings\napiInstance.getPresenceSettings()\n  .then((data) => {\n    console.log(`getPresenceSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresenceSettings\");\n    console.error(err);\n  });"
  },
  "getpresencesource": {
    "operationId": "getpresencesource",
    "functionName": "getPresenceSource",
    "signature": "getPresenceSource(sourceId)",
    "parameters": [
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Source",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet sourceId = \"sourceId_example\"; // String | Presence Source ID\n\n// Get a Presence Source\napiInstance.getPresenceSource(sourceId)\n  .then((data) => {\n    console.log(`getPresenceSource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresenceSource\");\n    console.error(err);\n  });"
  },
  "getpresencesources": {
    "operationId": "getpresencesources",
    "functionName": "getPresenceSources",
    "signature": "getPresenceSources(deactivated)",
    "parameters": [
      {
        "name": "deactivated",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SourceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet opts = { \n  \"deactivated\": \"false\" // String | Deactivated query can be TRUE or FALSE\n};\n\n// Get a list of Presence Sources\napiInstance.getPresenceSources(opts)\n  .then((data) => {\n    console.log(`getPresenceSources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresenceSources\");\n    console.error(err);\n  });"
  },
  "getpresenceuserprimarysource": {
    "operationId": "getpresenceuserprimarysource",
    "functionName": "getPresenceUserPrimarysource",
    "signature": "getPresenceUserPrimarysource(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserPrimarySource",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet userId = \"userId_example\"; // String | user ID\n\n// Get a user's Primary Presence Source\napiInstance.getPresenceUserPrimarysource(userId)\n  .then((data) => {\n    console.log(`getPresenceUserPrimarysource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresenceUserPrimarysource\");\n    console.error(err);\n  });"
  },
  "getpresencedefinition": {
    "operationId": "getpresencedefinition",
    "functionName": "getPresencedefinition",
    "signature": "getPresencedefinition(presenceId, localeCode)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "localeCode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrganizationPresence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet presenceId = \"presenceId_example\"; // String | Organization Presence ID\nlet opts = { \n  \"localeCode\": \"localeCode_example\" // String | The locale code to fetch for the presence definition. Use ALL to fetch everything.\n};\n\n// Get a Presence Definition\napiInstance.getPresencedefinition(presenceId, opts)\n  .then((data) => {\n    console.log(`getPresencedefinition success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresencedefinition\");\n    console.error(err);\n  });"
  },
  "getpresencedefinitions": {
    "operationId": "getpresencedefinitions",
    "functionName": "getPresencedefinitions",
    "signature": "getPresencedefinitions(pageNumber, pageSize, deleted, localeCode)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      },
      {
        "name": "localeCode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrganizationPresenceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"deleted\": \"false\", // String | Deleted query can be TRUE, FALSE or ALL\n  \"localeCode\": \"localeCode_example\" // String | The locale code to fetch for each presence definition. Use ALL to fetch everything.\n};\n\n// Get an Organization's list of Presence Definitions\napiInstance.getPresencedefinitions(opts)\n  .then((data) => {\n    console.log(`getPresencedefinitions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getPresencedefinitions\");\n    console.error(err);\n  });"
  },
  "getsystempresences": {
    "operationId": "getsystempresences",
    "functionName": "getSystempresences",
    "signature": "getSystempresences()",
    "return": "[SystemPresence]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\n// Get the list of SystemPresences\napiInstance.getSystempresences()\n  .then((data) => {\n    console.log(`getSystempresences success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSystempresences\");\n    console.error(err);\n  });"
  },
  "getuserpresence": {
    "operationId": "getuserpresence",
    "functionName": "getUserPresence",
    "signature": "getUserPresence(userId, sourceId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet userId = \"userId_example\"; // String | user Id\nlet sourceId = \"sourceId_example\"; // String | Presence source ID\n\n// Get a user's Presence\napiInstance.getUserPresence(userId, sourceId)\n  .then((data) => {\n    console.log(`getUserPresence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserPresence\");\n    console.error(err);\n  });"
  },
  "getuserpresencespurecloud": {
    "operationId": "getuserpresencespurecloud",
    "functionName": "getUserPresencesPurecloud",
    "signature": "getUserPresencesPurecloud(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet userId = \"userId_example\"; // String | user Id\n\n// Get a user's Genesys Cloud presence.\napiInstance.getUserPresencesPurecloud(userId)\n  .then((data) => {\n    console.log(`getUserPresencesPurecloud success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserPresencesPurecloud\");\n    console.error(err);\n  });"
  },
  "getuserspresencebulk": {
    "operationId": "getuserspresencebulk",
    "functionName": "getUsersPresenceBulk",
    "signature": "getUsersPresenceBulk(sourceId, id)",
    "parameters": [
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[UcUserPresence]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet sourceId = \"sourceId_example\"; // String | The requested presence source ID.\nlet opts = { \n  \"id\": [\"id_example\"] // [String] | A comma separated list of user IDs to fetch their presence status in bulk. Limit 50.\n};\n\n// Get bulk user presences for a single presence source\napiInstance.getUsersPresenceBulk(sourceId, opts)\n  .then((data) => {\n    console.log(`getUsersPresenceBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsersPresenceBulk\");\n    console.error(err);\n  });"
  },
  "getuserspresencespurecloudbulk": {
    "operationId": "getuserspresencespurecloudbulk",
    "functionName": "getUsersPresencesPurecloudBulk",
    "signature": "getUsersPresencesPurecloudBulk(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[UcUserPresence]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet opts = { \n  \"id\": [\"id_example\"] // [String] | A comma separated list of user IDs to fetch their presence status in bulk. Limit 50.\n};\n\n// Get bulk user presences for a Genesys Cloud (PURECLOUD) presence source\napiInstance.getUsersPresencesPurecloudBulk(opts)\n  .then((data) => {\n    console.log(`getUsersPresencesPurecloudBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsersPresencesPurecloudBulk\");\n    console.error(err);\n  });"
  },
  "patchuserpresence": {
    "operationId": "patchuserpresence",
    "functionName": "patchUserPresence",
    "signature": "patchUserPresence(userId, sourceId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet userId = \"userId_example\"; // String | user Id\nlet sourceId = \"sourceId_example\"; // String | Presence source ID\nlet body = {}; // Object | User presence\n\n// Patch a user's Presence\napiInstance.patchUserPresence(userId, sourceId, body)\n  .then((data) => {\n    console.log(`patchUserPresence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserPresence\");\n    console.error(err);\n  });"
  },
  "patchuserpresencespurecloud": {
    "operationId": "patchuserpresencespurecloud",
    "functionName": "patchUserPresencesPurecloud",
    "signature": "patchUserPresencesPurecloud(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet userId = \"userId_example\"; // String | user Id\nlet body = {}; // Object | User presence\n\n// Patch a Genesys Cloud user's presence\napiInstance.patchUserPresencesPurecloud(userId, body)\n  .then((data) => {\n    console.log(`patchUserPresencesPurecloud success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserPresencesPurecloud\");\n    console.error(err);\n  });"
  },
  "postpresencedefinitions0": {
    "operationId": "postpresencedefinitions0",
    "functionName": "postPresenceDefinitions0",
    "signature": "postPresenceDefinitions0(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationPresenceDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet body = {}; // Object | The Presence Definition to create\n\n// Create a Presence Definition\napiInstance.postPresenceDefinitions0(body)\n  .then((data) => {\n    console.log(`postPresenceDefinitions0 success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postPresenceDefinitions0\");\n    console.error(err);\n  });"
  },
  "postpresencesources": {
    "operationId": "postpresencesources",
    "functionName": "postPresenceSources",
    "signature": "postPresenceSources(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Source",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet body = {}; // Object | The Presence Source to create\n\n// Create a Presence Source\napiInstance.postPresenceSources(body)\n  .then((data) => {\n    console.log(`postPresenceSources success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postPresenceSources\");\n    console.error(err);\n  });"
  },
  "postpresencedefinitions": {
    "operationId": "postpresencedefinitions",
    "functionName": "postPresencedefinitions",
    "signature": "postPresencedefinitions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationPresence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet body = {}; // Object | The Presence Definition to create\n\n// Create a Presence Definition\napiInstance.postPresencedefinitions(body)\n  .then((data) => {\n    console.log(`postPresencedefinitions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postPresencedefinitions\");\n    console.error(err);\n  });"
  },
  "putpresencedefinition0": {
    "operationId": "putpresencedefinition0",
    "functionName": "putPresenceDefinition0",
    "signature": "putPresenceDefinition0(definitionId, body)",
    "parameters": [
      {
        "name": "definitionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationPresenceDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet definitionId = \"definitionId_example\"; // String | Presence Definition ID\nlet body = {}; // Object | The updated Presence Definition\n\n// Update a Presence Definition\napiInstance.putPresenceDefinition0(definitionId, body)\n  .then((data) => {\n    console.log(`putPresenceDefinition0 success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putPresenceDefinition0\");\n    console.error(err);\n  });"
  },
  "putpresencesettings": {
    "operationId": "putpresencesettings",
    "functionName": "putPresenceSettings",
    "signature": "putPresenceSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PresenceSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet body = {}; // Object | Presence Settings\n\n// Update the presence settings\napiInstance.putPresenceSettings(body)\n  .then((data) => {\n    console.log(`putPresenceSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putPresenceSettings\");\n    console.error(err);\n  });"
  },
  "putpresencesource": {
    "operationId": "putpresencesource",
    "functionName": "putPresenceSource",
    "signature": "putPresenceSource(sourceId, body)",
    "parameters": [
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Source",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet sourceId = \"sourceId_example\"; // String | Presence Source ID\nlet body = {}; // Object | The updated Presence Source\n\n// Update a Presence Source\napiInstance.putPresenceSource(sourceId, body)\n  .then((data) => {\n    console.log(`putPresenceSource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putPresenceSource\");\n    console.error(err);\n  });"
  },
  "putpresenceuserprimarysource": {
    "operationId": "putpresenceuserprimarysource",
    "functionName": "putPresenceUserPrimarysource",
    "signature": "putPresenceUserPrimarysource(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserPrimarySource",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet userId = \"userId_example\"; // String | user ID\nlet body = {}; // Object | Primary Source\n\n// Update a user's Primary Presence Source\napiInstance.putPresenceUserPrimarysource(userId, body)\n  .then((data) => {\n    console.log(`putPresenceUserPrimarysource success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putPresenceUserPrimarysource\");\n    console.error(err);\n  });"
  },
  "putpresencedefinition": {
    "operationId": "putpresencedefinition",
    "functionName": "putPresencedefinition",
    "signature": "putPresencedefinition(presenceId, body)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationPresence",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet presenceId = \"presenceId_example\"; // String | Organization Presence ID\nlet body = {}; // Object | The OrganizationPresence to update\n\n// Update a Presence Definition\napiInstance.putPresencedefinition(presenceId, body)\n  .then((data) => {\n    console.log(`putPresencedefinition success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putPresencedefinition\");\n    console.error(err);\n  });"
  },
  "putuserspresencesbulk": {
    "operationId": "putuserspresencesbulk",
    "functionName": "putUsersPresencesBulk",
    "signature": "putUsersPresencesBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[UserPresence]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.PresenceApi();\n\nlet body = [{}]; // Object | List of User presences\n\n// Update bulk user Presences\napiInstance.putUsersPresencesBulk(body)\n  .then((data) => {\n    console.log(`putUsersPresencesBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUsersPresencesBulk\");\n    console.error(err);\n  });"
  },
  "deleteprocessautomationtrigger": {
    "operationId": "deleteprocessautomationtrigger",
    "functionName": "deleteProcessautomationTrigger",
    "signature": "deleteProcessautomationTrigger(triggerId)",
    "parameters": [
      {
        "name": "triggerId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet triggerId = \"triggerId_example\"; // String | triggerId\n\n// Delete a Trigger\napiInstance.deleteProcessautomationTrigger(triggerId)\n  .then(() => {\n    console.log(\"deleteProcessautomationTrigger returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteProcessautomationTrigger\");\n    console.error(err);\n  });"
  },
  "getprocessautomationtrigger": {
    "operationId": "getprocessautomationtrigger",
    "functionName": "getProcessautomationTrigger",
    "signature": "getProcessautomationTrigger(triggerId)",
    "parameters": [
      {
        "name": "triggerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trigger",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet triggerId = \"triggerId_example\"; // String | triggerId\n\n// Retrieve a single Trigger matching id\napiInstance.getProcessautomationTrigger(triggerId)\n  .then((data) => {\n    console.log(`getProcessautomationTrigger success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getProcessautomationTrigger\");\n    console.error(err);\n  });"
  },
  "getprocessautomationtriggers": {
    "operationId": "getprocessautomationtriggers",
    "functionName": "getProcessautomationTriggers",
    "signature": "getProcessautomationTriggers(before, after, pageSize, topicName, enabled, hasDelayBy)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "topicName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "enabled",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "hasDelayBy",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TriggerEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"topicName\": \"topicName_example\", // String | Topic name(s). Separated by commas\n  \"enabled\": true, // Boolean | Boolean indicating desired enabled state of triggers\n  \"hasDelayBy\": true // Boolean | Boolean to filter based on delayBySeconds being set in triggers. Default returns all, true returns only those with delayBySeconds set, false returns those without delayBySeconds set.\n};\n\n// Retrieves all triggers, optionally filtered by query parameters.\napiInstance.getProcessautomationTriggers(opts)\n  .then((data) => {\n    console.log(`getProcessautomationTriggers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getProcessautomationTriggers\");\n    console.error(err);\n  });"
  },
  "getprocessautomationtriggerstopics": {
    "operationId": "getprocessautomationtriggerstopics",
    "functionName": "getProcessautomationTriggersTopics",
    "signature": "getProcessautomationTriggersTopics(before, after, pageSize)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TopicCursorEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": \"pageSize_example\" // String | Number of entities to return. Maximum of 200.\n};\n\n// Get topics available for organization\napiInstance.getProcessautomationTriggersTopics(opts)\n  .then((data) => {\n    console.log(`getProcessautomationTriggersTopics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getProcessautomationTriggersTopics\");\n    console.error(err);\n  });"
  },
  "postprocessautomationtriggertest": {
    "operationId": "postprocessautomationtriggertest",
    "functionName": "postProcessautomationTriggerTest",
    "signature": "postProcessautomationTriggerTest(triggerId, body)",
    "parameters": [
      {
        "name": "triggerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TestModeResults",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet triggerId = \"triggerId_example\"; // String | triggerId\nlet opts = { \n  \"body\": \"body_example\" // String | eventBody\n};\n\n// Test the matching of a Trigger based on provided event body\napiInstance.postProcessautomationTriggerTest(triggerId, opts)\n  .then((data) => {\n    console.log(`postProcessautomationTriggerTest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postProcessautomationTriggerTest\");\n    console.error(err);\n  });"
  },
  "postprocessautomationtriggers": {
    "operationId": "postprocessautomationtriggers",
    "functionName": "postProcessautomationTriggers",
    "signature": "postProcessautomationTriggers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Trigger",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet body = {}; // Object | Input used to create a Trigger.\n\n// Create a Trigger\napiInstance.postProcessautomationTriggers(body)\n  .then((data) => {\n    console.log(`postProcessautomationTriggers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postProcessautomationTriggers\");\n    console.error(err);\n  });"
  },
  "postprocessautomationtriggerstopictest": {
    "operationId": "postprocessautomationtriggerstopictest",
    "functionName": "postProcessautomationTriggersTopicTest",
    "signature": "postProcessautomationTriggersTopicTest(topicName, body)",
    "parameters": [
      {
        "name": "topicName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TestModeEventResults",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet topicName = \"topicName_example\"; // String | topicName\nlet opts = { \n  \"body\": \"body_example\" // String | eventBody\n};\n\n// Test the matching of all organization Triggers on given topic using provided event body\napiInstance.postProcessautomationTriggersTopicTest(topicName, opts)\n  .then((data) => {\n    console.log(`postProcessautomationTriggersTopicTest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postProcessautomationTriggersTopicTest\");\n    console.error(err);\n  });"
  },
  "putprocessautomationtrigger": {
    "operationId": "putprocessautomationtrigger",
    "functionName": "putProcessautomationTrigger",
    "signature": "putProcessautomationTrigger(triggerId, body)",
    "parameters": [
      {
        "name": "triggerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Trigger",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ProcessAutomationApi();\n\nlet triggerId = \"triggerId_example\"; // String | triggerId\nlet body = {}; // Object | Input to update Trigger. (topicName cannot be updated, a new trigger must be created to use a new topicName)\n\n// Update a Trigger\napiInstance.putProcessautomationTrigger(triggerId, body)\n  .then((data) => {\n    console.log(`putProcessautomationTrigger success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putProcessautomationTrigger\");\n    console.error(err);\n  });"
  },
  "deletequalitycalibration": {
    "operationId": "deletequalitycalibration",
    "functionName": "deleteQualityCalibration",
    "signature": "deleteQualityCalibration(calibrationId, calibratorId)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "calibratorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Calibration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet calibrationId = \"calibrationId_example\"; // String | Calibration ID\nlet calibratorId = \"calibratorId_example\"; // String | calibratorId\n\n// Delete a calibration by id.\napiInstance.deleteQualityCalibration(calibrationId, calibratorId)\n  .then((data) => {\n    console.log(`deleteQualityCalibration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteQualityCalibration\");\n    console.error(err);\n  });"
  },
  "deletequalityconversationevaluation": {
    "operationId": "deletequalityconversationevaluation",
    "functionName": "deleteQualityConversationEvaluation",
    "signature": "deleteQualityConversationEvaluation(conversationId, evaluationId, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet evaluationId = \"evaluationId_example\"; // String | evaluationId\nlet opts = { \n  \"expand\": \"expand_example\" // String | evaluatorId, evaluationForm\n};\n\n// Delete an evaluation\napiInstance.deleteQualityConversationEvaluation(conversationId, evaluationId, opts)\n  .then((data) => {\n    console.log(`deleteQualityConversationEvaluation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteQualityConversationEvaluation\");\n    console.error(err);\n  });"
  },
  "deletequalityform": {
    "operationId": "deletequalityform",
    "functionName": "deleteQualityForm",
    "signature": "deleteQualityForm(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Delete an evaluation form.\napiInstance.deleteQualityForm(formId)\n  .then(() => {\n    console.log(\"deleteQualityForm returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteQualityForm\");\n    console.error(err);\n  });"
  },
  "deletequalityformsevaluation": {
    "operationId": "deletequalityformsevaluation",
    "functionName": "deleteQualityFormsEvaluation",
    "signature": "deleteQualityFormsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Delete an evaluation form.\napiInstance.deleteQualityFormsEvaluation(formId)\n  .then(() => {\n    console.log(\"deleteQualityFormsEvaluation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteQualityFormsEvaluation\");\n    console.error(err);\n  });"
  },
  "deletequalityformssurvey": {
    "operationId": "deletequalityformssurvey",
    "functionName": "deleteQualityFormsSurvey",
    "signature": "deleteQualityFormsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Delete a survey form.\napiInstance.deleteQualityFormsSurvey(formId)\n  .then(() => {\n    console.log(\"deleteQualityFormsSurvey returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteQualityFormsSurvey\");\n    console.error(err);\n  });"
  },
  "getqualityagentsactivity": {
    "operationId": "getqualityagentsactivity",
    "functionName": "getQualityAgentsActivity",
    "signature": "getQualityAgentsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, agentUserId, evaluatorUserId, name, group, formContextId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "agentUserId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "evaluatorUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "group",
        "type": "String",
        "required": "false"
      },
      {
        "name": "formContextId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AgentActivityEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"startTime\": new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Start time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  \"endTime\": new Date(\"2013-10-20T19:20:30+01:00\"), // Date | End time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  \"agentUserId\": [\"agentUserId_example\"], // [String] | user id of agent requested\n  \"evaluatorUserId\": \"evaluatorUserId_example\", // String | user id of the evaluator\n  \"name\": \"name_example\", // String | name\n  \"group\": \"group_example\", // String | group id\n  \"formContextId\": \"formContextId_example\" // String | shared id between form versions\n};\n\n// Gets a list of Agent Activities\napiInstance.getQualityAgentsActivity(opts)\n  .then((data) => {\n    console.log(`getQualityAgentsActivity success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityAgentsActivity\");\n    console.error(err);\n  });"
  },
  "getqualitycalibration": {
    "operationId": "getqualitycalibration",
    "functionName": "getQualityCalibration",
    "signature": "getQualityCalibration(calibrationId, calibratorId, conversationId)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "calibratorId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Calibration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet calibrationId = \"calibrationId_example\"; // String | Calibration ID\nlet opts = { \n  \"calibratorId\": \"calibratorId_example\", // String | calibratorId\n  \"conversationId\": \"conversationId_example\" // String | conversationId\n};\n\n// Get a calibration by id.  Requires either calibrator id or conversation id\napiInstance.getQualityCalibration(calibrationId, opts)\n  .then((data) => {\n    console.log(`getQualityCalibration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityCalibration\");\n    console.error(err);\n  });"
  },
  "getqualitycalibrations": {
    "operationId": "getqualitycalibrations",
    "functionName": "getQualityCalibrations",
    "signature": "getQualityCalibrations(calibratorId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, startTime, endTime)",
    "parameters": [
      {
        "name": "calibratorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "CalibrationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet calibratorId = \"calibratorId_example\"; // String | user id of calibrator\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"conversationId\": \"conversationId_example\", // String | conversation id\n  \"startTime\": new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  \"endTime\": new Date(\"2013-10-20T19:20:30+01:00\") // Date | end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n};\n\n// Get the list of calibrations\napiInstance.getQualityCalibrations(calibratorId, opts)\n  .then((data) => {\n    console.log(`getQualityCalibrations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityCalibrations\");\n    console.error(err);\n  });"
  },
  "getqualityconversationevaluation": {
    "operationId": "getqualityconversationevaluation",
    "functionName": "getQualityConversationEvaluation",
    "signature": "getQualityConversationEvaluation(conversationId, evaluationId, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet evaluationId = \"evaluationId_example\"; // String | evaluationId\nlet opts = { \n  \"expand\": \"expand_example\" // String | agent, assignee, evaluator, evaluationForm\n};\n\n// Get an evaluation\napiInstance.getQualityConversationEvaluation(conversationId, evaluationId, opts)\n  .then((data) => {\n    console.log(`getQualityConversationEvaluation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityConversationEvaluation\");\n    console.error(err);\n  });"
  },
  "getqualityconversationsurveys": {
    "operationId": "getqualityconversationsurveys",
    "functionName": "getQualityConversationSurveys",
    "signature": "getQualityConversationSurveys(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[Survey]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get the surveys for a conversation\napiInstance.getQualityConversationSurveys(conversationId)\n  .then((data) => {\n    console.log(`getQualityConversationSurveys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityConversationSurveys\");\n    console.error(err);\n  });"
  },
  "getqualityconversationsauditsquerytransactionid": {
    "operationId": "getqualityconversationsauditsquerytransactionid",
    "functionName": "getQualityConversationsAuditsQueryTransactionId",
    "signature": "getQualityConversationsAuditsQueryTransactionId(transactionId)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "QualityAuditQueryExecutionStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\n\n// Get status of audit query execution\napiInstance.getQualityConversationsAuditsQueryTransactionId(transactionId)\n  .then((data) => {\n    console.log(`getQualityConversationsAuditsQueryTransactionId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityConversationsAuditsQueryTransactionId\");\n    console.error(err);\n  });"
  },
  "getqualityconversationsauditsquerytransactionidresults": {
    "operationId": "getqualityconversationsauditsquerytransactionidresults",
    "functionName": "getQualityConversationsAuditsQueryTransactionIdResults",
    "signature": "getQualityConversationsAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QualityAuditQueryExecutionResultsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\nlet opts = { \n  \"cursor\": \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  \"pageSize\": 25, // Number | Page size\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get results of audit query\napiInstance.getQualityConversationsAuditsQueryTransactionIdResults(transactionId, opts)\n  .then((data) => {\n    console.log(`getQualityConversationsAuditsQueryTransactionIdResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityConversationsAuditsQueryTransactionIdResults\");\n    console.error(err);\n  });"
  },
  "getqualityevaluationsquery": {
    "operationId": "getqualityevaluationsquery",
    "functionName": "getQualityEvaluationsQuery",
    "signature": "getQualityEvaluationsQuery(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, agentUserId, evaluatorUserId, assigneeUserId, queueId, startTime, endTime, formContextId, evaluationState, isReleased, agentHasRead, expandAnswerTotalScores, maximum, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "agentUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "evaluatorUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "assigneeUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "String",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "String",
        "required": "false"
      },
      {
        "name": "formContextId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "evaluationState",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "isReleased",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "agentHasRead",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "expandAnswerTotalScores",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "maximum",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | NOTE: Does not work when querying evaluations\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | NOTE: Does not work when querying evaluations\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"conversationId\": \"conversationId_example\", // String | conversationId specified\n  \"agentUserId\": \"agentUserId_example\", // String | user id of the agent\n  \"evaluatorUserId\": \"evaluatorUserId_example\", // String | evaluator user id\n  \"assigneeUserId\": \"assigneeUserId_example\", // String | assignee user id\n  \"queueId\": \"queueId_example\", // String | queue id\n  \"startTime\": \"startTime_example\", // String | start time of the evaluation query\n  \"endTime\": \"endTime_example\", // String | end time of the evaluation query\n  \"formContextId\": \"formContextId_example\", // String | shared id between form versions\n  \"evaluationState\": [\"evaluationState_example\"], // [String] | \n  \"isReleased\": true, // Boolean | the evaluation has been released\n  \"agentHasRead\": true, // Boolean | agent has the evaluation\n  \"expandAnswerTotalScores\": true, // Boolean | get the total scores for evaluations\n  \"maximum\": 3.4, // Number | the maximum number of results to return\n  \"sortOrder\": \"sortOrder_example\" // String | NOTE: Does not work when conversationId is supplied.\n};\n\n// Queries Evaluations and returns a paged list\napiInstance.getQualityEvaluationsQuery(opts)\n  .then((data) => {\n    console.log(`getQualityEvaluationsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityEvaluationsQuery\");\n    console.error(err);\n  });"
  },
  "getqualityevaluatorsactivity": {
    "operationId": "getqualityevaluatorsactivity",
    "functionName": "getQualityEvaluatorsActivity",
    "signature": "getQualityEvaluatorsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, name, permission, group)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "permission",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "group",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluatorActivityEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"startTime\": new Date(\"2013-10-20T19:20:30+01:00\"), // Date | The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  \"endTime\": new Date(\"2013-10-20T19:20:30+01:00\"), // Date | The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  \"name\": \"name_example\", // String | Evaluator name\n  \"permission\": [\"permission_example\"], // [String] | permission strings\n  \"group\": \"group_example\" // String | group id\n};\n\n// Get an evaluator activity\napiInstance.getQualityEvaluatorsActivity(opts)\n  .then((data) => {\n    console.log(`getQualityEvaluatorsActivity success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityEvaluatorsActivity\");\n    console.error(err);\n  });"
  },
  "getqualityform": {
    "operationId": "getqualityform",
    "functionName": "getQualityForm",
    "signature": "getQualityForm(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Get an evaluation form\napiInstance.getQualityForm(formId)\n  .then((data) => {\n    console.log(`getQualityForm success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityForm\");\n    console.error(err);\n  });"
  },
  "getqualityformversions": {
    "operationId": "getqualityformversions",
    "functionName": "getQualityFormVersions",
    "signature": "getQualityFormVersions(formId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Gets all the revisions for a specific evaluation.\napiInstance.getQualityFormVersions(formId, opts)\n  .then((data) => {\n    console.log(`getQualityFormVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormVersions\");\n    console.error(err);\n  });"
  },
  "getqualityforms": {
    "operationId": "getqualityforms",
    "functionName": "getQualityForms",
    "signature": "getQualityForms(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"expand\": \"expand_example\", // String | If 'expand=publishHistory', then each unpublished evaluation form includes a listing of its published versions\n  \"name\": \"name_example\", // String | Name\n  \"sortOrder\": \"sortOrder_example\" // String | Order to sort results, either asc or desc\n};\n\n// Get the list of evaluation forms\napiInstance.getQualityForms(opts)\n  .then((data) => {\n    console.log(`getQualityForms success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityForms\");\n    console.error(err);\n  });"
  },
  "getqualityformsevaluation": {
    "operationId": "getqualityformsevaluation",
    "functionName": "getQualityFormsEvaluation",
    "signature": "getQualityFormsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Get an evaluation form\napiInstance.getQualityFormsEvaluation(formId)\n  .then((data) => {\n    console.log(`getQualityFormsEvaluation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsEvaluation\");\n    console.error(err);\n  });"
  },
  "getqualityformsevaluationversions": {
    "operationId": "getqualityformsevaluationversions",
    "functionName": "getQualityFormsEvaluationVersions",
    "signature": "getQualityFormsEvaluationVersions(formId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"asc\" // String | Sort order\n};\n\n// Gets all the revisions for a specific evaluation.\napiInstance.getQualityFormsEvaluationVersions(formId, opts)\n  .then((data) => {\n    console.log(`getQualityFormsEvaluationVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsEvaluationVersions\");\n    console.error(err);\n  });"
  },
  "getqualityformsevaluations": {
    "operationId": "getqualityformsevaluations",
    "functionName": "getQualityFormsEvaluations",
    "signature": "getQualityFormsEvaluations(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"expand\": \"expand_example\", // String | If 'expand=publishHistory', then each unpublished evaluation form includes a listing of its published versions\n  \"name\": \"name_example\", // String | Name\n  \"sortOrder\": \"sortOrder_example\" // String | Order to sort results, either asc or desc\n};\n\n// Get the list of evaluation forms\napiInstance.getQualityFormsEvaluations(opts)\n  .then((data) => {\n    console.log(`getQualityFormsEvaluations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsEvaluations\");\n    console.error(err);\n  });"
  },
  "getqualityformsevaluationsbulkcontexts": {
    "operationId": "getqualityformsevaluationsbulkcontexts",
    "functionName": "getQualityFormsEvaluationsBulkContexts",
    "signature": "getQualityFormsEvaluationsBulkContexts(contextId)",
    "parameters": [
      {
        "name": "contextId",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[EvaluationForm]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet contextId = [\"contextId_example\"]; // [String] | A comma-delimited list of valid evaluation form context ids\n\n// Retrieve a list of the latest published evaluation form versions by context ids\napiInstance.getQualityFormsEvaluationsBulkContexts(contextId)\n  .then((data) => {\n    console.log(`getQualityFormsEvaluationsBulkContexts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsEvaluationsBulkContexts\");\n    console.error(err);\n  });"
  },
  "getqualityformssurvey": {
    "operationId": "getqualityformssurvey",
    "functionName": "getQualityFormsSurvey",
    "signature": "getQualityFormsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Get a survey form\napiInstance.getQualityFormsSurvey(formId)\n  .then((data) => {\n    console.log(`getQualityFormsSurvey success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsSurvey\");\n    console.error(err);\n  });"
  },
  "getqualityformssurveyversions": {
    "operationId": "getqualityformssurveyversions",
    "functionName": "getQualityFormsSurveyVersions",
    "signature": "getQualityFormsSurveyVersions(formId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Gets all the revisions for a specific survey.\napiInstance.getQualityFormsSurveyVersions(formId, opts)\n  .then((data) => {\n    console.log(`getQualityFormsSurveyVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsSurveyVersions\");\n    console.error(err);\n  });"
  },
  "getqualityformssurveys": {
    "operationId": "getqualityformssurveys",
    "functionName": "getQualityFormsSurveys",
    "signature": "getQualityFormsSurveys(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"expand\": \"expand_example\", // String | If 'expand=publishHistory', then each unpublished evaluation form includes a listing of its published versions\n  \"name\": \"name_example\", // String | Name\n  \"sortOrder\": \"sortOrder_example\" // String | Order to sort results, either asc or desc\n};\n\n// Get the list of survey forms\napiInstance.getQualityFormsSurveys(opts)\n  .then((data) => {\n    console.log(`getQualityFormsSurveys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsSurveys\");\n    console.error(err);\n  });"
  },
  "getqualityformssurveysbulk": {
    "operationId": "getqualityformssurveysbulk",
    "functionName": "getQualityFormsSurveysBulk",
    "signature": "getQualityFormsSurveysBulk(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet id = [\"id_example\"]; // [String] | A comma-delimited list of valid survey form ids\n\n// Retrieve a list of survey forms by their ids\napiInstance.getQualityFormsSurveysBulk(id)\n  .then((data) => {\n    console.log(`getQualityFormsSurveysBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsSurveysBulk\");\n    console.error(err);\n  });"
  },
  "getqualityformssurveysbulkcontexts": {
    "operationId": "getqualityformssurveysbulkcontexts",
    "functionName": "getQualityFormsSurveysBulkContexts",
    "signature": "getQualityFormsSurveysBulkContexts(contextId, published)",
    "parameters": [
      {
        "name": "contextId",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "published",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "[SurveyForm]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet contextId = [\"contextId_example\"]; // [String] | A comma-delimited list of valid survey form context ids. The maximum number of ids allowed in this list is 100.\nlet opts = { \n  \"published\": true // Boolean | If true, the latest published version will be included. If false, only the unpublished version will be included.\n};\n\n// Retrieve a list of the latest form versions by context ids\napiInstance.getQualityFormsSurveysBulkContexts(contextId, opts)\n  .then((data) => {\n    console.log(`getQualityFormsSurveysBulkContexts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityFormsSurveysBulkContexts\");\n    console.error(err);\n  });"
  },
  "getqualitypublishedform": {
    "operationId": "getqualitypublishedform",
    "functionName": "getQualityPublishedform",
    "signature": "getQualityPublishedform(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Get the published evaluation forms.\napiInstance.getQualityPublishedform(formId)\n  .then((data) => {\n    console.log(`getQualityPublishedform success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityPublishedform\");\n    console.error(err);\n  });"
  },
  "getqualitypublishedforms": {
    "operationId": "getqualitypublishedforms",
    "functionName": "getQualityPublishedforms",
    "signature": "getQualityPublishedforms(pageSize, pageNumber, name, onlyLatestPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestPerContext",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"onlyLatestPerContext\": false // Boolean | onlyLatestPerContext\n};\n\n// Get the published evaluation forms.\napiInstance.getQualityPublishedforms(opts)\n  .then((data) => {\n    console.log(`getQualityPublishedforms success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityPublishedforms\");\n    console.error(err);\n  });"
  },
  "getqualitypublishedformsevaluation": {
    "operationId": "getqualitypublishedformsevaluation",
    "functionName": "getQualityPublishedformsEvaluation",
    "signature": "getQualityPublishedformsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Get the most recent published version of an evaluation form.\napiInstance.getQualityPublishedformsEvaluation(formId)\n  .then((data) => {\n    console.log(`getQualityPublishedformsEvaluation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityPublishedformsEvaluation\");\n    console.error(err);\n  });"
  },
  "getqualitypublishedformsevaluations": {
    "operationId": "getqualitypublishedformsevaluations",
    "functionName": "getQualityPublishedformsEvaluations",
    "signature": "getQualityPublishedformsEvaluations(pageSize, pageNumber, name, onlyLatestPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestPerContext",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"onlyLatestPerContext\": false // Boolean | onlyLatestPerContext\n};\n\n// Get the published evaluation forms.\napiInstance.getQualityPublishedformsEvaluations(opts)\n  .then((data) => {\n    console.log(`getQualityPublishedformsEvaluations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityPublishedformsEvaluations\");\n    console.error(err);\n  });"
  },
  "getqualitypublishedformssurvey": {
    "operationId": "getqualitypublishedformssurvey",
    "functionName": "getQualityPublishedformsSurvey",
    "signature": "getQualityPublishedformsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n// Get the most recent published version of a survey form.\napiInstance.getQualityPublishedformsSurvey(formId)\n  .then((data) => {\n    console.log(`getQualityPublishedformsSurvey success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityPublishedformsSurvey\");\n    console.error(err);\n  });"
  },
  "getqualitypublishedformssurveys": {
    "operationId": "getqualitypublishedformssurveys",
    "functionName": "getQualityPublishedformsSurveys",
    "signature": "getQualityPublishedformsSurveys(pageSize, pageNumber, name, onlyLatestEnabledPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestEnabledPerContext",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"onlyLatestEnabledPerContext\": false // Boolean | onlyLatestEnabledPerContext\n};\n\n// Get the published survey forms.\napiInstance.getQualityPublishedformsSurveys(opts)\n  .then((data) => {\n    console.log(`getQualityPublishedformsSurveys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualityPublishedformsSurveys\");\n    console.error(err);\n  });"
  },
  "getqualitysurvey": {
    "operationId": "getqualitysurvey",
    "functionName": "getQualitySurvey",
    "signature": "getQualitySurvey(surveyId)",
    "parameters": [
      {
        "name": "surveyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Survey",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet surveyId = \"surveyId_example\"; // String | surveyId\n\n// Get a survey for a conversation\napiInstance.getQualitySurvey(surveyId)\n  .then((data) => {\n    console.log(`getQualitySurvey success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualitySurvey\");\n    console.error(err);\n  });"
  },
  "getqualitysurveysscorable": {
    "operationId": "getqualitysurveysscorable",
    "functionName": "getQualitySurveysScorable",
    "signature": "getQualitySurveysScorable(customerSurveyUrl)",
    "parameters": [
      {
        "name": "customerSurveyUrl",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScorableSurvey",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet customerSurveyUrl = \"customerSurveyUrl_example\"; // String | customerSurveyUrl\n\n// Get a survey as an end-customer, for the purposes of scoring it.\napiInstance.getQualitySurveysScorable(customerSurveyUrl)\n  .then((data) => {\n    console.log(`getQualitySurveysScorable success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getQualitySurveysScorable\");\n    console.error(err);\n  });"
  },
  "patchqualityformssurvey": {
    "operationId": "patchqualityformssurvey",
    "functionName": "patchQualityFormsSurvey",
    "signature": "patchQualityFormsSurvey(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Survey form\n\n// Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.\napiInstance.patchQualityFormsSurvey(formId, body)\n  .then((data) => {\n    console.log(`patchQualityFormsSurvey success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchQualityFormsSurvey\");\n    console.error(err);\n  });"
  },
  "postqualitycalibrations": {
    "operationId": "postqualitycalibrations",
    "functionName": "postQualityCalibrations",
    "signature": "postQualityCalibrations(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Calibration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | calibration\nlet opts = { \n  \"expand\": \"expand_example\" // String | calibratorId\n};\n\n// Create a calibration\napiInstance.postQualityCalibrations(body, opts)\n  .then((data) => {\n    console.log(`postQualityCalibrations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityCalibrations\");\n    console.error(err);\n  });"
  },
  "postqualityconversationevaluations": {
    "operationId": "postqualityconversationevaluations",
    "functionName": "postQualityConversationEvaluations",
    "signature": "postQualityConversationEvaluations(conversationId, body, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | evaluation\nlet opts = { \n  \"expand\": \"expand_example\" // String | evaluatorId\n};\n\n// Create an evaluation\napiInstance.postQualityConversationEvaluations(conversationId, body, opts)\n  .then((data) => {\n    console.log(`postQualityConversationEvaluations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityConversationEvaluations\");\n    console.error(err);\n  });"
  },
  "postqualityconversationsauditsquery": {
    "operationId": "postqualityconversationsauditsquery",
    "functionName": "postQualityConversationsAuditsQuery",
    "signature": "postQualityConversationsAuditsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QualityAuditQueryExecutionStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | query\n\n// Create audit query execution\napiInstance.postQualityConversationsAuditsQuery(body)\n  .then((data) => {\n    console.log(`postQualityConversationsAuditsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityConversationsAuditsQuery\");\n    console.error(err);\n  });"
  },
  "postqualityevaluationsaggregatesqueryme": {
    "operationId": "postqualityevaluationsaggregatesqueryme",
    "functionName": "postQualityEvaluationsAggregatesQueryMe",
    "signature": "postQualityEvaluationsAggregatesQueryMe(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationAggregateQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | query\n\n// Query for evaluation aggregates for the current user\napiInstance.postQualityEvaluationsAggregatesQueryMe(body)\n  .then((data) => {\n    console.log(`postQualityEvaluationsAggregatesQueryMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityEvaluationsAggregatesQueryMe\");\n    console.error(err);\n  });"
  },
  "postqualityevaluationsscoring": {
    "operationId": "postqualityevaluationsscoring",
    "functionName": "postQualityEvaluationsScoring",
    "signature": "postQualityEvaluationsScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationScoringSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | evaluationAndScoringSet\n\n// Score evaluation\napiInstance.postQualityEvaluationsScoring(body)\n  .then((data) => {\n    console.log(`postQualityEvaluationsScoring success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityEvaluationsScoring\");\n    console.error(err);\n  });"
  },
  "postqualityforms": {
    "operationId": "postqualityforms",
    "functionName": "postQualityForms",
    "signature": "postQualityForms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | Evaluation form\n\n// Create an evaluation form.\napiInstance.postQualityForms(body)\n  .then((data) => {\n    console.log(`postQualityForms success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityForms\");\n    console.error(err);\n  });"
  },
  "postqualityformsevaluations": {
    "operationId": "postqualityformsevaluations",
    "functionName": "postQualityFormsEvaluations",
    "signature": "postQualityFormsEvaluations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | Evaluation form\n\n// Create an evaluation form.\napiInstance.postQualityFormsEvaluations(body)\n  .then((data) => {\n    console.log(`postQualityFormsEvaluations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityFormsEvaluations\");\n    console.error(err);\n  });"
  },
  "postqualityformssurveys": {
    "operationId": "postqualityformssurveys",
    "functionName": "postQualityFormsSurveys",
    "signature": "postQualityFormsSurveys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | Survey form\n\n// Create a survey form.\napiInstance.postQualityFormsSurveys(body)\n  .then((data) => {\n    console.log(`postQualityFormsSurveys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityFormsSurveys\");\n    console.error(err);\n  });"
  },
  "postqualitypublishedforms": {
    "operationId": "postqualitypublishedforms",
    "functionName": "postQualityPublishedforms",
    "signature": "postQualityPublishedforms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | Publish request containing id of form to publish\n\n// Publish an evaluation form.\napiInstance.postQualityPublishedforms(body)\n  .then((data) => {\n    console.log(`postQualityPublishedforms success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityPublishedforms\");\n    console.error(err);\n  });"
  },
  "postqualitypublishedformsevaluations": {
    "operationId": "postqualitypublishedformsevaluations",
    "functionName": "postQualityPublishedformsEvaluations",
    "signature": "postQualityPublishedformsEvaluations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | Publish request containing id of form to publish\n\n// Publish an evaluation form.\napiInstance.postQualityPublishedformsEvaluations(body)\n  .then((data) => {\n    console.log(`postQualityPublishedformsEvaluations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityPublishedformsEvaluations\");\n    console.error(err);\n  });"
  },
  "postqualitypublishedformssurveys": {
    "operationId": "postqualitypublishedformssurveys",
    "functionName": "postQualityPublishedformsSurveys",
    "signature": "postQualityPublishedformsSurveys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | Survey form\n\n// Publish a survey form.\napiInstance.postQualityPublishedformsSurveys(body)\n  .then((data) => {\n    console.log(`postQualityPublishedformsSurveys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualityPublishedformsSurveys\");\n    console.error(err);\n  });"
  },
  "postqualitysurveysscoring": {
    "operationId": "postqualitysurveysscoring",
    "functionName": "postQualitySurveysScoring",
    "signature": "postQualitySurveysScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyScoringSet",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet body = {}; // Object | surveyAndScoringSet\n\n// Score survey\napiInstance.postQualitySurveysScoring(body)\n  .then((data) => {\n    console.log(`postQualitySurveysScoring success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postQualitySurveysScoring\");\n    console.error(err);\n  });"
  },
  "putqualitycalibration": {
    "operationId": "putqualitycalibration",
    "functionName": "putQualityCalibration",
    "signature": "putQualityCalibration(calibrationId, body)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Calibration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet calibrationId = \"calibrationId_example\"; // String | Calibration ID\nlet body = {}; // Object | Calibration\n\n// Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex\napiInstance.putQualityCalibration(calibrationId, body)\n  .then((data) => {\n    console.log(`putQualityCalibration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putQualityCalibration\");\n    console.error(err);\n  });"
  },
  "putqualityconversationevaluation": {
    "operationId": "putqualityconversationevaluation",
    "functionName": "putQualityConversationEvaluation",
    "signature": "putQualityConversationEvaluation(conversationId, evaluationId, body, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet evaluationId = \"evaluationId_example\"; // String | evaluationId\nlet body = {}; // Object | evaluation\nlet opts = { \n  \"expand\": \"expand_example\" // String | evaluatorId, evaluationForm, assignee, evaluator\n};\n\n// Update an evaluation\napiInstance.putQualityConversationEvaluation(conversationId, evaluationId, body, opts)\n  .then((data) => {\n    console.log(`putQualityConversationEvaluation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putQualityConversationEvaluation\");\n    console.error(err);\n  });"
  },
  "putqualityform": {
    "operationId": "putqualityform",
    "functionName": "putQualityForm",
    "signature": "putQualityForm(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Evaluation form\n\n// Update an evaluation form.\napiInstance.putQualityForm(formId, body)\n  .then((data) => {\n    console.log(`putQualityForm success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putQualityForm\");\n    console.error(err);\n  });"
  },
  "putqualityformsevaluation": {
    "operationId": "putqualityformsevaluation",
    "functionName": "putQualityFormsEvaluation",
    "signature": "putQualityFormsEvaluation(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Evaluation form\n\n// Update an evaluation form.\napiInstance.putQualityFormsEvaluation(formId, body)\n  .then((data) => {\n    console.log(`putQualityFormsEvaluation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putQualityFormsEvaluation\");\n    console.error(err);\n  });"
  },
  "putqualityformssurvey": {
    "operationId": "putqualityformssurvey",
    "functionName": "putQualityFormsSurvey",
    "signature": "putQualityFormsSurvey(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Survey form\n\n// Update a survey form.\napiInstance.putQualityFormsSurvey(formId, body)\n  .then((data) => {\n    console.log(`putQualityFormsSurvey success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putQualityFormsSurvey\");\n    console.error(err);\n  });"
  },
  "putqualitysurveysscorable": {
    "operationId": "putqualitysurveysscorable",
    "functionName": "putQualitySurveysScorable",
    "signature": "putQualitySurveysScorable(customerSurveyUrl, body)",
    "parameters": [
      {
        "name": "customerSurveyUrl",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScorableSurvey",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.QualityApi();\n\nlet customerSurveyUrl = \"customerSurveyUrl_example\"; // String | customerSurveyUrl\nlet body = {}; // Object | survey\n\n// Update a survey as an end-customer, for the purposes of scoring it.\napiInstance.putQualitySurveysScorable(customerSurveyUrl, body)\n  .then((data) => {\n    console.log(`putQualitySurveysScorable success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putQualitySurveysScorable\");\n    console.error(err);\n  });"
  },
  "deleteconversationrecordingannotation": {
    "operationId": "deleteconversationrecordingannotation",
    "functionName": "deleteConversationRecordingAnnotation",
    "signature": "deleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet annotationId = \"annotationId_example\"; // String | Annotation ID\n\n// Delete annotation\napiInstance.deleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)\n  .then(() => {\n    console.log(\"deleteConversationRecordingAnnotation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteConversationRecordingAnnotation\");\n    console.error(err);\n  });"
  },
  "deleteorphanrecording": {
    "operationId": "deleteorphanrecording",
    "functionName": "deleteOrphanrecording",
    "signature": "deleteOrphanrecording(orphanId)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OrphanRecording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\n\n// Deletes a single orphan recording\napiInstance.deleteOrphanrecording(orphanId)\n  .then((data) => {\n    console.log(`deleteOrphanrecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteOrphanrecording\");\n    console.error(err);\n  });"
  },
  "deleterecordingcrossplatformmediaretentionpolicies": {
    "operationId": "deleterecordingcrossplatformmediaretentionpolicies",
    "functionName": "deleteRecordingCrossplatformMediaretentionpolicies",
    "signature": "deleteRecordingCrossplatformMediaretentionpolicies(ids)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet ids = \"ids_example\"; // String | \n\n// Delete media retention policies\napiInstance.deleteRecordingCrossplatformMediaretentionpolicies(ids)\n  .then(() => {\n    console.log(\"deleteRecordingCrossplatformMediaretentionpolicies returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRecordingCrossplatformMediaretentionpolicies\");\n    console.error(err);\n  });"
  },
  "deleterecordingcrossplatformmediaretentionpolicy": {
    "operationId": "deleterecordingcrossplatformmediaretentionpolicy",
    "functionName": "deleteRecordingCrossplatformMediaretentionpolicy",
    "signature": "deleteRecordingCrossplatformMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n// Delete a media retention policy\napiInstance.deleteRecordingCrossplatformMediaretentionpolicy(policyId)\n  .then(() => {\n    console.log(\"deleteRecordingCrossplatformMediaretentionpolicy returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRecordingCrossplatformMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "deleterecordingjob": {
    "operationId": "deleterecordingjob",
    "functionName": "deleteRecordingJob",
    "signature": "deleteRecordingJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Delete the recording bulk job\napiInstance.deleteRecordingJob(jobId)\n  .then(() => {\n    console.log(\"deleteRecordingJob returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRecordingJob\");\n    console.error(err);\n  });"
  },
  "deleterecordingmediaretentionpolicies": {
    "operationId": "deleterecordingmediaretentionpolicies",
    "functionName": "deleteRecordingMediaretentionpolicies",
    "signature": "deleteRecordingMediaretentionpolicies(ids)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet ids = \"ids_example\"; // String | \n\n// Delete media retention policies\napiInstance.deleteRecordingMediaretentionpolicies(ids)\n  .then(() => {\n    console.log(\"deleteRecordingMediaretentionpolicies returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRecordingMediaretentionpolicies\");\n    console.error(err);\n  });"
  },
  "deleterecordingmediaretentionpolicy": {
    "operationId": "deleterecordingmediaretentionpolicy",
    "functionName": "deleteRecordingMediaretentionpolicy",
    "signature": "deleteRecordingMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n// Delete a media retention policy\napiInstance.deleteRecordingMediaretentionpolicy(policyId)\n  .then(() => {\n    console.log(\"deleteRecordingMediaretentionpolicy returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRecordingMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "getconversationrecording": {
    "operationId": "getconversationrecording",
    "functionName": "getConversationRecording",
    "signature": "getConversationRecording(conversationId, recordingId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "emailFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "chatFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messageFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "download",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet opts = { \n  \"formatId\": \"WEBM\", // String | The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE\n  \"emailFormatId\": \"EML\", // String | The desired media format when downloading an email recording. Valid values:EML,NONE\n  \"chatFormatId\": \"ZIP\", // String | The desired media format when downloading a chat recording. Valid values:ZIP,NONE \n  \"messageFormatId\": \"ZIP\", // String | The desired media format when downloading a message recording. Valid values:ZIP,NONE\n  \"download\": false, // Boolean | requesting a download format of the recording. Valid values:true,false\n  \"fileName\": \"fileName_example\", // String | the name of the downloaded fileName\n  \"locale\": \"locale_example\", // String | The locale for the requested file when downloading, as an ISO 639-1 code\n  \"mediaFormats\": [\"mediaFormats_example\"] // [String] | All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3\n};\n\n// Gets a specific recording.\napiInstance.getConversationRecording(conversationId, recordingId, opts)\n  .then((data) => {\n    console.log(`getConversationRecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationRecording\");\n    console.error(err);\n  });"
  },
  "getconversationrecordingannotation": {
    "operationId": "getconversationrecordingannotation",
    "functionName": "getConversationRecordingAnnotation",
    "signature": "getConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet annotationId = \"annotationId_example\"; // String | Annotation ID\n\n// Get annotation\napiInstance.getConversationRecordingAnnotation(conversationId, recordingId, annotationId)\n  .then((data) => {\n    console.log(`getConversationRecordingAnnotation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationRecordingAnnotation\");\n    console.error(err);\n  });"
  },
  "getconversationrecordingannotations": {
    "operationId": "getconversationrecordingannotations",
    "functionName": "getConversationRecordingAnnotations",
    "signature": "getConversationRecordingAnnotations(conversationId, recordingId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[Annotation]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\n\n// Get annotations for recording\napiInstance.getConversationRecordingAnnotations(conversationId, recordingId)\n  .then((data) => {\n    console.log(`getConversationRecordingAnnotations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationRecordingAnnotations\");\n    console.error(err);\n  });"
  },
  "getconversationrecordingmetadata": {
    "operationId": "getconversationrecordingmetadata",
    "functionName": "getConversationRecordingmetadata",
    "signature": "getConversationRecordingmetadata(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[RecordingMetadata]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\n\n// Get recording metadata for a conversation. Does not return playable media. Annotations won't be included in the response if either recording:recording:view or recording:annotation:view permission is missing.\napiInstance.getConversationRecordingmetadata(conversationId)\n  .then((data) => {\n    console.log(`getConversationRecordingmetadata success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationRecordingmetadata\");\n    console.error(err);\n  });"
  },
  "getconversationrecordingmetadatarecordingid": {
    "operationId": "getconversationrecordingmetadatarecordingid",
    "functionName": "getConversationRecordingmetadataRecordingId",
    "signature": "getConversationRecordingmetadataRecordingId(conversationId, recordingId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingMetadata",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\n\n// Get metadata for a specific recording. Does not return playable media.\napiInstance.getConversationRecordingmetadataRecordingId(conversationId, recordingId)\n  .then((data) => {\n    console.log(`getConversationRecordingmetadataRecordingId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationRecordingmetadataRecordingId\");\n    console.error(err);\n  });"
  },
  "getconversationrecordings": {
    "operationId": "getconversationrecordings",
    "functionName": "getConversationRecordings",
    "signature": "getConversationRecordings(conversationId, maxWaitMs, formatId, mediaFormats)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "maxWaitMs",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[Recording]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet opts = { \n  \"maxWaitMs\": 5000, // Number | The maximum number of milliseconds to wait for the recording to be ready. Must be a positive value.\n  \"formatId\": \"WEBM\", // String | The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE.\n  \"mediaFormats\": [\"mediaFormats_example\"] // [String] | All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3.\n};\n\n// Get all of a Conversation's Recordings.\napiInstance.getConversationRecordings(conversationId, opts)\n  .then((data) => {\n    console.log(`getConversationRecordings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getConversationRecordings\");\n    console.error(err);\n  });"
  },
  "getorphanrecording": {
    "operationId": "getorphanrecording",
    "functionName": "getOrphanrecording",
    "signature": "getOrphanrecording(orphanId)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OrphanRecording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\n\n// Gets a single orphan recording\napiInstance.getOrphanrecording(orphanId)\n  .then((data) => {\n    console.log(`getOrphanrecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrphanrecording\");\n    console.error(err);\n  });"
  },
  "getorphanrecordingmedia": {
    "operationId": "getorphanrecordingmedia",
    "functionName": "getOrphanrecordingMedia",
    "signature": "getOrphanrecordingMedia(orphanId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "emailFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "chatFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messageFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "download",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\nlet opts = { \n  \"formatId\": \"WEBM\", // String | The desired media format.\n  \"emailFormatId\": \"EML\", // String | The desired media format when downloading an email recording.\n  \"chatFormatId\": \"ZIP\", // String | The desired media format when downloading a chat recording.\n  \"messageFormatId\": \"ZIP\", // String | The desired media format when downloading a message recording.\n  \"download\": false, // Boolean | requesting a download format of the recording\n  \"fileName\": \"fileName_example\", // String | the name of the downloaded fileName\n  \"locale\": \"locale_example\", // String | The locale for the requested file when downloading, as an ISO 639-1 code\n  \"mediaFormats\": [\"mediaFormats_example\"] // [String] | All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3\n};\n\n// Gets the media of a single orphan recording\napiInstance.getOrphanrecordingMedia(orphanId, opts)\n  .then((data) => {\n    console.log(`getOrphanrecordingMedia success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrphanrecordingMedia\");\n    console.error(err);\n  });"
  },
  "getorphanrecordings": {
    "operationId": "getorphanrecordings",
    "functionName": "getOrphanrecordings",
    "signature": "getOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, hasConversation, media)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "hasConversation",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "media",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrphanRecordingListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"hasConversation\": false, // Boolean | Filter resulting orphans by whether the conversation is known. False returns all orphans for the organization.\n  \"media\": \"media_example\" // String | Filter resulting orphans based on their media type\n};\n\n// Gets all orphan recordings\napiInstance.getOrphanrecordings(opts)\n  .then((data) => {\n    console.log(`getOrphanrecordings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getOrphanrecordings\");\n    console.error(err);\n  });"
  },
  "getrecordingbatchrequest": {
    "operationId": "getrecordingbatchrequest",
    "functionName": "getRecordingBatchrequest",
    "signature": "getRecordingBatchrequest(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BatchDownloadJobStatusResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get the status and results for a batch request job, only the user that submitted the job may retrieve results\napiInstance.getRecordingBatchrequest(jobId)\n  .then((data) => {\n    console.log(`getRecordingBatchrequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingBatchrequest\");\n    console.error(err);\n  });"
  },
  "getrecordingcrossplatformmediaretentionpolicies": {
    "operationId": "getrecordingcrossplatformmediaretentionpolicies",
    "functionName": "getRecordingCrossplatformMediaretentionpolicies",
    "signature": "getRecordingCrossplatformMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "enabled",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "summary",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "hasErrors",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "deleteDaysThreshold",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "PolicyEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"name\": \"name_example\", // String | the policy name - used for filtering results in searches.\n  \"enabled\": true, // Boolean | checks to see if policy is enabled - use enabled = true or enabled = false\n  \"summary\": false, // Boolean | provides a less verbose response of policy lists.\n  \"hasErrors\": true, // Boolean | provides a way to fetch all policies with errors or policies that do not have errors\n  \"deleteDaysThreshold\": 3.4 // Number | provides a way to fetch all policies with any actions having deleteDays exceeding the provided value\n};\n\n// Gets media retention policy list with query options to filter on name and enabled.\napiInstance.getRecordingCrossplatformMediaretentionpolicies(opts)\n  .then((data) => {\n    console.log(`getRecordingCrossplatformMediaretentionpolicies success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingCrossplatformMediaretentionpolicies\");\n    console.error(err);\n  });"
  },
  "getrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "getrecordingcrossplatformmediaretentionpolicy",
    "functionName": "getRecordingCrossplatformMediaretentionpolicy",
    "signature": "getRecordingCrossplatformMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n// Get a media retention policy\napiInstance.getRecordingCrossplatformMediaretentionpolicy(policyId)\n  .then((data) => {\n    console.log(`getRecordingCrossplatformMediaretentionpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingCrossplatformMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "getrecordingjob": {
    "operationId": "getrecordingjob",
    "functionName": "getRecordingJob",
    "signature": "getRecordingJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Get the status of the job associated with the job id.\napiInstance.getRecordingJob(jobId)\n  .then((data) => {\n    console.log(`getRecordingJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingJob\");\n    console.error(err);\n  });"
  },
  "getrecordingjobfailedrecordings": {
    "operationId": "getrecordingjobfailedrecordings",
    "functionName": "getRecordingJobFailedrecordings",
    "signature": "getRecordingJobFailedrecordings(jobId, pageSize, pageNumber, includeTotal, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "includeTotal",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FailedRecordingEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  \"pageSize\": 25, // Number | Page size. Maximum is 100.\n  \"pageNumber\": 1, // Number | Page number\n  \"includeTotal\": true, // Boolean | If false, cursor will be used to locate the page instead of pageNumber.\n  \"cursor\": \"cursor_example\" // String | Indicates where to resume query results (not required for first page)\n};\n\n// Get IDs of recordings that the bulk job failed for\napiInstance.getRecordingJobFailedrecordings(jobId, opts)\n  .then((data) => {\n    console.log(`getRecordingJobFailedrecordings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingJobFailedrecordings\");\n    console.error(err);\n  });"
  },
  "getrecordingjobs": {
    "operationId": "getrecordingjobs",
    "functionName": "getRecordingJobs",
    "signature": "getRecordingJobs(pageSize, pageNumber, sortBy, state, showOnlyMyJobs, jobType, includeTotal, cursor)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "showOnlyMyJobs",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "jobType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeTotal",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RecordingJobEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"userId\", // String | Sort by\n  \"state\": \"state_example\", // String | Filter by state\n  \"showOnlyMyJobs\": true, // Boolean | Show only my jobs\n  \"jobType\": \"jobType_example\", // String | Job Type (Can be left empty for both)\n  \"includeTotal\": true, // Boolean | If false, cursor will be used to locate the page instead of pageNumber.\n  \"cursor\": \"cursor_example\" // String | Indicates where to resume query results (not required for first page)\n};\n\n// Get the status of all jobs within the user's organization\napiInstance.getRecordingJobs(opts)\n  .then((data) => {\n    console.log(`getRecordingJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingJobs\");\n    console.error(err);\n  });"
  },
  "getrecordingkeyconfiguration": {
    "operationId": "getrecordingkeyconfiguration",
    "functionName": "getRecordingKeyconfiguration",
    "signature": "getRecordingKeyconfiguration(keyConfigurationId)",
    "parameters": [
      {
        "name": "keyConfigurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet keyConfigurationId = \"keyConfigurationId_example\"; // String | Key Configurations Id\n\n// Get the encryption key configurations\napiInstance.getRecordingKeyconfiguration(keyConfigurationId)\n  .then((data) => {\n    console.log(`getRecordingKeyconfiguration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingKeyconfiguration\");\n    console.error(err);\n  });"
  },
  "getrecordingkeyconfigurations": {
    "operationId": "getrecordingkeyconfigurations",
    "functionName": "getRecordingKeyconfigurations",
    "signature": "getRecordingKeyconfigurations()",
    "return": "RecordingEncryptionConfigurationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\n// Get a list of key configurations data\napiInstance.getRecordingKeyconfigurations()\n  .then((data) => {\n    console.log(`getRecordingKeyconfigurations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingKeyconfigurations\");\n    console.error(err);\n  });"
  },
  "getrecordingmediaretentionpolicies": {
    "operationId": "getrecordingmediaretentionpolicies",
    "functionName": "getRecordingMediaretentionpolicies",
    "signature": "getRecordingMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "enabled",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "summary",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "hasErrors",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "deleteDaysThreshold",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "PolicyEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | The total page size requested\n  \"pageNumber\": 1, // Number | The page number requested\n  \"sortBy\": \"sortBy_example\", // String | variable name requested to sort by\n  \"expand\": [\"expand_example\"], // [String] | variable name requested by expand list\n  \"nextPage\": \"nextPage_example\", // String | next page token\n  \"previousPage\": \"previousPage_example\", // String | Previous page token\n  \"name\": \"name_example\", // String | the policy name - used for filtering results in searches.\n  \"enabled\": true, // Boolean | checks to see if policy is enabled - use enabled = true or enabled = false\n  \"summary\": false, // Boolean | provides a less verbose response of policy lists.\n  \"hasErrors\": true, // Boolean | provides a way to fetch all policies with errors or policies that do not have errors\n  \"deleteDaysThreshold\": 3.4 // Number | provides a way to fetch all policies with any actions having deleteDays exceeding the provided value\n};\n\n// Gets media retention policy list with query options to filter on name and enabled.\napiInstance.getRecordingMediaretentionpolicies(opts)\n  .then((data) => {\n    console.log(`getRecordingMediaretentionpolicies success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingMediaretentionpolicies\");\n    console.error(err);\n  });"
  },
  "getrecordingmediaretentionpolicy": {
    "operationId": "getrecordingmediaretentionpolicy",
    "functionName": "getRecordingMediaretentionpolicy",
    "signature": "getRecordingMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n// Get a media retention policy\napiInstance.getRecordingMediaretentionpolicy(policyId)\n  .then((data) => {\n    console.log(`getRecordingMediaretentionpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "getrecordingrecordingkeys": {
    "operationId": "getrecordingrecordingkeys",
    "functionName": "getRecordingRecordingkeys",
    "signature": "getRecordingRecordingkeys(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "EncryptionKeyEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get encryption key list\napiInstance.getRecordingRecordingkeys(opts)\n  .then((data) => {\n    console.log(`getRecordingRecordingkeys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingRecordingkeys\");\n    console.error(err);\n  });"
  },
  "getrecordingrecordingkeysrotationschedule": {
    "operationId": "getrecordingrecordingkeysrotationschedule",
    "functionName": "getRecordingRecordingkeysRotationschedule",
    "signature": "getRecordingRecordingkeysRotationschedule()",
    "return": "KeyRotationSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\n// Get key rotation schedule\napiInstance.getRecordingRecordingkeysRotationschedule()\n  .then((data) => {\n    console.log(`getRecordingRecordingkeysRotationschedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingRecordingkeysRotationschedule\");\n    console.error(err);\n  });"
  },
  "getrecordingsettings": {
    "operationId": "getrecordingsettings",
    "functionName": "getRecordingSettings",
    "signature": "getRecordingSettings(createDefault)",
    "parameters": [
      {
        "name": "createDefault",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "RecordingSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"createDefault\": false // Boolean | If no settings are found, a new one is created with default values\n};\n\n// Get the Recording Settings for the Organization\napiInstance.getRecordingSettings(opts)\n  .then((data) => {\n    console.log(`getRecordingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingSettings\");\n    console.error(err);\n  });"
  },
  "getrecordinguploadsreport": {
    "operationId": "getrecordinguploadsreport",
    "functionName": "getRecordingUploadsReport",
    "signature": "getRecordingUploadsReport(reportId)",
    "parameters": [
      {
        "name": "reportId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingUploadReport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet reportId = \"reportId_example\"; // String | reportId\n\n// Get the status of a recording upload status report\napiInstance.getRecordingUploadsReport(reportId)\n  .then((data) => {\n    console.log(`getRecordingUploadsReport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingUploadsReport\");\n    console.error(err);\n  });"
  },
  "getrecordingsretentionquery": {
    "operationId": "getrecordingsretentionquery",
    "functionName": "getRecordingsRetentionQuery",
    "signature": "getRecordingsRetentionQuery(retentionThresholdDays, cursor, pageSize)",
    "parameters": [
      {
        "name": "retentionThresholdDays",
        "type": "Number",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "RecordingRetentionCursorEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet retentionThresholdDays = 3.4; // Number | Fetch retention data for recordings retained for more days than the provided value.\nlet opts = { \n  \"cursor\": \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  \"pageSize\": 25 // Number | Page size. Maximum is 500.\n};\n\n// Query for recording retention data\napiInstance.getRecordingsRetentionQuery(retentionThresholdDays, opts)\n  .then((data) => {\n    console.log(`getRecordingsRetentionQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingsRetentionQuery\");\n    console.error(err);\n  });"
  },
  "getrecordingsscreensessions": {
    "operationId": "getrecordingsscreensessions",
    "functionName": "getRecordingsScreensessions",
    "signature": "getRecordingsScreensessions(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ScreenRecordingSessionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Retrieves a paged listing of screen recording sessions\napiInstance.getRecordingsScreensessions(opts)\n  .then((data) => {\n    console.log(`getRecordingsScreensessions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRecordingsScreensessions\");\n    console.error(err);\n  });"
  },
  "patchrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "patchrecordingcrossplatformmediaretentionpolicy",
    "functionName": "patchRecordingCrossplatformMediaretentionpolicy",
    "signature": "patchRecordingCrossplatformMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n// Patch a media retention policy\napiInstance.patchRecordingCrossplatformMediaretentionpolicy(policyId, body)\n  .then((data) => {\n    console.log(`patchRecordingCrossplatformMediaretentionpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRecordingCrossplatformMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "patchrecordingmediaretentionpolicy": {
    "operationId": "patchrecordingmediaretentionpolicy",
    "functionName": "patchRecordingMediaretentionpolicy",
    "signature": "patchRecordingMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n// Patch a media retention policy\napiInstance.patchRecordingMediaretentionpolicy(policyId, body)\n  .then((data) => {\n    console.log(`patchRecordingMediaretentionpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRecordingMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "patchrecordingsscreensession": {
    "operationId": "patchrecordingsscreensession",
    "functionName": "patchRecordingsScreensession",
    "signature": "patchRecordingsScreensession(recordingSessionId, body)",
    "parameters": [
      {
        "name": "recordingSessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet recordingSessionId = \"recordingSessionId_example\"; // String | Screen recording session ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update a screen recording session\napiInstance.patchRecordingsScreensession(recordingSessionId, opts)\n  .then(() => {\n    console.log(\"patchRecordingsScreensession returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRecordingsScreensession\");\n    console.error(err);\n  });"
  },
  "postconversationrecordingannotations": {
    "operationId": "postconversationrecordingannotations",
    "functionName": "postConversationRecordingAnnotations",
    "signature": "postConversationRecordingAnnotations(conversationId, recordingId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet body = {}; // Object | annotation\n\n// Create annotation\napiInstance.postConversationRecordingAnnotations(conversationId, recordingId, body)\n  .then((data) => {\n    console.log(`postConversationRecordingAnnotations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postConversationRecordingAnnotations\");\n    console.error(err);\n  });"
  },
  "postrecordingbatchrequests": {
    "operationId": "postrecordingbatchrequests",
    "functionName": "postRecordingBatchrequests",
    "signature": "postRecordingBatchrequests(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BatchDownloadJobSubmissionResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Job submission criteria\n\n// Submit a batch download request for recordings. Recordings in response will be in their original format/codec - configured in the Trunk configuration.\napiInstance.postRecordingBatchrequests(body)\n  .then((data) => {\n    console.log(`postRecordingBatchrequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingBatchrequests\");\n    console.error(err);\n  });"
  },
  "postrecordingcrossplatformmediaretentionpolicies": {
    "operationId": "postrecordingcrossplatformmediaretentionpolicies",
    "functionName": "postRecordingCrossplatformMediaretentionpolicies",
    "signature": "postRecordingCrossplatformMediaretentionpolicies(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Policy\n\n// Create media retention policy\napiInstance.postRecordingCrossplatformMediaretentionpolicies(body)\n  .then((data) => {\n    console.log(`postRecordingCrossplatformMediaretentionpolicies success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingCrossplatformMediaretentionpolicies\");\n    console.error(err);\n  });"
  },
  "postrecordingjobs": {
    "operationId": "postrecordingjobs",
    "functionName": "postRecordingJobs",
    "signature": "postRecordingJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | query\n\n// Create a recording bulk job.\napiInstance.postRecordingJobs(body)\n  .then((data) => {\n    console.log(`postRecordingJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingJobs\");\n    console.error(err);\n  });"
  },
  "postrecordingkeyconfigurations": {
    "operationId": "postrecordingkeyconfigurations",
    "functionName": "postRecordingKeyconfigurations",
    "signature": "postRecordingKeyconfigurations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Encryption Configuration\n\n// Setup configurations for encryption key creation\napiInstance.postRecordingKeyconfigurations(body)\n  .then((data) => {\n    console.log(`postRecordingKeyconfigurations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingKeyconfigurations\");\n    console.error(err);\n  });"
  },
  "postrecordingkeyconfigurationsvalidate": {
    "operationId": "postrecordingkeyconfigurationsvalidate",
    "functionName": "postRecordingKeyconfigurationsValidate",
    "signature": "postRecordingKeyconfigurationsValidate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Encryption Configuration\n\n// Validate encryption key configurations without saving it\napiInstance.postRecordingKeyconfigurationsValidate(body)\n  .then((data) => {\n    console.log(`postRecordingKeyconfigurationsValidate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingKeyconfigurationsValidate\");\n    console.error(err);\n  });"
  },
  "postrecordinglocalkeys": {
    "operationId": "postrecordinglocalkeys",
    "functionName": "postRecordingLocalkeys",
    "signature": "postRecordingLocalkeys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EncryptionKey",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Local Encryption body\n\n// create a local key management recording key\napiInstance.postRecordingLocalkeys(body)\n  .then((data) => {\n    console.log(`postRecordingLocalkeys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingLocalkeys\");\n    console.error(err);\n  });"
  },
  "postrecordingmediaretentionpolicies": {
    "operationId": "postrecordingmediaretentionpolicies",
    "functionName": "postRecordingMediaretentionpolicies",
    "signature": "postRecordingMediaretentionpolicies(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Policy\n\n// Create media retention policy\napiInstance.postRecordingMediaretentionpolicies(body)\n  .then((data) => {\n    console.log(`postRecordingMediaretentionpolicies success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingMediaretentionpolicies\");\n    console.error(err);\n  });"
  },
  "postrecordingrecordingkeys": {
    "operationId": "postrecordingrecordingkeys",
    "functionName": "postRecordingRecordingkeys",
    "signature": "postRecordingRecordingkeys()",
    "return": "EncryptionKey",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\n// Create encryption key\napiInstance.postRecordingRecordingkeys()\n  .then((data) => {\n    console.log(`postRecordingRecordingkeys success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingRecordingkeys\");\n    console.error(err);\n  });"
  },
  "postrecordinguploadsreports": {
    "operationId": "postrecordinguploadsreports",
    "functionName": "postRecordingUploadsReports",
    "signature": "postRecordingUploadsReports(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingUploadReport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Report parameters\n\n// Creates a recording upload status report\napiInstance.postRecordingUploadsReports(body)\n  .then((data) => {\n    console.log(`postRecordingUploadsReports success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingUploadsReports\");\n    console.error(err);\n  });"
  },
  "postrecordingsdeletionprotection": {
    "operationId": "postrecordingsdeletionprotection",
    "functionName": "postRecordingsDeletionprotection",
    "signature": "postRecordingsDeletionprotection(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[AddressableEntityRef]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | conversationIds\n\n// Get a list of conversations with protected recordings\napiInstance.postRecordingsDeletionprotection(body)\n  .then((data) => {\n    console.log(`postRecordingsDeletionprotection success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingsDeletionprotection\");\n    console.error(err);\n  });"
  },
  "postrecordingsscreensessionsacknowledge": {
    "operationId": "postrecordingsscreensessionsacknowledge",
    "functionName": "postRecordingsScreensessionsAcknowledge",
    "signature": "postRecordingsScreensessionsAcknowledge(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | AcknowledgeScreenRecordingRequest\n\n// Acknowledge a screen recording.\napiInstance.postRecordingsScreensessionsAcknowledge(body)\n  .then(() => {\n    console.log(\"postRecordingsScreensessionsAcknowledge returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingsScreensessionsAcknowledge\");\n    console.error(err);\n  });"
  },
  "postrecordingsscreensessionsmetadata": {
    "operationId": "postrecordingsscreensessionsmetadata",
    "functionName": "postRecordingsScreensessionsMetadata",
    "signature": "postRecordingsScreensessionsMetadata(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | ScreenRecordingMetaDataRequest\n\n// Provide meta-data a screen recording.\napiInstance.postRecordingsScreensessionsMetadata(body)\n  .then(() => {\n    console.log(\"postRecordingsScreensessionsMetadata returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRecordingsScreensessionsMetadata\");\n    console.error(err);\n  });"
  },
  "putconversationrecording": {
    "operationId": "putconversationrecording",
    "functionName": "putConversationRecording",
    "signature": "putConversationRecording(conversationId, recordingId, body, clearExport)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "clearExport",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet body = {}; // Object | recording\nlet opts = { \n  \"clearExport\": true // Boolean | Whether to clear the pending export for the recording\n};\n\n// Updates the retention records on a recording.\napiInstance.putConversationRecording(conversationId, recordingId, body, opts)\n  .then((data) => {\n    console.log(`putConversationRecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationRecording\");\n    console.error(err);\n  });"
  },
  "putconversationrecordingannotation": {
    "operationId": "putconversationrecordingannotation",
    "functionName": "putConversationRecordingAnnotation",
    "signature": "putConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet annotationId = \"annotationId_example\"; // String | Annotation ID\nlet body = {}; // Object | annotation\n\n// Update annotation\napiInstance.putConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)\n  .then((data) => {\n    console.log(`putConversationRecordingAnnotation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putConversationRecordingAnnotation\");\n    console.error(err);\n  });"
  },
  "putorphanrecording": {
    "operationId": "putorphanrecording",
    "functionName": "putOrphanrecording",
    "signature": "putOrphanrecording(orphanId, body)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Updates an orphan recording to a regular recording with retention values\napiInstance.putOrphanrecording(orphanId, opts)\n  .then((data) => {\n    console.log(`putOrphanrecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putOrphanrecording\");\n    console.error(err);\n  });"
  },
  "putrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "putrecordingcrossplatformmediaretentionpolicy",
    "functionName": "putRecordingCrossplatformMediaretentionpolicy",
    "signature": "putRecordingCrossplatformMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n// Update a media retention policy\napiInstance.putRecordingCrossplatformMediaretentionpolicy(policyId, body)\n  .then((data) => {\n    console.log(`putRecordingCrossplatformMediaretentionpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRecordingCrossplatformMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "putrecordingjob": {
    "operationId": "putrecordingjob",
    "functionName": "putRecordingJob",
    "signature": "putRecordingJob(jobId, body)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet body = {}; // Object | query\n\n// Execute the recording bulk job.\napiInstance.putRecordingJob(jobId, body)\n  .then((data) => {\n    console.log(`putRecordingJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRecordingJob\");\n    console.error(err);\n  });"
  },
  "putrecordingkeyconfiguration": {
    "operationId": "putrecordingkeyconfiguration",
    "functionName": "putRecordingKeyconfiguration",
    "signature": "putRecordingKeyconfiguration(keyConfigurationId, body)",
    "parameters": [
      {
        "name": "keyConfigurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet keyConfigurationId = \"keyConfigurationId_example\"; // String | Key Configurations Id\nlet body = {}; // Object | Encryption key configuration metadata\n\n// Update the encryption key configurations\napiInstance.putRecordingKeyconfiguration(keyConfigurationId, body)\n  .then((data) => {\n    console.log(`putRecordingKeyconfiguration success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRecordingKeyconfiguration\");\n    console.error(err);\n  });"
  },
  "putrecordingmediaretentionpolicy": {
    "operationId": "putrecordingmediaretentionpolicy",
    "functionName": "putRecordingMediaretentionpolicy",
    "signature": "putRecordingMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n// Update a media retention policy\napiInstance.putRecordingMediaretentionpolicy(policyId, body)\n  .then((data) => {\n    console.log(`putRecordingMediaretentionpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRecordingMediaretentionpolicy\");\n    console.error(err);\n  });"
  },
  "putrecordingrecordingkeysrotationschedule": {
    "operationId": "putrecordingrecordingkeysrotationschedule",
    "functionName": "putRecordingRecordingkeysRotationschedule",
    "signature": "putRecordingRecordingkeysRotationschedule(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KeyRotationSchedule",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | KeyRotationSchedule\n\n// Update key rotation schedule\napiInstance.putRecordingRecordingkeysRotationschedule(body)\n  .then((data) => {\n    console.log(`putRecordingRecordingkeysRotationschedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRecordingRecordingkeysRotationschedule\");\n    console.error(err);\n  });"
  },
  "putrecordingsettings": {
    "operationId": "putrecordingsettings",
    "functionName": "putRecordingSettings",
    "signature": "putRecordingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet body = {}; // Object | Recording settings\n\n// Update the Recording Settings for the Organization\napiInstance.putRecordingSettings(body)\n  .then((data) => {\n    console.log(`putRecordingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRecordingSettings\");\n    console.error(err);\n  });"
  },
  "putrecordingsdeletionprotection": {
    "operationId": "putrecordingsdeletionprotection",
    "functionName": "putRecordingsDeletionprotection",
    "signature": "putRecordingsDeletionprotection(protect, body)",
    "parameters": [
      {
        "name": "protect",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RecordingApi();\n\nlet opts = { \n  \"protect\": true, // Boolean | Check for apply, uncheck for revoke (each action requires the respective permission)\n  \"body\": {} // Object | \n};\n\n// Apply or revoke recording protection for conversations\napiInstance.putRecordingsDeletionprotection(opts)\n  .then(() => {\n    console.log(\"putRecordingsDeletionprotection returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRecordingsDeletionprotection\");\n    console.error(err);\n  });"
  },
  "deleteresponsemanagementlibrary": {
    "operationId": "deleteresponsemanagementlibrary",
    "functionName": "deleteResponsemanagementLibrary",
    "signature": "deleteResponsemanagementLibrary(libraryId)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\n\n// Delete an existing response library.\napiInstance.deleteResponsemanagementLibrary(libraryId)\n  .then(() => {\n    console.log(\"deleteResponsemanagementLibrary returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteResponsemanagementLibrary\");\n    console.error(err);\n  });"
  },
  "deleteresponsemanagementresponse": {
    "operationId": "deleteresponsemanagementresponse",
    "functionName": "deleteResponsemanagementResponse",
    "signature": "deleteResponsemanagementResponse(responseId)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet responseId = \"responseId_example\"; // String | Response ID\n\n// Delete an existing response.\napiInstance.deleteResponsemanagementResponse(responseId)\n  .then(() => {\n    console.log(\"deleteResponsemanagementResponse returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteResponsemanagementResponse\");\n    console.error(err);\n  });"
  },
  "deleteresponsemanagementresponseasset": {
    "operationId": "deleteresponsemanagementresponseasset",
    "functionName": "deleteResponsemanagementResponseasset",
    "signature": "deleteResponsemanagementResponseasset(responseAssetId)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet responseAssetId = \"responseAssetId_example\"; // String | Asset Id\n\n// Delete response asset\napiInstance.deleteResponsemanagementResponseasset(responseAssetId)\n  .then(() => {\n    console.log(\"deleteResponsemanagementResponseasset returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteResponsemanagementResponseasset\");\n    console.error(err);\n  });"
  },
  "getresponsemanagementlibraries": {
    "operationId": "getresponsemanagementlibraries",
    "functionName": "getResponsemanagementLibraries",
    "signature": "getResponsemanagementLibraries(pageNumber, pageSize, messagingTemplateFilter, libraryPrefix)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "messagingTemplateFilter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "libraryPrefix",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LibraryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"messagingTemplateFilter\": \"messagingTemplateFilter_example\", // String | Returns a list of libraries that contain responses with at least one messaging template defined for a specific message channel\n  \"libraryPrefix\": \"libraryPrefix_example\" // String | Returns a list of libraries that contain the prefix provided\n};\n\n// Gets a list of existing response libraries.\napiInstance.getResponsemanagementLibraries(opts)\n  .then((data) => {\n    console.log(`getResponsemanagementLibraries success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getResponsemanagementLibraries\");\n    console.error(err);\n  });"
  },
  "getresponsemanagementlibrary": {
    "operationId": "getresponsemanagementlibrary",
    "functionName": "getResponsemanagementLibrary",
    "signature": "getResponsemanagementLibrary(libraryId)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\n\n// Get details about an existing response library.\napiInstance.getResponsemanagementLibrary(libraryId)\n  .then((data) => {\n    console.log(`getResponsemanagementLibrary success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getResponsemanagementLibrary\");\n    console.error(err);\n  });"
  },
  "getresponsemanagementresponse": {
    "operationId": "getresponsemanagementresponse",
    "functionName": "getResponsemanagementResponse",
    "signature": "getResponsemanagementResponse(responseId, expand)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Response",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet responseId = \"responseId_example\"; // String | Response ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Get details about an existing response.\napiInstance.getResponsemanagementResponse(responseId, opts)\n  .then((data) => {\n    console.log(`getResponsemanagementResponse success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getResponsemanagementResponse\");\n    console.error(err);\n  });"
  },
  "getresponsemanagementresponseasset": {
    "operationId": "getresponsemanagementresponseasset",
    "functionName": "getResponsemanagementResponseasset",
    "signature": "getResponsemanagementResponseasset(responseAssetId)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet responseAssetId = \"responseAssetId_example\"; // String | Asset Id\n\n// Get response asset information\napiInstance.getResponsemanagementResponseasset(responseAssetId)\n  .then((data) => {\n    console.log(`getResponsemanagementResponseasset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getResponsemanagementResponseasset\");\n    console.error(err);\n  });"
  },
  "getresponsemanagementresponseassetsstatusstatusid": {
    "operationId": "getresponsemanagementresponseassetsstatusstatusid",
    "functionName": "getResponsemanagementResponseassetsStatusStatusId",
    "signature": "getResponsemanagementResponseassetsStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseAssetStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet statusId = \"statusId_example\"; // String | Status Id\n\n// Get response asset upload status\napiInstance.getResponsemanagementResponseassetsStatusStatusId(statusId)\n  .then((data) => {\n    console.log(`getResponsemanagementResponseassetsStatusStatusId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getResponsemanagementResponseassetsStatusStatusId\");\n    console.error(err);\n  });"
  },
  "getresponsemanagementresponses": {
    "operationId": "getresponsemanagementresponses",
    "functionName": "getResponsemanagementResponses",
    "signature": "getResponsemanagementResponses(libraryId, pageNumber, pageSize, expand)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ResponseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Gets a list of existing responses.\napiInstance.getResponsemanagementResponses(libraryId, opts)\n  .then((data) => {\n    console.log(`getResponsemanagementResponses success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getResponsemanagementResponses\");\n    console.error(err);\n  });"
  },
  "postresponsemanagementlibraries": {
    "operationId": "postresponsemanagementlibraries",
    "functionName": "postResponsemanagementLibraries",
    "signature": "postResponsemanagementLibraries(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet body = {}; // Object | Library\n\n// Create a response library.\napiInstance.postResponsemanagementLibraries(body)\n  .then((data) => {\n    console.log(`postResponsemanagementLibraries success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postResponsemanagementLibraries\");\n    console.error(err);\n  });"
  },
  "postresponsemanagementresponseassetssearch": {
    "operationId": "postresponsemanagementresponseassetssearch",
    "functionName": "postResponsemanagementResponseassetsSearch",
    "signature": "postResponsemanagementResponseassetsSearch(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ResponseAssetSearchResults",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet body = {}; // Object | request\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Search response assets\napiInstance.postResponsemanagementResponseassetsSearch(body, opts)\n  .then((data) => {\n    console.log(`postResponsemanagementResponseassetsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postResponsemanagementResponseassetsSearch\");\n    console.error(err);\n  });"
  },
  "postresponsemanagementresponseassetsuploads": {
    "operationId": "postresponsemanagementresponseassetsuploads",
    "functionName": "postResponsemanagementResponseassetsUploads",
    "signature": "postResponsemanagementResponseassetsUploads(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateResponseAssetResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet body = {}; // Object | request\n\n// Creates pre-signed url for uploading response asset\napiInstance.postResponsemanagementResponseassetsUploads(body)\n  .then((data) => {\n    console.log(`postResponsemanagementResponseassetsUploads success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postResponsemanagementResponseassetsUploads\");\n    console.error(err);\n  });"
  },
  "postresponsemanagementresponses": {
    "operationId": "postresponsemanagementresponses",
    "functionName": "postResponsemanagementResponses",
    "signature": "postResponsemanagementResponses(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Response",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet body = {}; // Object | Response\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Create a response.\napiInstance.postResponsemanagementResponses(body, opts)\n  .then((data) => {\n    console.log(`postResponsemanagementResponses success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postResponsemanagementResponses\");\n    console.error(err);\n  });"
  },
  "postresponsemanagementresponsesquery": {
    "operationId": "postresponsemanagementresponsesquery",
    "functionName": "postResponsemanagementResponsesQuery",
    "signature": "postResponsemanagementResponsesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseQueryResults",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet body = {}; // Object | Response\n\n// Query responses\napiInstance.postResponsemanagementResponsesQuery(body)\n  .then((data) => {\n    console.log(`postResponsemanagementResponsesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postResponsemanagementResponsesQuery\");\n    console.error(err);\n  });"
  },
  "putresponsemanagementlibrary": {
    "operationId": "putresponsemanagementlibrary",
    "functionName": "putResponsemanagementLibrary",
    "signature": "putResponsemanagementLibrary(libraryId, body)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\nlet body = {}; // Object | Library\n\n// Update an existing response library.\napiInstance.putResponsemanagementLibrary(libraryId, body)\n  .then((data) => {\n    console.log(`putResponsemanagementLibrary success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putResponsemanagementLibrary\");\n    console.error(err);\n  });"
  },
  "putresponsemanagementresponse": {
    "operationId": "putresponsemanagementresponse",
    "functionName": "putResponsemanagementResponse",
    "signature": "putResponsemanagementResponse(responseId, body, expand)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Response",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet responseId = \"responseId_example\"; // String | Response ID\nlet body = {}; // Object | Response\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand instructions for the return value.\n};\n\n// Update an existing response.\napiInstance.putResponsemanagementResponse(responseId, body, opts)\n  .then((data) => {\n    console.log(`putResponsemanagementResponse success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putResponsemanagementResponse\");\n    console.error(err);\n  });"
  },
  "putresponsemanagementresponseasset": {
    "operationId": "putresponsemanagementresponseasset",
    "functionName": "putResponsemanagementResponseasset",
    "signature": "putResponsemanagementResponseasset(responseAssetId, body)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseAsset",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ResponseManagementApi();\n\nlet responseAssetId = \"responseAssetId_example\"; // String | Asset Id\nlet body = {}; // Object | request\n\n// Update response asset\napiInstance.putResponsemanagementResponseasset(responseAssetId, body)\n  .then((data) => {\n    console.log(`putResponsemanagementResponseasset success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putResponsemanagementResponseasset\");\n    console.error(err);\n  });"
  },
  "deleteroutingassessment": {
    "operationId": "deleteroutingassessment",
    "functionName": "deleteRoutingAssessment",
    "signature": "deleteRoutingAssessment(assessmentId)",
    "parameters": [
      {
        "name": "assessmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet assessmentId = \"assessmentId_example\"; // String | Benefit Assessment ID\n\n// Delete single benefit assessment.\napiInstance.deleteRoutingAssessment(assessmentId)\n  .then(() => {\n    console.log(\"deleteRoutingAssessment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingAssessment\");\n    console.error(err);\n  });"
  },
  "deleteroutingemaildomain": {
    "operationId": "deleteroutingemaildomain",
    "functionName": "deleteRoutingEmailDomain",
    "signature": "deleteRoutingEmailDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n// Delete a domain\napiInstance.deleteRoutingEmailDomain(domainId)\n  .then(() => {\n    console.log(\"deleteRoutingEmailDomain returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingEmailDomain\");\n    console.error(err);\n  });"
  },
  "deleteroutingemaildomainroute": {
    "operationId": "deleteroutingemaildomainroute",
    "functionName": "deleteRoutingEmailDomainRoute",
    "signature": "deleteRoutingEmailDomainRoute(domainName, routeId)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet routeId = \"routeId_example\"; // String | route ID\n\n// Delete a route\napiInstance.deleteRoutingEmailDomainRoute(domainName, routeId)\n  .then(() => {\n    console.log(\"deleteRoutingEmailDomainRoute returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingEmailDomainRoute\");\n    console.error(err);\n  });"
  },
  "deleteroutingemailoutbounddomain": {
    "operationId": "deleteroutingemailoutbounddomain",
    "functionName": "deleteRoutingEmailOutboundDomain",
    "signature": "deleteRoutingEmailOutboundDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n// Delete an outbound domain\napiInstance.deleteRoutingEmailOutboundDomain(domainId)\n  .then(() => {\n    console.log(\"deleteRoutingEmailOutboundDomain returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingEmailOutboundDomain\");\n    console.error(err);\n  });"
  },
  "deleteroutinglanguage": {
    "operationId": "deleteroutinglanguage",
    "functionName": "deleteRoutingLanguage",
    "signature": "deleteRoutingLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n// Delete a routing language\napiInstance.deleteRoutingLanguage(languageId)\n  .then(() => {\n    console.log(\"deleteRoutingLanguage returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingLanguage\");\n    console.error(err);\n  });"
  },
  "deleteroutingpredictor": {
    "operationId": "deleteroutingpredictor",
    "functionName": "deleteRoutingPredictor",
    "signature": "deleteRoutingPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\n\n// Delete single predictor.\napiInstance.deleteRoutingPredictor(predictorId)\n  .then(() => {\n    console.log(\"deleteRoutingPredictor returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingPredictor\");\n    console.error(err);\n  });"
  },
  "deleteroutingqueue": {
    "operationId": "deleteroutingqueue",
    "functionName": "deleteRoutingQueue",
    "signature": "deleteRoutingQueue(queueId, forceDelete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDelete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  \"forceDelete\": true // Boolean | forceDelete\n};\n\n// Delete a queue\napiInstance.deleteRoutingQueue(queueId, opts)\n  .then(() => {\n    console.log(\"deleteRoutingQueue returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingQueue\");\n    console.error(err);\n  });"
  },
  "deleteroutingqueuemember": {
    "operationId": "deleteroutingqueuemember",
    "functionName": "deleteRoutingQueueMember",
    "signature": "deleteRoutingQueueMember(queueId, memberId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\n\n// Delete a queue member.\napiInstance.deleteRoutingQueueMember(queueId, memberId)\n  .then(() => {\n    console.log(\"deleteRoutingQueueMember returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingQueueMember\");\n    console.error(err);\n  });"
  },
  "deleteroutingqueueuser": {
    "operationId": "deleteroutingqueueuser",
    "functionName": "deleteRoutingQueueUser",
    "signature": "deleteRoutingQueueUser(queueId, memberId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\n\n// DEPRECATED: use DELETE /routing/queues/{queueId}/members/{memberId}.  Delete queue member.\napiInstance.deleteRoutingQueueUser(queueId, memberId)\n  .then(() => {\n    console.log(\"deleteRoutingQueueUser returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingQueueUser\");\n    console.error(err);\n  });"
  },
  "deleteroutingqueuewrapupcode": {
    "operationId": "deleteroutingqueuewrapupcode",
    "functionName": "deleteRoutingQueueWrapupcode",
    "signature": "deleteRoutingQueueWrapupcode(queueId, codeId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet codeId = \"codeId_example\"; // String | Code ID\n\n// Delete a wrap-up code from a queue\napiInstance.deleteRoutingQueueWrapupcode(queueId, codeId)\n  .then(() => {\n    console.log(\"deleteRoutingQueueWrapupcode returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingQueueWrapupcode\");\n    console.error(err);\n  });"
  },
  "deleteroutingsettings": {
    "operationId": "deleteroutingsettings",
    "functionName": "deleteRoutingSettings",
    "signature": "deleteRoutingSettings()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Delete an organization's routing settings\napiInstance.deleteRoutingSettings()\n  .then(() => {\n    console.log(\"deleteRoutingSettings returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingSettings\");\n    console.error(err);\n  });"
  },
  "deleteroutingskill": {
    "operationId": "deleteroutingskill",
    "functionName": "deleteRoutingSkill",
    "signature": "deleteRoutingSkill(skillId)",
    "parameters": [
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillId = \"skillId_example\"; // String | Skill ID\n\n// Delete Routing Skill\napiInstance.deleteRoutingSkill(skillId)\n  .then(() => {\n    console.log(\"deleteRoutingSkill returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingSkill\");\n    console.error(err);\n  });"
  },
  "deleteroutingskillgroup": {
    "operationId": "deleteroutingskillgroup",
    "functionName": "deleteRoutingSkillgroup",
    "signature": "deleteRoutingSkillgroup(skillGroupId)",
    "parameters": [
      {
        "name": "skillGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillGroupId = \"skillGroupId_example\"; // String | Skill Group ID\n\n// Remove skill group definition\napiInstance.deleteRoutingSkillgroup(skillGroupId)\n  .then(() => {\n    console.log(\"deleteRoutingSkillgroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingSkillgroup\");\n    console.error(err);\n  });"
  },
  "deleteroutingsmsaddress": {
    "operationId": "deleteroutingsmsaddress",
    "functionName": "deleteRoutingSmsAddress",
    "signature": "deleteRoutingSmsAddress(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet addressId = \"addressId_example\"; // String | Address ID\n\n// Delete an Address by Id for SMS\napiInstance.deleteRoutingSmsAddress(addressId)\n  .then(() => {\n    console.log(\"deleteRoutingSmsAddress returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingSmsAddress\");\n    console.error(err);\n  });"
  },
  "deleteroutingsmsphonenumber": {
    "operationId": "deleteroutingsmsphonenumber",
    "functionName": "deleteRoutingSmsPhonenumber",
    "signature": "deleteRoutingSmsPhonenumber(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet addressId = \"addressId_example\"; // String | Address ID\n\n// Delete a phone number provisioned for SMS.\napiInstance.deleteRoutingSmsPhonenumber(addressId)\n  .then(() => {\n    console.log(\"deleteRoutingSmsPhonenumber returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingSmsPhonenumber\");\n    console.error(err);\n  });"
  },
  "deleteroutinguserutilization": {
    "operationId": "deleteroutinguserutilization",
    "functionName": "deleteRoutingUserUtilization",
    "signature": "deleteRoutingUserUtilization(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Delete the user's max utilization settings and revert to the organization-wide default.\napiInstance.deleteRoutingUserUtilization(userId)\n  .then(() => {\n    console.log(\"deleteRoutingUserUtilization returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingUserUtilization\");\n    console.error(err);\n  });"
  },
  "deleteroutingutilization": {
    "operationId": "deleteroutingutilization",
    "functionName": "deleteRoutingUtilization",
    "signature": "deleteRoutingUtilization()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Delete the organization-wide max utilization settings and revert to the system default.\napiInstance.deleteRoutingUtilization()\n  .then(() => {\n    console.log(\"deleteRoutingUtilization returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingUtilization\");\n    console.error(err);\n  });"
  },
  "deleteroutingutilizationtag": {
    "operationId": "deleteroutingutilizationtag",
    "functionName": "deleteRoutingUtilizationTag",
    "signature": "deleteRoutingUtilizationTag(tagId, forceDelete)",
    "parameters": [
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDelete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet tagId = \"tagId_example\"; // String | Utilization Tag ID\nlet opts = { \n  \"forceDelete\": false // Boolean | Remove all tag usages (if found) without warning\n};\n\n// Delete an utilization tag\napiInstance.deleteRoutingUtilizationTag(tagId, opts)\n  .then(() => {\n    console.log(\"deleteRoutingUtilizationTag returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingUtilizationTag\");\n    console.error(err);\n  });"
  },
  "deleteroutingwrapupcode": {
    "operationId": "deleteroutingwrapupcode",
    "functionName": "deleteRoutingWrapupcode",
    "signature": "deleteRoutingWrapupcode(codeId)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet codeId = \"codeId_example\"; // String | Wrapup Code ID\n\n// Delete wrap-up code\napiInstance.deleteRoutingWrapupcode(codeId)\n  .then(() => {\n    console.log(\"deleteRoutingWrapupcode returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteRoutingWrapupcode\");\n    console.error(err);\n  });"
  },
  "deleteuserroutinglanguage": {
    "operationId": "deleteuserroutinglanguage",
    "functionName": "deleteUserRoutinglanguage",
    "signature": "deleteUserRoutinglanguage(userId, languageId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet languageId = \"languageId_example\"; // String | languageId\n\n// Remove routing language from user\napiInstance.deleteUserRoutinglanguage(userId, languageId)\n  .then(() => {\n    console.log(\"deleteUserRoutinglanguage returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteUserRoutinglanguage\");\n    console.error(err);\n  });"
  },
  "deleteuserroutingskill": {
    "operationId": "deleteuserroutingskill",
    "functionName": "deleteUserRoutingskill",
    "signature": "deleteUserRoutingskill(userId, skillId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet skillId = \"skillId_example\"; // String | skillId\n\n// Remove routing skill from user\napiInstance.deleteUserRoutingskill(userId, skillId)\n  .then(() => {\n    console.log(\"deleteUserRoutingskill returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteUserRoutingskill\");\n    console.error(err);\n  });"
  },
  "getroutingassessment": {
    "operationId": "getroutingassessment",
    "functionName": "getRoutingAssessment",
    "signature": "getRoutingAssessment(assessmentId)",
    "parameters": [
      {
        "name": "assessmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BenefitAssessment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet assessmentId = \"assessmentId_example\"; // String | Benefit Assessment ID\n\n// Retrieve a single benefit assessment.\napiInstance.getRoutingAssessment(assessmentId)\n  .then((data) => {\n    console.log(`getRoutingAssessment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingAssessment\");\n    console.error(err);\n  });"
  },
  "getroutingassessments": {
    "operationId": "getroutingassessments",
    "functionName": "getRoutingAssessments",
    "signature": "getRoutingAssessments(before, after, limit, pageSize, queueId)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AssessmentListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"limit\": \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"queueId\": [\"queueId_example\"] // [String] | Queue ID(s) to filter assessments by.\n};\n\n// Retrieve all benefit assessments.\napiInstance.getRoutingAssessments(opts)\n  .then((data) => {\n    console.log(`getRoutingAssessments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingAssessments\");\n    console.error(err);\n  });"
  },
  "getroutingassessmentsjob": {
    "operationId": "getroutingassessmentsjob",
    "functionName": "getRoutingAssessmentsJob",
    "signature": "getRoutingAssessmentsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BenefitAssessmentJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet jobId = \"jobId_example\"; // String | Benefit Assessment Job ID\n\n// Retrieve a single benefit assessments job.\napiInstance.getRoutingAssessmentsJob(jobId)\n  .then((data) => {\n    console.log(`getRoutingAssessmentsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingAssessmentsJob\");\n    console.error(err);\n  });"
  },
  "getroutingassessmentsjobs": {
    "operationId": "getroutingassessmentsjobs",
    "functionName": "getRoutingAssessmentsJobs",
    "signature": "getRoutingAssessmentsJobs(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AssessmentJobListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"divisionId\": [\"divisionId_example\"] // [String] | Division ID(s) to filter assessment jobs by.\n};\n\n// Retrieve all benefit assessment jobs.\napiInstance.getRoutingAssessmentsJobs(opts)\n  .then((data) => {\n    console.log(`getRoutingAssessmentsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingAssessmentsJobs\");\n    console.error(err);\n  });"
  },
  "getroutingavailablemediatypes": {
    "operationId": "getroutingavailablemediatypes",
    "functionName": "getRoutingAvailablemediatypes",
    "signature": "getRoutingAvailablemediatypes()",
    "return": "AvailableMediaTypeEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Get available media types\napiInstance.getRoutingAvailablemediatypes()\n  .then((data) => {\n    console.log(`getRoutingAvailablemediatypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingAvailablemediatypes\");\n    console.error(err);\n  });"
  },
  "getroutingemaildomain": {
    "operationId": "getroutingemaildomain",
    "functionName": "getRoutingEmailDomain",
    "signature": "getRoutingEmailDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n// Get domain\napiInstance.getRoutingEmailDomain(domainId)\n  .then((data) => {\n    console.log(`getRoutingEmailDomain success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailDomain\");\n    console.error(err);\n  });"
  },
  "getroutingemaildomainroute": {
    "operationId": "getroutingemaildomainroute",
    "functionName": "getRoutingEmailDomainRoute",
    "signature": "getRoutingEmailDomainRoute(domainName, routeId)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet routeId = \"routeId_example\"; // String | route ID\n\n// Get a route\napiInstance.getRoutingEmailDomainRoute(domainName, routeId)\n  .then((data) => {\n    console.log(`getRoutingEmailDomainRoute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailDomainRoute\");\n    console.error(err);\n  });"
  },
  "getroutingemaildomainroutes": {
    "operationId": "getroutingemaildomainroutes",
    "functionName": "getRoutingEmailDomainRoutes",
    "signature": "getRoutingEmailDomainRoutes(domainName, pageSize, pageNumber, pattern)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pattern",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InboundRouteEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"pattern\": \"pattern_example\" // String | Filter routes by the route's pattern property\n};\n\n// Get routes\napiInstance.getRoutingEmailDomainRoutes(domainName, opts)\n  .then((data) => {\n    console.log(`getRoutingEmailDomainRoutes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailDomainRoutes\");\n    console.error(err);\n  });"
  },
  "getroutingemaildomains": {
    "operationId": "getroutingemaildomains",
    "functionName": "getRoutingEmailDomains",
    "signature": "getRoutingEmailDomains(pageSize, pageNumber, excludeStatus, filter)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "excludeStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InboundDomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"excludeStatus\": false, // Boolean | Exclude MX record data\n  \"filter\": \"filter_example\" // String | Optional search filter\n};\n\n// Get domains\napiInstance.getRoutingEmailDomains(opts)\n  .then((data) => {\n    console.log(`getRoutingEmailDomains success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailDomains\");\n    console.error(err);\n  });"
  },
  "getroutingemailoutbounddomain": {
    "operationId": "getroutingemailoutbounddomain",
    "functionName": "getRoutingEmailOutboundDomain",
    "signature": "getRoutingEmailOutboundDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n// Get domain\napiInstance.getRoutingEmailOutboundDomain(domainId)\n  .then((data) => {\n    console.log(`getRoutingEmailOutboundDomain success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailOutboundDomain\");\n    console.error(err);\n  });"
  },
  "getroutingemailoutbounddomainactivation": {
    "operationId": "getroutingemailoutbounddomainactivation",
    "functionName": "getRoutingEmailOutboundDomainActivation",
    "signature": "getRoutingEmailOutboundDomainActivation(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailOutboundDomainResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n// Get activation status (cname + dkim) of an outbound domain\napiInstance.getRoutingEmailOutboundDomainActivation(domainId)\n  .then((data) => {\n    console.log(`getRoutingEmailOutboundDomainActivation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailOutboundDomainActivation\");\n    console.error(err);\n  });"
  },
  "getroutingemailoutbounddomainsearch": {
    "operationId": "getroutingemailoutbounddomainsearch",
    "functionName": "getRoutingEmailOutboundDomainSearch",
    "signature": "getRoutingEmailOutboundDomainSearch(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n// Search a domain across organizations\napiInstance.getRoutingEmailOutboundDomainSearch(domainId)\n  .then((data) => {\n    console.log(`getRoutingEmailOutboundDomainSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailOutboundDomainSearch\");\n    console.error(err);\n  });"
  },
  "getroutingemailoutbounddomains": {
    "operationId": "getroutingemailoutbounddomains",
    "functionName": "getRoutingEmailOutboundDomains",
    "signature": "getRoutingEmailOutboundDomains(filter)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutboundDomainEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"filter\": \"filter_example\" // String | Optional search filter\n};\n\n// Get outbound domains\napiInstance.getRoutingEmailOutboundDomains(opts)\n  .then((data) => {\n    console.log(`getRoutingEmailOutboundDomains success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailOutboundDomains\");\n    console.error(err);\n  });"
  },
  "getroutingemailsetup": {
    "operationId": "getroutingemailsetup",
    "functionName": "getRoutingEmailSetup",
    "signature": "getRoutingEmailSetup()",
    "return": "EmailSetup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Get email setup\napiInstance.getRoutingEmailSetup()\n  .then((data) => {\n    console.log(`getRoutingEmailSetup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingEmailSetup\");\n    console.error(err);\n  });"
  },
  "getroutinglanguage": {
    "operationId": "getroutinglanguage",
    "functionName": "getRoutingLanguage",
    "signature": "getRoutingLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n// Get a routing language\napiInstance.getRoutingLanguage(languageId)\n  .then((data) => {\n    console.log(`getRoutingLanguage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingLanguage\");\n    console.error(err);\n  });"
  },
  "getroutinglanguages": {
    "operationId": "getroutinglanguages",
    "functionName": "getRoutingLanguages",
    "signature": "getRoutingLanguages(pageSize, pageNumber, sortOrder, name, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LanguageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ASC\", // String | Ascending or descending sort order\n  \"name\": \"name_example\", // String | Name\n  \"id\": [\"id_example\"] // [String] | id\n};\n\n// Get the list of supported languages.\napiInstance.getRoutingLanguages(opts)\n  .then((data) => {\n    console.log(`getRoutingLanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingLanguages\");\n    console.error(err);\n  });"
  },
  "getroutingmessagerecipient": {
    "operationId": "getroutingmessagerecipient",
    "functionName": "getRoutingMessageRecipient",
    "signature": "getRoutingMessageRecipient(recipientId)",
    "parameters": [
      {
        "name": "recipientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Recipient",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet recipientId = \"recipientId_example\"; // String | Recipient ID\n\n// Get a recipient\napiInstance.getRoutingMessageRecipient(recipientId)\n  .then((data) => {\n    console.log(`getRoutingMessageRecipient success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingMessageRecipient\");\n    console.error(err);\n  });"
  },
  "getroutingmessagerecipients": {
    "operationId": "getroutingmessagerecipients",
    "functionName": "getRoutingMessageRecipients",
    "signature": "getRoutingMessageRecipients(messengerType, name, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "messengerType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "RecipientListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"messengerType\": \"messengerType_example\", // String | Messenger Type\n  \"name\": \"name_example\", // String | Recipient Name\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get recipients\napiInstance.getRoutingMessageRecipients(opts)\n  .then((data) => {\n    console.log(`getRoutingMessageRecipients success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingMessageRecipients\");\n    console.error(err);\n  });"
  },
  "getroutingpredictor": {
    "operationId": "getroutingpredictor",
    "functionName": "getRoutingPredictor",
    "signature": "getRoutingPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Predictor",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\n\n// Retrieve a single predictor.\napiInstance.getRoutingPredictor(predictorId)\n  .then((data) => {\n    console.log(`getRoutingPredictor success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingPredictor\");\n    console.error(err);\n  });"
  },
  "getroutingpredictormodelfeatures": {
    "operationId": "getroutingpredictormodelfeatures",
    "functionName": "getRoutingPredictorModelFeatures",
    "signature": "getRoutingPredictorModelFeatures(predictorId, modelId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "modelId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PredictorModelFeatureListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\nlet modelId = \"modelId_example\"; // String | Model ID\n\n// Retrieve Predictor Model Features.\napiInstance.getRoutingPredictorModelFeatures(predictorId, modelId)\n  .then((data) => {\n    console.log(`getRoutingPredictorModelFeatures success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingPredictorModelFeatures\");\n    console.error(err);\n  });"
  },
  "getroutingpredictormodels": {
    "operationId": "getroutingpredictormodels",
    "functionName": "getRoutingPredictorModels",
    "signature": "getRoutingPredictorModels(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PredictorModels",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\n\n// Retrieve Predictor Models and Top Features.\napiInstance.getRoutingPredictorModels(predictorId)\n  .then((data) => {\n    console.log(`getRoutingPredictorModels success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingPredictorModels\");\n    console.error(err);\n  });"
  },
  "getroutingpredictors": {
    "operationId": "getroutingpredictors",
    "functionName": "getRoutingPredictors",
    "signature": "getRoutingPredictors(before, after, limit, pageSize, queueId)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "PredictorListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"before\": \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"limit\": \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize\n  \"pageSize\": \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  \"queueId\": [\"queueId_example\"] // [String] | Comma-separated list of queue Ids to filter by.\n};\n\n// Retrieve all predictors.\napiInstance.getRoutingPredictors(opts)\n  .then((data) => {\n    console.log(`getRoutingPredictors success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingPredictors\");\n    console.error(err);\n  });"
  },
  "getroutingpredictorskeyperformanceindicators": {
    "operationId": "getroutingpredictorskeyperformanceindicators",
    "functionName": "getRoutingPredictorsKeyperformanceindicators",
    "signature": "getRoutingPredictorsKeyperformanceindicators(kpiGroup, expand)",
    "parameters": [
      {
        "name": "kpiGroup",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[KeyPerformanceIndicator]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"kpiGroup\": \"kpiGroup_example\", // String | The Group of Key Performance Indicators to return\n  \"expand\": [\"expand_example\"] // [String] | Parameter to request additional data to return in KPI payload\n};\n\n// Get a list of Key Performance Indicators\napiInstance.getRoutingPredictorsKeyperformanceindicators(opts)\n  .then((data) => {\n    console.log(`getRoutingPredictorsKeyperformanceindicators success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingPredictorsKeyperformanceindicators\");\n    console.error(err);\n  });"
  },
  "getroutingqueue": {
    "operationId": "getroutingqueue",
    "functionName": "getRoutingQueue",
    "signature": "getRoutingQueue(queueId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\n\n// Get details about this queue.\napiInstance.getRoutingQueue(queueId)\n  .then((data) => {\n    console.log(`getRoutingQueue success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueue\");\n    console.error(err);\n  });"
  },
  "getroutingqueuecomparisonperiod": {
    "operationId": "getroutingqueuecomparisonperiod",
    "functionName": "getRoutingQueueComparisonperiod",
    "signature": "getRoutingQueueComparisonperiod(queueId, comparisonPeriodId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparisonPeriodId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ComparisonPeriod",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue id\nlet comparisonPeriodId = \"comparisonPeriodId_example\"; // String | ComparisonPeriod id\n\n// Get a Comparison Period.\napiInstance.getRoutingQueueComparisonperiod(queueId, comparisonPeriodId)\n  .then((data) => {\n    console.log(`getRoutingQueueComparisonperiod success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueueComparisonperiod\");\n    console.error(err);\n  });"
  },
  "getroutingqueuecomparisonperiods": {
    "operationId": "getroutingqueuecomparisonperiods",
    "functionName": "getRoutingQueueComparisonperiods",
    "signature": "getRoutingQueueComparisonperiods(queueId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ComparisonPeriodListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue id\n\n// Get list of comparison periods\napiInstance.getRoutingQueueComparisonperiods(queueId)\n  .then((data) => {\n    console.log(`getRoutingQueueComparisonperiods success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueueComparisonperiods\");\n    console.error(err);\n  });"
  },
  "getroutingqueueestimatedwaittime": {
    "operationId": "getroutingqueueestimatedwaittime",
    "functionName": "getRoutingQueueEstimatedwaittime",
    "signature": "getRoutingQueueEstimatedwaittime(queueId, conversationId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EstimatedWaitTimePredictions",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | queueId\nlet opts = { \n  \"conversationId\": \"conversationId_example\" // String | conversationId\n};\n\n// Get Estimated Wait Time\napiInstance.getRoutingQueueEstimatedwaittime(queueId, opts)\n  .then((data) => {\n    console.log(`getRoutingQueueEstimatedwaittime success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueueEstimatedwaittime\");\n    console.error(err);\n  });"
  },
  "getroutingqueuemediatypeestimatedwaittime": {
    "operationId": "getroutingqueuemediatypeestimatedwaittime",
    "functionName": "getRoutingQueueMediatypeEstimatedwaittime",
    "signature": "getRoutingQueueMediatypeEstimatedwaittime(queueId, mediaType)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EstimatedWaitTimePredictions",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | queueId\nlet mediaType = \"mediaType_example\"; // String | mediaType\n\n// Get Estimated Wait Time\napiInstance.getRoutingQueueMediatypeEstimatedwaittime(queueId, mediaType)\n  .then((data) => {\n    console.log(`getRoutingQueueMediatypeEstimatedwaittime success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueueMediatypeEstimatedwaittime\");\n    console.error(err);\n  });"
  },
  "getroutingqueuemembers": {
    "operationId": "getroutingqueuemembers",
    "functionName": "getRoutingQueueMembers",
    "signature": "getRoutingQueueMembers(queueId, pageNumber, pageSize, sortOrder, expand, name, profileSkills, skills, languages, routingStatus, presence, memberBy, joined)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "profileSkills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "skills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "languages",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "routingStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "presence",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "memberBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "QueueMemberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  \"pageNumber\": 1, // Number | \n  \"pageSize\": 25, // Number | Max value is 100\n  \"sortOrder\": \"asc\", // String | Note: results are sorted by name.\n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  \"name\": \"name_example\", // String | Filter by queue member name (contains-style search)\n  \"profileSkills\": [\"profileSkills_example\"], // [String] | Filter by profile skill (contains-style search)\n  \"skills\": [\"skills_example\"], // [String] | Filter by skill (contains-style search)\n  \"languages\": [\"languages_example\"], // [String] | Filter by language (contains-style search)\n  \"routingStatus\": [\"routingStatus_example\"], // [String] | Filter by routing status\n  \"presence\": [\"presence_example\"], // [String] | Filter by presence\n  \"memberBy\": \"memberBy_example\", // String | Filter by member type\n  \"joined\": true // Boolean | Filter by joined status\n};\n\n// Get the members of this queue.\napiInstance.getRoutingQueueMembers(queueId, opts)\n  .then((data) => {\n    console.log(`getRoutingQueueMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueueMembers\");\n    console.error(err);\n  });"
  },
  "getroutingqueueusers": {
    "operationId": "getroutingqueueusers",
    "functionName": "getRoutingQueueUsers",
    "signature": "getRoutingQueueUsers(queueId, pageNumber, pageSize, sortOrder, expand, joined, name, profileSkills, skills, languages, routingStatus, presence)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "profileSkills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "skills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "languages",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "routingStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "presence",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueMemberEntityListingV1",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  \"pageNumber\": 1, // Number | \n  \"pageSize\": 25, // Number | Max value is 100\n  \"sortOrder\": \"asc\", // String | Note: results are sorted by name.\n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  \"joined\": true, // Boolean | Filter by joined status\n  \"name\": \"name_example\", // String | Filter by queue member name\n  \"profileSkills\": [\"profileSkills_example\"], // [String] | Filter by profile skill\n  \"skills\": [\"skills_example\"], // [String] | Filter by skill\n  \"languages\": [\"languages_example\"], // [String] | Filter by language\n  \"routingStatus\": [\"routingStatus_example\"], // [String] | Filter by routing status\n  \"presence\": [\"presence_example\"] // [String] | Filter by presence\n};\n\n// DEPRECATED: use GET /routing/queues/{queueId}/members.  Get the members of this queue.\napiInstance.getRoutingQueueUsers(queueId, opts)\n  .then((data) => {\n    console.log(`getRoutingQueueUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueueUsers\");\n    console.error(err);\n  });"
  },
  "getroutingqueuewrapupcodes": {
    "operationId": "getroutingqueuewrapupcodes",
    "functionName": "getRoutingQueueWrapupcodes",
    "signature": "getRoutingQueueWrapupcodes(queueId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WrapupCodeEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get the wrap-up codes for a queue\napiInstance.getRoutingQueueWrapupcodes(queueId, opts)\n  .then((data) => {\n    console.log(`getRoutingQueueWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueueWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getroutingqueues": {
    "operationId": "getroutingqueues",
    "functionName": "getRoutingQueues",
    "signature": "getRoutingQueues(pageNumber, pageSize, sortOrder, name, id, divisionId, peerId, hasPeer)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "peerId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "hasPeer",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortOrder\": \"asc\", // String | Note: results are sorted by name.\n  \"name\": \"name_example\", // String | Filter by queue name\n  \"id\": [\"id_example\"], // [String] | Filter by queue ID(s)\n  \"divisionId\": [\"divisionId_example\"], // [String] | Filter by queue division ID(s)\n  \"peerId\": [\"peerId_example\"], // [String] | Filter by queue peer ID(s)\n  \"hasPeer\": true // Boolean | Filter by queues associated with peer\n};\n\n// Get list of queues.\napiInstance.getRoutingQueues(opts)\n  .then((data) => {\n    console.log(`getRoutingQueues success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueues\");\n    console.error(err);\n  });"
  },
  "getroutingqueuesdivisionviews": {
    "operationId": "getroutingqueuesdivisionviews",
    "functionName": "getRoutingQueuesDivisionviews",
    "signature": "getRoutingQueuesDivisionviews(pageSize, pageNumber, sortBy, sortOrder, name, id, divisionId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size [max value is 100]\n  \"pageNumber\": 1, // Number | Page number [max value is 5]\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"asc\", // String | Sort order\n  \"name\": \"name_example\", // String | Name\n  \"id\": [\"id_example\"], // [String] | Queue ID(s)\n  \"divisionId\": [\"divisionId_example\"] // [String] | Division ID(s)\n};\n\n// Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).\napiInstance.getRoutingQueuesDivisionviews(opts)\n  .then((data) => {\n    console.log(`getRoutingQueuesDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueuesDivisionviews\");\n    console.error(err);\n  });"
  },
  "getroutingqueuesdivisionviewsall": {
    "operationId": "getroutingqueuesdivisionviewsall",
    "functionName": "getRoutingQueuesDivisionviewsAll",
    "signature": "getRoutingQueuesDivisionviewsAll(pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size [max value is 500]\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"asc\" // String | Sort order\n};\n\n// Get a paged listing of simplified queue objects, sorted by name.  Can be used to get a digest of all queues in an organization.\napiInstance.getRoutingQueuesDivisionviewsAll(opts)\n  .then((data) => {\n    console.log(`getRoutingQueuesDivisionviewsAll success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueuesDivisionviewsAll\");\n    console.error(err);\n  });"
  },
  "getroutingqueuesme": {
    "operationId": "getroutingqueuesme",
    "functionName": "getRoutingQueuesMe",
    "signature": "getRoutingQueuesMe(pageNumber, pageSize, joined, sortOrder)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"joined\": true, // Boolean | Filter by joined status.\n  \"sortOrder\": \"asc\" // String | Note: results are sorted by name.\n};\n\n// Get a paged listing of queues the user is a member of.\napiInstance.getRoutingQueuesMe(opts)\n  .then((data) => {\n    console.log(`getRoutingQueuesMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingQueuesMe\");\n    console.error(err);\n  });"
  },
  "getroutingsettings": {
    "operationId": "getroutingsettings",
    "functionName": "getRoutingSettings",
    "signature": "getRoutingSettings()",
    "return": "RoutingSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Get an organization's routing settings\napiInstance.getRoutingSettings()\n  .then((data) => {\n    console.log(`getRoutingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSettings\");\n    console.error(err);\n  });"
  },
  "getroutingsettingscontactcenter": {
    "operationId": "getroutingsettingscontactcenter",
    "functionName": "getRoutingSettingsContactcenter",
    "signature": "getRoutingSettingsContactcenter()",
    "return": "ContactCenterSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Get Contact Center Settings\napiInstance.getRoutingSettingsContactcenter()\n  .then((data) => {\n    console.log(`getRoutingSettingsContactcenter success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSettingsContactcenter\");\n    console.error(err);\n  });"
  },
  "getroutingsettingstranscription": {
    "operationId": "getroutingsettingstranscription",
    "functionName": "getRoutingSettingsTranscription",
    "signature": "getRoutingSettingsTranscription()",
    "return": "TranscriptionSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Get Transcription Settings\napiInstance.getRoutingSettingsTranscription()\n  .then((data) => {\n    console.log(`getRoutingSettingsTranscription success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSettingsTranscription\");\n    console.error(err);\n  });"
  },
  "getroutingskill": {
    "operationId": "getroutingskill",
    "functionName": "getRoutingSkill",
    "signature": "getRoutingSkill(skillId)",
    "parameters": [
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RoutingSkill",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillId = \"skillId_example\"; // String | Skill ID\n\n// Get Routing Skill\napiInstance.getRoutingSkill(skillId)\n  .then((data) => {\n    console.log(`getRoutingSkill success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSkill\");\n    console.error(err);\n  });"
  },
  "getroutingskillgroup": {
    "operationId": "getroutingskillgroup",
    "functionName": "getRoutingSkillgroup",
    "signature": "getRoutingSkillgroup(skillGroupId)",
    "parameters": [
      {
        "name": "skillGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SkillGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillGroupId = \"skillGroupId_example\"; // String | Skill Group ID\n\n// Get skill group\napiInstance.getRoutingSkillgroup(skillGroupId)\n  .then((data) => {\n    console.log(`getRoutingSkillgroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSkillgroup\");\n    console.error(err);\n  });"
  },
  "getroutingskillgroupmembers": {
    "operationId": "getroutingskillgroupmembers",
    "functionName": "getRoutingSkillgroupMembers",
    "signature": "getRoutingSkillgroupMembers(skillGroupId, pageSize, after, before, expand)",
    "parameters": [
      {
        "name": "skillGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SkillGroupMemberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillGroupId = \"skillGroupId_example\"; // String | Skill Group ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"after\": \"after_example\", // String | The cursor that points to the next item\n  \"before\": \"before_example\", // String | The cursor that points to the previous item\n  \"expand\": \"expand_example\" // String | Expand the name on each user\n};\n\n// Get skill group members\napiInstance.getRoutingSkillgroupMembers(skillGroupId, opts)\n  .then((data) => {\n    console.log(`getRoutingSkillgroupMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSkillgroupMembers\");\n    console.error(err);\n  });"
  },
  "getroutingskillgroupmembersdivisions": {
    "operationId": "getroutingskillgroupmembersdivisions",
    "functionName": "getRoutingSkillgroupMembersDivisions",
    "signature": "getRoutingSkillgroupMembersDivisions(skillGroupId, expand)",
    "parameters": [
      {
        "name": "skillGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SkillGroupMemberDivisionList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillGroupId = \"skillGroupId_example\"; // String | Skill Group ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand the name on each user\n};\n\n// Get list of member divisions for this skill group.\napiInstance.getRoutingSkillgroupMembersDivisions(skillGroupId, opts)\n  .then((data) => {\n    console.log(`getRoutingSkillgroupMembersDivisions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSkillgroupMembersDivisions\");\n    console.error(err);\n  });"
  },
  "getroutingskillgroups": {
    "operationId": "getroutingskillgroups",
    "functionName": "getRoutingSkillgroups",
    "signature": "getRoutingSkillgroups(pageSize, name, after, before)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SkillGroupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"name\": \"name_example\", // String | Return only skill group names whose names start with this value (case-insensitive matching)\n  \"after\": \"after_example\", // String | The cursor that points to the next item\n  \"before\": \"before_example\" // String | The cursor that points to the previous item\n};\n\n// Get skill group listing\napiInstance.getRoutingSkillgroups(opts)\n  .then((data) => {\n    console.log(`getRoutingSkillgroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSkillgroups\");\n    console.error(err);\n  });"
  },
  "getroutingskills": {
    "operationId": "getroutingskills",
    "functionName": "getRoutingSkills",
    "signature": "getRoutingSkills(pageSize, pageNumber, name, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "SkillEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Filter for results that start with this value\n  \"id\": [\"id_example\"] // [String] | id\n};\n\n// Get the list of routing skills.\napiInstance.getRoutingSkills(opts)\n  .then((data) => {\n    console.log(`getRoutingSkills success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSkills\");\n    console.error(err);\n  });"
  },
  "getroutingsmsaddress": {
    "operationId": "getroutingsmsaddress",
    "functionName": "getRoutingSmsAddress",
    "signature": "getRoutingSmsAddress(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SmsAddress",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet addressId = \"addressId_example\"; // String | Address ID\n\n// Get an Address by Id for SMS\napiInstance.getRoutingSmsAddress(addressId)\n  .then((data) => {\n    console.log(`getRoutingSmsAddress success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSmsAddress\");\n    console.error(err);\n  });"
  },
  "getroutingsmsaddresses": {
    "operationId": "getroutingsmsaddresses",
    "functionName": "getRoutingSmsAddresses",
    "signature": "getRoutingSmsAddresses(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SmsAddressEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of Addresses for SMS\napiInstance.getRoutingSmsAddresses(opts)\n  .then((data) => {\n    console.log(`getRoutingSmsAddresses success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSmsAddresses\");\n    console.error(err);\n  });"
  },
  "getroutingsmsavailablephonenumbers": {
    "operationId": "getroutingsmsavailablephonenumbers",
    "functionName": "getRoutingSmsAvailablephonenumbers",
    "signature": "getRoutingSmsAvailablephonenumbers(countryCode, phoneNumberType, region, city, areaCode, pattern, addressRequirement)",
    "parameters": [
      {
        "name": "countryCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "phoneNumberType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "region",
        "type": "String",
        "required": "false"
      },
      {
        "name": "city",
        "type": "String",
        "required": "false"
      },
      {
        "name": "areaCode",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pattern",
        "type": "String",
        "required": "false"
      },
      {
        "name": "addressRequirement",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SMSAvailablePhoneNumberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet countryCode = \"countryCode_example\"; // String | The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned\nlet phoneNumberType = \"phoneNumberType_example\"; // String | Type of available phone numbers searched\nlet opts = { \n  \"region\": \"region_example\", // String | Region/province/state that can be used to restrict the numbers returned\n  \"city\": \"city_example\", // String | City that can be used to restrict the numbers returned\n  \"areaCode\": \"areaCode_example\", // String | Area code that can be used to restrict the numbers returned\n  \"pattern\": \"pattern_example\", // String | A pattern to match phone numbers. Valid characters are '*' and [0-9a-zA-Z]. The '*' character will match any single digit.\n  \"addressRequirement\": \"addressRequirement_example\" // String | This indicates whether the phone number requires to have an Address registered.\n};\n\n// Get a list of available phone numbers for SMS provisioning.\napiInstance.getRoutingSmsAvailablephonenumbers(countryCode, phoneNumberType, opts)\n  .then((data) => {\n    console.log(`getRoutingSmsAvailablephonenumbers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSmsAvailablephonenumbers\");\n    console.error(err);\n  });"
  },
  "getroutingsmsphonenumber": {
    "operationId": "getroutingsmsphonenumber",
    "functionName": "getRoutingSmsPhonenumber",
    "signature": "getRoutingSmsPhonenumber(addressId, expand)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet addressId = \"addressId_example\"; // String | Address ID\nlet opts = { \n  \"expand\": \"expand_example\" // String | Expand response with additional information\n};\n\n// Get a phone number provisioned for SMS.\napiInstance.getRoutingSmsPhonenumber(addressId, opts)\n  .then((data) => {\n    console.log(`getRoutingSmsPhonenumber success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSmsPhonenumber\");\n    console.error(err);\n  });"
  },
  "getroutingsmsphonenumbers": {
    "operationId": "getroutingsmsphonenumbers",
    "functionName": "getRoutingSmsPhonenumbers",
    "signature": "getRoutingSmsPhonenumbers(phoneNumber, phoneNumberType, phoneNumberStatus, countryCode, pageSize, pageNumber, sortBy, sortOrder, language, integrationId)",
    "parameters": [
      {
        "name": "phoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneNumberType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "phoneNumberStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "countryCode",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      },
      {
        "name": "integrationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"phoneNumber\": \"phoneNumber_example\", // String | Filter on phone number address. Allowable characters are the digits '0-9' and the wild card character '\\\\*'. If just digits are present, a contains search is done on the address pattern. For example, '317' could be matched anywhere in the address. An '\\\\*' will match multiple digits. For example, to match a specific area code within the US a pattern like '1317*' could be used.\n  \"phoneNumberType\": [\"phoneNumberType_example\"], // [String] | Filter on phone number type\n  \"phoneNumberStatus\": [\"phoneNumberStatus_example\"], // [String] | Filter on phone number status\n  \"countryCode\": [\"countryCode_example\"], // [String] | Filter on country code\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"sortBy_example\", // String | Optional field to sort results\n  \"sortOrder\": \"sortOrder_example\", // String | Sort order\n  \"language\": en-US, // String | A language tag (which is sometimes referred to as a locale identifier) to use to localize country field and sort operations\n  \"integrationId\": \"integrationId_example\" // String | Filter on the Genesys Cloud integration id to which the phone number belongs to\n};\n\n// Get a list of provisioned phone numbers.\napiInstance.getRoutingSmsPhonenumbers(opts)\n  .then((data) => {\n    console.log(`getRoutingSmsPhonenumbers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingSmsPhonenumbers\");\n    console.error(err);\n  });"
  },
  "getroutinguserutilization": {
    "operationId": "getroutinguserutilization",
    "functionName": "getRoutingUserUtilization",
    "signature": "getRoutingUserUtilization(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentMaxUtilization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Get the user's max utilization settings.  If not configured, the organization-wide default is returned.\napiInstance.getRoutingUserUtilization(userId)\n  .then((data) => {\n    console.log(`getRoutingUserUtilization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingUserUtilization\");\n    console.error(err);\n  });"
  },
  "getroutingutilization": {
    "operationId": "getroutingutilization",
    "functionName": "getRoutingUtilization",
    "signature": "getRoutingUtilization()",
    "return": "Utilization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\n// Get the organization-wide max utilization settings.\napiInstance.getRoutingUtilization()\n  .then((data) => {\n    console.log(`getRoutingUtilization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingUtilization\");\n    console.error(err);\n  });"
  },
  "getroutingutilizationtag": {
    "operationId": "getroutingutilizationtag",
    "functionName": "getRoutingUtilizationTag",
    "signature": "getRoutingUtilizationTag(tagId)",
    "parameters": [
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UtilizationTag",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet tagId = \"tagId_example\"; // String | Utilization Tag ID\n\n// Get details about this utilization tag\napiInstance.getRoutingUtilizationTag(tagId)\n  .then((data) => {\n    console.log(`getRoutingUtilizationTag success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingUtilizationTag\");\n    console.error(err);\n  });"
  },
  "getroutingutilizationtagagents": {
    "operationId": "getroutingutilizationtagagents",
    "functionName": "getRoutingUtilizationTagAgents",
    "signature": "getRoutingUtilizationTagAgents(tagId)",
    "parameters": [
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[Object]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet tagId = \"tagId_example\"; // String | Utilization Tag ID\n\n// Get list of agent ids associated with a utilization tag\napiInstance.getRoutingUtilizationTagAgents(tagId)\n  .then((data) => {\n    console.log(`getRoutingUtilizationTagAgents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingUtilizationTagAgents\");\n    console.error(err);\n  });"
  },
  "getroutingutilizationtags": {
    "operationId": "getroutingutilizationtags",
    "functionName": "getRoutingUtilizationTags",
    "signature": "getRoutingUtilizationTags(pageSize, pageNumber, sortOrder, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UtilizationTagEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ascending\", // String | Sort order by name\n  \"name\": \"name_example\" // String | Utilization tag's name (Wildcard is supported, e.g., 'tag1*')\n};\n\n// Get list of utilization tags\napiInstance.getRoutingUtilizationTags(opts)\n  .then((data) => {\n    console.log(`getRoutingUtilizationTags success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingUtilizationTags\");\n    console.error(err);\n  });"
  },
  "getroutingwrapupcode": {
    "operationId": "getroutingwrapupcode",
    "functionName": "getRoutingWrapupcode",
    "signature": "getRoutingWrapupcode(codeId)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet codeId = \"codeId_example\"; // String | Wrapup Code ID\n\n// Get details about this wrap-up code.\napiInstance.getRoutingWrapupcode(codeId)\n  .then((data) => {\n    console.log(`getRoutingWrapupcode success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingWrapupcode\");\n    console.error(err);\n  });"
  },
  "getroutingwrapupcodes": {
    "operationId": "getroutingwrapupcodes",
    "functionName": "getRoutingWrapupcodes",
    "signature": "getRoutingWrapupcodes(pageSize, pageNumber, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WrapupCodeEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ascending\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | Filter by wrapup code ID(s)\n  \"name\": \"name_example\", // String | Wrapup code's name ('Sort by' param is ignored unless this field is provided)\n  \"divisionId\": [\"divisionId_example\"] // [String] | Filter by division ID(s)\n};\n\n// Get list of wrapup codes.\napiInstance.getRoutingWrapupcodes(opts)\n  .then((data) => {\n    console.log(`getRoutingWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getRoutingWrapupcodes\");\n    console.error(err);\n  });"
  },
  "getuserqueues": {
    "operationId": "getuserqueues",
    "functionName": "getUserQueues",
    "signature": "getUserQueues(userId, pageSize, pageNumber, joined, divisionId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"joined\": true, // Boolean | Is joined to the queue\n  \"divisionId\": [\"divisionId_example\"] // [String] | Division ID(s)\n};\n\n// Get queues for user\napiInstance.getUserQueues(userId, opts)\n  .then((data) => {\n    console.log(`getUserQueues success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserQueues\");\n    console.error(err);\n  });"
  },
  "getuserroutinglanguages": {
    "operationId": "getuserroutinglanguages",
    "functionName": "getUserRoutinglanguages",
    "signature": "getUserRoutinglanguages(userId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserLanguageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ASC\" // String | Ascending or descending sort order\n};\n\n// List routing language for user\napiInstance.getUserRoutinglanguages(userId, opts)\n  .then((data) => {\n    console.log(`getUserRoutinglanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserRoutinglanguages\");\n    console.error(err);\n  });"
  },
  "getuserroutingskills": {
    "operationId": "getuserroutingskills",
    "functionName": "getUserRoutingskills",
    "signature": "getUserRoutingskills(userId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ASC\" // String | Ascending or descending sort order\n};\n\n// List routing skills for user\napiInstance.getUserRoutingskills(userId, opts)\n  .then((data) => {\n    console.log(`getUserRoutingskills success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserRoutingskills\");\n    console.error(err);\n  });"
  },
  "getuserskillgroups": {
    "operationId": "getuserskillgroups",
    "functionName": "getUserSkillgroups",
    "signature": "getUserSkillgroups(userId, pageSize, after, before)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserSkillGroupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"after\": \"after_example\", // String | The cursor that points to the next page\n  \"before\": \"before_example\" // String | The cursor that points to the previous page\n};\n\n// Get skill groups for a user\napiInstance.getUserSkillgroups(userId, opts)\n  .then((data) => {\n    console.log(`getUserSkillgroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserSkillgroups\");\n    console.error(err);\n  });"
  },
  "patchroutingconversation": {
    "operationId": "patchroutingconversation",
    "functionName": "patchRoutingConversation",
    "signature": "patchRoutingConversation(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingConversationAttributesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet body = {}; // Object | Conversation Attributes\n\n// Update attributes of an in-queue conversation\napiInstance.patchRoutingConversation(conversationId, body)\n  .then((data) => {\n    console.log(`patchRoutingConversation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingConversation\");\n    console.error(err);\n  });"
  },
  "patchroutingemaildomain": {
    "operationId": "patchroutingemaildomain",
    "functionName": "patchRoutingEmailDomain",
    "signature": "patchRoutingEmailDomain(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\nlet body = {}; // Object | Domain settings\n\n// Update domain settings\napiInstance.patchRoutingEmailDomain(domainId, body)\n  .then((data) => {\n    console.log(`patchRoutingEmailDomain success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingEmailDomain\");\n    console.error(err);\n  });"
  },
  "patchroutingemaildomainvalidate": {
    "operationId": "patchroutingemaildomainvalidate",
    "functionName": "patchRoutingEmailDomainValidate",
    "signature": "patchRoutingEmailDomainValidate(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\nlet body = {}; // Object | Domain settings\n\n// Validate domain settings\napiInstance.patchRoutingEmailDomainValidate(domainId, body)\n  .then((data) => {\n    console.log(`patchRoutingEmailDomainValidate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingEmailDomainValidate\");\n    console.error(err);\n  });"
  },
  "patchroutingpredictor": {
    "operationId": "patchroutingpredictor",
    "functionName": "patchRoutingPredictor",
    "signature": "patchRoutingPredictor(predictorId, body)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Predictor",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update single predictor.\napiInstance.patchRoutingPredictor(predictorId, opts)\n  .then((data) => {\n    console.log(`patchRoutingPredictor success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingPredictor\");\n    console.error(err);\n  });"
  },
  "patchroutingqueuemember": {
    "operationId": "patchroutingqueuemember",
    "functionName": "patchRoutingQueueMember",
    "signature": "patchRoutingQueueMember(queueId, memberId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet body = {}; // Object | Queue Member\n\n// Update the ring number OR joined status for a queue member.\napiInstance.patchRoutingQueueMember(queueId, memberId, body)\n  .then(() => {\n    console.log(\"patchRoutingQueueMember returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingQueueMember\");\n    console.error(err);\n  });"
  },
  "patchroutingqueuemembers": {
    "operationId": "patchroutingqueuemembers",
    "functionName": "patchRoutingQueueMembers",
    "signature": "patchRoutingQueueMembers(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueueMemberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\n\n// Join or unjoin a set of users for a queue\napiInstance.patchRoutingQueueMembers(queueId, body)\n  .then((data) => {\n    console.log(`patchRoutingQueueMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingQueueMembers\");\n    console.error(err);\n  });"
  },
  "patchroutingqueueuser": {
    "operationId": "patchroutingqueueuser",
    "functionName": "patchRoutingQueueUser",
    "signature": "patchRoutingQueueUser(queueId, memberId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet body = {}; // Object | Queue Member\n\n// DEPRECATED: use PATCH /routing/queues/{queueId}/members/{memberId}.  Update the ring number OR joined status for a User in a Queue.\napiInstance.patchRoutingQueueUser(queueId, memberId, body)\n  .then(() => {\n    console.log(\"patchRoutingQueueUser returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingQueueUser\");\n    console.error(err);\n  });"
  },
  "patchroutingqueueusers": {
    "operationId": "patchroutingqueueusers",
    "functionName": "patchRoutingQueueUsers",
    "signature": "patchRoutingQueueUsers(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueueMemberEntityListingV1",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\n\n// DEPRECATED: use PATCH /routing/queues/{queueId}/members.  Join or unjoin a set of users for a queue.\napiInstance.patchRoutingQueueUsers(queueId, body)\n  .then((data) => {\n    console.log(`patchRoutingQueueUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingQueueUsers\");\n    console.error(err);\n  });"
  },
  "patchroutingsettingscontactcenter": {
    "operationId": "patchroutingsettingscontactcenter",
    "functionName": "patchRoutingSettingsContactcenter",
    "signature": "patchRoutingSettingsContactcenter(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Contact Center Settings\n\n// Update Contact Center Settings\napiInstance.patchRoutingSettingsContactcenter(body)\n  .then(() => {\n    console.log(\"patchRoutingSettingsContactcenter returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingSettingsContactcenter\");\n    console.error(err);\n  });"
  },
  "patchroutingskillgroup": {
    "operationId": "patchroutingskillgroup",
    "functionName": "patchRoutingSkillgroup",
    "signature": "patchRoutingSkillgroup(skillGroupId, body)",
    "parameters": [
      {
        "name": "skillGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SkillGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillGroupId = \"skillGroupId_example\"; // String | Skill Group ID\nlet body = {}; // Object | Update skill groups\n\n// Update skill group definition\napiInstance.patchRoutingSkillgroup(skillGroupId, body)\n  .then((data) => {\n    console.log(`patchRoutingSkillgroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchRoutingSkillgroup\");\n    console.error(err);\n  });"
  },
  "patchuserqueue": {
    "operationId": "patchuserqueue",
    "functionName": "patchUserQueue",
    "signature": "patchUserQueue(queueId, userId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserQueue",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Queue Member\n\n// Join or unjoin a queue for a user\napiInstance.patchUserQueue(queueId, userId, body)\n  .then((data) => {\n    console.log(`patchUserQueue success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserQueue\");\n    console.error(err);\n  });"
  },
  "patchuserqueues": {
    "operationId": "patchuserqueues",
    "functionName": "patchUserQueues",
    "signature": "patchUserQueues(userId, body, divisionId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | User Queues\nlet opts = { \n  \"divisionId\": [\"divisionId_example\"] // [String] | Division ID(s)\n};\n\n// Join or unjoin a set of queues for a user\napiInstance.patchUserQueues(userId, body, opts)\n  .then((data) => {\n    console.log(`patchUserQueues success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserQueues\");\n    console.error(err);\n  });"
  },
  "patchuserroutinglanguage": {
    "operationId": "patchuserroutinglanguage",
    "functionName": "patchUserRoutinglanguage",
    "signature": "patchUserRoutinglanguage(userId, languageId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingLanguage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet languageId = \"languageId_example\"; // String | languageId\nlet body = {}; // Object | Language\n\n// Update routing language proficiency or state.\napiInstance.patchUserRoutinglanguage(userId, languageId, body)\n  .then((data) => {\n    console.log(`patchUserRoutinglanguage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserRoutinglanguage\");\n    console.error(err);\n  });"
  },
  "patchuserroutinglanguagesbulk": {
    "operationId": "patchuserroutinglanguagesbulk",
    "functionName": "patchUserRoutinglanguagesBulk",
    "signature": "patchUserRoutinglanguagesBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserLanguageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | Language\n\n// Add bulk routing language to user. Max limit 50 languages\napiInstance.patchUserRoutinglanguagesBulk(userId, body)\n  .then((data) => {\n    console.log(`patchUserRoutinglanguagesBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserRoutinglanguagesBulk\");\n    console.error(err);\n  });"
  },
  "patchuserroutingskillsbulk": {
    "operationId": "patchuserroutingskillsbulk",
    "functionName": "patchUserRoutingskillsBulk",
    "signature": "patchUserRoutingskillsBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | Skill\n\n// Bulk add routing skills to user\napiInstance.patchUserRoutingskillsBulk(userId, body)\n  .then((data) => {\n    console.log(`patchUserRoutingskillsBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserRoutingskillsBulk\");\n    console.error(err);\n  });"
  },
  "postroutingassessments": {
    "operationId": "postroutingassessments",
    "functionName": "postRoutingAssessments",
    "signature": "postRoutingAssessments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BenefitAssessment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a benefit assessment.\napiInstance.postRoutingAssessments(opts)\n  .then((data) => {\n    console.log(`postRoutingAssessments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingAssessments\");\n    console.error(err);\n  });"
  },
  "postroutingassessmentsjobs": {
    "operationId": "postroutingassessmentsjobs",
    "functionName": "postRoutingAssessmentsJobs",
    "signature": "postRoutingAssessmentsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BenefitAssessmentJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a benefit assessment job.\napiInstance.postRoutingAssessmentsJobs(opts)\n  .then((data) => {\n    console.log(`postRoutingAssessmentsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingAssessmentsJobs\");\n    console.error(err);\n  });"
  },
  "postroutingemaildomainroutes": {
    "operationId": "postroutingemaildomainroutes",
    "functionName": "postRoutingEmailDomainRoutes",
    "signature": "postRoutingEmailDomainRoutes(domainName, body)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet body = {}; // Object | Route\n\n// Create a route\napiInstance.postRoutingEmailDomainRoutes(domainName, body)\n  .then((data) => {\n    console.log(`postRoutingEmailDomainRoutes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingEmailDomainRoutes\");\n    console.error(err);\n  });"
  },
  "postroutingemaildomaintestconnection": {
    "operationId": "postroutingemaildomaintestconnection",
    "functionName": "postRoutingEmailDomainTestconnection",
    "signature": "postRoutingEmailDomainTestconnection(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TestMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\nlet opts = { \n  \"body\": {} // Object | TestMessage\n};\n\n// Tests the custom SMTP server integration connection set on this domain\napiInstance.postRoutingEmailDomainTestconnection(domainId, opts)\n  .then((data) => {\n    console.log(`postRoutingEmailDomainTestconnection success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingEmailDomainTestconnection\");\n    console.error(err);\n  });"
  },
  "postroutingemaildomains": {
    "operationId": "postroutingemaildomains",
    "functionName": "postRoutingEmailDomains",
    "signature": "postRoutingEmailDomains(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Domain\n\n// Create a domain\napiInstance.postRoutingEmailDomains(body)\n  .then((data) => {\n    console.log(`postRoutingEmailDomains success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingEmailDomains\");\n    console.error(err);\n  });"
  },
  "postroutingemailoutbounddomains": {
    "operationId": "postroutingemailoutbounddomains",
    "functionName": "postRoutingEmailOutboundDomains",
    "signature": "postRoutingEmailOutboundDomains(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailOutboundDomainResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Domain\n\n// Create a domain\napiInstance.postRoutingEmailOutboundDomains(body)\n  .then((data) => {\n    console.log(`postRoutingEmailOutboundDomains success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingEmailOutboundDomains\");\n    console.error(err);\n  });"
  },
  "postroutingemailoutbounddomainssimulated": {
    "operationId": "postroutingemailoutbounddomainssimulated",
    "functionName": "postRoutingEmailOutboundDomainsSimulated",
    "signature": "postRoutingEmailOutboundDomainsSimulated(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailOutboundDomainResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Domain\n\n// Create a simulated domain\napiInstance.postRoutingEmailOutboundDomainsSimulated(body)\n  .then((data) => {\n    console.log(`postRoutingEmailOutboundDomainsSimulated success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingEmailOutboundDomainsSimulated\");\n    console.error(err);\n  });"
  },
  "postroutinglanguages": {
    "operationId": "postroutinglanguages",
    "functionName": "postRoutingLanguages",
    "signature": "postRoutingLanguages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Language\n\n// Create Language\napiInstance.postRoutingLanguages(body)\n  .then((data) => {\n    console.log(`postRoutingLanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingLanguages\");\n    console.error(err);\n  });"
  },
  "postroutingpredictors": {
    "operationId": "postroutingpredictors",
    "functionName": "postRoutingPredictors",
    "signature": "postRoutingPredictors(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Predictor",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Create a predictor.\napiInstance.postRoutingPredictors(opts)\n  .then((data) => {\n    console.log(`postRoutingPredictors success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingPredictors\");\n    console.error(err);\n  });"
  },
  "postroutingqueuemembers": {
    "operationId": "postroutingqueuemembers",
    "functionName": "postRoutingQueueMembers",
    "signature": "postRoutingQueueMembers(queueId, body, _delete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "_delete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\nlet opts = { \n  \"_delete\": false // Boolean | True to delete queue members\n};\n\n// Bulk add or delete up to 100 queue members\napiInstance.postRoutingQueueMembers(queueId, body, opts)\n  .then(() => {\n    console.log(\"postRoutingQueueMembers returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingQueueMembers\");\n    console.error(err);\n  });"
  },
  "postroutingqueueusers": {
    "operationId": "postroutingqueueusers",
    "functionName": "postRoutingQueueUsers",
    "signature": "postRoutingQueueUsers(queueId, body, _delete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "_delete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\nlet opts = { \n  \"_delete\": false // Boolean | True to delete queue members\n};\n\n// DEPRECATED: use POST /routing/queues/{queueId}/members.  Bulk add or delete up to 100 queue members.\napiInstance.postRoutingQueueUsers(queueId, body, opts)\n  .then(() => {\n    console.log(\"postRoutingQueueUsers returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingQueueUsers\");\n    console.error(err);\n  });"
  },
  "postroutingqueuewrapupcodes": {
    "operationId": "postroutingqueuewrapupcodes",
    "functionName": "postRoutingQueueWrapupcodes",
    "signature": "postRoutingQueueWrapupcodes(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | List of wrapup codes\n\n// Add up to 100 wrap-up codes to a queue\napiInstance.postRoutingQueueWrapupcodes(queueId, body)\n  .then((data) => {\n    console.log(`postRoutingQueueWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingQueueWrapupcodes\");\n    console.error(err);\n  });"
  },
  "postroutingqueues": {
    "operationId": "postroutingqueues",
    "functionName": "postRoutingQueues",
    "signature": "postRoutingQueues(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Queue\n\n// Create a queue\napiInstance.postRoutingQueues(body)\n  .then((data) => {\n    console.log(`postRoutingQueues success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingQueues\");\n    console.error(err);\n  });"
  },
  "postroutingskillgroupmembersdivisions": {
    "operationId": "postroutingskillgroupmembersdivisions",
    "functionName": "postRoutingSkillgroupMembersDivisions",
    "signature": "postRoutingSkillgroupMembersDivisions(skillGroupId, body)",
    "parameters": [
      {
        "name": "skillGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet skillGroupId = \"skillGroupId_example\"; // String | Skill Group ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Add or remove member divisions for this skill group.\napiInstance.postRoutingSkillgroupMembersDivisions(skillGroupId, opts)\n  .then(() => {\n    console.log(\"postRoutingSkillgroupMembersDivisions returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingSkillgroupMembersDivisions\");\n    console.error(err);\n  });"
  },
  "postroutingskillgroups": {
    "operationId": "postroutingskillgroups",
    "functionName": "postRoutingSkillgroups",
    "signature": "postRoutingSkillgroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SkillGroupWithMemberDivisions",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Create skill group\n\n// Create a skill group\napiInstance.postRoutingSkillgroups(body)\n  .then((data) => {\n    console.log(`postRoutingSkillgroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingSkillgroups\");\n    console.error(err);\n  });"
  },
  "postroutingskills": {
    "operationId": "postroutingskills",
    "functionName": "postRoutingSkills",
    "signature": "postRoutingSkills(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingSkill",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Skill\n\n// Create Skill\napiInstance.postRoutingSkills(body)\n  .then((data) => {\n    console.log(`postRoutingSkills success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingSkills\");\n    console.error(err);\n  });"
  },
  "postroutingsmsaddresses": {
    "operationId": "postroutingsmsaddresses",
    "functionName": "postRoutingSmsAddresses",
    "signature": "postRoutingSmsAddresses(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SmsAddress",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | SmsAddress\n\n// Provision an Address for SMS\napiInstance.postRoutingSmsAddresses(body)\n  .then((data) => {\n    console.log(`postRoutingSmsAddresses success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingSmsAddresses\");\n    console.error(err);\n  });"
  },
  "postroutingsmsphonenumbers": {
    "operationId": "postroutingsmsphonenumbers",
    "functionName": "postRoutingSmsPhonenumbers",
    "signature": "postRoutingSmsPhonenumbers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | SmsPhoneNumber\n\n// Provision a phone number for SMS\napiInstance.postRoutingSmsPhonenumbers(body)\n  .then((data) => {\n    console.log(`postRoutingSmsPhonenumbers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingSmsPhonenumbers\");\n    console.error(err);\n  });"
  },
  "postroutingsmsphonenumbersimport": {
    "operationId": "postroutingsmsphonenumbersimport",
    "functionName": "postRoutingSmsPhonenumbersImport",
    "signature": "postRoutingSmsPhonenumbersImport(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | SmsPhoneNumber\n\n// Imports a phone number for SMS\napiInstance.postRoutingSmsPhonenumbersImport(body)\n  .then((data) => {\n    console.log(`postRoutingSmsPhonenumbersImport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingSmsPhonenumbersImport\");\n    console.error(err);\n  });"
  },
  "postroutingutilizationtags": {
    "operationId": "postroutingutilizationtags",
    "functionName": "postRoutingUtilizationTags",
    "signature": "postRoutingUtilizationTags(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UtilizationTag",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | UtilizationTag\n\n// Create an utilization tag\napiInstance.postRoutingUtilizationTags(body)\n  .then((data) => {\n    console.log(`postRoutingUtilizationTags success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingUtilizationTags\");\n    console.error(err);\n  });"
  },
  "postroutingwrapupcodes": {
    "operationId": "postroutingwrapupcodes",
    "functionName": "postRoutingWrapupcodes",
    "signature": "postRoutingWrapupcodes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | WrapupCode\n\n// Create a wrap-up code\napiInstance.postRoutingWrapupcodes(body)\n  .then((data) => {\n    console.log(`postRoutingWrapupcodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postRoutingWrapupcodes\");\n    console.error(err);\n  });"
  },
  "postuserroutinglanguages": {
    "operationId": "postuserroutinglanguages",
    "functionName": "postUserRoutinglanguages",
    "signature": "postUserRoutinglanguages(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingLanguage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Language\n\n// Add routing language to user\napiInstance.postUserRoutinglanguages(userId, body)\n  .then((data) => {\n    console.log(`postUserRoutinglanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUserRoutinglanguages\");\n    console.error(err);\n  });"
  },
  "postuserroutingskills": {
    "operationId": "postuserroutingskills",
    "functionName": "postUserRoutingskills",
    "signature": "postUserRoutingskills(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingSkill",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Skill\n\n// Add routing skill to user\napiInstance.postUserRoutingskills(userId, body)\n  .then((data) => {\n    console.log(`postUserRoutingskills success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUserRoutingskills\");\n    console.error(err);\n  });"
  },
  "putroutingemaildomainroute": {
    "operationId": "putroutingemaildomainroute",
    "functionName": "putRoutingEmailDomainRoute",
    "signature": "putRoutingEmailDomainRoute(domainName, routeId, body)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet routeId = \"routeId_example\"; // String | route ID\nlet body = {}; // Object | Route\n\n// Update a route\napiInstance.putRoutingEmailDomainRoute(domainName, routeId, body)\n  .then((data) => {\n    console.log(`putRoutingEmailDomainRoute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingEmailDomainRoute\");\n    console.error(err);\n  });"
  },
  "putroutingemailoutbounddomainactivation": {
    "operationId": "putroutingemailoutbounddomainactivation",
    "functionName": "putRoutingEmailOutboundDomainActivation",
    "signature": "putRoutingEmailOutboundDomainActivation(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailOutboundDomainResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n// Request an activation status (cname + dkim) update of an outbound domain\napiInstance.putRoutingEmailOutboundDomainActivation(domainId)\n  .then((data) => {\n    console.log(`putRoutingEmailOutboundDomainActivation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingEmailOutboundDomainActivation\");\n    console.error(err);\n  });"
  },
  "putroutingmessagerecipient": {
    "operationId": "putroutingmessagerecipient",
    "functionName": "putRoutingMessageRecipient",
    "signature": "putRoutingMessageRecipient(recipientId, body)",
    "parameters": [
      {
        "name": "recipientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Recipient",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet recipientId = \"recipientId_example\"; // String | Recipient ID\nlet body = {}; // Object | Recipient\n\n// Update a recipient\napiInstance.putRoutingMessageRecipient(recipientId, body)\n  .then((data) => {\n    console.log(`putRoutingMessageRecipient success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingMessageRecipient\");\n    console.error(err);\n  });"
  },
  "putroutingqueue": {
    "operationId": "putroutingqueue",
    "functionName": "putRoutingQueue",
    "signature": "putRoutingQueue(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = {}; // Object | Queue\n\n// Update a queue\napiInstance.putRoutingQueue(queueId, body)\n  .then((data) => {\n    console.log(`putRoutingQueue success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingQueue\");\n    console.error(err);\n  });"
  },
  "putroutingsettings": {
    "operationId": "putroutingsettings",
    "functionName": "putRoutingSettings",
    "signature": "putRoutingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Organization Settings\n\n// Update an organization's routing settings\napiInstance.putRoutingSettings(body)\n  .then((data) => {\n    console.log(`putRoutingSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingSettings\");\n    console.error(err);\n  });"
  },
  "putroutingsettingstranscription": {
    "operationId": "putroutingsettingstranscription",
    "functionName": "putRoutingSettingsTranscription",
    "signature": "putRoutingSettingsTranscription(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TranscriptionSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | Organization Settings\n\n// Update Transcription Settings\napiInstance.putRoutingSettingsTranscription(body)\n  .then((data) => {\n    console.log(`putRoutingSettingsTranscription success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingSettingsTranscription\");\n    console.error(err);\n  });"
  },
  "putroutingsmsphonenumber": {
    "operationId": "putroutingsmsphonenumber",
    "functionName": "putRoutingSmsPhonenumber",
    "signature": "putRoutingSmsPhonenumber(addressId, body)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet addressId = \"addressId_example\"; // String | Address ID\nlet body = {}; // Object | SmsPhoneNumber\n\n// Update a phone number provisioned for SMS.\napiInstance.putRoutingSmsPhonenumber(addressId, body)\n  .then((data) => {\n    console.log(`putRoutingSmsPhonenumber success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingSmsPhonenumber\");\n    console.error(err);\n  });"
  },
  "putroutinguserutilization": {
    "operationId": "putroutinguserutilization",
    "functionName": "putRoutingUserUtilization",
    "signature": "putRoutingUserUtilization(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AgentMaxUtilization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | utilization\n\n// Update the user's max utilization settings.  Include only those media types requiring custom configuration.\napiInstance.putRoutingUserUtilization(userId, body)\n  .then((data) => {\n    console.log(`putRoutingUserUtilization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingUserUtilization\");\n    console.error(err);\n  });"
  },
  "putroutingutilization": {
    "operationId": "putroutingutilization",
    "functionName": "putRoutingUtilization",
    "signature": "putRoutingUtilization(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Utilization",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet body = {}; // Object | utilization\n\n// Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.\napiInstance.putRoutingUtilization(body)\n  .then((data) => {\n    console.log(`putRoutingUtilization success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingUtilization\");\n    console.error(err);\n  });"
  },
  "putroutingwrapupcode": {
    "operationId": "putroutingwrapupcode",
    "functionName": "putRoutingWrapupcode",
    "signature": "putRoutingWrapupcode(codeId, body)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.RoutingApi();\n\nlet codeId = \"codeId_example\"; // String | Wrapup Code ID\nlet body = {}; // Object | WrapupCode\n\n// Update wrap-up code\napiInstance.putRoutingWrapupcode(codeId, body)\n  .then((data) => {\n    console.log(`putRoutingWrapupcode success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putRoutingWrapupcode\");\n    console.error(err);\n  });"
  },
  "putuserroutingskill": {
    "operationId": "putuserroutingskill",
    "functionName": "putUserRoutingskill",
    "signature": "putUserRoutingskill(userId, skillId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingSkill",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet skillId = \"skillId_example\"; // String | skillId\nlet body = {}; // Object | Skill\n\n// Update routing skill proficiency or state.\napiInstance.putUserRoutingskill(userId, skillId, body)\n  .then((data) => {\n    console.log(`putUserRoutingskill success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserRoutingskill\");\n    console.error(err);\n  });"
  },
  "putuserroutingskillsbulk": {
    "operationId": "putuserroutingskillsbulk",
    "functionName": "putUserRoutingskillsBulk",
    "signature": "putUserRoutingskillsBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | Skill\n\n// Replace all routing skills assigned to a user\napiInstance.putUserRoutingskillsBulk(userId, body)\n  .then((data) => {\n    console.log(`putUserRoutingskillsBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserRoutingskillsBulk\");\n    console.error(err);\n  });"
  },
  "deletescimuser": {
    "operationId": "deletescimuser",
    "functionName": "deleteScimUser",
    "signature": "deleteScimUser(userId, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Delete a user\napiInstance.deleteScimUser(userId, opts)\n  .then((data) => {\n    console.log(`deleteScimUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteScimUser\");\n    console.error(err);\n  });"
  },
  "deletescimv2user": {
    "operationId": "deletescimv2user",
    "functionName": "deleteScimV2User",
    "signature": "deleteScimV2User(userId, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Delete a user\napiInstance.deleteScimV2User(userId, opts)\n  .then((data) => {\n    console.log(`deleteScimV2User success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteScimV2User\");\n    console.error(err);\n  });"
  },
  "getscimgroup": {
    "operationId": "getscimgroup",
    "functionName": "getScimGroup",
    "signature": "getScimGroup(groupId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/groups.\nlet opts = { \n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns id, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n  \"ifNoneMatch\": \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: 42. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n// Get a group\napiInstance.getScimGroup(groupId, opts)\n  .then((data) => {\n    console.log(`getScimGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimGroup\");\n    console.error(err);\n  });"
  },
  "getscimgroups": {
    "operationId": "getscimgroups",
    "functionName": "getScimGroups",
    "signature": "getScimGroups(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimGroupListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet opts = { \n  \"startIndex\": 1, // Number | The 1-based index of the first query result.\n  \"count\": 25, // Number | The requested number of items per page. A value of 0 returns totalResults. A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the excludedAttributes or attributes query parameters to exclude or only include secondary lookup values such as externalId,  roles, urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages, or urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills.\n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns id, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n  \"filter\": displayName eq groupName // String | Filters results. If nothing is specified, returns all groups. Examples of valid values: id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3, displayname eq Sales.\n};\n\n// Get a list of groups\napiInstance.getScimGroups(opts)\n  .then((data) => {\n    console.log(`getScimGroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimGroups\");\n    console.error(err);\n  });"
  },
  "getscimresourcetype": {
    "operationId": "getscimresourcetype",
    "functionName": "getScimResourcetype",
    "signature": "getScimResourcetype(resourceType)",
    "parameters": [
      {
        "name": "resourceType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimConfigResourceType",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet resourceType = \"resourceType_example\"; // String | The type of resource. Returned with GET /api/v2/scim/resourcetypes.\n\n// Get a resource type\napiInstance.getScimResourcetype(resourceType)\n  .then((data) => {\n    console.log(`getScimResourcetype success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimResourcetype\");\n    console.error(err);\n  });"
  },
  "getscimresourcetypes": {
    "operationId": "getscimresourcetypes",
    "functionName": "getScimResourcetypes",
    "signature": "getScimResourcetypes()",
    "return": "ScimConfigResourceTypesListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\n// Get a list of resource types\napiInstance.getScimResourcetypes()\n  .then((data) => {\n    console.log(`getScimResourcetypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimResourcetypes\");\n    console.error(err);\n  });"
  },
  "getscimschema": {
    "operationId": "getscimschema",
    "functionName": "getScimSchema",
    "signature": "getScimSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimV2SchemaDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet schemaId = \"schemaId_example\"; // String | The ID of a schema. Returned with GET /api/v2/scim/schemas.\n\n// Get a SCIM schema\napiInstance.getScimSchema(schemaId)\n  .then((data) => {\n    console.log(`getScimSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimSchema\");\n    console.error(err);\n  });"
  },
  "getscimschemas": {
    "operationId": "getscimschemas",
    "functionName": "getScimSchemas",
    "signature": "getScimSchemas(filter)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2SchemaListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet opts = { \n  \"filter\": displayName eq groupName // String | Filtered results are invalid and return 403 Unauthorized.\n};\n\n// Get a list of SCIM schemas\napiInstance.getScimSchemas(opts)\n  .then((data) => {\n    console.log(`getScimSchemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimSchemas\");\n    console.error(err);\n  });"
  },
  "getscimserviceproviderconfig": {
    "operationId": "getscimserviceproviderconfig",
    "functionName": "getScimServiceproviderconfig",
    "signature": "getScimServiceproviderconfig(ifNoneMatch)",
    "parameters": [
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimServiceProviderConfig",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet opts = { \n  \"ifNoneMatch\": \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/serviceproviderconfig. Example: 42. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. \n};\n\n// Get a service provider's configuration\napiInstance.getScimServiceproviderconfig(opts)\n  .then((data) => {\n    console.log(`getScimServiceproviderconfig success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimServiceproviderconfig\");\n    console.error(err);\n  });"
  },
  "getscimuser": {
    "operationId": "getscimuser",
    "functionName": "getScimUser",
    "signature": "getScimUser(userId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet opts = { \n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, userName, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns the id, userName, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n  \"ifNoneMatch\": \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n// Get a user\napiInstance.getScimUser(userId, opts)\n  .then((data) => {\n    console.log(`getScimUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimUser\");\n    console.error(err);\n  });"
  },
  "getscimusers": {
    "operationId": "getscimusers",
    "functionName": "getScimUsers",
    "signature": "getScimUsers(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimUserListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet opts = { \n  \"startIndex\": 1, // Number | The 1-based index of the first query result.\n  \"count\": 25, // Number | The requested number of items per page. A value of 0 returns totalResults. A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the excludedAttributes or attributes query parameters to exclude or only include secondary lookup values such as externalId,  roles, urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages, or urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills.\n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, userName, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns the id, userName, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n  \"filter\": \"filter_example\" // String | Filters results. If nothing is specified, returns all active users. Examples of valid values: id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9, userName eq search@sample.org, manager eq 16e10e2f-1136-43fe-bb84-eac073168a49, email eq search@sample.org, division eq divisionName, externalId eq 167844, active eq false, employeeNumber eq 9876543210.\n};\n\n// Get a list of users\napiInstance.getScimUsers(opts)\n  .then((data) => {\n    console.log(`getScimUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimUsers\");\n    console.error(err);\n  });"
  },
  "getscimv2group": {
    "operationId": "getscimv2group",
    "functionName": "getScimV2Group",
    "signature": "getScimV2Group(groupId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet opts = { \n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns id, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n  \"ifNoneMatch\": \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: 42. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n// Get a group\napiInstance.getScimV2Group(groupId, opts)\n  .then((data) => {\n    console.log(`getScimV2Group success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Group\");\n    console.error(err);\n  });"
  },
  "getscimv2groups": {
    "operationId": "getscimv2groups",
    "functionName": "getScimV2Groups",
    "signature": "getScimV2Groups(filter, startIndex, count, attributes, excludedAttributes)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScimGroupListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet filter = displayName eq groupName; // String | Filters results. If nothing is specified, returns all groups. Examples of valid values: id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3, displayname eq Sales.\nlet opts = { \n  \"startIndex\": 1, // Number | The 1-based index of the first query result.\n  \"count\": 25, // Number | The requested number of items per page. A value of 0 returns totalResults. A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the excludedAttributes or attributes query parameters to exclude or only include secondary lookup values such as externalId,  roles, urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages, or urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills.\n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"] // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns id, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n};\n\n// Get a list of groups\napiInstance.getScimV2Groups(filter, opts)\n  .then((data) => {\n    console.log(`getScimV2Groups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Groups\");\n    console.error(err);\n  });"
  },
  "getscimv2resourcetype": {
    "operationId": "getscimv2resourcetype",
    "functionName": "getScimV2Resourcetype",
    "signature": "getScimV2Resourcetype(resourceType)",
    "parameters": [
      {
        "name": "resourceType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimConfigResourceType",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet resourceType = \"resourceType_example\"; // String | The type of resource. Returned with GET /api/v2/scim/v2/resourcetypes.\n\n// Get a resource type\napiInstance.getScimV2Resourcetype(resourceType)\n  .then((data) => {\n    console.log(`getScimV2Resourcetype success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Resourcetype\");\n    console.error(err);\n  });"
  },
  "getscimv2resourcetypes": {
    "operationId": "getscimv2resourcetypes",
    "functionName": "getScimV2Resourcetypes",
    "signature": "getScimV2Resourcetypes()",
    "return": "ScimConfigResourceTypesListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\n// Get a list of resource types\napiInstance.getScimV2Resourcetypes()\n  .then((data) => {\n    console.log(`getScimV2Resourcetypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Resourcetypes\");\n    console.error(err);\n  });"
  },
  "getscimv2schema": {
    "operationId": "getscimv2schema",
    "functionName": "getScimV2Schema",
    "signature": "getScimV2Schema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimV2SchemaDefinition",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet schemaId = \"schemaId_example\"; // String | The ID of a schema. Returned with GET /api/v2/scim/v2/schemas.\n\n// Get a SCIM schema\napiInstance.getScimV2Schema(schemaId)\n  .then((data) => {\n    console.log(`getScimV2Schema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Schema\");\n    console.error(err);\n  });"
  },
  "getscimv2schemas": {
    "operationId": "getscimv2schemas",
    "functionName": "getScimV2Schemas",
    "signature": "getScimV2Schemas(filter)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2SchemaListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet opts = { \n  \"filter\": displayName eq groupName // String | Filtered results are invalid and return 403 Unauthorized.\n};\n\n// Get a list of SCIM schemas\napiInstance.getScimV2Schemas(opts)\n  .then((data) => {\n    console.log(`getScimV2Schemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Schemas\");\n    console.error(err);\n  });"
  },
  "getscimv2serviceproviderconfig": {
    "operationId": "getscimv2serviceproviderconfig",
    "functionName": "getScimV2Serviceproviderconfig",
    "signature": "getScimV2Serviceproviderconfig(ifNoneMatch)",
    "parameters": [
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimServiceProviderConfig",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet opts = { \n  \"ifNoneMatch\": \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/serviceproviderconfig. Example: 42. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. \n};\n\n// Get a service provider's configuration\napiInstance.getScimV2Serviceproviderconfig(opts)\n  .then((data) => {\n    console.log(`getScimV2Serviceproviderconfig success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Serviceproviderconfig\");\n    console.error(err);\n  });"
  },
  "getscimv2user": {
    "operationId": "getscimv2user",
    "functionName": "getScimV2User",
    "signature": "getScimV2User(userId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet opts = { \n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, userName, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns the id, userName, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n  \"ifNoneMatch\": \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n// Get a user\napiInstance.getScimV2User(userId, opts)\n  .then((data) => {\n    console.log(`getScimV2User success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2User\");\n    console.error(err);\n  });"
  },
  "getscimv2users": {
    "operationId": "getscimv2users",
    "functionName": "getScimV2Users",
    "signature": "getScimV2Users(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimUserListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet opts = { \n  \"startIndex\": 1, // Number | The 1-based index of the first query result.\n  \"count\": 25, // Number | The requested number of items per page. A value of 0 returns totalResults. A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the excludedAttributes or attributes query parameters to exclude or only include secondary lookup values such as externalId,  roles, urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages, or urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills.\n  \"attributes\": [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the id, userName, active, and meta attributes. Use attributes to avoid expensive secondary calls for the default attributes.\n  \"excludedAttributes\": [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus excludedAttributes. Always returns the id, userName, active, and meta attributes. Use excludedAttributes to avoid expensive secondary calls for the default attributes.\n  \"filter\": \"filter_example\" // String | Filters results. If nothing is specified, returns all active users. Examples of valid values: id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9, userName eq search@sample.org, manager eq 16e10e2f-1136-43fe-bb84-eac073168a49, email eq search@sample.org, division eq divisionName, externalId eq 167844, active eq false, employeeNumber eq 9876543210.\n};\n\n// Get a list of users\napiInstance.getScimV2Users(opts)\n  .then((data) => {\n    console.log(`getScimV2Users success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScimV2Users\");\n    console.error(err);\n  });"
  },
  "patchscimgroup": {
    "operationId": "patchscimgroup",
    "functionName": "patchScimGroup",
    "signature": "patchScimGroup(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/groups.\nlet body = {}; // Object | The information used to modify a group.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Modify a group\napiInstance.patchScimGroup(groupId, body, opts)\n  .then((data) => {\n    console.log(`patchScimGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchScimGroup\");\n    console.error(err);\n  });"
  },
  "patchscimuser": {
    "operationId": "patchscimuser",
    "functionName": "patchScimUser",
    "signature": "patchScimUser(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet body = {}; // Object | The information used to modify a user.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Modify a user\napiInstance.patchScimUser(userId, body, opts)\n  .then((data) => {\n    console.log(`patchScimUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchScimUser\");\n    console.error(err);\n  });"
  },
  "patchscimv2group": {
    "operationId": "patchscimv2group",
    "functionName": "patchScimV2Group",
    "signature": "patchScimV2Group(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet body = {}; // Object | The information used to modify a group.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Modify a group\napiInstance.patchScimV2Group(groupId, body, opts)\n  .then((data) => {\n    console.log(`patchScimV2Group success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchScimV2Group\");\n    console.error(err);\n  });"
  },
  "patchscimv2user": {
    "operationId": "patchscimv2user",
    "functionName": "patchScimV2User",
    "signature": "patchScimV2User(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet body = {}; // Object | The information used to modify a user.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Modify a user\napiInstance.patchScimV2User(userId, body, opts)\n  .then((data) => {\n    console.log(`patchScimV2User success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchScimV2User\");\n    console.error(err);\n  });"
  },
  "postscimusers": {
    "operationId": "postscimusers",
    "functionName": "postScimUsers",
    "signature": "postScimUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet body = {}; // Object | The information used to create a user.\n\n// Create a user\napiInstance.postScimUsers(body)\n  .then((data) => {\n    console.log(`postScimUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postScimUsers\");\n    console.error(err);\n  });"
  },
  "postscimv2users": {
    "operationId": "postscimv2users",
    "functionName": "postScimV2Users",
    "signature": "postScimV2Users(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet body = {}; // Object | The information used to create a user.\n\n// Create a user\napiInstance.postScimV2Users(body)\n  .then((data) => {\n    console.log(`postScimV2Users success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postScimV2Users\");\n    console.error(err);\n  });"
  },
  "putscimgroup": {
    "operationId": "putscimgroup",
    "functionName": "putScimGroup",
    "signature": "putScimGroup(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/groups.\nlet body = {}; // Object | The information used to replace a group.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Replace a group\napiInstance.putScimGroup(groupId, body, opts)\n  .then((data) => {\n    console.log(`putScimGroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putScimGroup\");\n    console.error(err);\n  });"
  },
  "putscimuser": {
    "operationId": "putscimuser",
    "functionName": "putScimUser",
    "signature": "putScimUser(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet body = {}; // Object | The information used to replace a user.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Replace a user\napiInstance.putScimUser(userId, body, opts)\n  .then((data) => {\n    console.log(`putScimUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putScimUser\");\n    console.error(err);\n  });"
  },
  "putscimv2group": {
    "operationId": "putscimv2group",
    "functionName": "putScimV2Group",
    "signature": "putScimV2Group(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet body = {}; // Object | The information used to replace a group.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Replace a group\napiInstance.putScimV2Group(groupId, body, opts)\n  .then((data) => {\n    console.log(`putScimV2Group success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putScimV2Group\");\n    console.error(err);\n  });"
  },
  "putscimv2user": {
    "operationId": "putscimv2user",
    "functionName": "putScimV2User",
    "signature": "putScimV2User(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SCIMApi();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet body = {}; // Object | The information used to replace a user.\nlet opts = { \n  \"ifMatch\": \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: 42. If the ETag is different from the version on the server, returns 400 with a scimType of invalidVers.\n};\n\n// Replace a user\napiInstance.putScimV2User(userId, body, opts)\n  .then((data) => {\n    console.log(`putScimV2User success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putScimV2User\");\n    console.error(err);\n  });"
  },
  "getscript": {
    "operationId": "getscript",
    "functionName": "getScript",
    "signature": "getScript(scriptId)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Script",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\n\n// Get a script\napiInstance.getScript(scriptId)\n  .then((data) => {\n    console.log(`getScript success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScript\");\n    console.error(err);\n  });"
  },
  "getscriptpage": {
    "operationId": "getscriptpage",
    "functionName": "getScriptPage",
    "signature": "getScriptPage(scriptId, pageId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Page",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet pageId = \"pageId_example\"; // String | Page ID\nlet opts = { \n  \"scriptDataVersion\": \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n// Get a page\napiInstance.getScriptPage(scriptId, pageId, opts)\n  .then((data) => {\n    console.log(`getScriptPage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptPage\");\n    console.error(err);\n  });"
  },
  "getscriptpages": {
    "operationId": "getscriptpages",
    "functionName": "getScriptPages",
    "signature": "getScriptPages(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[Page]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  \"scriptDataVersion\": \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n// Get the list of pages\napiInstance.getScriptPages(scriptId, opts)\n  .then((data) => {\n    console.log(`getScriptPages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptPages\");\n    console.error(err);\n  });"
  },
  "getscripts": {
    "operationId": "getscripts",
    "functionName": "getScripts",
    "signature": "getScripts(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand\n  \"name\": \"name_example\", // String | Name filter\n  \"feature\": \"feature_example\", // String | Feature filter\n  \"flowId\": \"flowId_example\", // String | Secure flow id filter\n  \"sortBy\": \"sortBy_example\", // String | SortBy\n  \"sortOrder\": \"sortOrder_example\", // String | SortOrder\n  \"scriptDataVersion\": \"scriptDataVersion_example\", // String | Advanced usage - controls the data version of the script\n  \"divisionIds\": \"divisionIds_example\" // String | Filters scripts to requested divisionIds\n};\n\n// Get the list of scripts\napiInstance.getScripts(opts)\n  .then((data) => {\n    console.log(`getScripts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScripts\");\n    console.error(err);\n  });"
  },
  "getscriptsdivisionviews": {
    "operationId": "getscriptsdivisionviews",
    "functionName": "getScriptsDivisionviews",
    "signature": "getScriptsDivisionviews(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand\n  \"name\": \"name_example\", // String | Name filter\n  \"feature\": \"feature_example\", // String | Feature filter\n  \"flowId\": \"flowId_example\", // String | Secure flow id filter\n  \"sortBy\": \"sortBy_example\", // String | SortBy\n  \"sortOrder\": \"sortOrder_example\", // String | SortOrder\n  \"scriptDataVersion\": \"scriptDataVersion_example\", // String | Advanced usage - controls the data version of the script\n  \"divisionIds\": \"divisionIds_example\" // String | Filters scripts to requested divisionIds\n};\n\n// Get the metadata for a list of scripts\napiInstance.getScriptsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getScriptsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getscriptspublished": {
    "operationId": "getscriptspublished",
    "functionName": "getScriptsPublished",
    "signature": "getScriptsPublished(pageSize, pageNumber, expand, name, feature, flowId, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand\n  \"name\": \"name_example\", // String | Name filter\n  \"feature\": \"feature_example\", // String | Feature filter\n  \"flowId\": \"flowId_example\", // String | Secure flow id filter\n  \"scriptDataVersion\": \"scriptDataVersion_example\", // String | Advanced usage - controls the data version of the script\n  \"divisionIds\": \"divisionIds_example\" // String | Filters scripts to requested divisionIds\n};\n\n// Get the published scripts.\napiInstance.getScriptsPublished(opts)\n  .then((data) => {\n    console.log(`getScriptsPublished success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsPublished\");\n    console.error(err);\n  });"
  },
  "getscriptspublisheddivisionviews": {
    "operationId": "getscriptspublisheddivisionviews",
    "functionName": "getScriptsPublishedDivisionviews",
    "signature": "getScriptsPublishedDivisionviews(pageSize, pageNumber, expand, name, feature, flowId, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": \"expand_example\", // String | Expand\n  \"name\": \"name_example\", // String | Name filter\n  \"feature\": \"feature_example\", // String | Feature filter\n  \"flowId\": \"flowId_example\", // String | Secure flow id filter\n  \"scriptDataVersion\": \"scriptDataVersion_example\", // String | Advanced usage - controls the data version of the script\n  \"divisionIds\": \"divisionIds_example\" // String | Filters scripts to requested divisionIds\n};\n\n// Get the published scripts metadata.\napiInstance.getScriptsPublishedDivisionviews(opts)\n  .then((data) => {\n    console.log(`getScriptsPublishedDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsPublishedDivisionviews\");\n    console.error(err);\n  });"
  },
  "getscriptspublishedscriptid": {
    "operationId": "getscriptspublishedscriptid",
    "functionName": "getScriptsPublishedScriptId",
    "signature": "getScriptsPublishedScriptId(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Script",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  \"scriptDataVersion\": \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n// Get the published script.\napiInstance.getScriptsPublishedScriptId(scriptId, opts)\n  .then((data) => {\n    console.log(`getScriptsPublishedScriptId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsPublishedScriptId\");\n    console.error(err);\n  });"
  },
  "getscriptspublishedscriptidpage": {
    "operationId": "getscriptspublishedscriptidpage",
    "functionName": "getScriptsPublishedScriptIdPage",
    "signature": "getScriptsPublishedScriptIdPage(scriptId, pageId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Page",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet pageId = \"pageId_example\"; // String | Page ID\nlet opts = { \n  \"scriptDataVersion\": \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n// Get the published page.\napiInstance.getScriptsPublishedScriptIdPage(scriptId, pageId, opts)\n  .then((data) => {\n    console.log(`getScriptsPublishedScriptIdPage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsPublishedScriptIdPage\");\n    console.error(err);\n  });"
  },
  "getscriptspublishedscriptidpages": {
    "operationId": "getscriptspublishedscriptidpages",
    "functionName": "getScriptsPublishedScriptIdPages",
    "signature": "getScriptsPublishedScriptIdPages(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[Page]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  \"scriptDataVersion\": \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n// Get the list of published pages\napiInstance.getScriptsPublishedScriptIdPages(scriptId, opts)\n  .then((data) => {\n    console.log(`getScriptsPublishedScriptIdPages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsPublishedScriptIdPages\");\n    console.error(err);\n  });"
  },
  "getscriptspublishedscriptidvariables": {
    "operationId": "getscriptspublishedscriptidvariables",
    "functionName": "getScriptsPublishedScriptIdVariables",
    "signature": "getScriptsPublishedScriptIdVariables(scriptId, input, output, type, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "input",
        "type": "String",
        "required": "false"
      },
      {
        "name": "output",
        "type": "String",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  \"input\": \"input_example\", // String | input\n  \"output\": \"output_example\", // String | output\n  \"type\": \"type_example\", // String | type\n  \"scriptDataVersion\": \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n// Get the published variables\napiInstance.getScriptsPublishedScriptIdVariables(scriptId, opts)\n  .then((data) => {\n    console.log(`getScriptsPublishedScriptIdVariables success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsPublishedScriptIdVariables\");\n    console.error(err);\n  });"
  },
  "getscriptsuploadstatus": {
    "operationId": "getscriptsuploadstatus",
    "functionName": "getScriptsUploadStatus",
    "signature": "getScriptsUploadStatus(uploadId, longPoll)",
    "parameters": [
      {
        "name": "uploadId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "longPoll",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ImportScriptStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet uploadId = \"uploadId_example\"; // String | Upload ID\nlet opts = { \n  \"longPoll\": false // Boolean | Enable longPolling endpoint\n};\n\n// Get the upload status of an imported script\napiInstance.getScriptsUploadStatus(uploadId, opts)\n  .then((data) => {\n    console.log(`getScriptsUploadStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getScriptsUploadStatus\");\n    console.error(err);\n  });"
  },
  "postscriptexport": {
    "operationId": "postscriptexport",
    "functionName": "postScriptExport",
    "signature": "postScriptExport(scriptId, body)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ExportScriptResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Export a script via download service.\napiInstance.postScriptExport(scriptId, opts)\n  .then((data) => {\n    console.log(`postScriptExport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postScriptExport\");\n    console.error(err);\n  });"
  },
  "postscriptspublished": {
    "operationId": "postscriptspublished",
    "functionName": "postScriptsPublished",
    "signature": "postScriptsPublished(scriptDataVersion, body)",
    "parameters": [
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Script",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.ScriptsApi();\n\nlet opts = { \n  \"scriptDataVersion\": \"scriptDataVersion_example\", // String | Advanced usage - controls the data version of the script\n  \"body\": {} // Object | body\n};\n\n// Publish a script.\napiInstance.postScriptsPublished(opts)\n  .then((data) => {\n    console.log(`postScriptsPublished success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postScriptsPublished\");\n    console.error(err);\n  });"
  },
  "getdocumentationgknsearch": {
    "operationId": "getdocumentationgknsearch",
    "functionName": "getDocumentationGknSearch",
    "signature": "getDocumentationGknSearch(q64)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GKNDocumentationSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet q64 = \"q64_example\"; // String | q64\n\n// Search gkn documentation using the q64 value returned from a previous search\napiInstance.getDocumentationGknSearch(q64)\n  .then((data) => {\n    console.log(`getDocumentationGknSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getDocumentationGknSearch\");\n    console.error(err);\n  });"
  },
  "getdocumentationsearch": {
    "operationId": "getdocumentationsearch",
    "functionName": "getDocumentationSearch",
    "signature": "getDocumentationSearch(q64)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DocumentationSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet q64 = \"q64_example\"; // String | q64\n\n// Search documentation using the q64 value returned from a previous search\napiInstance.getDocumentationSearch(q64)\n  .then((data) => {\n    console.log(`getDocumentationSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getDocumentationSearch\");\n    console.error(err);\n  });"
  },
  "getsearch": {
    "operationId": "getsearch",
    "functionName": "getSearch",
    "signature": "getSearch(q64, expand, profile)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SuggestApi();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand\n  \"profile\": true // Boolean | profile\n};\n\n// Search using the q64 value returned from a previous search.\napiInstance.getSearch(q64, opts)\n  .then((data) => {\n    console.log(`getSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSearch\");\n    console.error(err);\n  });"
  },
  "getsearchsuggest": {
    "operationId": "getsearchsuggest",
    "functionName": "getSearchSuggest",
    "signature": "getSearchSuggest(q64, expand, profile)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SuggestApi();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand\n  \"profile\": true // Boolean | profile\n};\n\n// Suggest resources using the q64 value returned from a previous suggest query.\napiInstance.getSearchSuggest(q64, opts)\n  .then((data) => {\n    console.log(`getSearchSuggest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSearchSuggest\");\n    console.error(err);\n  });"
  },
  "getuserssearch": {
    "operationId": "getuserssearch",
    "functionName": "getUsersSearch",
    "signature": "getUsersSearch(q64, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | expand\n  \"integrationPresenceSource\": \"integrationPresenceSource_example\" // String | integrationPresenceSource\n};\n\n// Search users using the q64 value returned from a previous search\napiInstance.getUsersSearch(q64, opts)\n  .then((data) => {\n    console.log(`getUsersSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsersSearch\");\n    console.error(err);\n  });"
  },
  "getvoicemailsearch": {
    "operationId": "getvoicemailsearch",
    "functionName": "getVoicemailSearch",
    "signature": "getVoicemailSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailsSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | expand\n};\n\n// Search voicemails using the q64 value returned from a previous search\napiInstance.getVoicemailSearch(q64, opts)\n  .then((data) => {\n    console.log(`getVoicemailSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailSearch\");\n    console.error(err);\n  });"
  },
  "postdocumentationallsearch": {
    "operationId": "postdocumentationallsearch",
    "functionName": "postDocumentationAllSearch",
    "signature": "postDocumentationAllSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet body = {}; // Object | Search request options\n\n// Search all documents\napiInstance.postDocumentationAllSearch(body)\n  .then((data) => {\n    console.log(`postDocumentationAllSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postDocumentationAllSearch\");\n    console.error(err);\n  });"
  },
  "postdocumentationgknsearch": {
    "operationId": "postdocumentationgknsearch",
    "functionName": "postDocumentationGknSearch",
    "signature": "postDocumentationGknSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GKNDocumentationSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet body = {}; // Object | Search request options\n\n// Search gkn documentation\napiInstance.postDocumentationGknSearch(body)\n  .then((data) => {\n    console.log(`postDocumentationGknSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postDocumentationGknSearch\");\n    console.error(err);\n  });"
  },
  "postdocumentationsearch": {
    "operationId": "postdocumentationsearch",
    "functionName": "postDocumentationSearch",
    "signature": "postDocumentationSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DocumentationSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.SearchApi();\n\nlet body = {}; // Object | Search request options\n\n// Search documentation\napiInstance.postDocumentationSearch(body)\n  .then((data) => {\n    console.log(`postDocumentationSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postDocumentationSearch\");\n    console.error(err);\n  });"
  },
  "postsearch": {
    "operationId": "postsearch",
    "functionName": "postSearch",
    "signature": "postSearch(body, profile)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SuggestApi();\n\nlet body = {}; // Object | Search request options\nlet opts = { \n  \"profile\": true // Boolean | profile\n};\n\n// Search resources.\napiInstance.postSearch(body, opts)\n  .then((data) => {\n    console.log(`postSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSearch\");\n    console.error(err);\n  });"
  },
  "postsearchsuggest": {
    "operationId": "postsearchsuggest",
    "functionName": "postSearchSuggest",
    "signature": "postSearchSuggest(body, profile)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SuggestApi();\n\nlet body = {}; // Object | Search request options\nlet opts = { \n  \"profile\": true // Boolean | profile\n};\n\n// Suggest resources.\napiInstance.postSearchSuggest(body, opts)\n  .then((data) => {\n    console.log(`postSearchSuggest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSearchSuggest\");\n    console.error(err);\n  });"
  },
  "postspeechandtextanalyticstranscriptssearch": {
    "operationId": "postspeechandtextanalyticstranscriptssearch",
    "functionName": "postSpeechandtextanalyticsTranscriptsSearch",
    "signature": "postSpeechandtextanalyticsTranscriptsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "JsonSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | Search request options\n\n// Search resources.\napiInstance.postSpeechandtextanalyticsTranscriptsSearch(body)\n  .then((data) => {\n    console.log(`postSpeechandtextanalyticsTranscriptsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSpeechandtextanalyticsTranscriptsSearch\");\n    console.error(err);\n  });"
  },
  "postteamssearch": {
    "operationId": "postteamssearch",
    "functionName": "postTeamsSearch",
    "signature": "postTeamsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TeamsSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet body = {}; // Object | Search request options\n\n// Search resources.\napiInstance.postTeamsSearch(body)\n  .then((data) => {\n    console.log(`postTeamsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTeamsSearch\");\n    console.error(err);\n  });"
  },
  "postuserssearch": {
    "operationId": "postuserssearch",
    "functionName": "postUsersSearch",
    "signature": "postUsersSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | Search request options\n\n// Search users\napiInstance.postUsersSearch(body)\n  .then((data) => {\n    console.log(`postUsersSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsersSearch\");\n    console.error(err);\n  });"
  },
  "postuserssearchconversationtarget": {
    "operationId": "postuserssearchconversationtarget",
    "functionName": "postUsersSearchConversationTarget",
    "signature": "postUsersSearchConversationTarget(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | Search request options\n\n// Search users as conversation targets\napiInstance.postUsersSearchConversationTarget(body)\n  .then((data) => {\n    console.log(`postUsersSearchConversationTarget success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsersSearchConversationTarget\");\n    console.error(err);\n  });"
  },
  "postuserssearchqueuemembersmanage": {
    "operationId": "postuserssearchqueuemembersmanage",
    "functionName": "postUsersSearchQueuemembersManage",
    "signature": "postUsersSearchQueuemembersManage(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | Search request options\n\n// Search manage queue member\napiInstance.postUsersSearchQueuemembersManage(body)\n  .then((data) => {\n    console.log(`postUsersSearchQueuemembersManage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsersSearchQueuemembersManage\");\n    console.error(err);\n  });"
  },
  "postuserssearchteamsassign": {
    "operationId": "postuserssearchteamsassign",
    "functionName": "postUsersSearchTeamsAssign",
    "signature": "postUsersSearchTeamsAssign(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | Search request options\n\n// Search users assigned to teams\napiInstance.postUsersSearchTeamsAssign(body)\n  .then((data) => {\n    console.log(`postUsersSearchTeamsAssign success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsersSearchTeamsAssign\");\n    console.error(err);\n  });"
  },
  "postvoicemailsearch": {
    "operationId": "postvoicemailsearch",
    "functionName": "postVoicemailSearch",
    "signature": "postVoicemailSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailsSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet body = {}; // Object | Search request options\n\n// Search voicemails\napiInstance.postVoicemailSearch(body)\n  .then((data) => {\n    console.log(`postVoicemailSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postVoicemailSearch\");\n    console.error(err);\n  });"
  },
  "deletespeechandtextanalyticsprogram": {
    "operationId": "deletespeechandtextanalyticsprogram",
    "functionName": "deleteSpeechandtextanalyticsProgram",
    "signature": "deleteSpeechandtextanalyticsProgram(programId, forceDelete)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDelete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet programId = \"programId_example\"; // String | The id of the program\nlet opts = { \n  \"forceDelete\": false // Boolean | Indicates whether the program is forced to be deleted or not. Required when the program to delete is the default program.\n};\n\n// Delete a Speech and Text Analytics program by id\napiInstance.deleteSpeechandtextanalyticsProgram(programId, opts)\n  .then(() => {\n    console.log(\"deleteSpeechandtextanalyticsProgram returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteSpeechandtextanalyticsProgram\");\n    console.error(err);\n  });"
  },
  "deletespeechandtextanalyticssentimentfeedback": {
    "operationId": "deletespeechandtextanalyticssentimentfeedback",
    "functionName": "deleteSpeechandtextanalyticsSentimentfeedback",
    "signature": "deleteSpeechandtextanalyticsSentimentfeedback()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\n// Delete All Speech and Text Analytics SentimentFeedback\napiInstance.deleteSpeechandtextanalyticsSentimentfeedback()\n  .then(() => {\n    console.log(\"deleteSpeechandtextanalyticsSentimentfeedback returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteSpeechandtextanalyticsSentimentfeedback\");\n    console.error(err);\n  });"
  },
  "deletespeechandtextanalyticssentimentfeedbacksentimentfeedbackid": {
    "operationId": "deletespeechandtextanalyticssentimentfeedbacksentimentfeedbackid",
    "functionName": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId",
    "signature": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId)",
    "parameters": [
      {
        "name": "sentimentFeedbackId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet sentimentFeedbackId = \"sentimentFeedbackId_example\"; // String | The Id of the SentimentFeedback\n\n// Delete a Speech and Text Analytics SentimentFeedback by Id\napiInstance.deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId)\n  .then(() => {\n    console.log(\"deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId\");\n    console.error(err);\n  });"
  },
  "deletespeechandtextanalyticstopic": {
    "operationId": "deletespeechandtextanalyticstopic",
    "functionName": "deleteSpeechandtextanalyticsTopic",
    "signature": "deleteSpeechandtextanalyticsTopic(topicId)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet topicId = \"topicId_example\"; // String | The id of the topic\n\n// Delete a Speech and Text Analytics topic by id\napiInstance.deleteSpeechandtextanalyticsTopic(topicId)\n  .then(() => {\n    console.log(\"deleteSpeechandtextanalyticsTopic returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteSpeechandtextanalyticsTopic\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsconversation": {
    "operationId": "getspeechandtextanalyticsconversation",
    "functionName": "getSpeechandtextanalyticsConversation",
    "signature": "getSpeechandtextanalyticsConversation(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ConversationMetrics",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation Id\n\n// Get Speech and Text Analytics for a specific conversation\napiInstance.getSpeechandtextanalyticsConversation(conversationId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsConversation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsConversation\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsconversationcommunicationtranscripturl": {
    "operationId": "getspeechandtextanalyticsconversationcommunicationtranscripturl",
    "functionName": "getSpeechandtextanalyticsConversationCommunicationTranscripturl",
    "signature": "getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TranscriptUrl",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet communicationId = \"communicationId_example\"; // String | Communication ID\n\n// Get the pre-signed S3 URL for the transcript of a specific communication of a conversation\napiInstance.getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId, communicationId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsConversationCommunicationTranscripturl success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsConversationCommunicationTranscripturl\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsconversationcommunicationtranscripturls": {
    "operationId": "getspeechandtextanalyticsconversationcommunicationtranscripturls",
    "functionName": "getSpeechandtextanalyticsConversationCommunicationTranscripturls",
    "signature": "getSpeechandtextanalyticsConversationCommunicationTranscripturls(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TranscriptUrls",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet communicationId = \"communicationId_example\"; // String | Communication ID\n\n// Get the list of pre-signed S3 URL for the transcripts of a specific communication of a conversation\napiInstance.getSpeechandtextanalyticsConversationCommunicationTranscripturls(conversationId, communicationId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsConversationCommunicationTranscripturls success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsConversationCommunicationTranscripturls\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogram": {
    "operationId": "getspeechandtextanalyticsprogram",
    "functionName": "getSpeechandtextanalyticsProgram",
    "signature": "getSpeechandtextanalyticsProgram(programId)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet programId = \"programId_example\"; // String | The id of the program\n\n// Get a Speech and Text Analytics program by id\napiInstance.getSpeechandtextanalyticsProgram(programId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgram success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgram\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogrammappings": {
    "operationId": "getspeechandtextanalyticsprogrammappings",
    "functionName": "getSpeechandtextanalyticsProgramMappings",
    "signature": "getSpeechandtextanalyticsProgramMappings(programId)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ProgramMappings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet programId = \"programId_example\"; // String | The id of the program\n\n// Get Speech and Text Analytics program mappings to queues and flows by id\napiInstance.getSpeechandtextanalyticsProgramMappings(programId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgramMappings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgramMappings\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogramtranscriptionengines": {
    "operationId": "getspeechandtextanalyticsprogramtranscriptionengines",
    "functionName": "getSpeechandtextanalyticsProgramTranscriptionengines",
    "signature": "getSpeechandtextanalyticsProgramTranscriptionengines(programId)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ProgramTranscriptionEngines",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet programId = \"programId_example\"; // String | The id of the program\n\n// Get transcription engine settings of a program\napiInstance.getSpeechandtextanalyticsProgramTranscriptionengines(programId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgramTranscriptionengines success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgramTranscriptionengines\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprograms": {
    "operationId": "getspeechandtextanalyticsprograms",
    "functionName": "getSpeechandtextanalyticsPrograms",
    "signature": "getSpeechandtextanalyticsPrograms(nextPage, pageSize, state)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ProgramsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet opts = { \n  \"nextPage\": \"nextPage_example\", // String | The key for listing the next page\n  \"pageSize\": 20, // Number | The page size for the listing\n  \"state\": \"state_example\" // String | Program state. Defaults to Latest\n};\n\n// Get the list of Speech and Text Analytics programs\napiInstance.getSpeechandtextanalyticsPrograms(opts)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsPrograms success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsPrograms\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogramsgeneraljob": {
    "operationId": "getspeechandtextanalyticsprogramsgeneraljob",
    "functionName": "getSpeechandtextanalyticsProgramsGeneralJob",
    "signature": "getSpeechandtextanalyticsProgramsGeneralJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GeneralProgramJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | The id of the publish programs job\n\n// Get a Speech and Text Analytics general program job by id\napiInstance.getSpeechandtextanalyticsProgramsGeneralJob(jobId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgramsGeneralJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgramsGeneralJob\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogramsmappings": {
    "operationId": "getspeechandtextanalyticsprogramsmappings",
    "functionName": "getSpeechandtextanalyticsProgramsMappings",
    "signature": "getSpeechandtextanalyticsProgramsMappings(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ProgramsMappingsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet opts = { \n  \"nextPage\": \"nextPage_example\", // String | The key for listing the next page\n  \"pageSize\": 20 // Number | The page size for the listing\n};\n\n// Get the list of Speech and Text Analytics programs mappings to queues and flows\napiInstance.getSpeechandtextanalyticsProgramsMappings(opts)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgramsMappings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgramsMappings\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogramspublishjob": {
    "operationId": "getspeechandtextanalyticsprogramspublishjob",
    "functionName": "getSpeechandtextanalyticsProgramsPublishjob",
    "signature": "getSpeechandtextanalyticsProgramsPublishjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ProgramJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | The id of the publish programs job\n\n// Get a Speech and Text Analytics publish programs job by id\napiInstance.getSpeechandtextanalyticsProgramsPublishjob(jobId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgramsPublishjob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgramsPublishjob\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogramstranscriptionenginesdialects": {
    "operationId": "getspeechandtextanalyticsprogramstranscriptionenginesdialects",
    "functionName": "getSpeechandtextanalyticsProgramsTranscriptionenginesDialects",
    "signature": "getSpeechandtextanalyticsProgramsTranscriptionenginesDialects()",
    "return": "SupportedDialectsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\n// Get supported dialects for each transcription engine\napiInstance.getSpeechandtextanalyticsProgramsTranscriptionenginesDialects()\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgramsTranscriptionenginesDialects success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgramsTranscriptionenginesDialects\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticsprogramsunpublished": {
    "operationId": "getspeechandtextanalyticsprogramsunpublished",
    "functionName": "getSpeechandtextanalyticsProgramsUnpublished",
    "signature": "getSpeechandtextanalyticsProgramsUnpublished(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "UnpublishedProgramsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet opts = { \n  \"nextPage\": \"nextPage_example\", // String | The key for listing the next page\n  \"pageSize\": 20 // Number | The page size for the listing\n};\n\n// Get the list of Speech and Text Analytics unpublished programs\napiInstance.getSpeechandtextanalyticsProgramsUnpublished(opts)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsProgramsUnpublished success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsProgramsUnpublished\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticssentimentdialects": {
    "operationId": "getspeechandtextanalyticssentimentdialects",
    "functionName": "getSpeechandtextanalyticsSentimentDialects",
    "signature": "getSpeechandtextanalyticsSentimentDialects()",
    "return": "EntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\n// Get the list of Speech and Text Analytics sentiment supported dialects\napiInstance.getSpeechandtextanalyticsSentimentDialects()\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsSentimentDialects success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsSentimentDialects\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticssentimentfeedback": {
    "operationId": "getspeechandtextanalyticssentimentfeedback",
    "functionName": "getSpeechandtextanalyticsSentimentfeedback",
    "signature": "getSpeechandtextanalyticsSentimentfeedback(dialect)",
    "parameters": [
      {
        "name": "dialect",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SentimentFeedbackEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet opts = { \n  \"dialect\": en-US // String | The key for filter the listing by dialect, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard\n};\n\n// Get the list of Speech and Text Analytics SentimentFeedback\napiInstance.getSpeechandtextanalyticsSentimentfeedback(opts)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsSentimentfeedback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsSentimentfeedback\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticssettings": {
    "operationId": "getspeechandtextanalyticssettings",
    "functionName": "getSpeechandtextanalyticsSettings",
    "signature": "getSpeechandtextanalyticsSettings()",
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\n// Get Speech And Text Analytics Settings\napiInstance.getSpeechandtextanalyticsSettings()\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsSettings\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticstopic": {
    "operationId": "getspeechandtextanalyticstopic",
    "functionName": "getSpeechandtextanalyticsTopic",
    "signature": "getSpeechandtextanalyticsTopic(topicId)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet topicId = \"topicId_example\"; // String | The id of the topic\n\n// Get a Speech and Text Analytics topic by id\napiInstance.getSpeechandtextanalyticsTopic(topicId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsTopic success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsTopic\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticstopics": {
    "operationId": "getspeechandtextanalyticstopics",
    "functionName": "getSpeechandtextanalyticsTopics",
    "signature": "getSpeechandtextanalyticsTopics(nextPage, pageSize, state, name, ids, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ids",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TopicsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet opts = { \n  \"nextPage\": \"nextPage_example\", // String | The key for listing the next page\n  \"pageSize\": 20, // Number | The page size for the listing\n  \"state\": \"state_example\", // String | Topic state. Defaults to latest\n  \"name\": \"name_example\", // String | Case insensitive partial name to filter by\n  \"ids\": [\"ids_example\"], // [String] | Comma separated Topic IDs to filter by. Cannot be used with other filters. Maximum of 50 IDs allowed.\n  \"sortBy\": \"sortBy_example\", // String | Sort results by. Defaults to name\n  \"sortOrder\": \"sortOrder_example\" // String | Sort order. Defaults to asc\n};\n\n// Get the list of Speech and Text Analytics topics\napiInstance.getSpeechandtextanalyticsTopics(opts)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsTopics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsTopics\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticstopicsdialects": {
    "operationId": "getspeechandtextanalyticstopicsdialects",
    "functionName": "getSpeechandtextanalyticsTopicsDialects",
    "signature": "getSpeechandtextanalyticsTopicsDialects()",
    "return": "EntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\n// Get list of supported Speech and Text Analytics topics dialects\napiInstance.getSpeechandtextanalyticsTopicsDialects()\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsTopicsDialects success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsTopicsDialects\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticstopicsgeneral": {
    "operationId": "getspeechandtextanalyticstopicsgeneral",
    "functionName": "getSpeechandtextanalyticsTopicsGeneral",
    "signature": "getSpeechandtextanalyticsTopicsGeneral(dialect)",
    "parameters": [
      {
        "name": "dialect",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GeneralTopicsEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet opts = { \n  \"dialect\": \"dialect_example\" // String | The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard\n};\n\n// Get the Speech and Text Analytics general topics for a given dialect\napiInstance.getSpeechandtextanalyticsTopicsGeneral(opts)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsTopicsGeneral success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsTopicsGeneral\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticstopicsgeneralstatus": {
    "operationId": "getspeechandtextanalyticstopicsgeneralstatus",
    "functionName": "getSpeechandtextanalyticsTopicsGeneralStatus",
    "signature": "getSpeechandtextanalyticsTopicsGeneralStatus(dialect)",
    "parameters": [
      {
        "name": "dialect",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UnifiedGeneralTopicEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet opts = { \n  \"dialect\": \"dialect_example\" // String | The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard\n};\n\n// Get the list of general topics from the org and the system with their current status\napiInstance.getSpeechandtextanalyticsTopicsGeneralStatus(opts)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsTopicsGeneralStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsTopicsGeneralStatus\");\n    console.error(err);\n  });"
  },
  "getspeechandtextanalyticstopicspublishjob": {
    "operationId": "getspeechandtextanalyticstopicspublishjob",
    "functionName": "getSpeechandtextanalyticsTopicsPublishjob",
    "signature": "getSpeechandtextanalyticsTopicsPublishjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TopicJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet jobId = \"jobId_example\"; // String | The id of the publish topics job\n\n// Get a Speech and Text Analytics publish topics job by id\napiInstance.getSpeechandtextanalyticsTopicsPublishjob(jobId)\n  .then((data) => {\n    console.log(`getSpeechandtextanalyticsTopicsPublishjob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getSpeechandtextanalyticsTopicsPublishjob\");\n    console.error(err);\n  });"
  },
  "patchspeechandtextanalyticssettings": {
    "operationId": "patchspeechandtextanalyticssettings",
    "functionName": "patchSpeechandtextanalyticsSettings",
    "signature": "patchSpeechandtextanalyticsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | Speech And Text Analytics Settings\n\n// Patch Speech And Text Analytics Settings\napiInstance.patchSpeechandtextanalyticsSettings(body)\n  .then((data) => {\n    console.log(`patchSpeechandtextanalyticsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchSpeechandtextanalyticsSettings\");\n    console.error(err);\n  });"
  },
  "postspeechandtextanalyticsprograms": {
    "operationId": "postspeechandtextanalyticsprograms",
    "functionName": "postSpeechandtextanalyticsPrograms",
    "signature": "postSpeechandtextanalyticsPrograms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | The program to create\n\n// Create new Speech and Text Analytics program\napiInstance.postSpeechandtextanalyticsPrograms(body)\n  .then((data) => {\n    console.log(`postSpeechandtextanalyticsPrograms success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSpeechandtextanalyticsPrograms\");\n    console.error(err);\n  });"
  },
  "postspeechandtextanalyticsprogramsgeneraljobs": {
    "operationId": "postspeechandtextanalyticsprogramsgeneraljobs",
    "functionName": "postSpeechandtextanalyticsProgramsGeneralJobs",
    "signature": "postSpeechandtextanalyticsProgramsGeneralJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GeneralProgramJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | The general programs job to create\n\n// Create new Speech and Text Analytics general program job\napiInstance.postSpeechandtextanalyticsProgramsGeneralJobs(body)\n  .then((data) => {\n    console.log(`postSpeechandtextanalyticsProgramsGeneralJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSpeechandtextanalyticsProgramsGeneralJobs\");\n    console.error(err);\n  });"
  },
  "postspeechandtextanalyticsprogramspublishjobs": {
    "operationId": "postspeechandtextanalyticsprogramspublishjobs",
    "functionName": "postSpeechandtextanalyticsProgramsPublishjobs",
    "signature": "postSpeechandtextanalyticsProgramsPublishjobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ProgramJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | The publish programs job to create\n\n// Create new Speech and Text Analytics publish programs job\napiInstance.postSpeechandtextanalyticsProgramsPublishjobs(body)\n  .then((data) => {\n    console.log(`postSpeechandtextanalyticsProgramsPublishjobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSpeechandtextanalyticsProgramsPublishjobs\");\n    console.error(err);\n  });"
  },
  "postspeechandtextanalyticssentimentfeedback": {
    "operationId": "postspeechandtextanalyticssentimentfeedback",
    "functionName": "postSpeechandtextanalyticsSentimentfeedback",
    "signature": "postSpeechandtextanalyticsSentimentfeedback(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SentimentFeedback",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | The SentimentFeedback to create\n\n// Create a Speech and Text Analytics SentimentFeedback\napiInstance.postSpeechandtextanalyticsSentimentfeedback(body)\n  .then((data) => {\n    console.log(`postSpeechandtextanalyticsSentimentfeedback success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSpeechandtextanalyticsSentimentfeedback\");\n    console.error(err);\n  });"
  },
  "postspeechandtextanalyticstopics": {
    "operationId": "postspeechandtextanalyticstopics",
    "functionName": "postSpeechandtextanalyticsTopics",
    "signature": "postSpeechandtextanalyticsTopics(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | The topic to create\n\n// Create new Speech and Text Analytics topic\napiInstance.postSpeechandtextanalyticsTopics(body)\n  .then((data) => {\n    console.log(`postSpeechandtextanalyticsTopics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSpeechandtextanalyticsTopics\");\n    console.error(err);\n  });"
  },
  "postspeechandtextanalyticstopicspublishjobs": {
    "operationId": "postspeechandtextanalyticstopicspublishjobs",
    "functionName": "postSpeechandtextanalyticsTopicsPublishjobs",
    "signature": "postSpeechandtextanalyticsTopicsPublishjobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TopicJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | The publish topics job to create\n\n// Create new Speech and Text Analytics publish topics job\napiInstance.postSpeechandtextanalyticsTopicsPublishjobs(body)\n  .then((data) => {\n    console.log(`postSpeechandtextanalyticsTopicsPublishjobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postSpeechandtextanalyticsTopicsPublishjobs\");\n    console.error(err);\n  });"
  },
  "putspeechandtextanalyticsprogram": {
    "operationId": "putspeechandtextanalyticsprogram",
    "functionName": "putSpeechandtextanalyticsProgram",
    "signature": "putSpeechandtextanalyticsProgram(programId, body)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet programId = \"programId_example\"; // String | The id of the program\nlet body = {}; // Object | The program to update\n\n// Update existing Speech and Text Analytics program\napiInstance.putSpeechandtextanalyticsProgram(programId, body)\n  .then((data) => {\n    console.log(`putSpeechandtextanalyticsProgram success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putSpeechandtextanalyticsProgram\");\n    console.error(err);\n  });"
  },
  "putspeechandtextanalyticsprogrammappings": {
    "operationId": "putspeechandtextanalyticsprogrammappings",
    "functionName": "putSpeechandtextanalyticsProgramMappings",
    "signature": "putSpeechandtextanalyticsProgramMappings(programId, body)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ProgramMappings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet programId = \"programId_example\"; // String | The id of the program\nlet body = {}; // Object | The program to set mappings for\n\n// Set Speech and Text Analytics program mappings to queues and flows\napiInstance.putSpeechandtextanalyticsProgramMappings(programId, body)\n  .then((data) => {\n    console.log(`putSpeechandtextanalyticsProgramMappings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putSpeechandtextanalyticsProgramMappings\");\n    console.error(err);\n  });"
  },
  "putspeechandtextanalyticsprogramtranscriptionengines": {
    "operationId": "putspeechandtextanalyticsprogramtranscriptionengines",
    "functionName": "putSpeechandtextanalyticsProgramTranscriptionengines",
    "signature": "putSpeechandtextanalyticsProgramTranscriptionengines(programId, body)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ProgramTranscriptionEngines",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet programId = \"programId_example\"; // String | The id of the program\nlet body = {}; // Object | Program transcription engine setting\n\n// Update transcription engine settings of a program\napiInstance.putSpeechandtextanalyticsProgramTranscriptionengines(programId, body)\n  .then((data) => {\n    console.log(`putSpeechandtextanalyticsProgramTranscriptionengines success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putSpeechandtextanalyticsProgramTranscriptionengines\");\n    console.error(err);\n  });"
  },
  "putspeechandtextanalyticssettings": {
    "operationId": "putspeechandtextanalyticssettings",
    "functionName": "putSpeechandtextanalyticsSettings",
    "signature": "putSpeechandtextanalyticsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet body = {}; // Object | Speech And Text Analytics Settings\n\n// Update Speech And Text Analytics Settings\napiInstance.putSpeechandtextanalyticsSettings(body)\n  .then((data) => {\n    console.log(`putSpeechandtextanalyticsSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putSpeechandtextanalyticsSettings\");\n    console.error(err);\n  });"
  },
  "putspeechandtextanalyticstopic": {
    "operationId": "putspeechandtextanalyticstopic",
    "functionName": "putSpeechandtextanalyticsTopic",
    "signature": "putSpeechandtextanalyticsTopic(topicId, body)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.SpeechTextAnalyticsApi();\n\nlet topicId = \"topicId_example\"; // String | The id of the topic\nlet body = {}; // Object | The topic to update\n\n// Update existing Speech and Text Analytics topic\napiInstance.putSpeechandtextanalyticsTopic(topicId, body)\n  .then((data) => {\n    console.log(`putSpeechandtextanalyticsTopic success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putSpeechandtextanalyticsTopic\");\n    console.error(err);\n  });"
  },
  "deletestationassociateduser": {
    "operationId": "deletestationassociateduser",
    "functionName": "deleteStationAssociateduser",
    "signature": "deleteStationAssociateduser(stationId)",
    "parameters": [
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.StationsApi();\n\nlet stationId = \"stationId_example\"; // String | Station ID\n\n// Unassigns the user assigned to this station\napiInstance.deleteStationAssociateduser(stationId)\n  .then(() => {\n    console.log(\"deleteStationAssociateduser returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteStationAssociateduser\");\n    console.error(err);\n  });"
  },
  "getstation": {
    "operationId": "getstation",
    "functionName": "getStation",
    "signature": "getStation(stationId)",
    "parameters": [
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Station",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.StationsApi();\n\nlet stationId = \"stationId_example\"; // String | Station ID\n\n// Get station.\napiInstance.getStation(stationId)\n  .then((data) => {\n    console.log(`getStation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getStation\");\n    console.error(err);\n  });"
  },
  "getstations": {
    "operationId": "getstations",
    "functionName": "getStations",
    "signature": "getStations(pageSize, pageNumber, sortBy, name, userSelectable, webRtcUserId, id, lineAppearanceId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userSelectable",
        "type": "String",
        "required": "false"
      },
      {
        "name": "webRtcUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lineAppearanceId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "StationEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.StationsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"name\", // String | Sort by\n  \"name\": \"name_example\", // String | Name\n  \"userSelectable\": \"userSelectable_example\", // String | True for stations that the user can select otherwise false\n  \"webRtcUserId\": \"webRtcUserId_example\", // String | Filter for the webRtc station of the webRtcUserId\n  \"id\": \"id_example\", // String | Comma separated list of stationIds\n  \"lineAppearanceId\": \"lineAppearanceId_example\" // String | lineAppearanceId\n};\n\n// Get the list of available stations.\napiInstance.getStations(opts)\n  .then((data) => {\n    console.log(`getStations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getStations\");\n    console.error(err);\n  });"
  },
  "deletetaskmanagementworkbin": {
    "operationId": "deletetaskmanagementworkbin",
    "functionName": "deleteTaskmanagementWorkbin",
    "signature": "deleteTaskmanagementWorkbin(workbinId)",
    "parameters": [
      {
        "name": "workbinId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workbinId = \"workbinId_example\"; // String | Workbin ID\n\n// Delete a workbin\napiInstance.deleteTaskmanagementWorkbin(workbinId)\n  .then(() => {\n    console.log(\"deleteTaskmanagementWorkbin returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTaskmanagementWorkbin\");\n    console.error(err);\n  });"
  },
  "deletetaskmanagementworkitem": {
    "operationId": "deletetaskmanagementworkitem",
    "functionName": "deleteTaskmanagementWorkitem",
    "signature": "deleteTaskmanagementWorkitem(workitemId)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\n\n// Delete a workitem\napiInstance.deleteTaskmanagementWorkitem(workitemId)\n  .then(() => {\n    console.log(\"deleteTaskmanagementWorkitem returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTaskmanagementWorkitem\");\n    console.error(err);\n  });"
  },
  "deletetaskmanagementworkitemsschema": {
    "operationId": "deletetaskmanagementworkitemsschema",
    "functionName": "deleteTaskmanagementWorkitemsSchema",
    "signature": "deleteTaskmanagementWorkitemsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Delete a schema\napiInstance.deleteTaskmanagementWorkitemsSchema(schemaId)\n  .then(() => {\n    console.log(\"deleteTaskmanagementWorkitemsSchema returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTaskmanagementWorkitemsSchema\");\n    console.error(err);\n  });"
  },
  "deletetaskmanagementworktype": {
    "operationId": "deletetaskmanagementworktype",
    "functionName": "deleteTaskmanagementWorktype",
    "signature": "deleteTaskmanagementWorktype(worktypeId)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\n\n// Delete a worktype\napiInstance.deleteTaskmanagementWorktype(worktypeId)\n  .then(() => {\n    console.log(\"deleteTaskmanagementWorktype returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTaskmanagementWorktype\");\n    console.error(err);\n  });"
  },
  "deletetaskmanagementworktypestatus": {
    "operationId": "deletetaskmanagementworktypestatus",
    "functionName": "deleteTaskmanagementWorktypeStatus",
    "signature": "deleteTaskmanagementWorktypeStatus(worktypeId, statusId)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet statusId = \"statusId_example\"; // String | Status id\n\n// Delete a status\napiInstance.deleteTaskmanagementWorktypeStatus(worktypeId, statusId)\n  .then(() => {\n    console.log(\"deleteTaskmanagementWorktypeStatus returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTaskmanagementWorktypeStatus\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkbin": {
    "operationId": "gettaskmanagementworkbin",
    "functionName": "getTaskmanagementWorkbin",
    "signature": "getTaskmanagementWorkbin(workbinId)",
    "parameters": [
      {
        "name": "workbinId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Workbin",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workbinId = \"workbinId_example\"; // String | Workbin ID\n\n// Get a workbin\napiInstance.getTaskmanagementWorkbin(workbinId)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkbin success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkbin\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkbinhistory": {
    "operationId": "gettaskmanagementworkbinhistory",
    "functionName": "getTaskmanagementWorkbinHistory",
    "signature": "getTaskmanagementWorkbinHistory(workbinId, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "workbinId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkbinChangeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workbinId = \"workbinId_example\"; // String | Workbin ID\nlet opts = { \n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get a listing of a workbin's attribute change history\napiInstance.getTaskmanagementWorkbinHistory(workbinId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkbinHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkbinHistory\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkbinversion": {
    "operationId": "gettaskmanagementworkbinversion",
    "functionName": "getTaskmanagementWorkbinVersion",
    "signature": "getTaskmanagementWorkbinVersion(workbinId, entityVersion)",
    "parameters": [
      {
        "name": "workbinId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "entityVersion",
        "type": "Number",
        "required": "true"
      }
    ],
    "return": "WorkbinVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workbinId = \"workbinId_example\"; // String | Workbin ID\nlet entityVersion = 3.4; // Number | Workbin version\n\n// Get a version of a workbin\napiInstance.getTaskmanagementWorkbinVersion(workbinId, entityVersion)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkbinVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkbinVersion\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkbinversions": {
    "operationId": "gettaskmanagementworkbinversions",
    "functionName": "getTaskmanagementWorkbinVersions",
    "signature": "getTaskmanagementWorkbinVersions(workbinId, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "workbinId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkbinVersionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workbinId = \"workbinId_example\"; // String | Workbin ID\nlet opts = { \n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get all versions of a workbin\napiInstance.getTaskmanagementWorkbinVersions(workbinId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkbinVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkbinVersions\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitem": {
    "operationId": "gettaskmanagementworkitem",
    "functionName": "getTaskmanagementWorkitem",
    "signature": "getTaskmanagementWorkitem(workitemId, expands)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expands",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Workitem",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\nlet opts = { \n  \"expands\": \"expands_example\" // String | Which fields to expand. Comma separated if more than one.\n};\n\n// Get a workitem\napiInstance.getTaskmanagementWorkitem(workitemId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitem success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitem\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemhistory": {
    "operationId": "gettaskmanagementworkitemhistory",
    "functionName": "getTaskmanagementWorkitemHistory",
    "signature": "getTaskmanagementWorkitemHistory(workitemId, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkitemChangeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\nlet opts = { \n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get a listing of a workitem's attribute change history\napiInstance.getTaskmanagementWorkitemHistory(workitemId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemHistory\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemuserwrapups": {
    "operationId": "gettaskmanagementworkitemuserwrapups",
    "functionName": "getTaskmanagementWorkitemUserWrapups",
    "signature": "getTaskmanagementWorkitemUserWrapups(workitemId, userId, expands, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expands",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkitemWrapup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | The ID of the Workitem.\nlet userId = \"userId_example\"; // String | The ID of the user\nlet opts = { \n  \"expands\": \"expands_example\", // String | Which fields, if any, to expand.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get all wrapup codes added for the given user for a workitem.\napiInstance.getTaskmanagementWorkitemUserWrapups(workitemId, userId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemUserWrapups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemUserWrapups\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemversion": {
    "operationId": "gettaskmanagementworkitemversion",
    "functionName": "getTaskmanagementWorkitemVersion",
    "signature": "getTaskmanagementWorkitemVersion(workitemId, entityVersion)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "entityVersion",
        "type": "Number",
        "required": "true"
      }
    ],
    "return": "WorkitemVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\nlet entityVersion = 3.4; // Number | Workitem version\n\n// Get a version of a workitem\napiInstance.getTaskmanagementWorkitemVersion(workitemId, entityVersion)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemVersion\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemversions": {
    "operationId": "gettaskmanagementworkitemversions",
    "functionName": "getTaskmanagementWorkitemVersions",
    "signature": "getTaskmanagementWorkitemVersions(workitemId, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkitemVersionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\nlet opts = { \n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get all versions of a workitem\napiInstance.getTaskmanagementWorkitemVersions(workitemId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemVersions\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemwrapups": {
    "operationId": "gettaskmanagementworkitemwrapups",
    "functionName": "getTaskmanagementWorkitemWrapups",
    "signature": "getTaskmanagementWorkitemWrapups(workitemId, expands, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expands",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkitemWrapupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | The ID of the Workitem.\nlet opts = { \n  \"expands\": \"expands_example\", // String | Which fields, if any, to expand.\n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get all wrapup codes added for all users for a workitem.\napiInstance.getTaskmanagementWorkitemWrapups(workitemId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemWrapups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemWrapups\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemsschema": {
    "operationId": "gettaskmanagementworkitemsschema",
    "functionName": "getTaskmanagementWorkitemsSchema",
    "signature": "getTaskmanagementWorkitemsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Get a schema\napiInstance.getTaskmanagementWorkitemsSchema(schemaId)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemsSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemsSchema\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemsschemaversion": {
    "operationId": "gettaskmanagementworkitemsschemaversion",
    "functionName": "getTaskmanagementWorkitemsSchemaVersion",
    "signature": "getTaskmanagementWorkitemsSchemaVersion(schemaId, versionId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet versionId = \"versionId_example\"; // String | Schema version\n\n// Get a specific version of a schema\napiInstance.getTaskmanagementWorkitemsSchemaVersion(schemaId, versionId)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemsSchemaVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemsSchemaVersion\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemsschemaversions": {
    "operationId": "gettaskmanagementworkitemsschemaversions",
    "functionName": "getTaskmanagementWorkitemsSchemaVersions",
    "signature": "getTaskmanagementWorkitemsSchemaVersions(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n// Get all versions of a schema\napiInstance.getTaskmanagementWorkitemsSchemaVersions(schemaId)\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemsSchemaVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemsSchemaVersions\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworkitemsschemas": {
    "operationId": "gettaskmanagementworkitemsschemas",
    "functionName": "getTaskmanagementWorkitemsSchemas",
    "signature": "getTaskmanagementWorkitemsSchemas()",
    "return": "DataSchemaListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\n// Get a list of schemas.\napiInstance.getTaskmanagementWorkitemsSchemas()\n  .then((data) => {\n    console.log(`getTaskmanagementWorkitemsSchemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorkitemsSchemas\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworktype": {
    "operationId": "gettaskmanagementworktype",
    "functionName": "getTaskmanagementWorktype",
    "signature": "getTaskmanagementWorktype(worktypeId, expands)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expands",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Worktype",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet opts = { \n  \"expands\": [\"expands_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a worktype\napiInstance.getTaskmanagementWorktype(worktypeId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorktype success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorktype\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworktypehistory": {
    "operationId": "gettaskmanagementworktypehistory",
    "functionName": "getTaskmanagementWorktypeHistory",
    "signature": "getTaskmanagementWorktypeHistory(worktypeId, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorktypeChangeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet opts = { \n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get a listing of a worktype's attribute change history\napiInstance.getTaskmanagementWorktypeHistory(worktypeId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorktypeHistory success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorktypeHistory\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworktypestatus": {
    "operationId": "gettaskmanagementworktypestatus",
    "functionName": "getTaskmanagementWorktypeStatus",
    "signature": "getTaskmanagementWorktypeStatus(worktypeId, statusId)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WorkitemStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet statusId = \"statusId_example\"; // String | Status id\n\n// Get a status\napiInstance.getTaskmanagementWorktypeStatus(worktypeId, statusId)\n  .then((data) => {\n    console.log(`getTaskmanagementWorktypeStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorktypeStatus\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworktypeversion": {
    "operationId": "gettaskmanagementworktypeversion",
    "functionName": "getTaskmanagementWorktypeVersion",
    "signature": "getTaskmanagementWorktypeVersion(worktypeId, entityVersion)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "entityVersion",
        "type": "Number",
        "required": "true"
      }
    ],
    "return": "WorktypeVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet entityVersion = 3.4; // Number | Worktype version\n\n// Get a version of a worktype\napiInstance.getTaskmanagementWorktypeVersion(worktypeId, entityVersion)\n  .then((data) => {\n    console.log(`getTaskmanagementWorktypeVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorktypeVersion\");\n    console.error(err);\n  });"
  },
  "gettaskmanagementworktypeversions": {
    "operationId": "gettaskmanagementworktypeversions",
    "functionName": "getTaskmanagementWorktypeVersions",
    "signature": "getTaskmanagementWorktypeVersions(worktypeId, after, pageSize, sortOrder)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorktypeVersionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet opts = { \n  \"after\": \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  \"pageSize\": 25, // Number | Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.\n  \"sortOrder\": \"descending\" // String | Ascending or descending sort order\n};\n\n// Get all versions of a worktype\napiInstance.getTaskmanagementWorktypeVersions(worktypeId, opts)\n  .then((data) => {\n    console.log(`getTaskmanagementWorktypeVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTaskmanagementWorktypeVersions\");\n    console.error(err);\n  });"
  },
  "patchtaskmanagementworkbin": {
    "operationId": "patchtaskmanagementworkbin",
    "functionName": "patchTaskmanagementWorkbin",
    "signature": "patchTaskmanagementWorkbin(workbinId, body)",
    "parameters": [
      {
        "name": "workbinId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Workbin",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workbinId = \"workbinId_example\"; // String | Workbin ID\nlet body = {}; // Object | Json with attributes and their new values: {description:new description, name:new name}.\n\n// Update the attributes of a workbin\napiInstance.patchTaskmanagementWorkbin(workbinId, body)\n  .then((data) => {\n    console.log(`patchTaskmanagementWorkbin success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTaskmanagementWorkbin\");\n    console.error(err);\n  });"
  },
  "patchtaskmanagementworkitem": {
    "operationId": "patchtaskmanagementworkitem",
    "functionName": "patchTaskmanagementWorkitem",
    "signature": "patchTaskmanagementWorkitem(workitemId, body)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Workitem",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\nlet body = {}; // Object | Workitem\n\n// Update the attributes of a workitem\napiInstance.patchTaskmanagementWorkitem(workitemId, body)\n  .then((data) => {\n    console.log(`patchTaskmanagementWorkitem success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTaskmanagementWorkitem\");\n    console.error(err);\n  });"
  },
  "patchtaskmanagementworkitemassignment": {
    "operationId": "patchtaskmanagementworkitemassignment",
    "functionName": "patchTaskmanagementWorkitemAssignment",
    "signature": "patchTaskmanagementWorkitemAssignment(workitemId, body)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\nlet body = {}; // Object | Targeted user\n\n// Attempts to manually assign a specified workitem to a specified user.  Ignores bullseye ring, PAR score, skills, and languages.\napiInstance.patchTaskmanagementWorkitemAssignment(workitemId, body)\n  .then(() => {\n    console.log(\"patchTaskmanagementWorkitemAssignment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTaskmanagementWorkitemAssignment\");\n    console.error(err);\n  });"
  },
  "patchtaskmanagementworkitemuserwrapups": {
    "operationId": "patchtaskmanagementworkitemuserwrapups",
    "functionName": "patchTaskmanagementWorkitemUserWrapups",
    "signature": "patchTaskmanagementWorkitemUserWrapups(workitemId, userId, body)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WorkitemWrapup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | The ID of the Workitem.\nlet userId = \"userId_example\"; // String | The ID of the user\nlet body = {}; // Object | Request body to add/remove a wrapup code for a workitem\n\n// Add/Remove a wrapup code for a given user in a workitem.\napiInstance.patchTaskmanagementWorkitemUserWrapups(workitemId, userId, body)\n  .then((data) => {\n    console.log(`patchTaskmanagementWorkitemUserWrapups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTaskmanagementWorkitemUserWrapups\");\n    console.error(err);\n  });"
  },
  "patchtaskmanagementworkitemusersmewrapups": {
    "operationId": "patchtaskmanagementworkitemusersmewrapups",
    "functionName": "patchTaskmanagementWorkitemUsersMeWrapups",
    "signature": "patchTaskmanagementWorkitemUsersMeWrapups(workitemId, body)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WorkitemWrapup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | The ID of the Workitem.\nlet body = {}; // Object | Request body to add/remove the wrapup code for workitem\n\n// Add/Remove a wrapup code for the current user in a workitem.\napiInstance.patchTaskmanagementWorkitemUsersMeWrapups(workitemId, body)\n  .then((data) => {\n    console.log(`patchTaskmanagementWorkitemUsersMeWrapups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTaskmanagementWorkitemUsersMeWrapups\");\n    console.error(err);\n  });"
  },
  "patchtaskmanagementworktype": {
    "operationId": "patchtaskmanagementworktype",
    "functionName": "patchTaskmanagementWorktype",
    "signature": "patchTaskmanagementWorktype(worktypeId, body)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Worktype",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update the attributes of a worktype\napiInstance.patchTaskmanagementWorktype(worktypeId, opts)\n  .then((data) => {\n    console.log(`patchTaskmanagementWorktype success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTaskmanagementWorktype\");\n    console.error(err);\n  });"
  },
  "patchtaskmanagementworktypestatus": {
    "operationId": "patchtaskmanagementworktypestatus",
    "functionName": "patchTaskmanagementWorktypeStatus",
    "signature": "patchTaskmanagementWorktypeStatus(worktypeId, statusId, body)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkitemStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet statusId = \"statusId_example\"; // String | Status id\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update the attributes of a status\napiInstance.patchTaskmanagementWorktypeStatus(worktypeId, statusId, opts)\n  .then((data) => {\n    console.log(`patchTaskmanagementWorktypeStatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTaskmanagementWorktypeStatus\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkbins": {
    "operationId": "posttaskmanagementworkbins",
    "functionName": "postTaskmanagementWorkbins",
    "signature": "postTaskmanagementWorkbins(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Workbin",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a workbin\napiInstance.postTaskmanagementWorkbins(opts)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkbins success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkbins\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkbinsquery": {
    "operationId": "posttaskmanagementworkbinsquery",
    "functionName": "postTaskmanagementWorkbinsQuery",
    "signature": "postTaskmanagementWorkbinsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WorkbinQueryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet body = {}; // Object | QueryPostRequest\n\n// Query for workbins\napiInstance.postTaskmanagementWorkbinsQuery(body)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkbinsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkbinsQuery\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkitemacdcancel": {
    "operationId": "posttaskmanagementworkitemacdcancel",
    "functionName": "postTaskmanagementWorkitemAcdCancel",
    "signature": "postTaskmanagementWorkitemAcdCancel(workitemId)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Workitem",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\n\n// Cancel the assignment process for a workitem that is currently queued for assignment through ACD.\napiInstance.postTaskmanagementWorkitemAcdCancel(workitemId)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkitemAcdCancel success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkitemAcdCancel\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkitemdisconnect": {
    "operationId": "posttaskmanagementworkitemdisconnect",
    "functionName": "postTaskmanagementWorkitemDisconnect",
    "signature": "postTaskmanagementWorkitemDisconnect(workitemId)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Workitem",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\n\n// Disconnect the assignee of the workitem\napiInstance.postTaskmanagementWorkitemDisconnect(workitemId)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkitemDisconnect success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkitemDisconnect\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkitemterminate": {
    "operationId": "posttaskmanagementworkitemterminate",
    "functionName": "postTaskmanagementWorkitemTerminate",
    "signature": "postTaskmanagementWorkitemTerminate(workitemId, body)",
    "parameters": [
      {
        "name": "workitemId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Workitem",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet workitemId = \"workitemId_example\"; // String | Workitem ID\nlet opts = { \n  \"body\": {} // Object | Terminated request\n};\n\n// Terminate a workitem\napiInstance.postTaskmanagementWorkitemTerminate(workitemId, opts)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkitemTerminate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkitemTerminate\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkitems": {
    "operationId": "posttaskmanagementworkitems",
    "functionName": "postTaskmanagementWorkitems",
    "signature": "postTaskmanagementWorkitems(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Workitem",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet body = {}; // Object | Workitem\n\n// Create a workitem\napiInstance.postTaskmanagementWorkitems(body)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkitems success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkitems\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkitemsquery": {
    "operationId": "posttaskmanagementworkitemsquery",
    "functionName": "postTaskmanagementWorkitemsQuery",
    "signature": "postTaskmanagementWorkitemsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WorkitemPostQueryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet body = {}; // Object | WorkitemQueryPostRequest\n\n// Query for workitems\napiInstance.postTaskmanagementWorkitemsQuery(body)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkitemsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkitemsQuery\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworkitemsschemas": {
    "operationId": "posttaskmanagementworkitemsschemas",
    "functionName": "postTaskmanagementWorkitemsSchemas",
    "signature": "postTaskmanagementWorkitemsSchemas(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet body = {}; // Object | Schema\n\n// Create a schema\napiInstance.postTaskmanagementWorkitemsSchemas(body)\n  .then((data) => {\n    console.log(`postTaskmanagementWorkitemsSchemas success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorkitemsSchemas\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworktypestatuses": {
    "operationId": "posttaskmanagementworktypestatuses",
    "functionName": "postTaskmanagementWorktypeStatuses",
    "signature": "postTaskmanagementWorktypeStatuses(worktypeId, body)",
    "parameters": [
      {
        "name": "worktypeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkitemStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet worktypeId = \"worktypeId_example\"; // String | Worktype id\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Add a status to a worktype\napiInstance.postTaskmanagementWorktypeStatuses(worktypeId, opts)\n  .then((data) => {\n    console.log(`postTaskmanagementWorktypeStatuses success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorktypeStatuses\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworktypes": {
    "operationId": "posttaskmanagementworktypes",
    "functionName": "postTaskmanagementWorktypes",
    "signature": "postTaskmanagementWorktypes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Worktype",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a worktype\napiInstance.postTaskmanagementWorktypes(opts)\n  .then((data) => {\n    console.log(`postTaskmanagementWorktypes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorktypes\");\n    console.error(err);\n  });"
  },
  "posttaskmanagementworktypesquery": {
    "operationId": "posttaskmanagementworktypesquery",
    "functionName": "postTaskmanagementWorktypesQuery",
    "signature": "postTaskmanagementWorktypesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WorktypeQueryEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet body = {}; // Object | QueryPostRequest\n\n// Query for worktypes\napiInstance.postTaskmanagementWorktypesQuery(body)\n  .then((data) => {\n    console.log(`postTaskmanagementWorktypesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTaskmanagementWorktypesQuery\");\n    console.error(err);\n  });"
  },
  "puttaskmanagementworkitemsschema": {
    "operationId": "puttaskmanagementworkitemsschema",
    "functionName": "putTaskmanagementWorkitemsSchema",
    "signature": "putTaskmanagementWorkitemsSchema(schemaId, body)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TaskManagementApi();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet body = {}; // Object | Data Schema\n\n// Update a schema\napiInstance.putTaskmanagementWorkitemsSchema(schemaId, body)\n  .then((data) => {\n    console.log(`putTaskmanagementWorkitemsSchema success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTaskmanagementWorkitemsSchema\");\n    console.error(err);\n  });"
  },
  "deleteteam": {
    "operationId": "deleteteam",
    "functionName": "deleteTeam",
    "signature": "deleteTeam(teamId)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet teamId = \"teamId_example\"; // String | Team ID\n\n// Delete team\napiInstance.deleteTeam(teamId)\n  .then(() => {\n    console.log(\"deleteTeam returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTeam\");\n    console.error(err);\n  });"
  },
  "deleteteammembers": {
    "operationId": "deleteteammembers",
    "functionName": "deleteTeamMembers",
    "signature": "deleteTeamMembers(teamId, id)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "id",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet teamId = \"teamId_example\"; // String | Team ID\nlet id = \"id_example\"; // String | Comma separated list of member ids to remove\n\n// Delete team members\napiInstance.deleteTeamMembers(teamId, id)\n  .then(() => {\n    console.log(\"deleteTeamMembers returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTeamMembers\");\n    console.error(err);\n  });"
  },
  "getteam": {
    "operationId": "getteam",
    "functionName": "getTeam",
    "signature": "getTeam(teamId)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Team",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet teamId = \"teamId_example\"; // String | Team ID\n\n// Get team\napiInstance.getTeam(teamId)\n  .then((data) => {\n    console.log(`getTeam success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTeam\");\n    console.error(err);\n  });"
  },
  "getteammembers": {
    "operationId": "getteammembers",
    "functionName": "getTeamMembers",
    "signature": "getTeamMembers(teamId, pageSize, before, after, expand)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TeamMemberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet teamId = \"teamId_example\"; // String | Team ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"before\": \"before_example\", // String | The cursor that points to the previous item in the complete list of teams\n  \"after\": \"after_example\", // String | The cursor that points to the next item in the complete list of teams\n  \"expand\": \"expand_example\" // String | Expand the name on each user\n};\n\n// Get team membership\napiInstance.getTeamMembers(teamId, opts)\n  .then((data) => {\n    console.log(`getTeamMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTeamMembers\");\n    console.error(err);\n  });"
  },
  "getteams": {
    "operationId": "getteams",
    "functionName": "getTeams",
    "signature": "getTeams(pageSize, name, after, before, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TeamEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"name\": \"name_example\", // String | Return only teams whose names start with this value (case-insensitive matching)\n  \"after\": \"after_example\", // String | The cursor that points to the next item in the complete list of teams\n  \"before\": \"before_example\", // String | The cursor that points to the previous item in the complete list of teams\n  \"expand\": \"expand_example\" // String | Expand the name on each user\n};\n\n// Get Team listing\napiInstance.getTeams(opts)\n  .then((data) => {\n    console.log(`getTeams success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTeams\");\n    console.error(err);\n  });"
  },
  "patchteam": {
    "operationId": "patchteam",
    "functionName": "patchTeam",
    "signature": "patchTeam(teamId, body)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Team",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet teamId = \"teamId_example\"; // String | Team ID\nlet body = {}; // Object | Team\n\n// Update team\napiInstance.patchTeam(teamId, body)\n  .then((data) => {\n    console.log(`patchTeam success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchTeam\");\n    console.error(err);\n  });"
  },
  "postteammembers": {
    "operationId": "postteammembers",
    "functionName": "postTeamMembers",
    "signature": "postTeamMembers(teamId, body)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TeamMemberAddListingResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet teamId = \"teamId_example\"; // String | Team ID\nlet body = {}; // Object | TeamMembers\n\n// Add team members\napiInstance.postTeamMembers(teamId, body)\n  .then((data) => {\n    console.log(`postTeamMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTeamMembers\");\n    console.error(err);\n  });"
  },
  "postteams": {
    "operationId": "postteams",
    "functionName": "postTeams",
    "signature": "postTeams(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Team",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TeamsApi();\n\nlet body = {}; // Object | Team\n\n// Create a team\napiInstance.postTeams(body)\n  .then((data) => {\n    console.log(`postTeams success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTeams\");\n    console.error(err);\n  });"
  },
  "gettelephonymediaregions": {
    "operationId": "gettelephonymediaregions",
    "functionName": "getTelephonyMediaregions",
    "signature": "getTelephonyMediaregions()",
    "return": "MediaRegions",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyApi();\n\n// Retrieve the list of AWS regions media can stream through.\napiInstance.getTelephonyMediaregions()\n  .then((data) => {\n    console.log(`getTelephonyMediaregions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyMediaregions\");\n    console.error(err);\n  });"
  },
  "gettelephonysiptraces": {
    "operationId": "gettelephonysiptraces",
    "functionName": "getTelephonySiptraces",
    "signature": "getTelephonySiptraces(dateStart, dateEnd, callId, toUser, fromUser, conversationId)",
    "parameters": [
      {
        "name": "dateStart",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "dateEnd",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "callId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "toUser",
        "type": "String",
        "required": "false"
      },
      {
        "name": "fromUser",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SipSearchResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyApi();\n\nlet dateStart = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet dateEnd = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet opts = { \n  \"callId\": \"callId_example\", // String | unique identification of the placed call\n  \"toUser\": \"toUser_example\", // String | User to who the call was placed\n  \"fromUser\": \"fromUser_example\", // String | user who placed the call\n  \"conversationId\": \"conversationId_example\" // String | Unique identification of the conversation\n};\n\n// Fetch SIP metadata\napiInstance.getTelephonySiptraces(dateStart, dateEnd, opts)\n  .then((data) => {\n    console.log(`getTelephonySiptraces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonySiptraces\");\n    console.error(err);\n  });"
  },
  "gettelephonysiptracesdownloaddownloadid": {
    "operationId": "gettelephonysiptracesdownloaddownloadid",
    "functionName": "getTelephonySiptracesDownloadDownloadId",
    "signature": "getTelephonySiptracesDownloadDownloadId(downloadId)",
    "parameters": [
      {
        "name": "downloadId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SignedUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyApi();\n\nlet downloadId = \"downloadId_example\"; // String | unique id for the downloaded file in S3\n\n// Get signed S3 URL for a pcap download\napiInstance.getTelephonySiptracesDownloadDownloadId(downloadId)\n  .then((data) => {\n    console.log(`getTelephonySiptracesDownloadDownloadId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonySiptracesDownloadDownloadId\");\n    console.error(err);\n  });"
  },
  "posttelephonysiptracesdownload": {
    "operationId": "posttelephonysiptracesdownload",
    "functionName": "postTelephonySiptracesDownload",
    "signature": "postTelephonySiptracesDownload(sIPSearchPublicRequest)",
    "parameters": [
      {
        "name": "sIPSearchPublicRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SipDownloadResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyApi();\n\nlet sIPSearchPublicRequest = {}; // Object | \n\n// Request a download of a pcap file to S3\napiInstance.postTelephonySiptracesDownload(sIPSearchPublicRequest)\n  .then((data) => {\n    console.log(`postTelephonySiptracesDownload success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonySiptracesDownload\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedge": {
    "operationId": "deletetelephonyprovidersedge",
    "functionName": "deleteTelephonyProvidersEdge",
    "signature": "deleteTelephonyProvidersEdge(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n// Delete a edge.\napiInstance.deleteTelephonyProvidersEdge(edgeId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdge returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdge\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgelogicalinterface": {
    "operationId": "deletetelephonyprovidersedgelogicalinterface",
    "functionName": "deleteTelephonyProvidersEdgeLogicalinterface",
    "signature": "deleteTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\n\n// Delete an edge logical interface\napiInstance.deleteTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgeLogicalinterface returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgeLogicalinterface\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgesoftwareupdate": {
    "operationId": "deletetelephonyprovidersedgesoftwareupdate",
    "functionName": "deleteTelephonyProvidersEdgeSoftwareupdate",
    "signature": "deleteTelephonyProvidersEdgeSoftwareupdate(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n// Cancels any in-progress update for this edge.\napiInstance.deleteTelephonyProvidersEdgeSoftwareupdate(edgeId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgeSoftwareupdate returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgeSoftwareupdate\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgescertificateauthority": {
    "operationId": "deletetelephonyprovidersedgescertificateauthority",
    "functionName": "deleteTelephonyProvidersEdgesCertificateauthority",
    "signature": "deleteTelephonyProvidersEdgesCertificateauthority(certificateId)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet certificateId = \"certificateId_example\"; // String | Certificate ID\n\n// Delete a certificate authority.\napiInstance.deleteTelephonyProvidersEdgesCertificateauthority(certificateId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesCertificateauthority returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesCertificateauthority\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgesdidpool": {
    "operationId": "deletetelephonyprovidersedgesdidpool",
    "functionName": "deleteTelephonyProvidersEdgesDidpool",
    "signature": "deleteTelephonyProvidersEdgesDidpool(didPoolId)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet didPoolId = \"didPoolId_example\"; // String | DID pool ID\n\n// Delete a DID Pool by ID.\napiInstance.deleteTelephonyProvidersEdgesDidpool(didPoolId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesDidpool returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesDidpool\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgesedgegroup": {
    "operationId": "deletetelephonyprovidersedgesedgegroup",
    "functionName": "deleteTelephonyProvidersEdgesEdgegroup",
    "signature": "deleteTelephonyProvidersEdgesEdgegroup(edgeGroupId)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeGroupId = \"edgeGroupId_example\"; // String | Edge group ID\n\n// Delete an edge group.\napiInstance.deleteTelephonyProvidersEdgesEdgegroup(edgeGroupId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesEdgegroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesEdgegroup\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgesextensionpool": {
    "operationId": "deletetelephonyprovidersedgesextensionpool",
    "functionName": "deleteTelephonyProvidersEdgesExtensionpool",
    "signature": "deleteTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet extensionPoolId = \"extensionPoolId_example\"; // String | Extension pool ID\n\n// Delete an extension pool by ID\napiInstance.deleteTelephonyProvidersEdgesExtensionpool(extensionPoolId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesExtensionpool returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesExtensionpool\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgesphone": {
    "operationId": "deletetelephonyprovidersedgesphone",
    "functionName": "deleteTelephonyProvidersEdgesPhone",
    "signature": "deleteTelephonyProvidersEdgesPhone(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneId = \"phoneId_example\"; // String | Phone ID\n\n// Delete a Phone by ID\napiInstance.deleteTelephonyProvidersEdgesPhone(phoneId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesPhone returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesPhone\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgesphonebasesetting": {
    "operationId": "deletetelephonyprovidersedgesphonebasesetting",
    "functionName": "deleteTelephonyProvidersEdgesPhonebasesetting",
    "signature": "deleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneBaseId = \"phoneBaseId_example\"; // String | Phone base ID\n\n// Delete a Phone Base Settings by ID\napiInstance.deleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesPhonebasesetting returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesPhonebasesetting\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgessite": {
    "operationId": "deletetelephonyprovidersedgessite",
    "functionName": "deleteTelephonyProvidersEdgesSite",
    "signature": "deleteTelephonyProvidersEdgesSite(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\n\n// Delete a Site by ID\napiInstance.deleteTelephonyProvidersEdgesSite(siteId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesSite returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesSite\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgessiteoutboundroute": {
    "operationId": "deletetelephonyprovidersedgessiteoutboundroute",
    "functionName": "deleteTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "deleteTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\n\n// Delete Outbound Route\napiInstance.deleteTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesSiteOutboundroute returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesSiteOutboundroute\");\n    console.error(err);\n  });"
  },
  "deletetelephonyprovidersedgestrunkbasesetting": {
    "operationId": "deletetelephonyprovidersedgestrunkbasesetting",
    "functionName": "deleteTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "deleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet trunkBaseSettingsId = \"trunkBaseSettingsId_example\"; // String | Trunk Base ID\n\n// Delete a Trunk Base Settings object by ID\napiInstance.deleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId)\n  .then(() => {\n    console.log(\"deleteTelephonyProvidersEdgesTrunkbasesetting returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTelephonyProvidersEdgesTrunkbasesetting\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedge": {
    "operationId": "gettelephonyprovidersedge",
    "functionName": "getTelephonyProvidersEdge",
    "signature": "getTelephonyProvidersEdge(edgeId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Edge",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in the response, comma-separated\n};\n\n// Get edge.\napiInstance.getTelephonyProvidersEdge(edgeId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdge success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdge\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgediagnosticnslookup": {
    "operationId": "gettelephonyprovidersedgediagnosticnslookup",
    "functionName": "getTelephonyProvidersEdgeDiagnosticNslookup",
    "signature": "getTelephonyProvidersEdgeDiagnosticNslookup(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\napiInstance.getTelephonyProvidersEdgeDiagnosticNslookup(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeDiagnosticNslookup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeDiagnosticNslookup\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgediagnosticping": {
    "operationId": "gettelephonyprovidersedgediagnosticping",
    "functionName": "getTelephonyProvidersEdgeDiagnosticPing",
    "signature": "getTelephonyProvidersEdgeDiagnosticPing(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\napiInstance.getTelephonyProvidersEdgeDiagnosticPing(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeDiagnosticPing success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeDiagnosticPing\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgediagnosticroute": {
    "operationId": "gettelephonyprovidersedgediagnosticroute",
    "functionName": "getTelephonyProvidersEdgeDiagnosticRoute",
    "signature": "getTelephonyProvidersEdgeDiagnosticRoute(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\napiInstance.getTelephonyProvidersEdgeDiagnosticRoute(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeDiagnosticRoute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeDiagnosticRoute\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgediagnostictracepath": {
    "operationId": "gettelephonyprovidersedgediagnostictracepath",
    "functionName": "getTelephonyProvidersEdgeDiagnosticTracepath",
    "signature": "getTelephonyProvidersEdgeDiagnosticTracepath(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\napiInstance.getTelephonyProvidersEdgeDiagnosticTracepath(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeDiagnosticTracepath success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeDiagnosticTracepath\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgelogicalinterface": {
    "operationId": "gettelephonyprovidersedgelogicalinterface",
    "functionName": "getTelephonyProvidersEdgeLogicalinterface",
    "signature": "getTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Field to expand in the response\n};\n\n// Get an edge logical interface\napiInstance.getTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeLogicalinterface success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeLogicalinterface\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgelogicalinterfaces": {
    "operationId": "gettelephonyprovidersedgelogicalinterfaces",
    "functionName": "getTelephonyProvidersEdgeLogicalinterfaces",
    "signature": "getTelephonyProvidersEdgeLogicalinterfaces(edgeId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LogicalInterfaceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Field to expand in the response\n};\n\n// Get edge logical interfaces.\napiInstance.getTelephonyProvidersEdgeLogicalinterfaces(edgeId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeLogicalinterfaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeLogicalinterfaces\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgelogsjob": {
    "operationId": "gettelephonyprovidersedgelogsjob",
    "functionName": "getTelephonyProvidersEdgeLogsJob",
    "signature": "getTelephonyProvidersEdgeLogsJob(edgeId, jobId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeLogsJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet jobId = \"jobId_example\"; // String | Job ID\n\n// Get an Edge logs job.\napiInstance.getTelephonyProvidersEdgeLogsJob(edgeId, jobId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeLogsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeLogsJob\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgemetrics": {
    "operationId": "gettelephonyprovidersedgemetrics",
    "functionName": "getTelephonyProvidersEdgeMetrics",
    "signature": "getTelephonyProvidersEdgeMetrics(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeMetrics",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n// Get the edge metrics.\napiInstance.getTelephonyProvidersEdgeMetrics(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeMetrics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeMetrics\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgephysicalinterface": {
    "operationId": "gettelephonyprovidersedgephysicalinterface",
    "functionName": "getTelephonyProvidersEdgePhysicalinterface",
    "signature": "getTelephonyProvidersEdgePhysicalinterface(edgeId, interfaceId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainPhysicalInterface",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\n\n// Get edge physical interface.\napiInstance.getTelephonyProvidersEdgePhysicalinterface(edgeId, interfaceId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgePhysicalinterface success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgePhysicalinterface\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgephysicalinterfaces": {
    "operationId": "gettelephonyprovidersedgephysicalinterfaces",
    "functionName": "getTelephonyProvidersEdgePhysicalinterfaces",
    "signature": "getTelephonyProvidersEdgePhysicalinterfaces(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhysicalInterfaceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n// Retrieve a list of all configured physical interfaces from a specific edge.\napiInstance.getTelephonyProvidersEdgePhysicalinterfaces(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgePhysicalinterfaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgePhysicalinterfaces\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesetuppackage": {
    "operationId": "gettelephonyprovidersedgesetuppackage",
    "functionName": "getTelephonyProvidersEdgeSetuppackage",
    "signature": "getTelephonyProvidersEdgeSetuppackage(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VmPairingInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n// Get the setup package for a locally deployed edge device. This is needed to complete the setup process for the virtual edge.\napiInstance.getTelephonyProvidersEdgeSetuppackage(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeSetuppackage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeSetuppackage\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesoftwareupdate": {
    "operationId": "gettelephonyprovidersedgesoftwareupdate",
    "functionName": "getTelephonyProvidersEdgeSoftwareupdate",
    "signature": "getTelephonyProvidersEdgeSoftwareupdate(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareUpdateDto",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n// Gets software update status information about any edge.\napiInstance.getTelephonyProvidersEdgeSoftwareupdate(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeSoftwareupdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeSoftwareupdate\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesoftwareversions": {
    "operationId": "gettelephonyprovidersedgesoftwareversions",
    "functionName": "getTelephonyProvidersEdgeSoftwareversions",
    "signature": "getTelephonyProvidersEdgeSoftwareversions(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareVersionDtoEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n// Gets all the available software versions for this edge.\napiInstance.getTelephonyProvidersEdgeSoftwareversions(edgeId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeSoftwareversions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeSoftwareversions\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgetrunks": {
    "operationId": "gettelephonyprovidersedgetrunks",
    "functionName": "getTelephonyProvidersEdgeTrunks",
    "signature": "getTelephonyProvidersEdgeTrunks(edgeId, pageNumber, pageSize, sortBy, sortOrder, trunkBaseId, trunkType)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkBaseId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Value by which to sort\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"trunkBaseId\": \"trunkBaseId_example\", // String | Filter by Trunk Base Ids\n  \"trunkType\": \"trunkType_example\" // String | Filter by a Trunk type\n};\n\n// Get the list of available trunks for the given Edge.\napiInstance.getTelephonyProvidersEdgeTrunks(edgeId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgeTrunks success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgeTrunks\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedges": {
    "operationId": "gettelephonyprovidersedges",
    "functionName": "getTelephonyProvidersEdges",
    "signature": "getTelephonyProvidersEdges(pageSize, pageNumber, name, siteId, edgeGroupId, sortBy, managed, showCloudMedia)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "showCloudMedia",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EdgeEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"siteId\": \"siteId_example\", // String | Filter by site.id\n  \"edgeGroupId\": \"edgeGroupId_example\", // String | Filter by edgeGroup.id\n  \"sortBy\": \"name\", // String | Sort by\n  \"managed\": true, // Boolean | Filter by managed\n  \"showCloudMedia\": true // Boolean | True to show the cloud media devices in the result.\n};\n\n// Get the list of edges.\napiInstance.getTelephonyProvidersEdges(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdges success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdges\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesavailablelanguages": {
    "operationId": "gettelephonyprovidersedgesavailablelanguages",
    "functionName": "getTelephonyProvidersEdgesAvailablelanguages",
    "signature": "getTelephonyProvidersEdgesAvailablelanguages()",
    "return": "AvailableLanguageList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\n// Get the list of available languages.\napiInstance.getTelephonyProvidersEdgesAvailablelanguages()\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesAvailablelanguages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesAvailablelanguages\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgescertificateauthorities": {
    "operationId": "gettelephonyprovidersedgescertificateauthorities",
    "functionName": "getTelephonyProvidersEdgesCertificateauthorities",
    "signature": "getTelephonyProvidersEdgesCertificateauthorities()",
    "return": "CertificateAuthorityEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\n// Get the list of certificate authorities.\napiInstance.getTelephonyProvidersEdgesCertificateauthorities()\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesCertificateauthorities success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesCertificateauthorities\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgescertificateauthority": {
    "operationId": "gettelephonyprovidersedgescertificateauthority",
    "functionName": "getTelephonyProvidersEdgesCertificateauthority",
    "signature": "getTelephonyProvidersEdgesCertificateauthority(certificateId)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet certificateId = \"certificateId_example\"; // String | Certificate ID\n\n// Get a certificate authority.\napiInstance.getTelephonyProvidersEdgesCertificateauthority(certificateId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesCertificateauthority success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesCertificateauthority\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesdid": {
    "operationId": "gettelephonyprovidersedgesdid",
    "functionName": "getTelephonyProvidersEdgesDid",
    "signature": "getTelephonyProvidersEdgesDid(didId)",
    "parameters": [
      {
        "name": "didId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DID",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet didId = \"didId_example\"; // String | DID ID\n\n// Get a DID by ID.\napiInstance.getTelephonyProvidersEdgesDid(didId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesDid success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesDid\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesdidpool": {
    "operationId": "gettelephonyprovidersedgesdidpool",
    "functionName": "getTelephonyProvidersEdgesDidpool",
    "signature": "getTelephonyProvidersEdgesDidpool(didPoolId)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet didPoolId = \"didPoolId_example\"; // String | DID pool ID\n\n// Get a DID Pool by ID.\napiInstance.getTelephonyProvidersEdgesDidpool(didPoolId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesDidpool success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesDidpool\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesdidpools": {
    "operationId": "gettelephonyprovidersedgesdidpools",
    "functionName": "getTelephonyProvidersEdgesDidpools",
    "signature": "getTelephonyProvidersEdgesDidpools(pageSize, pageNumber, sortBy, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DIDPoolEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"number\", // String | Sort by\n  \"id\": [\"id_example\"] // [String] | Filter by a specific list of ID's\n};\n\n// Get a listing of DID Pools\napiInstance.getTelephonyProvidersEdgesDidpools(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesDidpools success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesDidpools\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesdidpoolsdids": {
    "operationId": "gettelephonyprovidersedgesdidpoolsdids",
    "functionName": "getTelephonyProvidersEdgesDidpoolsDids",
    "signature": "getTelephonyProvidersEdgesDidpoolsDids(type, id, numberMatch, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "true"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "numberMatch",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DIDNumberEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet type = \"type_example\"; // String | The type of numbers to return.\nlet opts = { \n  \"id\": [\"id_example\"], // [String] | Filter by a specific list of DID Pools.  If this is not provided, numbers from all DID Pools will be returned.\n  \"numberMatch\": \"numberMatch_example\", // String | A number to filter the results by.\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ascending\" // String | Sort order\n};\n\n// Get a listing of unassigned and/or assigned numbers in a set of DID Pools.\napiInstance.getTelephonyProvidersEdgesDidpoolsDids(type, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesDidpoolsDids success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesDidpoolsDids\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesdids": {
    "operationId": "gettelephonyprovidersedgesdids",
    "functionName": "getTelephonyProvidersEdgesDids",
    "signature": "getTelephonyProvidersEdgesDids(pageSize, pageNumber, sortBy, sortOrder, phoneNumber, ownerId, didPoolId, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ownerId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "didPoolId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DIDEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"number\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"phoneNumber\": \"phoneNumber_example\", // String | Filter by phoneNumber\n  \"ownerId\": \"ownerId_example\", // String | Filter by the owner of a phone number\n  \"didPoolId\": \"didPoolId_example\", // String | Filter by the DID Pool assignment\n  \"id\": [\"id_example\"] // [String] | Filter by a specific list of ID's\n};\n\n// Get a listing of DIDs\napiInstance.getTelephonyProvidersEdgesDids(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesDids success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesDids\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesedgegroup": {
    "operationId": "gettelephonyprovidersedgesedgegroup",
    "functionName": "getTelephonyProvidersEdgesEdgegroup",
    "signature": "getTelephonyProvidersEdgesEdgegroup(edgeGroupId, expand)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "EdgeGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeGroupId = \"edgeGroupId_example\"; // String | Edge group ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in the response\n};\n\n// Get edge group.\napiInstance.getTelephonyProvidersEdgesEdgegroup(edgeGroupId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesEdgegroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesEdgegroup\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesedgegroupedgetrunkbase": {
    "operationId": "gettelephonyprovidersedgesedgegroupedgetrunkbase",
    "functionName": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
    "signature": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId)",
    "parameters": [
      {
        "name": "edgegroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "edgetrunkbaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeTrunkBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgegroupId = \"edgegroupId_example\"; // String | Edge Group ID\nlet edgetrunkbaseId = \"edgetrunkbaseId_example\"; // String | Edge Trunk Base ID\n\n// Gets the edge trunk base associated with the edge group\napiInstance.getTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesEdgegroupEdgetrunkbase success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesEdgegroupEdgetrunkbase\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesedgegroups": {
    "operationId": "gettelephonyprovidersedgesedgegroups",
    "functionName": "getTelephonyProvidersEdgesEdgegroups",
    "signature": "getTelephonyProvidersEdgesEdgegroups(pageSize, pageNumber, name, sortBy, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EdgeGroupEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"name\", // String | Sort by\n  \"managed\": true // Boolean | Filter by managed\n};\n\n// Get the list of edge groups.\napiInstance.getTelephonyProvidersEdgesEdgegroups(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesEdgegroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesEdgegroups\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesedgeversionreport": {
    "operationId": "gettelephonyprovidersedgesedgeversionreport",
    "functionName": "getTelephonyProvidersEdgesEdgeversionreport",
    "signature": "getTelephonyProvidersEdgesEdgeversionreport()",
    "return": "EdgeVersionReport",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\n// Get the edge version report.\napiInstance.getTelephonyProvidersEdgesEdgeversionreport()\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesEdgeversionreport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesEdgeversionreport\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesexpired": {
    "operationId": "gettelephonyprovidersedgesexpired",
    "functionName": "getTelephonyProvidersEdgesExpired",
    "signature": "getTelephonyProvidersEdgesExpired()",
    "return": "ExpiredEdgeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\n// List of edges more than 4 edge versions behind the latest software.\napiInstance.getTelephonyProvidersEdgesExpired()\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesExpired success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesExpired\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesextension": {
    "operationId": "gettelephonyprovidersedgesextension",
    "functionName": "getTelephonyProvidersEdgesExtension",
    "signature": "getTelephonyProvidersEdgesExtension(extensionId)",
    "parameters": [
      {
        "name": "extensionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Extension",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet extensionId = \"extensionId_example\"; // String | Extension ID\n\n// Get an extension by ID.\napiInstance.getTelephonyProvidersEdgesExtension(extensionId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesExtension success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesExtension\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesextensionpool": {
    "operationId": "gettelephonyprovidersedgesextensionpool",
    "functionName": "getTelephonyProvidersEdgesExtensionpool",
    "signature": "getTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet extensionPoolId = \"extensionPoolId_example\"; // String | Extension pool ID\n\n// Get an extension pool by ID\napiInstance.getTelephonyProvidersEdgesExtensionpool(extensionPoolId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesExtensionpool success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesExtensionpool\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesextensionpools": {
    "operationId": "gettelephonyprovidersedgesextensionpools",
    "functionName": "getTelephonyProvidersEdgesExtensionpools",
    "signature": "getTelephonyProvidersEdgesExtensionpools(pageSize, pageNumber, sortBy, _number)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_number",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExtensionPoolEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"sortBy_example\", // String | Sort by\n  \"_number\": \"_number_example\" // String | Deprecated, filtering by number not supported\n};\n\n// Get a listing of extension pools\napiInstance.getTelephonyProvidersEdgesExtensionpools(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesExtensionpools success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesExtensionpools\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesextensionpoolsdivisionviews": {
    "operationId": "gettelephonyprovidersedgesextensionpoolsdivisionviews",
    "functionName": "getTelephonyProvidersEdgesExtensionpoolsDivisionviews",
    "signature": "getTelephonyProvidersEdgesExtensionpoolsDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ExtensionPoolDivisionViewEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"id\": [\"id_example\"], // [String] | ID of the Extension Pools to filter by.\n  \"name\": \"name_example\", // String | Name of the Extension Pools to filter by.\n  \"divisionId\": [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n// Get a pageable list of basic extension pool objects filterable by query parameters.\napiInstance.getTelephonyProvidersEdgesExtensionpoolsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesExtensionpoolsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesExtensionpoolsDivisionviews\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesextensions": {
    "operationId": "gettelephonyprovidersedgesextensions",
    "functionName": "getTelephonyProvidersEdgesExtensions",
    "signature": "getTelephonyProvidersEdgesExtensions(pageSize, pageNumber, sortBy, sortOrder, _number)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_number",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExtensionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"number\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"_number\": \"_number_example\" // String | Filter by number\n};\n\n// Get a listing of extensions\napiInstance.getTelephonyProvidersEdgesExtensions(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesExtensions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesExtensions\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesline": {
    "operationId": "gettelephonyprovidersedgesline",
    "functionName": "getTelephonyProvidersEdgesLine",
    "signature": "getTelephonyProvidersEdgesLine(lineId)",
    "parameters": [
      {
        "name": "lineId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Line",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet lineId = \"lineId_example\"; // String | Line ID\n\n// Get a Line by ID\napiInstance.getTelephonyProvidersEdgesLine(lineId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesLine success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesLine\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgeslinebasesetting": {
    "operationId": "gettelephonyprovidersedgeslinebasesetting",
    "functionName": "getTelephonyProvidersEdgesLinebasesetting",
    "signature": "getTelephonyProvidersEdgesLinebasesetting(lineBaseId)",
    "parameters": [
      {
        "name": "lineBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LineBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet lineBaseId = \"lineBaseId_example\"; // String | Line base ID\n\n// Get a line base settings object by ID\napiInstance.getTelephonyProvidersEdgesLinebasesetting(lineBaseId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesLinebasesetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesLinebasesetting\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgeslinebasesettings": {
    "operationId": "gettelephonyprovidersedgeslinebasesettings",
    "functionName": "getTelephonyProvidersEdgesLinebasesettings",
    "signature": "getTelephonyProvidersEdgesLinebasesettings(pageNumber, pageSize, sortBy, sortOrder, expand)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LineBaseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Value by which to sort\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in the response, comma-separated\n};\n\n// Get a listing of line base settings objects\napiInstance.getTelephonyProvidersEdgesLinebasesettings(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesLinebasesettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesLinebasesettings\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgeslines": {
    "operationId": "gettelephonyprovidersedgeslines",
    "functionName": "getTelephonyProvidersEdgesLines",
    "signature": "getTelephonyProvidersEdgesLines(pageSize, pageNumber, name, sortBy, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LineEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"sortBy\": \"name\", // String | Value by which to sort\n  \"expand\": [\"expand_example\"] // [String] | Fields to expand in the response, comma-separated. The edgeGroup value is deprecated.\n};\n\n// Get a list of Lines\napiInstance.getTelephonyProvidersEdgesLines(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesLines success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesLines\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgeslinestemplate": {
    "operationId": "gettelephonyprovidersedgeslinestemplate",
    "functionName": "getTelephonyProvidersEdgesLinesTemplate",
    "signature": "getTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId)",
    "parameters": [
      {
        "name": "lineBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Line",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet lineBaseSettingsId = \"lineBaseSettingsId_example\"; // String | The id of a Line Base Settings object upon which to base this Line\n\n// Get a Line instance template based on a Line Base Settings object. This object can then be modified and saved as a new Line instance\napiInstance.getTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesLinesTemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesLinesTemplate\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgeslogicalinterfaces": {
    "operationId": "gettelephonyprovidersedgeslogicalinterfaces",
    "functionName": "getTelephonyProvidersEdgesLogicalinterfaces",
    "signature": "getTelephonyProvidersEdgesLogicalinterfaces(edgeIds, expand)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LogicalInterfaceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeIds = \"edgeIds_example\"; // String | Comma separated list of Edge Id's\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Field to expand in the response\n};\n\n// Get edge logical interfaces.\napiInstance.getTelephonyProvidersEdgesLogicalinterfaces(edgeIds, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesLogicalinterfaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesLogicalinterfaces\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesmediastatisticsconversation": {
    "operationId": "gettelephonyprovidersedgesmediastatisticsconversation",
    "functionName": "getTelephonyProvidersEdgesMediastatisticsConversation",
    "signature": "getTelephonyProvidersEdgesMediastatisticsConversation(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MediaStatisticsListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet conversationId = \"conversationId_example\"; // String | Identifier of the conversation\n\n// Get media endpoint statistics events.\napiInstance.getTelephonyProvidersEdgesMediastatisticsConversation(conversationId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesMediastatisticsConversation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesMediastatisticsConversation\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesmediastatisticsconversationcommunication": {
    "operationId": "gettelephonyprovidersedgesmediastatisticsconversationcommunication",
    "functionName": "getTelephonyProvidersEdgesMediastatisticsConversationCommunication",
    "signature": "getTelephonyProvidersEdgesMediastatisticsConversationCommunication(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MediaStatistics",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet conversationId = \"conversationId_example\"; // String | Identifier of the conversation\nlet communicationId = \"communicationId_example\"; // String | Identifier of the media session\n\n// Get media endpoint statistics event.\napiInstance.getTelephonyProvidersEdgesMediastatisticsConversationCommunication(conversationId, communicationId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesMediastatisticsConversationCommunication success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesMediastatisticsConversationCommunication\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesmetrics": {
    "operationId": "gettelephonyprovidersedgesmetrics",
    "functionName": "getTelephonyProvidersEdgesMetrics",
    "signature": "getTelephonyProvidersEdgesMetrics(edgeIds)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[EdgeMetrics]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeIds = \"edgeIds_example\"; // String | Comma separated list of Edge Id's. Maximum of 100 edge ids allowed.\n\n// Get the metrics for a list of edges.\napiInstance.getTelephonyProvidersEdgesMetrics(edgeIds)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesMetrics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesMetrics\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesoutboundroute": {
    "operationId": "gettelephonyprovidersedgesoutboundroute",
    "functionName": "getTelephonyProvidersEdgesOutboundroute",
    "signature": "getTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
    "parameters": [
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundRoute",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\n\n// Get outbound route\napiInstance.getTelephonyProvidersEdgesOutboundroute(outboundRouteId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesOutboundroute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesOutboundroute\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesoutboundroutes": {
    "operationId": "gettelephonyprovidersedgesoutboundroutes",
    "functionName": "getTelephonyProvidersEdgesOutboundroutes",
    "signature": "getTelephonyProvidersEdgesOutboundroutes(pageSize, pageNumber, name, siteId, externalTrunkBasesIds, sortBy)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "externalTrunkBasesIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutboundRouteEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"siteId\": \"siteId_example\", // String | Filter by site.id\n  \"externalTrunkBasesIds\": \"externalTrunkBasesIds_example\", // String | Filter by externalTrunkBases.ids\n  \"sortBy\": \"name\" // String | Sort by\n};\n\n// Get outbound routes\napiInstance.getTelephonyProvidersEdgesOutboundroutes(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesOutboundroutes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesOutboundroutes\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphone": {
    "operationId": "gettelephonyprovidersedgesphone",
    "functionName": "getTelephonyProvidersEdgesPhone",
    "signature": "getTelephonyProvidersEdgesPhone(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneId = \"phoneId_example\"; // String | Phone ID\n\n// Get a Phone by ID\napiInstance.getTelephonyProvidersEdgesPhone(phoneId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhone success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhone\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphonebasesetting": {
    "operationId": "gettelephonyprovidersedgesphonebasesetting",
    "functionName": "getTelephonyProvidersEdgesPhonebasesetting",
    "signature": "getTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneBaseId = \"phoneBaseId_example\"; // String | Phone base ID\n\n// Get a Phone Base Settings object by ID\napiInstance.getTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhonebasesetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhonebasesetting\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphonebasesettings": {
    "operationId": "gettelephonyprovidersedgesphonebasesettings",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettings",
    "signature": "getTelephonyProvidersEdgesPhonebasesettings(pageSize, pageNumber, sortBy, sortOrder, expand, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PhoneBaseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"name\", // String | Value by which to sort\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"expand\": [\"expand_example\"], // [String] | Fields to expand in the response, comma-separated\n  \"name\": \"name_example\" // String | Name\n};\n\n// Get a list of Phone Base Settings objects\napiInstance.getTelephonyProvidersEdgesPhonebasesettings(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhonebasesettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhonebasesettings\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphonebasesettingsavailablemetabases": {
    "operationId": "gettelephonyprovidersedgesphonebasesettingsavailablemetabases",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases",
    "signature": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "PhoneMetaBaseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of available makes and models to create a new Phone Base Settings\napiInstance.getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphonebasesettingstemplate": {
    "operationId": "gettelephonyprovidersedgesphonebasesettingstemplate",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettingsTemplate",
    "signature": "getTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId)",
    "parameters": [
      {
        "name": "phoneMetabaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneMetabaseId = \"phoneMetabaseId_example\"; // String | The id of a metabase object upon which to base this Phone Base Settings\n\n// Get a Phone Base Settings instance template from a given make and model. This object can then be modified and saved as a new Phone Base Settings instance\napiInstance.getTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhonebasesettingsTemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhonebasesettingsTemplate\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphones": {
    "operationId": "gettelephonyprovidersedgesphones",
    "functionName": "getTelephonyProvidersEdgesPhones",
    "signature": "getTelephonyProvidersEdgesPhones(pageNumber, pageSize, sortBy, sortOrder, siteId, webRtcUserId, phoneBaseSettingsId, linesLoggedInUserId, linesDefaultForUserId, phoneHardwareId, linesId, linesName, name, statusOperationalStatus, secondaryStatusOperationalStatus, expand, fields)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "webRtcUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneBaseSettingsId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesLoggedInUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesDefaultForUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneHardwareId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "statusOperationalStatus",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secondaryStatusOperationalStatus",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "PhoneEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | The field to sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"siteId\": \"siteId_example\", // String | Filter by site.id\n  \"webRtcUserId\": \"webRtcUserId_example\", // String | Filter by webRtcUser.id\n  \"phoneBaseSettingsId\": \"phoneBaseSettingsId_example\", // String | Filter by phoneBaseSettings.id\n  \"linesLoggedInUserId\": \"linesLoggedInUserId_example\", // String | Filter by lines.loggedInUser.id\n  \"linesDefaultForUserId\": \"linesDefaultForUserId_example\", // String | Filter by lines.defaultForUser.id\n  \"phoneHardwareId\": \"phoneHardwareId_example\", // String | Filter by phone_hardwareId\n  \"linesId\": \"linesId_example\", // String | Filter by lines.id\n  \"linesName\": \"linesName_example\", // String | Filter by lines.name\n  \"name\": \"name_example\", // String | Name of the Phone to filter by, comma-separated\n  \"statusOperationalStatus\": \"statusOperationalStatus_example\", // String | The primary status to filter by\n  \"secondaryStatusOperationalStatus\": \"secondaryStatusOperationalStatus_example\", // String | The secondary status to filter by\n  \"expand\": [\"expand_example\"], // [String] | Fields to expand in the response, comma-separated\n  \"fields\": [\"fields_example\"] // [String] | Fields and properties to get, comma-separated\n};\n\n// Get a list of Phone Instances. A maximum of 10,000 results is returned when filtering the results or sorting by a field other than the ID. Sorting by only the ID has no result limit. Each filter supports a wildcard, *, as a value to search for partial values.\napiInstance.getTelephonyProvidersEdgesPhones(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhones success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhones\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphonestemplate": {
    "operationId": "gettelephonyprovidersedgesphonestemplate",
    "functionName": "getTelephonyProvidersEdgesPhonesTemplate",
    "signature": "getTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId)",
    "parameters": [
      {
        "name": "phoneBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneBaseSettingsId = \"phoneBaseSettingsId_example\"; // String | The id of a Phone Base Settings object upon which to base this Phone\n\n// Get a Phone instance template based on a Phone Base Settings object. This object can then be modified and saved as a new Phone instance\napiInstance.getTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhonesTemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhonesTemplate\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgesphysicalinterfaces": {
    "operationId": "gettelephonyprovidersedgesphysicalinterfaces",
    "functionName": "getTelephonyProvidersEdgesPhysicalinterfaces",
    "signature": "getTelephonyProvidersEdgesPhysicalinterfaces(edgeIds)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhysicalInterfaceEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeIds = \"edgeIds_example\"; // String | Comma separated list of Edge Id's\n\n// Get physical interfaces for edges.\napiInstance.getTelephonyProvidersEdgesPhysicalinterfaces(edgeIds)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesPhysicalinterfaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesPhysicalinterfaces\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgessite": {
    "operationId": "gettelephonyprovidersedgessite",
    "functionName": "getTelephonyProvidersEdgesSite",
    "signature": "getTelephonyProvidersEdgesSite(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\n\n// Get a Site by ID.\napiInstance.getTelephonyProvidersEdgesSite(siteId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesSite success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesSite\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgessitenumberplan": {
    "operationId": "gettelephonyprovidersedgessitenumberplan",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplan",
    "signature": "getTelephonyProvidersEdgesSiteNumberplan(siteId, numberPlanId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "numberPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NumberPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet numberPlanId = \"numberPlanId_example\"; // String | Number Plan ID\n\n// Get a Number Plan by ID.\napiInstance.getTelephonyProvidersEdgesSiteNumberplan(siteId, numberPlanId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesSiteNumberplan success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesSiteNumberplan\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgessitenumberplans": {
    "operationId": "gettelephonyprovidersedgessitenumberplans",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplans",
    "signature": "getTelephonyProvidersEdgesSiteNumberplans(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[NumberPlan]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\n\n// Get the list of Number Plans for this Site. Only fetches the first 200 records.\napiInstance.getTelephonyProvidersEdgesSiteNumberplans(siteId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesSiteNumberplans success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesSiteNumberplans\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgessitenumberplansclassifications": {
    "operationId": "gettelephonyprovidersedgessitenumberplansclassifications",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplansClassifications",
    "signature": "getTelephonyProvidersEdgesSiteNumberplansClassifications(siteId, classification)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "classification",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet opts = { \n  \"classification\": \"classification_example\" // String | Classification\n};\n\n// Get a list of Classifications for this Site\napiInstance.getTelephonyProvidersEdgesSiteNumberplansClassifications(siteId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesSiteNumberplansClassifications success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesSiteNumberplansClassifications\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgessiteoutboundroute": {
    "operationId": "gettelephonyprovidersedgessiteoutboundroute",
    "functionName": "getTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "getTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\n\n// Get an outbound route\napiInstance.getTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesSiteOutboundroute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesSiteOutboundroute\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgessiteoutboundroutes": {
    "operationId": "gettelephonyprovidersedgessiteoutboundroutes",
    "functionName": "getTelephonyProvidersEdgesSiteOutboundroutes",
    "signature": "getTelephonyProvidersEdgesSiteOutboundroutes(siteId, pageSize, pageNumber, name, externalTrunkBasesIds, sortBy)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "externalTrunkBasesIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutboundRouteBaseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"name\": \"name_example\", // String | Name\n  \"externalTrunkBasesIds\": \"externalTrunkBasesIds_example\", // String | externalTrunkBases.ids\n  \"sortBy\": \"name\" // String | Sort by\n};\n\n// Get outbound routes\napiInstance.getTelephonyProvidersEdgesSiteOutboundroutes(siteId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesSiteOutboundroutes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesSiteOutboundroutes\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgessites": {
    "operationId": "gettelephonyprovidersedgessites",
    "functionName": "getTelephonyProvidersEdgesSites",
    "signature": "getTelephonyProvidersEdgesSites(pageSize, pageNumber, sortBy, sortOrder, name, locationId, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "SiteEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortBy\": \"name\", // String | Sort by\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"name\": \"name_example\", // String | Name\n  \"locationId\": \"locationId_example\", // String | Location Id\n  \"managed\": true // Boolean | Filter by managed\n};\n\n// Get the list of Sites.\napiInstance.getTelephonyProvidersEdgesSites(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesSites success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesSites\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestimezones": {
    "operationId": "gettelephonyprovidersedgestimezones",
    "functionName": "getTelephonyProvidersEdgesTimezones",
    "signature": "getTelephonyProvidersEdgesTimezones(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TimeZoneEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageSize\": 1000, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get a list of Edge-compatible time zones\napiInstance.getTelephonyProvidersEdgesTimezones(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTimezones success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTimezones\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunk": {
    "operationId": "gettelephonyprovidersedgestrunk",
    "functionName": "getTelephonyProvidersEdgesTrunk",
    "signature": "getTelephonyProvidersEdgesTrunk(trunkId)",
    "parameters": [
      {
        "name": "trunkId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trunk",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet trunkId = \"trunkId_example\"; // String | Trunk ID\n\n// Get a Trunk by ID\napiInstance.getTelephonyProvidersEdgesTrunk(trunkId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunk\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunkmetrics": {
    "operationId": "gettelephonyprovidersedgestrunkmetrics",
    "functionName": "getTelephonyProvidersEdgesTrunkMetrics",
    "signature": "getTelephonyProvidersEdgesTrunkMetrics(trunkId)",
    "parameters": [
      {
        "name": "trunkId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrunkMetrics",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet trunkId = \"trunkId_example\"; // String | Trunk Id\n\n// Get the trunk metrics.\napiInstance.getTelephonyProvidersEdgesTrunkMetrics(trunkId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunkMetrics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunkMetrics\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunkbasesetting": {
    "operationId": "gettelephonyprovidersedgestrunkbasesetting",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "getTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, ignoreHidden)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ignoreHidden",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TrunkBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet trunkBaseSettingsId = \"trunkBaseSettingsId_example\"; // String | Trunk Base ID\nlet opts = { \n  \"ignoreHidden\": true // Boolean | Set this to true to not receive trunk properties that are meant to be hidden or for internal system usage only.\n};\n\n// Get a Trunk Base Settings object by ID\napiInstance.getTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunkbasesetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunkbasesetting\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunkbasesettings": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettings",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettings",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettings(pageNumber, pageSize, sortBy, sortOrder, recordingEnabled, ignoreHidden, managed, expand, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "recordingEnabled",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "ignoreHidden",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkBaseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Value by which to sort\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"recordingEnabled\": true, // Boolean | Filter trunks by recording enabled\n  \"ignoreHidden\": true, // Boolean | Set this to true to not receive trunk properties that are meant to be hidden or for internal system usage only.\n  \"managed\": true, // Boolean | Filter by managed\n  \"expand\": [\"expand_example\"], // [String] | Fields to expand in the response, comma-separated\n  \"name\": \"name_example\" // String | Name of the TrunkBase to filter by\n};\n\n// Get Trunk Base Settings listing\napiInstance.getTelephonyProvidersEdgesTrunkbasesettings(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunkbasesettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunkbasesettings\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunkbasesettingsavailablemetabases": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettingsavailablemetabases",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(type, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrunkMetabaseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"type\": \"type_example\", // String | \n  \"pageSize\": 25, // Number | \n  \"pageNumber\": 1 // Number | \n};\n\n// Get a list of available makes and models to create a new Trunk Base Settings\napiInstance.getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunkbasesettingstemplate": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettingstemplate",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId)",
    "parameters": [
      {
        "name": "trunkMetabaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet trunkMetabaseId = \"trunkMetabaseId_example\"; // String | The id of a metabase object upon which to base this Trunk Base Settings\n\n// Get a Trunk Base Settings instance template from a given make and model. This object can then be modified and saved as a new Trunk Base Settings instance\napiInstance.getTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunkbasesettingsTemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunkbasesettingsTemplate\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunks": {
    "operationId": "gettelephonyprovidersedgestrunks",
    "functionName": "getTelephonyProvidersEdgesTrunks",
    "signature": "getTelephonyProvidersEdgesTrunks(pageNumber, pageSize, sortBy, sortOrder, edgeId, trunkBaseId, trunkType)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkBaseId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"pageNumber\": 1, // Number | Page number\n  \"pageSize\": 25, // Number | Page size\n  \"sortBy\": \"name\", // String | Value by which to sort\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"edgeId\": \"edgeId_example\", // String | Filter by Edge Ids\n  \"trunkBaseId\": \"trunkBaseId_example\", // String | Filter by Trunk Base Ids\n  \"trunkType\": \"trunkType_example\" // String | Filter by a Trunk type\n};\n\n// Get the list of available trunks.\napiInstance.getTelephonyProvidersEdgesTrunks(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunks success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunks\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunksmetrics": {
    "operationId": "gettelephonyprovidersedgestrunksmetrics",
    "functionName": "getTelephonyProvidersEdgesTrunksMetrics",
    "signature": "getTelephonyProvidersEdgesTrunksMetrics(trunkIds)",
    "parameters": [
      {
        "name": "trunkIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[TrunkMetrics]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet trunkIds = \"trunkIds_example\"; // String | Comma separated list of Trunk Id's\n\n// Get the metrics for a list of trunks.\napiInstance.getTelephonyProvidersEdgesTrunksMetrics(trunkIds)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunksMetrics success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunksMetrics\");\n    console.error(err);\n  });"
  },
  "gettelephonyprovidersedgestrunkswithrecording": {
    "operationId": "gettelephonyprovidersedgestrunkswithrecording",
    "functionName": "getTelephonyProvidersEdgesTrunkswithrecording",
    "signature": "getTelephonyProvidersEdgesTrunkswithrecording(trunkType)",
    "parameters": [
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkRecordingEnabledCount",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet opts = { \n  \"trunkType\": \"trunkType_example\" // String | The type of this trunk base.\n};\n\n// Get Counts of trunks that have recording disabled or enabled\napiInstance.getTelephonyProvidersEdgesTrunkswithrecording(opts)\n  .then((data) => {\n    console.log(`getTelephonyProvidersEdgesTrunkswithrecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTelephonyProvidersEdgesTrunkswithrecording\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgediagnosticnslookup": {
    "operationId": "posttelephonyprovidersedgediagnosticnslookup",
    "functionName": "postTelephonyProvidersEdgeDiagnosticNslookup",
    "signature": "postTelephonyProvidersEdgeDiagnosticNslookup(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n// Nslookup request command to collect networking-related information from an Edge for a target IP or host.\napiInstance.postTelephonyProvidersEdgeDiagnosticNslookup(edgeId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeDiagnosticNslookup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeDiagnosticNslookup\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgediagnosticping": {
    "operationId": "posttelephonyprovidersedgediagnosticping",
    "functionName": "postTelephonyProvidersEdgeDiagnosticPing",
    "signature": "postTelephonyProvidersEdgeDiagnosticPing(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n// Ping Request command to collect networking-related information from an Edge for a target IP or host.\napiInstance.postTelephonyProvidersEdgeDiagnosticPing(edgeId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeDiagnosticPing success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeDiagnosticPing\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgediagnosticroute": {
    "operationId": "posttelephonyprovidersedgediagnosticroute",
    "functionName": "postTelephonyProvidersEdgeDiagnosticRoute",
    "signature": "postTelephonyProvidersEdgeDiagnosticRoute(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n// Route request command to collect networking-related information from an Edge for a target IP or host.\napiInstance.postTelephonyProvidersEdgeDiagnosticRoute(edgeId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeDiagnosticRoute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeDiagnosticRoute\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgediagnostictracepath": {
    "operationId": "posttelephonyprovidersedgediagnostictracepath",
    "functionName": "postTelephonyProvidersEdgeDiagnosticTracepath",
    "signature": "postTelephonyProvidersEdgeDiagnosticTracepath(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n// Tracepath request command to collect networking-related information from an Edge for a target IP or host.\napiInstance.postTelephonyProvidersEdgeDiagnosticTracepath(edgeId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeDiagnosticTracepath success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeDiagnosticTracepath\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgelogicalinterfaces": {
    "operationId": "posttelephonyprovidersedgelogicalinterfaces",
    "functionName": "postTelephonyProvidersEdgeLogicalinterfaces",
    "signature": "postTelephonyProvidersEdgeLogicalinterfaces(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | Logical interface\n\n// Create an edge logical interface.\napiInstance.postTelephonyProvidersEdgeLogicalinterfaces(edgeId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeLogicalinterfaces success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeLogicalinterfaces\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgelogsjobupload": {
    "operationId": "posttelephonyprovidersedgelogsjobupload",
    "functionName": "postTelephonyProvidersEdgeLogsJobUpload",
    "signature": "postTelephonyProvidersEdgeLogsJobUpload(edgeId, jobId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet jobId = \"jobId_example\"; // String | Job ID\nlet body = {}; // Object | Log upload request\n\n// Request that the specified fileIds be uploaded from the Edge.\napiInstance.postTelephonyProvidersEdgeLogsJobUpload(edgeId, jobId, body)\n  .then(() => {\n    console.log(\"postTelephonyProvidersEdgeLogsJobUpload returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeLogsJobUpload\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgelogsjobs": {
    "operationId": "posttelephonyprovidersedgelogsjobs",
    "functionName": "postTelephonyProvidersEdgeLogsJobs",
    "signature": "postTelephonyProvidersEdgeLogsJobs(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeLogsJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | EdgeLogsJobRequest\n\n// Create a job to upload a list of Edge logs.\napiInstance.postTelephonyProvidersEdgeLogsJobs(edgeId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeLogsJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeLogsJobs\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgereboot": {
    "operationId": "posttelephonyprovidersedgereboot",
    "functionName": "postTelephonyProvidersEdgeReboot",
    "signature": "postTelephonyProvidersEdgeReboot(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  \"body\": {} // Object | Parameters for the edge reboot\n};\n\n// Reboot an Edge\napiInstance.postTelephonyProvidersEdgeReboot(edgeId, opts)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeReboot success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeReboot\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesoftwareupdate": {
    "operationId": "posttelephonyprovidersedgesoftwareupdate",
    "functionName": "postTelephonyProvidersEdgeSoftwareupdate",
    "signature": "postTelephonyProvidersEdgeSoftwareupdate(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareUpdateDto",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | Software update request\n\n// Starts a software update for this edge.\napiInstance.postTelephonyProvidersEdgeSoftwareupdate(edgeId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeSoftwareupdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeSoftwareupdate\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgestatuscode": {
    "operationId": "posttelephonyprovidersedgestatuscode",
    "functionName": "postTelephonyProvidersEdgeStatuscode",
    "signature": "postTelephonyProvidersEdgeStatuscode(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  \"body\": {} // Object | Edge Service State\n};\n\n// Take an Edge in or out of service\napiInstance.postTelephonyProvidersEdgeStatuscode(edgeId, opts)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeStatuscode success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeStatuscode\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgeunpair": {
    "operationId": "posttelephonyprovidersedgeunpair",
    "functionName": "postTelephonyProvidersEdgeUnpair",
    "signature": "postTelephonyProvidersEdgeUnpair(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n// Unpair an Edge\napiInstance.postTelephonyProvidersEdgeUnpair(edgeId)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgeUnpair success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgeUnpair\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedges": {
    "operationId": "posttelephonyprovidersedges",
    "functionName": "postTelephonyProvidersEdges",
    "signature": "postTelephonyProvidersEdges(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Edge",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | Edge\n\n// Create an edge.\napiInstance.postTelephonyProvidersEdges(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdges success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdges\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesaddressvalidation": {
    "operationId": "posttelephonyprovidersedgesaddressvalidation",
    "functionName": "postTelephonyProvidersEdgesAddressvalidation",
    "signature": "postTelephonyProvidersEdgesAddressvalidation(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ValidateAddressResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | Address\n\n// Validates a street address\napiInstance.postTelephonyProvidersEdgesAddressvalidation(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesAddressvalidation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesAddressvalidation\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgescertificateauthorities": {
    "operationId": "posttelephonyprovidersedgescertificateauthorities",
    "functionName": "postTelephonyProvidersEdgesCertificateauthorities",
    "signature": "postTelephonyProvidersEdgesCertificateauthorities(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | CertificateAuthority\n\n// Create a certificate authority.\napiInstance.postTelephonyProvidersEdgesCertificateauthorities(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesCertificateauthorities success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesCertificateauthorities\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesdidpools": {
    "operationId": "posttelephonyprovidersedgesdidpools",
    "functionName": "postTelephonyProvidersEdgesDidpools",
    "signature": "postTelephonyProvidersEdgesDidpools(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | DID pool\n\n// Create a new DID pool\napiInstance.postTelephonyProvidersEdgesDidpools(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesDidpools success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesDidpools\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesedgegroups": {
    "operationId": "posttelephonyprovidersedgesedgegroups",
    "functionName": "postTelephonyProvidersEdgesEdgegroups",
    "signature": "postTelephonyProvidersEdgesEdgegroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | EdgeGroup\n\n// Create an edge group.\napiInstance.postTelephonyProvidersEdgesEdgegroups(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesEdgegroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesEdgegroups\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesextensionpools": {
    "operationId": "posttelephonyprovidersedgesextensionpools",
    "functionName": "postTelephonyProvidersEdgesExtensionpools",
    "signature": "postTelephonyProvidersEdgesExtensionpools(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | ExtensionPool\n\n// Create a new extension pool\napiInstance.postTelephonyProvidersEdgesExtensionpools(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesExtensionpools success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesExtensionpools\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesphonereboot": {
    "operationId": "posttelephonyprovidersedgesphonereboot",
    "functionName": "postTelephonyProvidersEdgesPhoneReboot",
    "signature": "postTelephonyProvidersEdgesPhoneReboot(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneId = \"phoneId_example\"; // String | Phone Id\n\n// Reboot a Phone\napiInstance.postTelephonyProvidersEdgesPhoneReboot(phoneId)\n  .then(() => {\n    console.log(\"postTelephonyProvidersEdgesPhoneReboot returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesPhoneReboot\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesphonebasesettings": {
    "operationId": "posttelephonyprovidersedgesphonebasesettings",
    "functionName": "postTelephonyProvidersEdgesPhonebasesettings",
    "signature": "postTelephonyProvidersEdgesPhonebasesettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | Phone base settings\n\n// Create a new Phone Base Settings object\napiInstance.postTelephonyProvidersEdgesPhonebasesettings(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesPhonebasesettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesPhonebasesettings\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesphones": {
    "operationId": "posttelephonyprovidersedgesphones",
    "functionName": "postTelephonyProvidersEdgesPhones",
    "signature": "postTelephonyProvidersEdgesPhones(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | Phone\n\n// Create a new Phone\napiInstance.postTelephonyProvidersEdgesPhones(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesPhones success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesPhones\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgesphonesreboot": {
    "operationId": "posttelephonyprovidersedgesphonesreboot",
    "functionName": "postTelephonyProvidersEdgesPhonesReboot",
    "signature": "postTelephonyProvidersEdgesPhonesReboot(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | Phones\n\n// Reboot Multiple Phones\napiInstance.postTelephonyProvidersEdgesPhonesReboot(body)\n  .then(() => {\n    console.log(\"postTelephonyProvidersEdgesPhonesReboot returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesPhonesReboot\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgessiteoutboundroutes": {
    "operationId": "posttelephonyprovidersedgessiteoutboundroutes",
    "functionName": "postTelephonyProvidersEdgesSiteOutboundroutes",
    "signature": "postTelephonyProvidersEdgesSiteOutboundroutes(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet body = {}; // Object | OutboundRoute\n\n// Create outbound route\napiInstance.postTelephonyProvidersEdgesSiteOutboundroutes(siteId, body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesSiteOutboundroutes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesSiteOutboundroutes\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgessites": {
    "operationId": "posttelephonyprovidersedgessites",
    "functionName": "postTelephonyProvidersEdgesSites",
    "signature": "postTelephonyProvidersEdgesSites(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | Site\n\n// Create a Site.\napiInstance.postTelephonyProvidersEdgesSites(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesSites success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesSites\");\n    console.error(err);\n  });"
  },
  "posttelephonyprovidersedgestrunkbasesettings": {
    "operationId": "posttelephonyprovidersedgestrunkbasesettings",
    "functionName": "postTelephonyProvidersEdgesTrunkbasesettings",
    "signature": "postTelephonyProvidersEdgesTrunkbasesettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet body = {}; // Object | Trunk base settings\n\n// Create a Trunk Base Settings object\napiInstance.postTelephonyProvidersEdgesTrunkbasesettings(body)\n  .then((data) => {\n    console.log(`postTelephonyProvidersEdgesTrunkbasesettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTelephonyProvidersEdgesTrunkbasesettings\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedge": {
    "operationId": "puttelephonyprovidersedge",
    "functionName": "putTelephonyProvidersEdge",
    "signature": "putTelephonyProvidersEdge(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Edge",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | Edge\n\n// Update a edge.\napiInstance.putTelephonyProvidersEdge(edgeId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdge success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdge\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgelogicalinterface": {
    "operationId": "puttelephonyprovidersedgelogicalinterface",
    "functionName": "putTelephonyProvidersEdgeLogicalinterface",
    "signature": "putTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\nlet body = {}; // Object | Logical interface\n\n// Update an edge logical interface.\napiInstance.putTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgeLogicalinterface success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgeLogicalinterface\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgescertificateauthority": {
    "operationId": "puttelephonyprovidersedgescertificateauthority",
    "functionName": "putTelephonyProvidersEdgesCertificateauthority",
    "signature": "putTelephonyProvidersEdgesCertificateauthority(certificateId, body)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet certificateId = \"certificateId_example\"; // String | Certificate ID\nlet body = {}; // Object | Certificate authority\n\n// Update a certificate authority.\napiInstance.putTelephonyProvidersEdgesCertificateauthority(certificateId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesCertificateauthority success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesCertificateauthority\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgesdidpool": {
    "operationId": "puttelephonyprovidersedgesdidpool",
    "functionName": "putTelephonyProvidersEdgesDidpool",
    "signature": "putTelephonyProvidersEdgesDidpool(didPoolId, body)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet didPoolId = \"didPoolId_example\"; // String | DID pool ID\nlet body = {}; // Object | DID pool\n\n// Update a DID Pool by ID.\napiInstance.putTelephonyProvidersEdgesDidpool(didPoolId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesDidpool success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesDidpool\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgesedgegroup": {
    "operationId": "puttelephonyprovidersedgesedgegroup",
    "functionName": "putTelephonyProvidersEdgesEdgegroup",
    "signature": "putTelephonyProvidersEdgesEdgegroup(edgeGroupId, body)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgeGroupId = \"edgeGroupId_example\"; // String | Edge group ID\nlet body = {}; // Object | EdgeGroup\n\n// Update an edge group.\napiInstance.putTelephonyProvidersEdgesEdgegroup(edgeGroupId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesEdgegroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesEdgegroup\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgesedgegroupedgetrunkbase": {
    "operationId": "puttelephonyprovidersedgesedgegroupedgetrunkbase",
    "functionName": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
    "signature": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, body)",
    "parameters": [
      {
        "name": "edgegroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "edgetrunkbaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeTrunkBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet edgegroupId = \"edgegroupId_example\"; // String | Edge Group ID\nlet edgetrunkbaseId = \"edgetrunkbaseId_example\"; // String | Edge Trunk Base ID\nlet body = {}; // Object | EdgeTrunkBase\n\n// Update the edge trunk base associated with the edge group\napiInstance.putTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesEdgegroupEdgetrunkbase success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesEdgegroupEdgetrunkbase\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgesextensionpool": {
    "operationId": "puttelephonyprovidersedgesextensionpool",
    "functionName": "putTelephonyProvidersEdgesExtensionpool",
    "signature": "putTelephonyProvidersEdgesExtensionpool(extensionPoolId, body)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet extensionPoolId = \"extensionPoolId_example\"; // String | Extension pool ID\nlet body = {}; // Object | ExtensionPool\n\n// Update an extension pool by ID\napiInstance.putTelephonyProvidersEdgesExtensionpool(extensionPoolId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesExtensionpool success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesExtensionpool\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgesphone": {
    "operationId": "puttelephonyprovidersedgesphone",
    "functionName": "putTelephonyProvidersEdgesPhone",
    "signature": "putTelephonyProvidersEdgesPhone(phoneId, body)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneId = \"phoneId_example\"; // String | Phone ID\nlet body = {}; // Object | Phone\n\n// Update a Phone by ID\napiInstance.putTelephonyProvidersEdgesPhone(phoneId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesPhone success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesPhone\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgesphonebasesetting": {
    "operationId": "puttelephonyprovidersedgesphonebasesetting",
    "functionName": "putTelephonyProvidersEdgesPhonebasesetting",
    "signature": "putTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, body)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet phoneBaseId = \"phoneBaseId_example\"; // String | Phone base ID\nlet body = {}; // Object | Phone base settings\n\n// Update a Phone Base Settings by ID\napiInstance.putTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesPhonebasesetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesPhonebasesetting\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgessite": {
    "operationId": "puttelephonyprovidersedgessite",
    "functionName": "putTelephonyProvidersEdgesSite",
    "signature": "putTelephonyProvidersEdgesSite(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet body = {}; // Object | Site\n\n// Update a Site by ID.\napiInstance.putTelephonyProvidersEdgesSite(siteId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesSite success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesSite\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgessitenumberplans": {
    "operationId": "puttelephonyprovidersedgessitenumberplans",
    "functionName": "putTelephonyProvidersEdgesSiteNumberplans",
    "signature": "putTelephonyProvidersEdgesSiteNumberplans(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[NumberPlan]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet body = [{}]; // Object | List of number plans\n\n// Update the list of Number Plans. A user can update maximum 200 number plans at a time.\napiInstance.putTelephonyProvidersEdgesSiteNumberplans(siteId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesSiteNumberplans success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesSiteNumberplans\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgessiteoutboundroute": {
    "operationId": "puttelephonyprovidersedgessiteoutboundroute",
    "functionName": "putTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "putTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\nlet body = {}; // Object | OutboundRoute\n\n// Update outbound route\napiInstance.putTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesSiteOutboundroute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesSiteOutboundroute\");\n    console.error(err);\n  });"
  },
  "puttelephonyprovidersedgestrunkbasesetting": {
    "operationId": "puttelephonyprovidersedgestrunkbasesetting",
    "functionName": "putTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "putTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TelephonyProvidersEdgeApi();\n\nlet trunkBaseSettingsId = \"trunkBaseSettingsId_example\"; // String | Trunk Base ID\nlet body = {}; // Object | Trunk base settings\n\n// Update a Trunk Base Settings object by ID\napiInstance.putTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body)\n  .then((data) => {\n    console.log(`putTelephonyProvidersEdgesTrunkbasesetting success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTelephonyProvidersEdgesTrunkbasesetting\");\n    console.error(err);\n  });"
  },
  "gettextbotsbotssearch": {
    "operationId": "gettextbotsbotssearch",
    "functionName": "getTextbotsBotsSearch",
    "signature": "getTextbotsBotsSearch(botType, botName, botId, pageSize)",
    "parameters": [
      {
        "name": "botType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "botName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "botId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "BotSearchResponseEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TextbotsApi();\n\nlet opts = { \n  \"botType\": [\"botType_example\"], // [String] | Bot types\n  \"botName\": \"botName_example\", // String | Bot name\n  \"botId\": [\"botId_example\"], // [String] | Bot IDs\n  \"pageSize\": 25 // Number | The maximum results to return\n};\n\n// Find bots using the currently configured friendly name or ID.\napiInstance.getTextbotsBotsSearch(opts)\n  .then((data) => {\n    console.log(`getTextbotsBotsSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTextbotsBotsSearch\");\n    console.error(err);\n  });"
  },
  "posttextbotsbotflowssessionturns": {
    "operationId": "posttextbotsbotflowssessionturns",
    "functionName": "postTextbotsBotflowsSessionTurns",
    "signature": "postTextbotsBotflowsSessionTurns(sessionId, turnRequest)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "turnRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TextBotFlowTurnResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TextbotsApi();\n\nlet sessionId = \"sessionId_example\"; // String | The bot flow session ID, typically obtained from 'POST /api/v2/textbots/botflows/sessions'\nlet turnRequest = {}; // Object | \n\n// Issue a bot flow turn event\napiInstance.postTextbotsBotflowsSessionTurns(sessionId, turnRequest)\n  .then((data) => {\n    console.log(`postTextbotsBotflowsSessionTurns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTextbotsBotflowsSessionTurns\");\n    console.error(err);\n  });"
  },
  "posttextbotsbotflowssessions": {
    "operationId": "posttextbotsbotflowssessions",
    "functionName": "postTextbotsBotflowsSessions",
    "signature": "postTextbotsBotflowsSessions(launchRequest)",
    "parameters": [
      {
        "name": "launchRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TextBotFlowLaunchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TextbotsApi();\n\nlet launchRequest = {}; // Object | \n\n// Create an execution instance of a bot flow definition.\napiInstance.postTextbotsBotflowsSessions(launchRequest)\n  .then((data) => {\n    console.log(`postTextbotsBotflowsSessions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTextbotsBotflowsSessions\");\n    console.error(err);\n  });"
  },
  "posttextbotsbotsexecute": {
    "operationId": "posttextbotsbotsexecute",
    "functionName": "postTextbotsBotsExecute",
    "signature": "postTextbotsBotsExecute(postTextRequest)",
    "parameters": [
      {
        "name": "postTextRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PostTextResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TextbotsApi();\n\nlet postTextRequest = {}; // Object | \n\n// Send an intent to a bot to start a dialog/interact with it via text\napiInstance.postTextbotsBotsExecute(postTextRequest)\n  .then((data) => {\n    console.log(`postTextbotsBotsExecute success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postTextbotsBotsExecute\");\n    console.error(err);\n  });"
  },
  "deletetoken": {
    "operationId": "deletetoken",
    "functionName": "deleteToken",
    "signature": "deleteToken(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TokensApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Delete all auth tokens for the specified user.\napiInstance.deleteToken(userId)\n  .then(() => {\n    console.log(\"deleteToken returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteToken\");\n    console.error(err);\n  });"
  },
  "deletetokensme": {
    "operationId": "deletetokensme",
    "functionName": "deleteTokensMe",
    "signature": "deleteTokensMe()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TokensApi();\n\n// Delete auth token used to make the request.\napiInstance.deleteTokensMe()\n  .then(() => {\n    console.log(\"deleteTokensMe returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteTokensMe\");\n    console.error(err);\n  });"
  },
  "gettokensme": {
    "operationId": "gettokensme",
    "functionName": "getTokensMe",
    "signature": "getTokensMe(preserveIdleTTL)",
    "parameters": [
      {
        "name": "preserveIdleTTL",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TokenInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TokensApi();\n\nlet opts = { \n  \"preserveIdleTTL\": true // Boolean | preserveIdleTTL indicates whether the idle token timeout should be reset or preserved. If preserveIdleTTL is true, then TTL value is not reset. If unset or false, the value is reset.\n};\n\n// Fetch information about the current token\napiInstance.getTokensMe(opts)\n  .then((data) => {\n    console.log(`getTokensMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTokensMe\");\n    console.error(err);\n  });"
  },
  "gettokenstimeout": {
    "operationId": "gettokenstimeout",
    "functionName": "getTokensTimeout",
    "signature": "getTokensTimeout()",
    "return": "IdleTokenTimeout",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TokensApi();\n\n// Get the current Idle Token Timeout Value\napiInstance.getTokensTimeout()\n  .then((data) => {\n    console.log(`getTokensTimeout success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTokensTimeout\");\n    console.error(err);\n  });"
  },
  "headtokensme": {
    "operationId": "headtokensme",
    "functionName": "headTokensMe",
    "signature": "headTokensMe()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TokensApi();\n\n// Verify user token\napiInstance.headTokensMe()\n  .then(() => {\n    console.log(\"headTokensMe returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling headTokensMe\");\n    console.error(err);\n  });"
  },
  "puttokenstimeout": {
    "operationId": "puttokenstimeout",
    "functionName": "putTokensTimeout",
    "signature": "putTokensTimeout(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "IdleTokenTimeout",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.TokensApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Update or Enable/Disable the Idle Token Timeout\napiInstance.putTokensTimeout(opts)\n  .then((data) => {\n    console.log(`putTokensTimeout success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putTokensTimeout\");\n    console.error(err);\n  });"
  },
  "postlanguageunderstandingmineruploads": {
    "operationId": "postlanguageunderstandingmineruploads",
    "functionName": "postLanguageunderstandingMinerUploads",
    "signature": "postLanguageunderstandingMinerUploads(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UploadsApi();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet body = null; // Object | query\n\n// Creates a presigned URL for uploading a chat corpus which will be used for mining by intent miner\napiInstance.postLanguageunderstandingMinerUploads(minerId, body)\n  .then((data) => {\n    console.log(`postLanguageunderstandingMinerUploads success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postLanguageunderstandingMinerUploads\");\n    console.error(err);\n  });"
  },
  "postuploadslearningcoverart": {
    "operationId": "postuploadslearningcoverart",
    "functionName": "postUploadsLearningCoverart",
    "signature": "postUploadsLearningCoverart(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UploadsApi();\n\nlet body = {}; // Object | query\n\n// Generates pre-signed URL to upload cover art for learning modules\napiInstance.postUploadsLearningCoverart(body)\n  .then((data) => {\n    console.log(`postUploadsLearningCoverart success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUploadsLearningCoverart\");\n    console.error(err);\n  });"
  },
  "postuploadspublicassetsimages": {
    "operationId": "postuploadspublicassetsimages",
    "functionName": "postUploadsPublicassetsImages",
    "signature": "postUploadsPublicassetsImages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UploadsApi();\n\nlet body = {}; // Object | query\n\n// Creates presigned url for uploading a public asset image\napiInstance.postUploadsPublicassetsImages(body)\n  .then((data) => {\n    console.log(`postUploadsPublicassetsImages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUploadsPublicassetsImages\");\n    console.error(err);\n  });"
  },
  "postuploadsrecordings": {
    "operationId": "postuploadsrecordings",
    "functionName": "postUploadsRecordings",
    "signature": "postUploadsRecordings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UploadsApi();\n\nlet body = {}; // Object | query\n\n// Creates presigned url for uploading a recording file\napiInstance.postUploadsRecordings(body)\n  .then((data) => {\n    console.log(`postUploadsRecordings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUploadsRecordings\");\n    console.error(err);\n  });"
  },
  "postuploadsworkforcemanagementhistoricaldatacsv": {
    "operationId": "postuploadsworkforcemanagementhistoricaldatacsv",
    "functionName": "postUploadsWorkforcemanagementHistoricaldataCsv",
    "signature": "postUploadsWorkforcemanagementHistoricaldataCsv(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UploadsApi();\n\nlet body = {}; // Object | query\n\n// Creates presigned url for uploading WFM historical data file. Requires data in csv format.\napiInstance.postUploadsWorkforcemanagementHistoricaldataCsv(body)\n  .then((data) => {\n    console.log(`postUploadsWorkforcemanagementHistoricaldataCsv success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUploadsWorkforcemanagementHistoricaldataCsv\");\n    console.error(err);\n  });"
  },
  "getusagequeryexecutionidresults": {
    "operationId": "getusagequeryexecutionidresults",
    "functionName": "getUsageQueryExecutionIdResults",
    "signature": "getUsageQueryExecutionIdResults(executionId)",
    "parameters": [
      {
        "name": "executionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ApiUsageQueryResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsageApi();\n\nlet executionId = \"executionId_example\"; // String | ID of the query execution\n\n// Get the results of a usage query\napiInstance.getUsageQueryExecutionIdResults(executionId)\n  .then((data) => {\n    console.log(`getUsageQueryExecutionIdResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsageQueryExecutionIdResults\");\n    console.error(err);\n  });"
  },
  "getusagesimplesearchexecutionidresults": {
    "operationId": "getusagesimplesearchexecutionidresults",
    "functionName": "getUsageSimplesearchExecutionIdResults",
    "signature": "getUsageSimplesearchExecutionIdResults(executionId)",
    "parameters": [
      {
        "name": "executionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ApiUsageQueryResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsageApi();\n\nlet executionId = \"executionId_example\"; // String | ID of the search execution\n\n// Get the results of a usage search\napiInstance.getUsageSimplesearchExecutionIdResults(executionId)\n  .then((data) => {\n    console.log(`getUsageSimplesearchExecutionIdResults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsageSimplesearchExecutionIdResults\");\n    console.error(err);\n  });"
  },
  "postusagequery": {
    "operationId": "postusagequery",
    "functionName": "postUsageQuery",
    "signature": "postUsageQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsageApi();\n\nlet body = {}; // Object | Query\n\n// Query organization API Usage - \napiInstance.postUsageQuery(body)\n  .then((data) => {\n    console.log(`postUsageQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsageQuery\");\n    console.error(err);\n  });"
  },
  "postusagesimplesearch": {
    "operationId": "postusagesimplesearch",
    "functionName": "postUsageSimplesearch",
    "signature": "postUsageSimplesearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsageApi();\n\nlet body = {}; // Object | SimpleSearch\n\n// Search organization API Usage - \napiInstance.postUsageSimplesearch(body)\n  .then((data) => {\n    console.log(`postUsageSimplesearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsageSimplesearch\");\n    console.error(err);\n  });"
  },
  "deleteuserrecording": {
    "operationId": "deleteuserrecording",
    "functionName": "deleteUserrecording",
    "signature": "deleteUserrecording(recordingId)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UserRecordingsApi();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\n\n// Delete a user recording.\napiInstance.deleteUserrecording(recordingId)\n  .then(() => {\n    console.log(\"deleteUserrecording returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteUserrecording\");\n    console.error(err);\n  });"
  },
  "getuserrecording": {
    "operationId": "getuserrecording",
    "functionName": "getUserrecording",
    "signature": "getUserrecording(recordingId, expand)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UserRecordingsApi();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a user recording.\napiInstance.getUserrecording(recordingId, opts)\n  .then((data) => {\n    console.log(`getUserrecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserrecording\");\n    console.error(err);\n  });"
  },
  "getuserrecordingmedia": {
    "operationId": "getuserrecordingmedia",
    "functionName": "getUserrecordingMedia",
    "signature": "getUserrecordingMedia(recordingId, formatId, async)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "async",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DownloadResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UserRecordingsApi();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\nlet opts = { \n  \"formatId\": \"WEBM\", // String | The desired media format.\n  \"async\": true // Boolean | When set to true, api will return 202 response until the recording is ready for download\n};\n\n// Download a user recording.\napiInstance.getUserrecordingMedia(recordingId, opts)\n  .then((data) => {\n    console.log(`getUserrecordingMedia success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserrecordingMedia\");\n    console.error(err);\n  });"
  },
  "getuserrecordings": {
    "operationId": "getuserrecordings",
    "functionName": "getUserrecordings",
    "signature": "getUserrecordings(pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecordingEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UserRecordingsApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Get a list of user recordings.\napiInstance.getUserrecordings(opts)\n  .then((data) => {\n    console.log(`getUserrecordings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserrecordings\");\n    console.error(err);\n  });"
  },
  "getuserrecordingssummary": {
    "operationId": "getuserrecordingssummary",
    "functionName": "getUserrecordingsSummary",
    "signature": "getUserrecordingsSummary()",
    "return": "FaxSummary",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UserRecordingsApi();\n\n// Get user recording summary\napiInstance.getUserrecordingsSummary()\n  .then((data) => {\n    console.log(`getUserrecordingsSummary success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserrecordingsSummary\");\n    console.error(err);\n  });"
  },
  "putuserrecording": {
    "operationId": "putuserrecording",
    "functionName": "putUserrecording",
    "signature": "putUserrecording(recordingId, body, expand)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecording",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UserRecordingsApi();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\nlet body = {}; // Object | UserRecording\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n// Update a user recording.\napiInstance.putUserrecording(recordingId, body, opts)\n  .then((data) => {\n    console.log(`putUserrecording success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserrecording\");\n    console.error(err);\n  });"
  },
  "deleteuser": {
    "operationId": "deleteuser",
    "functionName": "deleteUser",
    "signature": "deleteUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Delete user\napiInstance.deleteUser(userId)\n  .then((data) => {\n    console.log(`deleteUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteUser\");\n    console.error(err);\n  });"
  },
  "deleteuserstationassociatedstation": {
    "operationId": "deleteuserstationassociatedstation",
    "functionName": "deleteUserStationAssociatedstation",
    "signature": "deleteUserStationAssociatedstation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Clear associated station\napiInstance.deleteUserStationAssociatedstation(userId)\n  .then(() => {\n    console.log(\"deleteUserStationAssociatedstation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteUserStationAssociatedstation\");\n    console.error(err);\n  });"
  },
  "deleteuserstationdefaultstation": {
    "operationId": "deleteuserstationdefaultstation",
    "functionName": "deleteUserStationDefaultstation",
    "signature": "deleteUserStationDefaultstation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Clear default station\napiInstance.deleteUserStationDefaultstation(userId)\n  .then(() => {\n    console.log(\"deleteUserStationDefaultstation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteUserStationDefaultstation\");\n    console.error(err);\n  });"
  },
  "getprofilesusers": {
    "operationId": "getprofilesusers",
    "functionName": "getProfilesUsers",
    "signature": "getProfilesUsers(pageSize, pageNumber, id, jid, sortOrder, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jid",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserProfileEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"id\": [\"id_example\"], // [String] | id\n  \"jid\": [\"jid_example\"], // [String] | jid\n  \"sortOrder\": \"ASC\", // String | Ascending or descending sort order\n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand\n  \"integrationPresenceSource\": \"integrationPresenceSource_example\" // String | Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an expand.\n};\n\n// Get a user profile listing\napiInstance.getProfilesUsers(opts)\n  .then((data) => {\n    console.log(`getProfilesUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getProfilesUsers\");\n    console.error(err);\n  });"
  },
  "getuser": {
    "operationId": "getuser",
    "functionName": "getUser",
    "signature": "getUser(userId, expand, integrationPresenceSource, state)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand\n  \"integrationPresenceSource\": \"integrationPresenceSource_example\", // String | Gets an integration presence for a user instead of their default.\n  \"state\": \"active\" // String | Search for a user with this state\n};\n\n// Get user.\napiInstance.getUser(userId, opts)\n  .then((data) => {\n    console.log(`getUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUser\");\n    console.error(err);\n  });"
  },
  "getuseradjacents": {
    "operationId": "getuseradjacents",
    "functionName": "getUserAdjacents",
    "signature": "getUserAdjacents(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Adjacents",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get adjacents\napiInstance.getUserAdjacents(userId, opts)\n  .then((data) => {\n    console.log(`getUserAdjacents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserAdjacents\");\n    console.error(err);\n  });"
  },
  "getusercallforwarding": {
    "operationId": "getusercallforwarding",
    "functionName": "getUserCallforwarding",
    "signature": "getUserCallforwarding(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Get a user's CallForwarding\napiInstance.getUserCallforwarding(userId)\n  .then((data) => {\n    console.log(`getUserCallforwarding success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserCallforwarding\");\n    console.error(err);\n  });"
  },
  "getuserdirectreports": {
    "operationId": "getuserdirectreports",
    "functionName": "getUserDirectreports",
    "signature": "getUserDirectreports(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[User]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get direct reports\napiInstance.getUserDirectreports(userId, opts)\n  .then((data) => {\n    console.log(`getUserDirectreports success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserDirectreports\");\n    console.error(err);\n  });"
  },
  "getuserfavorites": {
    "operationId": "getuserfavorites",
    "functionName": "getUserFavorites",
    "signature": "getUserFavorites(userId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"ASC\", // String | Sort order\n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Deprecated; will be revived with new contract\napiInstance.getUserFavorites(userId, opts)\n  .then((data) => {\n    console.log(`getUserFavorites success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserFavorites\");\n    console.error(err);\n  });"
  },
  "getuseroutofoffice": {
    "operationId": "getuseroutofoffice",
    "functionName": "getUserOutofoffice",
    "signature": "getUserOutofoffice(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutOfOffice",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Get a OutOfOffice\napiInstance.getUserOutofoffice(userId)\n  .then((data) => {\n    console.log(`getUserOutofoffice success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserOutofoffice\");\n    console.error(err);\n  });"
  },
  "getuserprofile": {
    "operationId": "getuserprofile",
    "functionName": "getUserProfile",
    "signature": "getUserProfile(userId, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserProfile",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | userId\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand\n  \"integrationPresenceSource\": \"integrationPresenceSource_example\" // String | Gets an integration presence for a user instead of their default.\n};\n\n// Get user profile\napiInstance.getUserProfile(userId, opts)\n  .then((data) => {\n    console.log(`getUserProfile success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserProfile\");\n    console.error(err);\n  });"
  },
  "getuserprofileskills": {
    "operationId": "getuserprofileskills",
    "functionName": "getUserProfileskills",
    "signature": "getUserProfileskills(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// List profile skills for a user\napiInstance.getUserProfileskills(userId)\n  .then((data) => {\n    console.log(`getUserProfileskills success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserProfileskills\");\n    console.error(err);\n  });"
  },
  "getuserroutingstatus": {
    "operationId": "getuserroutingstatus",
    "functionName": "getUserRoutingstatus",
    "signature": "getUserRoutingstatus(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RoutingStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Fetch the routing status of a user\napiInstance.getUserRoutingstatus(userId)\n  .then((data) => {\n    console.log(`getUserRoutingstatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserRoutingstatus\");\n    console.error(err);\n  });"
  },
  "getuserstate": {
    "operationId": "getuserstate",
    "functionName": "getUserState",
    "signature": "getUserState(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserState",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Get user state information.\napiInstance.getUserState(userId)\n  .then((data) => {\n    console.log(`getUserState success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserState\");\n    console.error(err);\n  });"
  },
  "getuserstation": {
    "operationId": "getuserstation",
    "functionName": "getUserStation",
    "signature": "getUserStation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserStations",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Get station information for user\napiInstance.getUserStation(userId)\n  .then((data) => {\n    console.log(`getUserStation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserStation\");\n    console.error(err);\n  });"
  },
  "getusersuperiors": {
    "operationId": "getusersuperiors",
    "functionName": "getUserSuperiors",
    "signature": "getUserSuperiors(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[User]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n// Get superiors\napiInstance.getUserSuperiors(userId, opts)\n  .then((data) => {\n    console.log(`getUserSuperiors success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserSuperiors\");\n    console.error(err);\n  });"
  },
  "getusertrustors": {
    "operationId": "getusertrustors",
    "functionName": "getUserTrustors",
    "signature": "getUserTrustors(userId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustorEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// List the organizations that have authorized/trusted the user.\napiInstance.getUserTrustors(userId, opts)\n  .then((data) => {\n    console.log(`getUserTrustors success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUserTrustors\");\n    console.error(err);\n  });"
  },
  "getusers": {
    "operationId": "getusers",
    "functionName": "getUsers",
    "signature": "getUsers(pageSize, pageNumber, id, jabberId, sortOrder, expand, integrationPresenceSource, state)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jabberId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"id\": [\"id_example\"], // [String] | A list of user IDs to fetch by bulk\n  \"jabberId\": [\"jabberId_example\"], // [String] | A list of jabberIds to fetch by bulk (cannot be used with the id parameter)\n  \"sortOrder\": \"ASC\", // String | Ascending or descending sort order\n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand\n  \"integrationPresenceSource\": \"integrationPresenceSource_example\", // String | Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an expand. When using this parameter the maximum number of users that can be returned is 100.\n  \"state\": \"active\" // String | Only list users of this state\n};\n\n// Get the list of available users.\napiInstance.getUsers(opts)\n  .then((data) => {\n    console.log(`getUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsers\");\n    console.error(err);\n  });"
  },
  "getusersdevelopmentactivities": {
    "operationId": "getusersdevelopmentactivities",
    "functionName": "getUsersDevelopmentActivities",
    "signature": "getUsersDevelopmentActivities(userId, moduleId, interval, completionInterval, overdue, pass, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
    "parameters": [
      {
        "name": "userId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "relationship",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DevelopmentActivityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet opts = { \n  \"userId\": [\"userId_example\"], // [String] | Specifies the list of user IDs to be queried, up to 100 user IDs. It searches for any relationship for the userId.\n  \"moduleId\": \"moduleId_example\", // String | Specifies the ID of the learning module.\n  \"interval\": \"interval_example\", // String | Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"completionInterval\": \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"overdue\": \"Any\", // String | Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned\n  \"pass\": \"Any\", // String | Specifies if only the failed (pass is False) or passed (pass is True) activities are returned. If pass is Any or if the pass parameter is not supplied, all activities are returned\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"Desc\", // String | Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)\n  \"types\": [\"types_example\"], // [String] | Specifies the activity types.\n  \"statuses\": [\"statuses_example\"], // [String] | Specifies the activity statuses to filter by\n  \"relationship\": [\"relationship_example\"] // [String] | Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.\n};\n\n// Get list of Development Activities\napiInstance.getUsersDevelopmentActivities(opts)\n  .then((data) => {\n    console.log(`getUsersDevelopmentActivities success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsersDevelopmentActivities\");\n    console.error(err);\n  });"
  },
  "getusersdevelopmentactivitiesme": {
    "operationId": "getusersdevelopmentactivitiesme",
    "functionName": "getUsersDevelopmentActivitiesMe",
    "signature": "getUsersDevelopmentActivitiesMe(moduleId, interval, completionInterval, overdue, pass, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "relationship",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DevelopmentActivityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet opts = { \n  \"moduleId\": \"moduleId_example\", // String | Specifies the ID of the learning module.\n  \"interval\": \"interval_example\", // String | Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"completionInterval\": \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  \"overdue\": \"Any\", // String | Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned\n  \"pass\": \"Any\", // String | Specifies if only the failed (pass is False) or passed (pass is True) activities are returned. If pass is Any or if the pass parameter is not supplied, all activities are returned\n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1, // Number | Page number\n  \"sortOrder\": \"Desc\", // String | Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)\n  \"types\": [\"types_example\"], // [String] | Specifies the activity types.\n  \"statuses\": [\"statuses_example\"], // [String] | Specifies the activity statuses to filter by\n  \"relationship\": [\"relationship_example\"] // [String] | Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.\n};\n\n// Get list of Development Activities for current user\napiInstance.getUsersDevelopmentActivitiesMe(opts)\n  .then((data) => {\n    console.log(`getUsersDevelopmentActivitiesMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsersDevelopmentActivitiesMe\");\n    console.error(err);\n  });"
  },
  "getusersdevelopmentactivity": {
    "operationId": "getusersdevelopmentactivity",
    "functionName": "getUsersDevelopmentActivity",
    "signature": "getUsersDevelopmentActivity(activityId, type)",
    "parameters": [
      {
        "name": "activityId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "type",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DevelopmentActivity",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet activityId = \"activityId_example\"; // String | Specifies the activity ID, maps to either assignment or appointment ID\nlet type = \"type_example\"; // String | Specifies the activity type.\n\n// Get a Development Activity\napiInstance.getUsersDevelopmentActivity(activityId, type)\n  .then((data) => {\n    console.log(`getUsersDevelopmentActivity success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsersDevelopmentActivity\");\n    console.error(err);\n  });"
  },
  "getusersme": {
    "operationId": "getusersme",
    "functionName": "getUsersMe",
    "signature": "getUsersMe(expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserMe",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  \"integrationPresenceSource\": \"integrationPresenceSource_example\" // String | Get your presence for a given integration. This parameter will only be used when presence is provided as an expand.\n};\n\n// Get current user details.\napiInstance.getUsersMe(opts)\n  .then((data) => {\n    console.log(`getUsersMe success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getUsersMe\");\n    console.error(err);\n  });"
  },
  "patchuser": {
    "operationId": "patchuser",
    "functionName": "patchUser",
    "signature": "patchUser(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | User\n\n// Update user\napiInstance.patchUser(userId, body)\n  .then((data) => {\n    console.log(`patchUser success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUser\");\n    console.error(err);\n  });"
  },
  "patchusercallforwarding": {
    "operationId": "patchusercallforwarding",
    "functionName": "patchUserCallforwarding",
    "signature": "patchUserCallforwarding(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Call forwarding\n\n// Patch a user's CallForwarding\napiInstance.patchUserCallforwarding(userId, body)\n  .then((data) => {\n    console.log(`patchUserCallforwarding success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUserCallforwarding\");\n    console.error(err);\n  });"
  },
  "patchusersbulk": {
    "operationId": "patchusersbulk",
    "functionName": "patchUsersBulk",
    "signature": "patchUsersBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = [{}]; // Object | Users\n\n// Update bulk acd autoanswer on users\napiInstance.patchUsersBulk(body)\n  .then((data) => {\n    console.log(`patchUsersBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchUsersBulk\");\n    console.error(err);\n  });"
  },
  "postuserexternalid": {
    "operationId": "postuserexternalid",
    "functionName": "postUserExternalid",
    "signature": "postUserExternalid(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[UserExternalIdentifier]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | \n\n// Create mapping between external identifier and user. Limit 100 per entity.\napiInstance.postUserExternalid(userId, body)\n  .then((data) => {\n    console.log(`postUserExternalid success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUserExternalid\");\n    console.error(err);\n  });"
  },
  "postuserinvite": {
    "operationId": "postuserinvite",
    "functionName": "postUserInvite",
    "signature": "postUserInvite(userId, force)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  \"force\": false // Boolean | Resend the invitation even if one is already outstanding\n};\n\n// Send an activation email to the user\napiInstance.postUserInvite(userId, opts)\n  .then(() => {\n    console.log(\"postUserInvite returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUserInvite\");\n    console.error(err);\n  });"
  },
  "postuserpassword": {
    "operationId": "postuserpassword",
    "functionName": "postUserPassword",
    "signature": "postUserPassword(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Password\n\n// Change a users password\napiInstance.postUserPassword(userId, body)\n  .then(() => {\n    console.log(\"postUserPassword returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUserPassword\");\n    console.error(err);\n  });"
  },
  "postusers": {
    "operationId": "postusers",
    "functionName": "postUsers",
    "signature": "postUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "User",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | User\n\n// Create user\napiInstance.postUsers(body)\n  .then((data) => {\n    console.log(`postUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsers\");\n    console.error(err);\n  });"
  },
  "postusersdevelopmentactivitiesaggregatesquery": {
    "operationId": "postusersdevelopmentactivitiesaggregatesquery",
    "functionName": "postUsersDevelopmentActivitiesAggregatesQuery",
    "signature": "postUsersDevelopmentActivitiesAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DevelopmentActivityAggregateResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | Aggregate Request\n\n// Retrieve aggregated development activity data\napiInstance.postUsersDevelopmentActivitiesAggregatesQuery(body)\n  .then((data) => {\n    console.log(`postUsersDevelopmentActivitiesAggregatesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsersDevelopmentActivitiesAggregatesQuery\");\n    console.error(err);\n  });"
  },
  "postusersmepassword": {
    "operationId": "postusersmepassword",
    "functionName": "postUsersMePassword",
    "signature": "postUsersMePassword(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet body = {}; // Object | Password\n\n// Change your password\napiInstance.postUsersMePassword(body)\n  .then(() => {\n    console.log(\"postUsersMePassword returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postUsersMePassword\");\n    console.error(err);\n  });"
  },
  "putusercallforwarding": {
    "operationId": "putusercallforwarding",
    "functionName": "putUserCallforwarding",
    "signature": "putUserCallforwarding(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Call forwarding\n\n// Update a user's CallForwarding\napiInstance.putUserCallforwarding(userId, body)\n  .then((data) => {\n    console.log(`putUserCallforwarding success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserCallforwarding\");\n    console.error(err);\n  });"
  },
  "putuseroutofoffice": {
    "operationId": "putuseroutofoffice",
    "functionName": "putUserOutofoffice",
    "signature": "putUserOutofoffice(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutOfOffice",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The updated OutOffOffice\n\n// Update an OutOfOffice\napiInstance.putUserOutofoffice(userId, body)\n  .then((data) => {\n    console.log(`putUserOutofoffice success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserOutofoffice\");\n    console.error(err);\n  });"
  },
  "putuserprofileskills": {
    "operationId": "putuserprofileskills",
    "functionName": "putUserProfileskills",
    "signature": "putUserProfileskills(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [\"body_example\"]; // [String] | Skills\n\n// Update profile skills for a user\napiInstance.putUserProfileskills(userId, body)\n  .then((data) => {\n    console.log(`putUserProfileskills success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserProfileskills\");\n    console.error(err);\n  });"
  },
  "putuserroutingstatus": {
    "operationId": "putuserroutingstatus",
    "functionName": "putUserRoutingstatus",
    "signature": "putUserRoutingstatus(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingStatus",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Routing Status\n\n// Update the routing status of a user\napiInstance.putUserRoutingstatus(userId, body)\n  .then((data) => {\n    console.log(`putUserRoutingstatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserRoutingstatus\");\n    console.error(err);\n  });"
  },
  "putuserstate": {
    "operationId": "putuserstate",
    "functionName": "putUserState",
    "signature": "putUserState(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserState",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | User\n\n// Update user state information.\napiInstance.putUserState(userId, body)\n  .then((data) => {\n    console.log(`putUserState success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserState\");\n    console.error(err);\n  });"
  },
  "putuserstationassociatedstationstationid": {
    "operationId": "putuserstationassociatedstationstationid",
    "functionName": "putUserStationAssociatedstationStationId",
    "signature": "putUserStationAssociatedstationStationId(userId, stationId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet stationId = \"stationId_example\"; // String | stationId\n\n// Set associated station\napiInstance.putUserStationAssociatedstationStationId(userId, stationId)\n  .then(() => {\n    console.log(\"putUserStationAssociatedstationStationId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserStationAssociatedstationStationId\");\n    console.error(err);\n  });"
  },
  "putuserstationdefaultstationstationid": {
    "operationId": "putuserstationdefaultstationstationid",
    "functionName": "putUserStationDefaultstationStationId",
    "signature": "putUserStationDefaultstationStationId(userId, stationId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UsersApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet stationId = \"stationId_example\"; // String | stationId\n\n// Set default station\napiInstance.putUserStationDefaultstationStationId(userId, stationId)\n  .then(() => {\n    console.log(\"putUserStationDefaultstationStationId returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putUserStationDefaultstationStationId\");\n    console.error(err);\n  });"
  },
  "getdate": {
    "operationId": "getdate",
    "functionName": "getDate",
    "signature": "getDate()",
    "return": "ServerDate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UtilitiesApi();\n\n// Get the current system date/time\napiInstance.getDate()\n  .then((data) => {\n    console.log(`getDate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getDate\");\n    console.error(err);\n  });"
  },
  "getipranges": {
    "operationId": "getipranges",
    "functionName": "getIpranges",
    "signature": "getIpranges()",
    "return": "IpAddressRangeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UtilitiesApi();\n\n// Get public ip address ranges for Genesys Cloud\napiInstance.getIpranges()\n  .then((data) => {\n    console.log(`getIpranges success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getIpranges\");\n    console.error(err);\n  });"
  },
  "gettimezones": {
    "operationId": "gettimezones",
    "functionName": "getTimezones",
    "signature": "getTimezones(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TimeZoneEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UtilitiesApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get time zones list\napiInstance.getTimezones(opts)\n  .then((data) => {\n    console.log(`getTimezones success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getTimezones\");\n    console.error(err);\n  });"
  },
  "postcertificatedetails": {
    "operationId": "postcertificatedetails",
    "functionName": "postCertificateDetails",
    "signature": "postCertificateDetails(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ParsedCertificate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.UtilitiesApi();\n\nlet body = {}; // Object | Certificate\n\n// Returns the information about an X509 PEM encoded certificate or certificate chain.\napiInstance.postCertificateDetails(body)\n  .then((data) => {\n    console.log(`postCertificateDetails success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postCertificateDetails\");\n    console.error(err);\n  });"
  },
  "deletevoicemailmessage": {
    "operationId": "deletevoicemailmessage",
    "functionName": "deleteVoicemailMessage",
    "signature": "deleteVoicemailMessage(messageId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet messageId = \"messageId_example\"; // String | Message ID\n\n// Delete a voicemail message.\napiInstance.deleteVoicemailMessage(messageId)\n  .then(() => {\n    console.log(\"deleteVoicemailMessage returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteVoicemailMessage\");\n    console.error(err);\n  });"
  },
  "deletevoicemailmessages": {
    "operationId": "deletevoicemailmessages",
    "functionName": "deleteVoicemailMessages",
    "signature": "deleteVoicemailMessages()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\n// Delete all voicemail messages\napiInstance.deleteVoicemailMessages()\n  .then(() => {\n    console.log(\"deleteVoicemailMessages returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteVoicemailMessages\");\n    console.error(err);\n  });"
  },
  "getvoicemailgroupmailbox": {
    "operationId": "getvoicemailgroupmailbox",
    "functionName": "getVoicemailGroupMailbox",
    "signature": "getVoicemailGroupMailbox(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailMailboxInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet groupId = \"groupId_example\"; // String | groupId\n\n// Get the group's mailbox information\napiInstance.getVoicemailGroupMailbox(groupId)\n  .then((data) => {\n    console.log(`getVoicemailGroupMailbox success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailGroupMailbox\");\n    console.error(err);\n  });"
  },
  "getvoicemailgroupmessages": {
    "operationId": "getvoicemailgroupmessages",
    "functionName": "getVoicemailGroupMessages",
    "signature": "getVoicemailGroupMessages(groupId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// List voicemail messages\napiInstance.getVoicemailGroupMessages(groupId, opts)\n  .then((data) => {\n    console.log(`getVoicemailGroupMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailGroupMessages\");\n    console.error(err);\n  });"
  },
  "getvoicemailgrouppolicy": {
    "operationId": "getvoicemailgrouppolicy",
    "functionName": "getVoicemailGroupPolicy",
    "signature": "getVoicemailGroupPolicy(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailGroupPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n// Get a group's voicemail policy\napiInstance.getVoicemailGroupPolicy(groupId)\n  .then((data) => {\n    console.log(`getVoicemailGroupPolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailGroupPolicy\");\n    console.error(err);\n  });"
  },
  "getvoicemailmailbox": {
    "operationId": "getvoicemailmailbox",
    "functionName": "getVoicemailMailbox",
    "signature": "getVoicemailMailbox()",
    "return": "VoicemailMailboxInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\n// Get the current user's mailbox information\napiInstance.getVoicemailMailbox()\n  .then((data) => {\n    console.log(`getVoicemailMailbox success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailMailbox\");\n    console.error(err);\n  });"
  },
  "getvoicemailmemailbox": {
    "operationId": "getvoicemailmemailbox",
    "functionName": "getVoicemailMeMailbox",
    "signature": "getVoicemailMeMailbox()",
    "return": "VoicemailMailboxInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\n// Get the current user's mailbox information\napiInstance.getVoicemailMeMailbox()\n  .then((data) => {\n    console.log(`getVoicemailMeMailbox success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailMeMailbox\");\n    console.error(err);\n  });"
  },
  "getvoicemailmemessages": {
    "operationId": "getvoicemailmemessages",
    "functionName": "getVoicemailMeMessages",
    "signature": "getVoicemailMeMessages(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// List voicemail messages\napiInstance.getVoicemailMeMessages(opts)\n  .then((data) => {\n    console.log(`getVoicemailMeMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailMeMessages\");\n    console.error(err);\n  });"
  },
  "getvoicemailmepolicy": {
    "operationId": "getvoicemailmepolicy",
    "functionName": "getVoicemailMePolicy",
    "signature": "getVoicemailMePolicy()",
    "return": "VoicemailUserPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\n// Get the current user's voicemail policy\napiInstance.getVoicemailMePolicy()\n  .then((data) => {\n    console.log(`getVoicemailMePolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailMePolicy\");\n    console.error(err);\n  });"
  },
  "getvoicemailmessage": {
    "operationId": "getvoicemailmessage",
    "functionName": "getVoicemailMessage",
    "signature": "getVoicemailMessage(messageId, expand)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | If the caller is a known user, which fields, if any, to expand\n};\n\n// Get a voicemail message\napiInstance.getVoicemailMessage(messageId, opts)\n  .then((data) => {\n    console.log(`getVoicemailMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailMessage\");\n    console.error(err);\n  });"
  },
  "getvoicemailmessagemedia": {
    "operationId": "getvoicemailmessagemedia",
    "functionName": "getVoicemailMessageMedia",
    "signature": "getVoicemailMessageMedia(messageId, formatId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "VoicemailMediaInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet opts = { \n  \"formatId\": \"WEBM\" // String | The desired media format.\n};\n\n// Get media playback URI for this voicemail message\napiInstance.getVoicemailMessageMedia(messageId, opts)\n  .then((data) => {\n    console.log(`getVoicemailMessageMedia success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailMessageMedia\");\n    console.error(err);\n  });"
  },
  "getvoicemailmessages": {
    "operationId": "getvoicemailmessages",
    "functionName": "getVoicemailMessages",
    "signature": "getVoicemailMessages(ids, expand)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet opts = { \n  \"ids\": \"ids_example\", // String | An optional comma separated list of VoicemailMessage ids\n  \"expand\": [\"expand_example\"] // [String] | If the caller is a known user, which fields, if any, to expand\n};\n\n// List voicemail messages\napiInstance.getVoicemailMessages(opts)\n  .then((data) => {\n    console.log(`getVoicemailMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailMessages\");\n    console.error(err);\n  });"
  },
  "getvoicemailpolicy": {
    "operationId": "getvoicemailpolicy",
    "functionName": "getVoicemailPolicy",
    "signature": "getVoicemailPolicy()",
    "return": "VoicemailOrganizationPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\n// Get a policy\napiInstance.getVoicemailPolicy()\n  .then((data) => {\n    console.log(`getVoicemailPolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailPolicy\");\n    console.error(err);\n  });"
  },
  "getvoicemailqueuemessages": {
    "operationId": "getvoicemailqueuemessages",
    "functionName": "getVoicemailQueueMessages",
    "signature": "getVoicemailQueueMessages(queueId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// List voicemail messages\napiInstance.getVoicemailQueueMessages(queueId, opts)\n  .then((data) => {\n    console.log(`getVoicemailQueueMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailQueueMessages\");\n    console.error(err);\n  });"
  },
  "getvoicemailuserpolicy": {
    "operationId": "getvoicemailuserpolicy",
    "functionName": "getVoicemailUserpolicy",
    "signature": "getVoicemailUserpolicy(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet userId = \"userId_example\"; // String | User ID\n\n// Get a user's voicemail policy\napiInstance.getVoicemailUserpolicy(userId)\n  .then((data) => {\n    console.log(`getVoicemailUserpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getVoicemailUserpolicy\");\n    console.error(err);\n  });"
  },
  "patchvoicemailgrouppolicy": {
    "operationId": "patchvoicemailgrouppolicy",
    "functionName": "patchVoicemailGroupPolicy",
    "signature": "patchVoicemailGroupPolicy(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailGroupPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | The group's voicemail policy\n\n// Update a group's voicemail policy\napiInstance.patchVoicemailGroupPolicy(groupId, body)\n  .then((data) => {\n    console.log(`patchVoicemailGroupPolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchVoicemailGroupPolicy\");\n    console.error(err);\n  });"
  },
  "patchvoicemailmepolicy": {
    "operationId": "patchvoicemailmepolicy",
    "functionName": "patchVoicemailMePolicy",
    "signature": "patchVoicemailMePolicy(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet body = {}; // Object | The user's voicemail policy\n\n// Update the current user's voicemail policy\napiInstance.patchVoicemailMePolicy(body)\n  .then((data) => {\n    console.log(`patchVoicemailMePolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchVoicemailMePolicy\");\n    console.error(err);\n  });"
  },
  "patchvoicemailmessage": {
    "operationId": "patchvoicemailmessage",
    "functionName": "patchVoicemailMessage",
    "signature": "patchVoicemailMessage(messageId, body)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet body = {}; // Object | VoicemailMessage\n\n// Update a voicemail message\napiInstance.patchVoicemailMessage(messageId, body)\n  .then((data) => {\n    console.log(`patchVoicemailMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchVoicemailMessage\");\n    console.error(err);\n  });"
  },
  "patchvoicemailuserpolicy": {
    "operationId": "patchvoicemailuserpolicy",
    "functionName": "patchVoicemailUserpolicy",
    "signature": "patchVoicemailUserpolicy(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The user's voicemail policy\n\n// Update a user's voicemail policy\napiInstance.patchVoicemailUserpolicy(userId, body)\n  .then((data) => {\n    console.log(`patchVoicemailUserpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchVoicemailUserpolicy\");\n    console.error(err);\n  });"
  },
  "postvoicemailmessages": {
    "operationId": "postvoicemailmessages",
    "functionName": "postVoicemailMessages",
    "signature": "postVoicemailMessages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "VoicemailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Copy a voicemail message to a user or group\napiInstance.postVoicemailMessages(opts)\n  .then((data) => {\n    console.log(`postVoicemailMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postVoicemailMessages\");\n    console.error(err);\n  });"
  },
  "putvoicemailmessage": {
    "operationId": "putvoicemailmessage",
    "functionName": "putVoicemailMessage",
    "signature": "putVoicemailMessage(messageId, body)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet body = {}; // Object | VoicemailMessage\n\n// Update a voicemail message\napiInstance.putVoicemailMessage(messageId, body)\n  .then((data) => {\n    console.log(`putVoicemailMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putVoicemailMessage\");\n    console.error(err);\n  });"
  },
  "putvoicemailpolicy": {
    "operationId": "putvoicemailpolicy",
    "functionName": "putVoicemailPolicy",
    "signature": "putVoicemailPolicy(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailOrganizationPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet body = {}; // Object | Policy\n\n// Update a policy\napiInstance.putVoicemailPolicy(body)\n  .then((data) => {\n    console.log(`putVoicemailPolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putVoicemailPolicy\");\n    console.error(err);\n  });"
  },
  "putvoicemailuserpolicy": {
    "operationId": "putvoicemailuserpolicy",
    "functionName": "putVoicemailUserpolicy",
    "signature": "putVoicemailUserpolicy(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.VoicemailApi();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The user's voicemail policy\n\n// Update a user's voicemail policy\napiInstance.putVoicemailUserpolicy(userId, body)\n  .then((data) => {\n    console.log(`putVoicemailUserpolicy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putVoicemailUserpolicy\");\n    console.error(err);\n  });"
  },
  "deletewebchatdeployment": {
    "operationId": "deletewebchatdeployment",
    "functionName": "deleteWebchatDeployment",
    "signature": "deleteWebchatDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | Deployment Id\n\n// Delete a WebChat deployment\napiInstance.deleteWebchatDeployment(deploymentId)\n  .then(() => {\n    console.log(\"deleteWebchatDeployment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWebchatDeployment\");\n    console.error(err);\n  });"
  },
  "deletewebchatguestconversationmember": {
    "operationId": "deletewebchatguestconversationmember",
    "functionName": "deleteWebchatGuestConversationMember",
    "signature": "deleteWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n// Remove a member from a chat conversation\napiInstance.deleteWebchatGuestConversationMember(conversationId, memberId)\n  .then(() => {\n    console.log(\"deleteWebchatGuestConversationMember returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWebchatGuestConversationMember\");\n    console.error(err);\n  });"
  },
  "deletewebchatsettings": {
    "operationId": "deletewebchatsettings",
    "functionName": "deleteWebchatSettings",
    "signature": "deleteWebchatSettings()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\n// Remove WebChat deployment settings\napiInstance.deleteWebchatSettings()\n  .then(() => {\n    console.log(\"deleteWebchatSettings returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWebchatSettings\");\n    console.error(err);\n  });"
  },
  "getwebchatdeployment": {
    "operationId": "getwebchatdeployment",
    "functionName": "getWebchatDeployment",
    "signature": "getWebchatDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | Deployment Id\n\n// Get a WebChat deployment\napiInstance.getWebchatDeployment(deploymentId)\n  .then((data) => {\n    console.log(`getWebchatDeployment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatDeployment\");\n    console.error(err);\n  });"
  },
  "getwebchatdeployments": {
    "operationId": "getwebchatdeployments",
    "functionName": "getWebchatDeployments",
    "signature": "getWebchatDeployments()",
    "return": "WebChatDeploymentEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\n// List WebChat deployments\napiInstance.getWebchatDeployments()\n  .then((data) => {\n    console.log(`getWebchatDeployments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatDeployments\");\n    console.error(err);\n  });"
  },
  "getwebchatguestconversationmediarequest": {
    "operationId": "getwebchatguestconversationmediarequest",
    "functionName": "getWebchatGuestConversationMediarequest",
    "signature": "getWebchatGuestConversationMediarequest(conversationId, mediaRequestId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet mediaRequestId = \"mediaRequestId_example\"; // String | mediaRequestId\n\n// Get a media request in the conversation\napiInstance.getWebchatGuestConversationMediarequest(conversationId, mediaRequestId)\n  .then((data) => {\n    console.log(`getWebchatGuestConversationMediarequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatGuestConversationMediarequest\");\n    console.error(err);\n  });"
  },
  "getwebchatguestconversationmediarequests": {
    "operationId": "getwebchatguestconversationmediarequests",
    "functionName": "getWebchatGuestConversationMediarequests",
    "signature": "getWebchatGuestConversationMediarequests(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequestEntityList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n// Get all media requests to the guest in the conversation\napiInstance.getWebchatGuestConversationMediarequests(conversationId)\n  .then((data) => {\n    console.log(`getWebchatGuestConversationMediarequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatGuestConversationMediarequests\");\n    console.error(err);\n  });"
  },
  "getwebchatguestconversationmember": {
    "operationId": "getwebchatguestconversationmember",
    "functionName": "getWebchatGuestConversationMember",
    "signature": "getWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMemberInfo",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n// Get a web chat conversation member\napiInstance.getWebchatGuestConversationMember(conversationId, memberId)\n  .then((data) => {\n    console.log(`getWebchatGuestConversationMember success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatGuestConversationMember\");\n    console.error(err);\n  });"
  },
  "getwebchatguestconversationmembers": {
    "operationId": "getwebchatguestconversationmembers",
    "functionName": "getWebchatGuestConversationMembers",
    "signature": "getWebchatGuestConversationMembers(conversationId, pageSize, pageNumber, excludeDisconnectedMembers)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "excludeDisconnectedMembers",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WebChatMemberInfoEntityList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  \"pageSize\": 25, // Number | The number of entries to return per page, or omitted for the default.\n  \"pageNumber\": 1, // Number | The page number to return, or omitted for the first page.\n  \"excludeDisconnectedMembers\": false // Boolean | If true, the results will not contain members who have a DISCONNECTED state.\n};\n\n// Get the members of a chat conversation.\napiInstance.getWebchatGuestConversationMembers(conversationId, opts)\n  .then((data) => {\n    console.log(`getWebchatGuestConversationMembers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatGuestConversationMembers\");\n    console.error(err);\n  });"
  },
  "getwebchatguestconversationmessage": {
    "operationId": "getwebchatguestconversationmessage",
    "functionName": "getWebchatGuestConversationMessage",
    "signature": "getWebchatGuestConversationMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n// Get a web chat conversation message\napiInstance.getWebchatGuestConversationMessage(conversationId, messageId)\n  .then((data) => {\n    console.log(`getWebchatGuestConversationMessage success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatGuestConversationMessage\");\n    console.error(err);\n  });"
  },
  "getwebchatguestconversationmessages": {
    "operationId": "getwebchatguestconversationmessages",
    "functionName": "getWebchatGuestConversationMessages",
    "signature": "getWebchatGuestConversationMessages(conversationId, after, before, sortOrder, maxResults)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "maxResults",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WebChatMessageEntityList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  \"after\": \"after_example\", // String | If available, get the messages chronologically after the id of this message\n  \"before\": \"before_example\", // String | If available, get the messages chronologically before the id of this message\n  \"sortOrder\": \"ascending\", // String | Sort order\n  \"maxResults\": 100 // Number | Limit the returned number of messages, up to a maximum of 100\n};\n\n// Get the messages of a chat conversation.\napiInstance.getWebchatGuestConversationMessages(conversationId, opts)\n  .then((data) => {\n    console.log(`getWebchatGuestConversationMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatGuestConversationMessages\");\n    console.error(err);\n  });"
  },
  "getwebchatsettings": {
    "operationId": "getwebchatsettings",
    "functionName": "getWebchatSettings",
    "signature": "getWebchatSettings()",
    "return": "WebChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\n// Get WebChat deployment settings\napiInstance.getWebchatSettings()\n  .then((data) => {\n    console.log(`getWebchatSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebchatSettings\");\n    console.error(err);\n  });"
  },
  "patchwebchatguestconversationmediarequest": {
    "operationId": "patchwebchatguestconversationmediarequest",
    "functionName": "patchWebchatGuestConversationMediarequest",
    "signature": "patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet mediaRequestId = \"mediaRequestId_example\"; // String | mediaRequestId\nlet body = {}; // Object | Request\n\n// Update a media request in the conversation, setting the state to ACCEPTED/DECLINED/ERRORED\napiInstance.patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body)\n  .then((data) => {\n    console.log(`patchWebchatGuestConversationMediarequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWebchatGuestConversationMediarequest\");\n    console.error(err);\n  });"
  },
  "postwebchatdeployments": {
    "operationId": "postwebchatdeployments",
    "functionName": "postWebchatDeployments",
    "signature": "postWebchatDeployments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet body = {}; // Object | Deployment\n\n// Create WebChat deployment\napiInstance.postWebchatDeployments(body)\n  .then((data) => {\n    console.log(`postWebchatDeployments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebchatDeployments\");\n    console.error(err);\n  });"
  },
  "postwebchatguestconversationmembermessages": {
    "operationId": "postwebchatguestconversationmembermessages",
    "functionName": "postWebchatGuestConversationMemberMessages",
    "signature": "postWebchatGuestConversationMemberMessages(conversationId, memberId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\nlet body = {}; // Object | Message\n\n// Send a message in a chat conversation.\napiInstance.postWebchatGuestConversationMemberMessages(conversationId, memberId, body)\n  .then((data) => {\n    console.log(`postWebchatGuestConversationMemberMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebchatGuestConversationMemberMessages\");\n    console.error(err);\n  });"
  },
  "postwebchatguestconversationmembertyping": {
    "operationId": "postwebchatguestconversationmembertyping",
    "functionName": "postWebchatGuestConversationMemberTyping",
    "signature": "postWebchatGuestConversationMemberTyping(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatTyping",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = client.authentications[\"Guest Chat JWT\"];\nGuest Chat JWT.apiKey = \"YOUR API KEY\";\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = \"Token\";\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n// Send a typing-indicator in a chat conversation.\napiInstance.postWebchatGuestConversationMemberTyping(conversationId, memberId)\n  .then((data) => {\n    console.log(`postWebchatGuestConversationMemberTyping success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebchatGuestConversationMemberTyping\");\n    console.error(err);\n  });"
  },
  "postwebchatguestconversations": {
    "operationId": "postwebchatguestconversations",
    "functionName": "postWebchatGuestConversations",
    "signature": "postWebchatGuestConversations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateWebChatConversationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet body = {}; // Object | CreateConversationRequest\n\n// Create an ACD chat conversation from an external customer.\napiInstance.postWebchatGuestConversations(body)\n  .then((data) => {\n    console.log(`postWebchatGuestConversations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebchatGuestConversations\");\n    console.error(err);\n  });"
  },
  "putwebchatdeployment": {
    "operationId": "putwebchatdeployment",
    "functionName": "putWebchatDeployment",
    "signature": "putWebchatDeployment(deploymentId, body)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | Deployment Id\nlet body = {}; // Object | Deployment\n\n// Update a WebChat deployment\napiInstance.putWebchatDeployment(deploymentId, body)\n  .then((data) => {\n    console.log(`putWebchatDeployment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putWebchatDeployment\");\n    console.error(err);\n  });"
  },
  "putwebchatsettings": {
    "operationId": "putwebchatsettings",
    "functionName": "putWebchatSettings",
    "signature": "putWebchatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatSettings",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebChatApi();\n\nlet body = {}; // Object | webChatSettings\n\n// Update WebChat deployment settings\napiInstance.putWebchatSettings(body)\n  .then((data) => {\n    console.log(`putWebchatSettings success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putWebchatSettings\");\n    console.error(err);\n  });"
  },
  "deletewebdeploymentsconfiguration": {
    "operationId": "deletewebdeploymentsconfiguration",
    "functionName": "deleteWebdeploymentsConfiguration",
    "signature": "deleteWebdeploymentsConfiguration(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n// Delete all versions of a configuration\napiInstance.deleteWebdeploymentsConfiguration(configurationId)\n  .then(() => {\n    console.log(\"deleteWebdeploymentsConfiguration returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWebdeploymentsConfiguration\");\n    console.error(err);\n  });"
  },
  "deletewebdeploymentsdeployment": {
    "operationId": "deletewebdeploymentsdeployment",
    "functionName": "deleteWebdeploymentsDeployment",
    "signature": "deleteWebdeploymentsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | The deployment ID\n\n// Delete a deployment\napiInstance.deleteWebdeploymentsDeployment(deploymentId)\n  .then(() => {\n    console.log(\"deleteWebdeploymentsDeployment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWebdeploymentsDeployment\");\n    console.error(err);\n  });"
  },
  "deletewebdeploymentsdeploymentcobrowsesessionid": {
    "operationId": "deletewebdeploymentsdeploymentcobrowsesessionid",
    "functionName": "deleteWebdeploymentsDeploymentCobrowseSessionId",
    "signature": "deleteWebdeploymentsDeploymentCobrowseSessionId(deploymentId, sessionId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | WebMessaging deployment ID\nlet sessionId = \"sessionId_example\"; // String | Cobrowse session id or join code\n\n// Deletes a cobrowse session\napiInstance.deleteWebdeploymentsDeploymentCobrowseSessionId(deploymentId, sessionId)\n  .then((data) => {\n    console.log(`deleteWebdeploymentsDeploymentCobrowseSessionId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWebdeploymentsDeploymentCobrowseSessionId\");\n    console.error(err);\n  });"
  },
  "deletewebdeploymentstokenrevoke": {
    "operationId": "deletewebdeploymentstokenrevoke",
    "functionName": "deleteWebdeploymentsTokenRevoke",
    "signature": "deleteWebdeploymentsTokenRevoke(xJourneySessionId, xJourneySessionType)",
    "parameters": [
      {
        "name": "xJourneySessionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "xJourneySessionType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet opts = { \n  \"xJourneySessionId\": \"xJourneySessionId_example\", // String | The Customer's journey sessionId.\n  \"xJourneySessionType\": \"xJourneySessionType_example\" // String | The Customer's journey session type.\n};\n\n// Invalidate JWT\napiInstance.deleteWebdeploymentsTokenRevoke(opts)\n  .then(() => {\n    console.log(\"deleteWebdeploymentsTokenRevoke returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWebdeploymentsTokenRevoke\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsconfigurationversion": {
    "operationId": "getwebdeploymentsconfigurationversion",
    "functionName": "getWebdeploymentsConfigurationVersion",
    "signature": "getWebdeploymentsConfigurationVersion(configurationId, versionId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\nlet versionId = \"versionId_example\"; // String | The version of the configuration to get\n\n// Get a configuration version\napiInstance.getWebdeploymentsConfigurationVersion(configurationId, versionId)\n  .then((data) => {\n    console.log(`getWebdeploymentsConfigurationVersion success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsConfigurationVersion\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsconfigurationversions": {
    "operationId": "getwebdeploymentsconfigurationversions",
    "functionName": "getWebdeploymentsConfigurationVersions",
    "signature": "getWebdeploymentsConfigurationVersions(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n// Get the versions of a configuration\napiInstance.getWebdeploymentsConfigurationVersions(configurationId)\n  .then((data) => {\n    console.log(`getWebdeploymentsConfigurationVersions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsConfigurationVersions\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsconfigurationversionsdraft": {
    "operationId": "getwebdeploymentsconfigurationversionsdraft",
    "functionName": "getWebdeploymentsConfigurationVersionsDraft",
    "signature": "getWebdeploymentsConfigurationVersionsDraft(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n// Get the configuration draft\napiInstance.getWebdeploymentsConfigurationVersionsDraft(configurationId)\n  .then((data) => {\n    console.log(`getWebdeploymentsConfigurationVersionsDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsConfigurationVersionsDraft\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsconfigurations": {
    "operationId": "getwebdeploymentsconfigurations",
    "functionName": "getWebdeploymentsConfigurations",
    "signature": "getWebdeploymentsConfigurations(showOnlyPublished)",
    "parameters": [
      {
        "name": "showOnlyPublished",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WebDeploymentConfigurationVersionEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet opts = { \n  \"showOnlyPublished\": false // Boolean | Get only configuration drafts with published versions\n};\n\n// View configuration drafts\napiInstance.getWebdeploymentsConfigurations(opts)\n  .then((data) => {\n    console.log(`getWebdeploymentsConfigurations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsConfigurations\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsdeployment": {
    "operationId": "getwebdeploymentsdeployment",
    "functionName": "getWebdeploymentsDeployment",
    "signature": "getWebdeploymentsDeployment(deploymentId, expand)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WebDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | The deployment ID\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | The specified entity attributes will be filled. Comma separated values expected. \n};\n\n// Get a deployment\napiInstance.getWebdeploymentsDeployment(deploymentId, opts)\n  .then((data) => {\n    console.log(`getWebdeploymentsDeployment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsDeployment\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsdeploymentcobrowsesessionid": {
    "operationId": "getwebdeploymentsdeploymentcobrowsesessionid",
    "functionName": "getWebdeploymentsDeploymentCobrowseSessionId",
    "signature": "getWebdeploymentsDeploymentCobrowseSessionId(deploymentId, sessionId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CobrowseWebMessagingSession",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | WebMessaging deployment ID\nlet sessionId = \"sessionId_example\"; // String | Cobrowse session id or join code\n\n// Retrieves a cobrowse session\napiInstance.getWebdeploymentsDeploymentCobrowseSessionId(deploymentId, sessionId)\n  .then((data) => {\n    console.log(`getWebdeploymentsDeploymentCobrowseSessionId success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsDeploymentCobrowseSessionId\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsdeploymentconfigurations": {
    "operationId": "getwebdeploymentsdeploymentconfigurations",
    "functionName": "getWebdeploymentsDeploymentConfigurations",
    "signature": "getWebdeploymentsDeploymentConfigurations(deploymentId, type, expand)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WebDeploymentActiveConfigurationOnDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | The deployment ID\nlet opts = { \n  \"type\": \"type_example\", // String | Get active configuration on a deployment\n  \"expand\": [\"expand_example\"] // [String] | Expand instructions for the return value\n};\n\n// Get active configuration for a given deployment\napiInstance.getWebdeploymentsDeploymentConfigurations(deploymentId, opts)\n  .then((data) => {\n    console.log(`getWebdeploymentsDeploymentConfigurations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsDeploymentConfigurations\");\n    console.error(err);\n  });"
  },
  "getwebdeploymentsdeployments": {
    "operationId": "getwebdeploymentsdeployments",
    "functionName": "getWebdeploymentsDeployments",
    "signature": "getWebdeploymentsDeployments(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ExpandableWebDeploymentEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | The specified entity attributes will be filled. Comma separated values expected.\n};\n\n// Get deployments\napiInstance.getWebdeploymentsDeployments(opts)\n  .then((data) => {\n    console.log(`getWebdeploymentsDeployments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebdeploymentsDeployments\");\n    console.error(err);\n  });"
  },
  "postwebdeploymentsconfigurationversionsdraftpublish": {
    "operationId": "postwebdeploymentsconfigurationversionsdraftpublish",
    "functionName": "postWebdeploymentsConfigurationVersionsDraftPublish",
    "signature": "postWebdeploymentsConfigurationVersionsDraftPublish(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n// Publish the configuration draft and create a new version\napiInstance.postWebdeploymentsConfigurationVersionsDraftPublish(configurationId)\n  .then((data) => {\n    console.log(`postWebdeploymentsConfigurationVersionsDraftPublish success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebdeploymentsConfigurationVersionsDraftPublish\");\n    console.error(err);\n  });"
  },
  "postwebdeploymentsconfigurations": {
    "operationId": "postwebdeploymentsconfigurations",
    "functionName": "postWebdeploymentsConfigurations",
    "signature": "postWebdeploymentsConfigurations(configurationVersion)",
    "parameters": [
      {
        "name": "configurationVersion",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet configurationVersion = {}; // Object | \n\n// Create a configuration draft\napiInstance.postWebdeploymentsConfigurations(configurationVersion)\n  .then((data) => {\n    console.log(`postWebdeploymentsConfigurations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebdeploymentsConfigurations\");\n    console.error(err);\n  });"
  },
  "postwebdeploymentsdeployments": {
    "operationId": "postwebdeploymentsdeployments",
    "functionName": "postWebdeploymentsDeployments",
    "signature": "postWebdeploymentsDeployments(deployment)",
    "parameters": [
      {
        "name": "deployment",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet deployment = {}; // Object | \n\n// Create a deployment\napiInstance.postWebdeploymentsDeployments(deployment)\n  .then((data) => {\n    console.log(`postWebdeploymentsDeployments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebdeploymentsDeployments\");\n    console.error(err);\n  });"
  },
  "postwebdeploymentstokenoauthcodegrantjwtexchange": {
    "operationId": "postwebdeploymentstokenoauthcodegrantjwtexchange",
    "functionName": "postWebdeploymentsTokenOauthcodegrantjwtexchange",
    "signature": "postWebdeploymentsTokenOauthcodegrantjwtexchange(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeploymentsAuthorizationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet body = {}; // Object | webDeploymentsOAuthExchangeRequest\n\n// Exchange an oAuth code (obtained using the Authorization Code Flow) for a JWT that can be used by webdeployments.\napiInstance.postWebdeploymentsTokenOauthcodegrantjwtexchange(body)\n  .then((data) => {\n    console.log(`postWebdeploymentsTokenOauthcodegrantjwtexchange success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebdeploymentsTokenOauthcodegrantjwtexchange\");\n    console.error(err);\n  });"
  },
  "postwebdeploymentstokenrefresh": {
    "operationId": "postwebdeploymentstokenrefresh",
    "functionName": "postWebdeploymentsTokenRefresh",
    "signature": "postWebdeploymentsTokenRefresh(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "SignedData",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet opts = { \n  \"body\": {} // Object | \n};\n\n// Refresh a JWT.\napiInstance.postWebdeploymentsTokenRefresh(opts)\n  .then((data) => {\n    console.log(`postWebdeploymentsTokenRefresh success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWebdeploymentsTokenRefresh\");\n    console.error(err);\n  });"
  },
  "putwebdeploymentsconfigurationversionsdraft": {
    "operationId": "putwebdeploymentsconfigurationversionsdraft",
    "functionName": "putWebdeploymentsConfigurationVersionsDraft",
    "signature": "putWebdeploymentsConfigurationVersionsDraft(configurationId, configurationVersion)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "configurationVersion",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\nlet configurationVersion = {}; // Object | \n\n// Update the configuration draft\napiInstance.putWebdeploymentsConfigurationVersionsDraft(configurationId, configurationVersion)\n  .then((data) => {\n    console.log(`putWebdeploymentsConfigurationVersionsDraft success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putWebdeploymentsConfigurationVersionsDraft\");\n    console.error(err);\n  });"
  },
  "putwebdeploymentsdeployment": {
    "operationId": "putwebdeploymentsdeployment",
    "functionName": "putWebdeploymentsDeployment",
    "signature": "putWebdeploymentsDeployment(deploymentId, deployment)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deployment",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WebDeploymentsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | The deployment ID\nlet deployment = {}; // Object | \n\n// Update a deployment\napiInstance.putWebdeploymentsDeployment(deploymentId, deployment)\n  .then((data) => {\n    console.log(`putWebdeploymentsDeployment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putWebdeploymentsDeployment\");\n    console.error(err);\n  });"
  },
  "getwebmessagingmessages": {
    "operationId": "getwebmessagingmessages",
    "functionName": "getWebmessagingMessages",
    "signature": "getWebmessagingMessages(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WebMessagingMessageEntityList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WebMessagingApi();\n\nlet opts = { \n  \"pageSize\": 25, // Number | Page size\n  \"pageNumber\": 1 // Number | Page number\n};\n\n// Get the messages for a web messaging session.\napiInstance.getWebmessagingMessages(opts)\n  .then((data) => {\n    console.log(`getWebmessagingMessages success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWebmessagingMessages\");\n    console.error(err);\n  });"
  },
  "deletewidgetsdeployment": {
    "operationId": "deletewidgetsdeployment",
    "functionName": "deleteWidgetsDeployment",
    "signature": "deleteWidgetsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WidgetsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | Widget Config Id\n\n// Delete a Widget deployment\napiInstance.deleteWidgetsDeployment(deploymentId)\n  .then(() => {\n    console.log(\"deleteWidgetsDeployment returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWidgetsDeployment\");\n    console.error(err);\n  });"
  },
  "getwidgetsdeployment": {
    "operationId": "getwidgetsdeployment",
    "functionName": "getWidgetsDeployment",
    "signature": "getWidgetsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WidgetsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | Widget Config Id\n\n// Get a Widget deployment\napiInstance.getWidgetsDeployment(deploymentId)\n  .then((data) => {\n    console.log(`getWidgetsDeployment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWidgetsDeployment\");\n    console.error(err);\n  });"
  },
  "getwidgetsdeployments": {
    "operationId": "getwidgetsdeployments",
    "functionName": "getWidgetsDeployments",
    "signature": "getWidgetsDeployments()",
    "return": "WidgetDeploymentEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WidgetsApi();\n\n// List Widget deployments\napiInstance.getWidgetsDeployments()\n  .then((data) => {\n    console.log(`getWidgetsDeployments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWidgetsDeployments\");\n    console.error(err);\n  });"
  },
  "postwidgetsdeployments": {
    "operationId": "postwidgetsdeployments",
    "functionName": "postWidgetsDeployments",
    "signature": "postWidgetsDeployments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WidgetsApi();\n\nlet body = {}; // Object | Deployment\n\n// Create Widget deployment\napiInstance.postWidgetsDeployments(body)\n  .then((data) => {\n    console.log(`postWidgetsDeployments success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWidgetsDeployments\");\n    console.error(err);\n  });"
  },
  "putwidgetsdeployment": {
    "operationId": "putwidgetsdeployment",
    "functionName": "putWidgetsDeployment",
    "signature": "putWidgetsDeployment(deploymentId, body)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WidgetsApi();\n\nlet deploymentId = \"deploymentId_example\"; // String | Widget Config Id\nlet body = {}; // Object | Deployment\n\n// Update a Widget deployment\napiInstance.putWidgetsDeployment(deploymentId, body)\n  .then((data) => {\n    console.log(`putWidgetsDeployment success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putWidgetsDeployment\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementbusinessunit": {
    "operationId": "deleteworkforcemanagementbusinessunit",
    "functionName": "deleteWorkforcemanagementBusinessunit",
    "signature": "deleteWorkforcemanagementBusinessunit(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\n\n// Delete business unit\napiInstance.deleteWorkforcemanagementBusinessunit(businessUnitId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementBusinessunit returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementBusinessunit\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementbusinessunitactivitycode": {
    "operationId": "deleteworkforcemanagementbusinessunitactivitycode",
    "functionName": "deleteWorkforcemanagementBusinessunitActivitycode",
    "signature": "deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId = \"activityCodeId_example\"; // String | The ID of the activity code to delete\n\n// Deletes an activity code\napiInstance.deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementBusinessunitActivitycode returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementBusinessunitActivitycode\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "deleteworkforcemanagementbusinessunitplanninggroup",
    "functionName": "deleteWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet planningGroupId = \"planningGroupId_example\"; // String | The ID of a planning group to delete\n\n// Deletes the planning group\napiInstance.deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementBusinessunitPlanninggroup returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementBusinessunitPlanninggroup\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "deleteworkforcemanagementbusinessunitschedulingrun",
    "functionName": "deleteWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\n\n// Cancel a scheduling run\napiInstance.deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementBusinessunitSchedulingRun returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementBusinessunitSchedulingRun\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "deleteworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "deleteWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet serviceGoalTemplateId = \"serviceGoalTemplateId_example\"; // String | The ID of the service goal template to delete\n\n// Delete a service goal template\napiInstance.deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementBusinessunitServicegoaltemplate returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementBusinessunitServicegoaltemplate\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementbusinessunitweekschedule": {
    "operationId": "deleteworkforcemanagementbusinessunitweekschedule",
    "functionName": "deleteWorkforcemanagementBusinessunitWeekSchedule",
    "signature": "deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\n\n// Delete a schedule\napiInstance.deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId)\n  .then((data) => {\n    console.log(`deleteWorkforcemanagementBusinessunitWeekSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementBusinessunitWeekSchedule\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementbusinessunitweekshorttermforecast": {
    "operationId": "deleteworkforcemanagementbusinessunitweekshorttermforecast",
    "functionName": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast",
    "signature": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\n\n// Delete a short term forecast\napiInstance.deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementBusinessunitWeekShorttermforecast returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementBusinessunitWeekShorttermforecast\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementcalendarurlics": {
    "operationId": "deleteworkforcemanagementcalendarurlics",
    "functionName": "deleteWorkforcemanagementCalendarUrlIcs",
    "signature": "deleteWorkforcemanagementCalendarUrlIcs()",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Disable generated calendar link for the current user\napiInstance.deleteWorkforcemanagementCalendarUrlIcs()\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementCalendarUrlIcs returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementCalendarUrlIcs\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementmanagementunit": {
    "operationId": "deleteworkforcemanagementmanagementunit",
    "functionName": "deleteWorkforcemanagementManagementunit",
    "signature": "deleteWorkforcemanagementManagementunit(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Delete management unit\napiInstance.deleteWorkforcemanagementManagementunit(managementUnitId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementManagementunit returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementManagementunit\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "deleteworkforcemanagementmanagementunittimeofflimit",
    "functionName": "deleteWorkforcemanagementManagementunitTimeofflimit",
    "signature": "deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The ID of the time off limit object to delete\n\n// Deletes a time off limit object\napiInstance.deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementManagementunitTimeofflimit returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementManagementunitTimeofflimit\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "deleteworkforcemanagementmanagementunittimeoffplan",
    "functionName": "deleteWorkforcemanagementManagementunitTimeoffplan",
    "signature": "deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet timeOffPlanId = \"timeOffPlanId_example\"; // String | The ID of the time off plan to delete\n\n// Deletes a time off plan\napiInstance.deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementManagementunitTimeoffplan returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementManagementunitTimeoffplan\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementmanagementunitworkplan": {
    "operationId": "deleteworkforcemanagementmanagementunitworkplan",
    "functionName": "deleteWorkforcemanagementManagementunitWorkplan",
    "signature": "deleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to delete\n\n// Delete a work plan\napiInstance.deleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementManagementunitWorkplan returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementManagementunitWorkplan\");\n    console.error(err);\n  });"
  },
  "deleteworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "deleteworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "deleteWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to be deleted\n\n// Delete a work plan rotation\napiInstance.deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)\n  .then(() => {\n    console.log(\"deleteWorkforcemanagementManagementunitWorkplanrotation returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling deleteWorkforcemanagementManagementunitWorkplanrotation\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementadherence": {
    "operationId": "getworkforcemanagementadherence",
    "functionName": "getWorkforcemanagementAdherence",
    "signature": "getWorkforcemanagementAdherence(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[UserScheduleAdherence]",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet userId = [\"userId_example\"]; // [String] | User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request\n\n// Get a list of UserScheduleAdherence records for the requested users\napiInstance.getWorkforcemanagementAdherence(userId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAdherence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAdherence\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementadherenceexplanation": {
    "operationId": "getworkforcemanagementadherenceexplanation",
    "functionName": "getWorkforcemanagementAdherenceExplanation",
    "signature": "getWorkforcemanagementAdherenceExplanation(explanationId)",
    "parameters": [
      {
        "name": "explanationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AdherenceExplanationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet explanationId = \"explanationId_example\"; // String | The ID of the explanation to update\n\n// Get an adherence explanation for the current user\napiInstance.getWorkforcemanagementAdherenceExplanation(explanationId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAdherenceExplanation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAdherenceExplanation\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementadherenceexplanationsjob": {
    "operationId": "getworkforcemanagementadherenceexplanationsjob",
    "functionName": "getWorkforcemanagementAdherenceExplanationsJob",
    "signature": "getWorkforcemanagementAdherenceExplanationsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AdherenceExplanationJob",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | The ID of the job\n\n// Query the status of an adherence explanation operation. Only the user who started the operation can query the status\napiInstance.getWorkforcemanagementAdherenceExplanationsJob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAdherenceExplanationsJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAdherenceExplanationsJob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementadherencehistoricalbulkjob": {
    "operationId": "getworkforcemanagementadherencehistoricalbulkjob",
    "functionName": "getWorkforcemanagementAdherenceHistoricalBulkJob",
    "signature": "getWorkforcemanagementAdherenceHistoricalBulkJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmHistoricalAdherenceBulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | ID of the job to get\n\n// Request to fetch the status of the historical adherence bulk job. Only the user who started the operation can query the status\napiInstance.getWorkforcemanagementAdherenceHistoricalBulkJob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAdherenceHistoricalBulkJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAdherenceHistoricalBulkJob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementadherencehistoricaljob": {
    "operationId": "getworkforcemanagementadherencehistoricaljob",
    "functionName": "getWorkforcemanagementAdherenceHistoricalJob",
    "signature": "getWorkforcemanagementAdherenceHistoricalJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Query the status of a historical adherence request operation. Only the user who started the operation can query the status\napiInstance.getWorkforcemanagementAdherenceHistoricalJob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAdherenceHistoricalJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAdherenceHistoricalJob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementadhocmodelingjob": {
    "operationId": "getworkforcemanagementadhocmodelingjob",
    "functionName": "getWorkforcemanagementAdhocmodelingjob",
    "signature": "getWorkforcemanagementAdhocmodelingjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ModelingStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | The id of the modeling job\n\n// Get status of the modeling job\napiInstance.getWorkforcemanagementAdhocmodelingjob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAdhocmodelingjob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAdhocmodelingjob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementagentadherenceexplanation": {
    "operationId": "getworkforcemanagementagentadherenceexplanation",
    "functionName": "getWorkforcemanagementAgentAdherenceExplanation",
    "signature": "getWorkforcemanagementAgentAdherenceExplanation(agentId, explanationId)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "explanationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AdherenceExplanationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet agentId = \"agentId_example\"; // String | The ID of the agent to query\nlet explanationId = \"explanationId_example\"; // String | The ID of the explanation to update\n\n// Get an adherence explanation\napiInstance.getWorkforcemanagementAgentAdherenceExplanation(agentId, explanationId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAgentAdherenceExplanation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAgentAdherenceExplanation\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementagentmanagementunit": {
    "operationId": "getworkforcemanagementagentmanagementunit",
    "functionName": "getWorkforcemanagementAgentManagementunit",
    "signature": "getWorkforcemanagementAgentManagementunit(agentId)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentManagementUnitReference",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet agentId = \"agentId_example\"; // String | The ID of the agent to look up\n\n// Get the management unit to which the agent belongs\napiInstance.getWorkforcemanagementAgentManagementunit(agentId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementAgentManagementunit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAgentManagementunit\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementagentsmemanagementunit": {
    "operationId": "getworkforcemanagementagentsmemanagementunit",
    "functionName": "getWorkforcemanagementAgentsMeManagementunit",
    "signature": "getWorkforcemanagementAgentsMeManagementunit()",
    "return": "AgentManagementUnitReference",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Get the management unit to which the currently logged in agent belongs\napiInstance.getWorkforcemanagementAgentsMeManagementunit()\n  .then((data) => {\n    console.log(`getWorkforcemanagementAgentsMeManagementunit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementAgentsMeManagementunit\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunit": {
    "operationId": "getworkforcemanagementbusinessunit",
    "functionName": "getWorkforcemanagementBusinessunit",
    "signature": "getWorkforcemanagementBusinessunit(businessUnitId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BusinessUnitResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Include to access additional data on the business unit\n};\n\n// Get business unit\napiInstance.getWorkforcemanagementBusinessunit(businessUnitId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunit\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitactivitycode": {
    "operationId": "getworkforcemanagementbusinessunitactivitycode",
    "functionName": "getWorkforcemanagementBusinessunitActivitycode",
    "signature": "getWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId = \"activityCodeId_example\"; // String | The ID of the activity code to fetch\n\n// Get an activity code\napiInstance.getWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitActivitycode success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitActivitycode\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitactivitycodes": {
    "operationId": "getworkforcemanagementbusinessunitactivitycodes",
    "functionName": "getWorkforcemanagementBusinessunitActivitycodes",
    "signature": "getWorkforcemanagementBusinessunitActivitycodes(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BusinessUnitActivityCodeListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\n\n// Get activity codes\napiInstance.getWorkforcemanagementBusinessunitActivitycodes(businessUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitActivitycodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitActivitycodes\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitintradayplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitintradayplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitIntradayPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, _date)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "_date",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmIntradayPlanningGroupListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet _date = \"_date_example\"; // String | yyyy-MM-dd date string interpreted in the configured business unit time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get intraday planning groups for the given date\napiInstance.getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, _date)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitIntradayPlanninggroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitIntradayPlanninggroups\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitmanagementunits": {
    "operationId": "getworkforcemanagementbusinessunitmanagementunits",
    "functionName": "getWorkforcemanagementBusinessunitManagementunits",
    "signature": "getWorkforcemanagementBusinessunitManagementunits(businessUnitId, feature, divisionId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  \"feature\": \"feature_example\", // String | If specified, the list of management units for which the user is authorized to use the requested feature will be returned\n  \"divisionId\": \"divisionId_example\" // String | If specified, the list of management units belonging to the specified division will be returned\n};\n\n// Get all authorized management units in the business unit\napiInstance.getWorkforcemanagementBusinessunitManagementunits(businessUnitId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitManagementunits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitManagementunits\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "getworkforcemanagementbusinessunitplanninggroup",
    "functionName": "getWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PlanningGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet planningGroupId = \"planningGroupId_example\"; // String | The ID of a planning group to fetch\n\n// Get a planning group\napiInstance.getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitPlanninggroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitPlanninggroup\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PlanningGroupList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\n\n// Gets list of planning groups\napiInstance.getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitPlanninggroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitPlanninggroups\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "getworkforcemanagementbusinessunitschedulingrun",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuScheduleRun",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\n\n// Get a scheduling run\napiInstance.getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitSchedulingRun success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitSchedulingRun\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitschedulingrunresult": {
    "operationId": "getworkforcemanagementbusinessunitschedulingrunresult",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRunResult",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, managementUnitIds, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "managementUnitIds",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "BuRescheduleResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\nlet managementUnitIds = [\"managementUnitIds_example\"]; // [String] | The IDs of the management units for which to fetch the reschedule results\nlet expand = [\"expand_example\"]; // [String] | The fields to expand. Omitting will return an empty response\n\n// Get the result of a rescheduling operation\napiInstance.getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, managementUnitIds, expand)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitSchedulingRunResult success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitSchedulingRunResult\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitschedulingruns": {
    "operationId": "getworkforcemanagementbusinessunitschedulingruns",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRuns",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuScheduleRunListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\n\n// Get the list of scheduling runs\napiInstance.getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitSchedulingRuns success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitSchedulingRuns\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "getworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet serviceGoalTemplateId = \"serviceGoalTemplateId_example\"; // String | The ID of a service goal template to fetch\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Include to access additional data on the service goal template\n};\n\n// Get a service goal template\napiInstance.getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitServicegoaltemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitServicegoaltemplate\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitservicegoaltemplates": {
    "operationId": "getworkforcemanagementbusinessunitservicegoaltemplates",
    "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplates",
    "signature": "getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplateList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Include to access additional data on the service goal template\n};\n\n// Gets list of service goal templates\napiInstance.getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitServicegoaltemplates success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitServicegoaltemplates\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekschedule": {
    "operationId": "getworkforcemanagementbusinessunitweekschedule",
    "functionName": "getWorkforcemanagementBusinessunitWeekSchedule",
    "signature": "getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BuScheduleMetadata",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet opts = { \n  \"expand\": \"expand_example\" // String | expand\n};\n\n// Get the metadata for the schedule, describing which management units and agents are in the scheduleSchedule data can then be loaded with the query route\napiInstance.getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekSchedule\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekschedulegenerationresults": {
    "operationId": "getworkforcemanagementbusinessunitweekschedulegenerationresults",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScheduleGenerationResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\n\n// Get the generation results for a generated schedule\napiInstance.getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekScheduleGenerationresults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekScheduleGenerationresults\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekscheduleheadcountforecast": {
    "operationId": "getworkforcemanagementbusinessunitweekscheduleheadcountforecast",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, forceDownload)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownload",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuHeadcountForecastResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet opts = { \n  \"forceDownload\": true // Boolean | Whether to force the result to come via download url.  For testing purposes only\n};\n\n// Get the headcount forecast by planning group for the schedule\napiInstance.getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekschedulehistoryagent": {
    "operationId": "getworkforcemanagementbusinessunitweekschedulehistoryagent",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuAgentScheduleHistoryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet agentId = \"agentId_example\"; // String | THe ID of the agent\n\n// Loads agent's schedule history.\napiInstance.getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekschedules": {
    "operationId": "getworkforcemanagementbusinessunitweekschedules",
    "functionName": "getWorkforcemanagementBusinessunitWeekSchedules",
    "signature": "getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, includeOnlyPublished, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnlyPublished",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BuScheduleListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format, or 'recent' (without quotes) to get recent schedules\nlet opts = { \n  \"includeOnlyPublished\": true, // Boolean | includeOnlyPublished\n  \"expand\": \"expand_example\" // String | expand\n};\n\n// Get the list of week schedules for the specified week\napiInstance.getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekSchedules\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecast": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecast",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecast",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BuShortTermForecast",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Include to access additional data on the forecast\n};\n\n// Get a short term forecast\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekShorttermforecast success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekShorttermforecast\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastdata": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastdata",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastData",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, weekNumber, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuForecastResultResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\nlet opts = { \n  \"weekNumber\": 3.4, // Number | The week number to fetch (for multi-week forecasts)\n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n// Get the result of a short term forecast calculation\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekShorttermforecastData success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekShorttermforecastData\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastgenerationresults": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastgenerationresults",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuForecastGenerationResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\n\n// Gets the forecast generation results\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastlongtermforecastdata": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastlongtermforecastdata",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "LongTermForecastResultResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\nlet opts = { \n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n// Get the result of a long term forecast calculation\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ForecastPlanningGroupsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\n\n// Gets the forecast planning group snapshot\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecasts": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecasts",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecasts",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuShortTermForecastListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format or 'recent' (without quotes) to fetch recent forecasts\n\n// Get short term forecasts\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitWeekShorttermforecasts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitWeekShorttermforecasts\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunits": {
    "operationId": "getworkforcemanagementbusinessunits",
    "functionName": "getWorkforcemanagementBusinessunits",
    "signature": "getWorkforcemanagementBusinessunits(feature, divisionId)",
    "parameters": [
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BusinessUnitListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"feature\": \"feature_example\", // String | If specified, the list of business units for which the user is authorized to use the requested feature will be returned\n  \"divisionId\": \"divisionId_example\" // String | If specified, the list of business units belonging to the specified division will be returned\n};\n\n// Get business units\napiInstance.getWorkforcemanagementBusinessunits(opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunits\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementbusinessunitsdivisionviews": {
    "operationId": "getworkforcemanagementbusinessunitsdivisionviews",
    "functionName": "getWorkforcemanagementBusinessunitsDivisionviews",
    "signature": "getWorkforcemanagementBusinessunitsDivisionviews(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BusinessUnitListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"divisionId\": [\"divisionId_example\"] // [String] | The divisionIds to filter by. If omitted, will return business units in all divisions\n};\n\n// Get business units across divisions\napiInstance.getWorkforcemanagementBusinessunitsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementBusinessunitsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementBusinessunitsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementcalendardataics": {
    "operationId": "getworkforcemanagementcalendardataics",
    "functionName": "getWorkforcemanagementCalendarDataIcs",
    "signature": "getWorkforcemanagementCalendarDataIcs(calendarId)",
    "parameters": [
      {
        "name": "calendarId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet calendarId = \"calendarId_example\"; // String | The id of the ics-formatted calendar\n\n// Get ics formatted calendar based on shareable link\napiInstance.getWorkforcemanagementCalendarDataIcs(calendarId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementCalendarDataIcs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementCalendarDataIcs\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementcalendarurlics": {
    "operationId": "getworkforcemanagementcalendarurlics",
    "functionName": "getWorkforcemanagementCalendarUrlIcs",
    "signature": "getWorkforcemanagementCalendarUrlIcs()",
    "return": "CalendarUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Get existing calendar link for the current user\napiInstance.getWorkforcemanagementCalendarUrlIcs()\n  .then((data) => {\n    console.log(`getWorkforcemanagementCalendarUrlIcs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementCalendarUrlIcs\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementhistoricaldatadeletejob": {
    "operationId": "getworkforcemanagementhistoricaldatadeletejob",
    "functionName": "getWorkforcemanagementHistoricaldataDeletejob",
    "signature": "getWorkforcemanagementHistoricaldataDeletejob()",
    "return": "HistoricalImportDeleteJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Retrieves delete job status for historical data imports of the organization\napiInstance.getWorkforcemanagementHistoricaldataDeletejob()\n  .then((data) => {\n    console.log(`getWorkforcemanagementHistoricaldataDeletejob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementHistoricaldataDeletejob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementhistoricaldataimportstatus": {
    "operationId": "getworkforcemanagementhistoricaldataimportstatus",
    "functionName": "getWorkforcemanagementHistoricaldataImportstatus",
    "signature": "getWorkforcemanagementHistoricaldataImportstatus()",
    "return": "HistoricalImportStatusListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Retrieves status of the historical data imports of the organization\napiInstance.getWorkforcemanagementHistoricaldataImportstatus()\n  .then((data) => {\n    console.log(`getWorkforcemanagementHistoricaldataImportstatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementHistoricaldataImportstatus\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementintegrationshris": {
    "operationId": "getworkforcemanagementintegrationshris",
    "functionName": "getWorkforcemanagementIntegrationsHris",
    "signature": "getWorkforcemanagementIntegrationsHris()",
    "return": "WfmIntegrationListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Get integrations\napiInstance.getWorkforcemanagementIntegrationsHris()\n  .then((data) => {\n    console.log(`getWorkforcemanagementIntegrationsHris success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementIntegrationsHris\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementintegrationshristimeofftypesjob": {
    "operationId": "getworkforcemanagementintegrationshristimeofftypesjob",
    "functionName": "getWorkforcemanagementIntegrationsHrisTimeofftypesJob",
    "signature": "getWorkforcemanagementIntegrationsHrisTimeofftypesJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "HrisTimeOffTypesJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | The ID of the job.\n\n// Query the results of time off types job\napiInstance.getWorkforcemanagementIntegrationsHrisTimeofftypesJob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementIntegrationsHrisTimeofftypesJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementIntegrationsHrisTimeofftypesJob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunit": {
    "operationId": "getworkforcemanagementmanagementunit",
    "functionName": "getWorkforcemanagementManagementunit",
    "signature": "getWorkforcemanagementManagementunit(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | \n};\n\n// Get management unit\napiInstance.getWorkforcemanagementManagementunit(managementUnitId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunit\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitactivitycodes": {
    "operationId": "getworkforcemanagementmanagementunitactivitycodes",
    "functionName": "getWorkforcemanagementManagementunitActivitycodes",
    "signature": "getWorkforcemanagementManagementunitActivitycodes(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActivityCodeContainer",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Deprecated: Instead use /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes. Get the list of activity codes\napiInstance.getWorkforcemanagementManagementunitActivitycodes(managementUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitActivitycodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitActivitycodes\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitadherence": {
    "operationId": "getworkforcemanagementmanagementunitadherence",
    "functionName": "getWorkforcemanagementManagementunitAdherence",
    "signature": "getWorkforcemanagementManagementunitAdherence(managementUnitId, forceDownloadService)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "UserScheduleAdherenceListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet opts = { \n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n// Get a list of user schedule adherence records for the requested management unit\napiInstance.getWorkforcemanagementManagementunitAdherence(managementUnitId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitAdherence success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitAdherence\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitagent": {
    "operationId": "getworkforcemanagementmanagementunitagent",
    "functionName": "getWorkforcemanagementManagementunitAgent",
    "signature": "getWorkforcemanagementManagementunitAgent(managementUnitId, agentId, excludeCapabilities)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "excludeCapabilities",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WfmAgent",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet agentId = \"agentId_example\"; // String | The agent id\nlet opts = { \n  \"excludeCapabilities\": true // Boolean | Excludes all capabilities of the agent such as queues, languages, and skills\n};\n\n// Get data for agent in the management unit\napiInstance.getWorkforcemanagementManagementunitAgent(managementUnitId, agentId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitAgent success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitAgent\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitagentshifttrades": {
    "operationId": "getworkforcemanagementmanagementunitagentshifttrades",
    "functionName": "getWorkforcemanagementManagementunitAgentShifttrades",
    "signature": "getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ShiftTradeListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet agentId = \"agentId_example\"; // String | The agent id\n\n// Gets all the shift trades for a given agent\napiInstance.getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitAgentShifttrades success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitAgentShifttrades\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitshifttradesmatched": {
    "operationId": "getworkforcemanagementmanagementunitshifttradesmatched",
    "functionName": "getWorkforcemanagementManagementunitShifttradesMatched",
    "signature": "getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ShiftTradeMatchesSummaryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Gets a summary of all shift trades in the matched state\napiInstance.getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitShifttradesMatched success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitShifttradesMatched\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitshifttradesusers": {
    "operationId": "getworkforcemanagementmanagementunitshifttradesusers",
    "functionName": "getWorkforcemanagementManagementunitShifttradesUsers",
    "signature": "getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmUserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Gets list of users available for whom you can send direct shift trade requests\napiInstance.getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitShifttradesUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitShifttradesUsers\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "getworkforcemanagementmanagementunittimeofflimit",
    "functionName": "getWorkforcemanagementManagementunitTimeofflimit",
    "signature": "getWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffLimit",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The ID of the time off limit to fetch\n\n// Gets a time off limit object\napiInstance.getWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitTimeofflimit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitTimeofflimit\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunittimeofflimits": {
    "operationId": "getworkforcemanagementmanagementunittimeofflimits",
    "functionName": "getWorkforcemanagementManagementunitTimeofflimits",
    "signature": "getWorkforcemanagementManagementunitTimeofflimits(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffLimitListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\n\n// Gets a list of time off limit objects under management unit.\napiInstance.getWorkforcemanagementManagementunitTimeofflimits(managementUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitTimeofflimits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitTimeofflimits\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "getworkforcemanagementmanagementunittimeoffplan",
    "functionName": "getWorkforcemanagementManagementunitTimeoffplan",
    "signature": "getWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet timeOffPlanId = \"timeOffPlanId_example\"; // String | The ID of the time off plan to fetch\n\n// Gets a time off plan\napiInstance.getWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitTimeoffplan success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitTimeoffplan\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunittimeoffplans": {
    "operationId": "getworkforcemanagementmanagementunittimeoffplans",
    "functionName": "getWorkforcemanagementManagementunitTimeoffplans",
    "signature": "getWorkforcemanagementManagementunitTimeoffplans(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffPlanListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\n\n// Gets a list of time off plans\napiInstance.getWorkforcemanagementManagementunitTimeoffplans(managementUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitTimeoffplans success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitTimeoffplans\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequest": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequest",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequest",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId = \"userId_example\"; // String | The userId to whom the Time Off Request applies.\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | Time Off Request Id\n\n// Get a time off request\napiInstance.getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitUserTimeoffrequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitUserTimeoffrequest\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequesttimeofflimits": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequesttimeofflimits",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "QueryTimeOffLimitValuesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet userId = \"userId_example\"; // String | The userId to whom the time off request applies.\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The ID of the time off request, which dates and activityCodeId determine limit values to retrieve\n\n// Retrieves time off limit, allocated and waitlisted values according to specific time off request\napiInstance.getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequests": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequests",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequests",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId, recentlyReviewed)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recentlyReviewed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId = \"userId_example\"; // String | The userId to whom the Time Off Request applies.\nlet opts = { \n  \"recentlyReviewed\": false // Boolean | Limit results to requests that have been reviewed within the preceding 30 days\n};\n\n// Get a list of time off requests for a given user\napiInstance.getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitUserTimeoffrequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitUserTimeoffrequests\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitusers": {
    "operationId": "getworkforcemanagementmanagementunitusers",
    "functionName": "getWorkforcemanagementManagementunitUsers",
    "signature": "getWorkforcemanagementManagementunitUsers(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmUserEntityListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Get users in the management unit\napiInstance.getWorkforcemanagementManagementunitUsers(managementUnitId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitUsers success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitUsers\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitweekschedule": {
    "operationId": "getworkforcemanagementmanagementunitweekschedule",
    "functionName": "getWorkforcemanagementManagementunitWeekSchedule",
    "signature": "getWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, expand, forceDownloadService)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WeekScheduleResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format.\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule to fetch\nlet opts = { \n  \"expand\": \"expand_example\", // String | Which fields, if any, to expand\n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n// Deprecated.  Use the equivalent business unit resource instead. Get a week schedule\napiInstance.getWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitWeekSchedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitWeekSchedule\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitweekschedules": {
    "operationId": "getworkforcemanagementmanagementunitweekschedules",
    "functionName": "getWorkforcemanagementManagementunitWeekSchedules",
    "signature": "getWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, includeOnlyPublished, earliestWeekDate, latestWeekDate)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnlyPublished",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "earliestWeekDate",
        "type": "String",
        "required": "false"
      },
      {
        "name": "latestWeekDate",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WeekScheduleListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format.\nlet opts = { \n  \"includeOnlyPublished\": true, // Boolean | Return only published schedules\n  \"earliestWeekDate\": \"earliestWeekDate_example\", // String | The start date of the earliest week to query in yyyy-MM-dd format\n  \"latestWeekDate\": \"latestWeekDate_example\" // String | The start date of the latest week to query in yyyy-MM-dd format\n};\n\n// Deprecated.  Use the equivalent business unit resource instead. Get the list of schedules in a week in management unit\napiInstance.getWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitWeekSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitWeekSchedules\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitweekshifttrades": {
    "operationId": "getworkforcemanagementmanagementunitweekshifttrades",
    "functionName": "getWorkforcemanagementManagementunitWeekShifttrades",
    "signature": "getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, evaluateMatches)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluateMatches",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WeekShiftTradeListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"weekDateId_example\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  \"evaluateMatches\": true // Boolean | Whether to evaluate the matches for violations\n};\n\n// Gets all the shift trades for a given week\napiInstance.getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitWeekShifttrades success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitWeekShifttrades\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitworkplan": {
    "operationId": "getworkforcemanagementmanagementunitworkplan",
    "functionName": "getWorkforcemanagementManagementunitWorkplan",
    "signature": "getWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, includeOnly)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnly",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to fetch\nlet opts = { \n  \"includeOnly\": [\"includeOnly_example\"] // [String] | limit response to the specified fields\n};\n\n// Get a work plan\napiInstance.getWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitWorkplan success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitWorkplan\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "getworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "getWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to fetch\n\n// Get a work plan rotation\napiInstance.getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitWorkplanrotation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitWorkplanrotation\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitworkplanrotations": {
    "operationId": "getworkforcemanagementmanagementunitworkplanrotations",
    "functionName": "getWorkforcemanagementManagementunitWorkplanrotations",
    "signature": "getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | \n};\n\n// Get work plan rotations\napiInstance.getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitWorkplanrotations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitWorkplanrotations\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitworkplans": {
    "operationId": "getworkforcemanagementmanagementunitworkplans",
    "functionName": "getWorkforcemanagementManagementunitWorkplans",
    "signature": "getWorkforcemanagementManagementunitWorkplans(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlanListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"expand\": [\"expand_example\"] // [String] | Include to access additional data on the work plans\n};\n\n// Get work plans\napiInstance.getWorkforcemanagementManagementunitWorkplans(managementUnitId, opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitWorkplans success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitWorkplans\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunits": {
    "operationId": "getworkforcemanagementmanagementunits",
    "functionName": "getWorkforcemanagementManagementunits",
    "signature": "getWorkforcemanagementManagementunits(pageSize, pageNumber, expand, feature, divisionId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"pageSize\": 3.4, // Number | Deprecated, paging is not supported\n  \"pageNumber\": 3.4, // Number | Deprecated, paging is not supported\n  \"expand\": \"expand_example\", // String | Deprecated, expand settings on the single MU route\n  \"feature\": \"feature_example\", // String | If specified, the list of management units for which the user is authorized to use the requested feature will be returned\n  \"divisionId\": \"divisionId_example\" // String | If specified, the list of management units belonging to the specified division will be returned\n};\n\n// Get management units\napiInstance.getWorkforcemanagementManagementunits(opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunits\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementmanagementunitsdivisionviews": {
    "operationId": "getworkforcemanagementmanagementunitsdivisionviews",
    "functionName": "getWorkforcemanagementManagementunitsDivisionviews",
    "signature": "getWorkforcemanagementManagementunitsDivisionviews(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"divisionId\": [\"divisionId_example\"] // [String] | The divisionIds to filter by. If omitted, will return all divisions\n};\n\n// Get management units across divisions\napiInstance.getWorkforcemanagementManagementunitsDivisionviews(opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementManagementunitsDivisionviews success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementManagementunitsDivisionviews\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementnotifications": {
    "operationId": "getworkforcemanagementnotifications",
    "functionName": "getWorkforcemanagementNotifications",
    "signature": "getWorkforcemanagementNotifications()",
    "return": "NotificationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Get a list of notifications for the current user\napiInstance.getWorkforcemanagementNotifications()\n  .then((data) => {\n    console.log(`getWorkforcemanagementNotifications success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementNotifications\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementschedulingjob": {
    "operationId": "getworkforcemanagementschedulingjob",
    "functionName": "getWorkforcemanagementSchedulingjob",
    "signature": "getWorkforcemanagementSchedulingjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SchedulingStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | The id of the scheduling job\n\n// Get status of the scheduling job\napiInstance.getWorkforcemanagementSchedulingjob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementSchedulingjob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementSchedulingjob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementshifttrades": {
    "operationId": "getworkforcemanagementshifttrades",
    "functionName": "getWorkforcemanagementShifttrades",
    "signature": "getWorkforcemanagementShifttrades()",
    "return": "ShiftTradeListResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Gets all of my shift trades\napiInstance.getWorkforcemanagementShifttrades()\n  .then((data) => {\n    console.log(`getWorkforcemanagementShifttrades success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementShifttrades\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementshrinkagejob": {
    "operationId": "getworkforcemanagementshrinkagejob",
    "functionName": "getWorkforcemanagementShrinkageJob",
    "signature": "getWorkforcemanagementShrinkageJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmHistoricalShrinkageResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n// Request to fetch the status of the historical shrinkage query\napiInstance.getWorkforcemanagementShrinkageJob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementShrinkageJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementShrinkageJob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementtimeoffbalancejob": {
    "operationId": "getworkforcemanagementtimeoffbalancejob",
    "functionName": "getWorkforcemanagementTimeoffbalanceJob",
    "signature": "getWorkforcemanagementTimeoffbalanceJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffBalanceJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet jobId = \"jobId_example\"; // String | The ID of the job.\n\n// Query the results of time off types job\napiInstance.getWorkforcemanagementTimeoffbalanceJob(jobId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementTimeoffbalanceJob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementTimeoffbalanceJob\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementtimeoffrequest": {
    "operationId": "getworkforcemanagementtimeoffrequest",
    "functionName": "getWorkforcemanagementTimeoffrequest",
    "signature": "getWorkforcemanagementTimeoffrequest(timeOffRequestId)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The ID of the time off request\n\n// Get a time off request for the current user\napiInstance.getWorkforcemanagementTimeoffrequest(timeOffRequestId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementTimeoffrequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementTimeoffrequest\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementtimeoffrequestwaitlistpositions": {
    "operationId": "getworkforcemanagementtimeoffrequestwaitlistpositions",
    "functionName": "getWorkforcemanagementTimeoffrequestWaitlistpositions",
    "signature": "getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WaitlistPositionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The ID of the time off request\n\n// Get the daily waitlist positions of a time off request for the current user\napiInstance.getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId)\n  .then((data) => {\n    console.log(`getWorkforcemanagementTimeoffrequestWaitlistpositions success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementTimeoffrequestWaitlistpositions\");\n    console.error(err);\n  });"
  },
  "getworkforcemanagementtimeoffrequests": {
    "operationId": "getworkforcemanagementtimeoffrequests",
    "functionName": "getWorkforcemanagementTimeoffrequests",
    "signature": "getWorkforcemanagementTimeoffrequests(recentlyReviewed)",
    "parameters": [
      {
        "name": "recentlyReviewed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"recentlyReviewed\": false // Boolean | Limit results to requests that have been reviewed within the preceding 30 days\n};\n\n// Get a list of time off requests for the current user\napiInstance.getWorkforcemanagementTimeoffrequests(opts)\n  .then((data) => {\n    console.log(`getWorkforcemanagementTimeoffrequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling getWorkforcemanagementTimeoffrequests\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementagentadherenceexplanation": {
    "operationId": "patchworkforcemanagementagentadherenceexplanation",
    "functionName": "patchWorkforcemanagementAgentAdherenceExplanation",
    "signature": "patchWorkforcemanagementAgentAdherenceExplanation(agentId, explanationId, body)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "explanationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AdherenceExplanationAsyncResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet agentId = \"agentId_example\"; // String | The ID of the agent to query\nlet explanationId = \"explanationId_example\"; // String | The ID of the explanation to update\nlet body = {}; // Object | The request body\n\n// Update an adherence explanation\napiInstance.patchWorkforcemanagementAgentAdherenceExplanation(agentId, explanationId, body)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementAgentAdherenceExplanation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementAgentAdherenceExplanation\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementbusinessunit": {
    "operationId": "patchworkforcemanagementbusinessunit",
    "functionName": "patchWorkforcemanagementBusinessunit",
    "signature": "patchWorkforcemanagementBusinessunit(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnitResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update business unit\napiInstance.patchWorkforcemanagementBusinessunit(businessUnitId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementBusinessunit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementBusinessunit\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementbusinessunitactivitycode": {
    "operationId": "patchworkforcemanagementbusinessunitactivitycode",
    "functionName": "patchWorkforcemanagementBusinessunitActivitycode",
    "signature": "patchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId = \"activityCodeId_example\"; // String | The ID of the activity code to update\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update an activity code\napiInstance.patchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementBusinessunitActivitycode success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementBusinessunitActivitycode\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "patchworkforcemanagementbusinessunitplanninggroup",
    "functionName": "patchWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "PlanningGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet planningGroupId = \"planningGroupId_example\"; // String | The ID of a planning group to update\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Updates the planning group\napiInstance.patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementBusinessunitPlanninggroup success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementBusinessunitPlanninggroup\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "patchworkforcemanagementbusinessunitschedulingrun",
    "functionName": "patchWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Mark a schedule run as applied\napiInstance.patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, opts)\n  .then(() => {\n    console.log(\"patchWorkforcemanagementBusinessunitSchedulingRun returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementBusinessunitSchedulingRun\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "patchworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "patchWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet serviceGoalTemplateId = \"serviceGoalTemplateId_example\"; // String | The ID of a service goal template to update\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Updates a service goal template\napiInstance.patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementBusinessunitServicegoaltemplate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementBusinessunitServicegoaltemplate\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunit": {
    "operationId": "patchworkforcemanagementmanagementunit",
    "functionName": "patchWorkforcemanagementManagementunit",
    "signature": "patchWorkforcemanagementManagementunit(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update the requested management unit\napiInstance.patchWorkforcemanagementManagementunit(managementUnitId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunit\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "patchworkforcemanagementmanagementunittimeofflimit",
    "functionName": "patchWorkforcemanagementManagementunitTimeofflimit",
    "signature": "patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The id of time off limit object to update\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Updates a time off limit object.\napiInstance.patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunitTimeofflimit success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunitTimeofflimit\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "patchworkforcemanagementmanagementunittimeoffplan",
    "functionName": "patchWorkforcemanagementManagementunitTimeoffplan",
    "signature": "patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet timeOffPlanId = \"timeOffPlanId_example\"; // String | The ID of the time off plan to update\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Updates a time off plan\napiInstance.patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunitTimeoffplan success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunitTimeoffplan\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunittimeoffrequestuserintegrationstatus": {
    "operationId": "patchworkforcemanagementmanagementunittimeoffrequestuserintegrationstatus",
    "functionName": "patchWorkforcemanagementManagementunitTimeoffrequestUserIntegrationstatus",
    "signature": "patchWorkforcemanagementManagementunitTimeoffrequestUserIntegrationstatus(managementUnitId, timeOffRequestId, userId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserTimeOffIntegrationStatusResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The ID of the time off request.\nlet userId = \"userId_example\"; // String | The ID of user to whom the time off request belongs.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Set integration status for a time off request.\napiInstance.patchWorkforcemanagementManagementunitTimeoffrequestUserIntegrationstatus(managementUnitId, timeOffRequestId, userId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunitTimeoffrequestUserIntegrationstatus success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunitTimeoffrequestUserIntegrationstatus\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunitusertimeoffrequest": {
    "operationId": "patchworkforcemanagementmanagementunitusertimeoffrequest",
    "functionName": "patchWorkforcemanagementManagementunitUserTimeoffrequest",
    "signature": "patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId = \"userId_example\"; // String | The id of the user the requested time off request belongs to\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The id of the time off request to update\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update a time off request\napiInstance.patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunitUserTimeoffrequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunitUserTimeoffrequest\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunitweekshifttrade": {
    "operationId": "patchworkforcemanagementmanagementunitweekshifttrade",
    "functionName": "patchWorkforcemanagementManagementunitWeekShifttrade",
    "signature": "patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, tradeId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tradeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ShiftTradeResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"weekDateId_example\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet tradeId = \"tradeId_example\"; // String | The ID of the shift trade to update\nlet body = {}; // Object | body\n\n// Updates a shift trade. This route can only be called by the initiating agent\napiInstance.patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, tradeId, body)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunitWeekShifttrade success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunitWeekShifttrade\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunitworkplan": {
    "operationId": "patchworkforcemanagementmanagementunitworkplan",
    "functionName": "patchWorkforcemanagementManagementunitWorkplan",
    "signature": "patchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, validationMode, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "validationMode",
        "type": "String",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to update\nlet opts = { \n  \"validationMode\": \"validationMode_example\", // String | Allows to update work plan even if validation result is invalid\n  \"body\": {} // Object | body\n};\n\n// Update a work plan\napiInstance.patchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunitWorkplan success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunitWorkplan\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "patchworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "patchWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to update\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update a work plan rotation\napiInstance.patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementManagementunitWorkplanrotation success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementManagementunitWorkplanrotation\");\n    console.error(err);\n  });"
  },
  "patchworkforcemanagementtimeoffrequest": {
    "operationId": "patchworkforcemanagementtimeoffrequest",
    "functionName": "patchWorkforcemanagementTimeoffrequest",
    "signature": "patchWorkforcemanagementTimeoffrequest(timeOffRequestId, body)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The ID of the time off request\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Update a time off request for the current user\napiInstance.patchWorkforcemanagementTimeoffrequest(timeOffRequestId, opts)\n  .then((data) => {\n    console.log(`patchWorkforcemanagementTimeoffrequest success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling patchWorkforcemanagementTimeoffrequest\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementadherenceexplanations": {
    "operationId": "postworkforcemanagementadherenceexplanations",
    "functionName": "postWorkforcemanagementAdherenceExplanations",
    "signature": "postWorkforcemanagementAdherenceExplanations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AdherenceExplanationAsyncResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet body = {}; // Object | The request body\n\n// Submit an adherence explanation for the current user\napiInstance.postWorkforcemanagementAdherenceExplanations(body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAdherenceExplanations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAdherenceExplanations\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementadherenceexplanationsquery": {
    "operationId": "postworkforcemanagementadherenceexplanationsquery",
    "functionName": "postWorkforcemanagementAdherenceExplanationsQuery",
    "signature": "postWorkforcemanagementAdherenceExplanationsQuery(body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "QueryAdherenceExplanationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet body = {}; // Object | The request body\nlet opts = { \n  \"forceAsync\": true, // Boolean | Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes\n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service. For testing/app development purposes\n};\n\n// Query adherence explanations for the current user\napiInstance.postWorkforcemanagementAdherenceExplanationsQuery(body, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAdherenceExplanationsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAdherenceExplanationsQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementadherencehistorical": {
    "operationId": "postworkforcemanagementadherencehistorical",
    "functionName": "postWorkforcemanagementAdherenceHistorical",
    "signature": "postWorkforcemanagementAdherenceHistorical(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Deprecated. Use bulk routes instead (/adherence/historical/bulk)\napiInstance.postWorkforcemanagementAdherenceHistorical(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAdherenceHistorical success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAdherenceHistorical\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementadherencehistoricalbulk": {
    "operationId": "postworkforcemanagementadherencehistoricalbulk",
    "functionName": "postWorkforcemanagementAdherenceHistoricalBulk",
    "signature": "postWorkforcemanagementAdherenceHistoricalBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceBulkResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Request a historical adherence report in bulk\napiInstance.postWorkforcemanagementAdherenceHistoricalBulk(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAdherenceHistoricalBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAdherenceHistoricalBulk\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementagentadherenceexplanations": {
    "operationId": "postworkforcemanagementagentadherenceexplanations",
    "functionName": "postWorkforcemanagementAgentAdherenceExplanations",
    "signature": "postWorkforcemanagementAgentAdherenceExplanations(agentId, body)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AdherenceExplanationAsyncResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet agentId = \"agentId_example\"; // String | The ID of the agent to query\nlet body = {}; // Object | The request body\n\n// Add an adherence explanation for the requested user\napiInstance.postWorkforcemanagementAgentAdherenceExplanations(agentId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAgentAdherenceExplanations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAgentAdherenceExplanations\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementagentadherenceexplanationsquery": {
    "operationId": "postworkforcemanagementagentadherenceexplanationsquery",
    "functionName": "postWorkforcemanagementAgentAdherenceExplanationsQuery",
    "signature": "postWorkforcemanagementAgentAdherenceExplanationsQuery(agentId, body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AgentQueryAdherenceExplanationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet agentId = \"agentId_example\"; // String | The ID of the agent to query\nlet body = {}; // Object | The request body\nlet opts = { \n  \"forceAsync\": true, // Boolean | Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes\n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service. For testing/app development purposes\n};\n\n// Query adherence explanations for the given agent across a specified range\napiInstance.postWorkforcemanagementAgentAdherenceExplanationsQuery(agentId, body, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAgentAdherenceExplanationsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAgentAdherenceExplanationsQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementagents": {
    "operationId": "postworkforcemanagementagents",
    "functionName": "postWorkforcemanagementAgents",
    "signature": "postWorkforcemanagementAgents(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "MoveAgentsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Move agents in and out of management unit\napiInstance.postWorkforcemanagementAgents(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAgents success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAgents\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementagentsintegrationshrisquery": {
    "operationId": "postworkforcemanagementagentsintegrationshrisquery",
    "functionName": "postWorkforcemanagementAgentsIntegrationsHrisQuery",
    "signature": "postWorkforcemanagementAgentsIntegrationsHrisQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "AgentsIntegrationsListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Query integrations for agents\napiInstance.postWorkforcemanagementAgentsIntegrationsHrisQuery(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAgentsIntegrationsHrisQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAgentsIntegrationsHrisQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementagentsmepossibleworkshifts": {
    "operationId": "postworkforcemanagementagentsmepossibleworkshifts",
    "functionName": "postWorkforcemanagementAgentsMePossibleworkshifts",
    "signature": "postWorkforcemanagementAgentsMePossibleworkshifts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AgentPossibleWorkShiftsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet body = {}; // Object | body\n\n// Get agent possible work shifts for requested time frame\napiInstance.postWorkforcemanagementAgentsMePossibleworkshifts(body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAgentsMePossibleworkshifts success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAgentsMePossibleworkshifts\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementagentschedulesmine": {
    "operationId": "postworkforcemanagementagentschedulesmine",
    "functionName": "postWorkforcemanagementAgentschedulesMine",
    "signature": "postWorkforcemanagementAgentschedulesMine(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BuCurrentAgentScheduleSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Get published schedule for the current user\napiInstance.postWorkforcemanagementAgentschedulesMine(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementAgentschedulesMine success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementAgentschedulesMine\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitactivitycodes": {
    "operationId": "postworkforcemanagementbusinessunitactivitycodes",
    "functionName": "postWorkforcemanagementBusinessunitActivitycodes",
    "signature": "postWorkforcemanagementBusinessunitActivitycodes(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a new activity code\napiInstance.postWorkforcemanagementBusinessunitActivitycodes(businessUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitActivitycodes success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitActivitycodes\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitadherenceexplanationsquery": {
    "operationId": "postworkforcemanagementbusinessunitadherenceexplanationsquery",
    "functionName": "postWorkforcemanagementBusinessunitAdherenceExplanationsQuery",
    "signature": "postWorkforcemanagementBusinessunitAdherenceExplanationsQuery(businessUnitId, body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuQueryAdherenceExplanationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet body = {}; // Object | The request body\nlet opts = { \n  \"forceAsync\": true, // Boolean | Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes\n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service. For testing/app development purposes\n};\n\n// Query adherence explanations across an entire business unit for the requested period\napiInstance.postWorkforcemanagementBusinessunitAdherenceExplanationsQuery(businessUnitId, body, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitAdherenceExplanationsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitAdherenceExplanationsQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitagentschedulessearch": {
    "operationId": "postworkforcemanagementbusinessunitagentschedulessearch",
    "functionName": "postWorkforcemanagementBusinessunitAgentschedulesSearch",
    "signature": "postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, forceAsync, forceDownloadService, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet opts = { \n  \"forceAsync\": true, // Boolean | Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes\n  \"forceDownloadService\": true, // Boolean | Force the result of this operation to be sent via download service. For testing/app development purposes\n  \"body\": {} // Object | body\n};\n\n// Search published schedules\napiInstance.postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitAgentschedulesSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitAgentschedulesSearch\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitintraday": {
    "operationId": "postworkforcemanagementbusinessunitintraday",
    "functionName": "postWorkforcemanagementBusinessunitIntraday",
    "signature": "postWorkforcemanagementBusinessunitIntraday(businessUnitId, forceAsync, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "AsyncIntradayResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet opts = { \n  \"forceAsync\": true, // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n  \"body\": {} // Object | body\n};\n\n// Get intraday data for the given date for the requested planningGroupIds\napiInstance.postWorkforcemanagementBusinessunitIntraday(businessUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitIntraday success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitIntraday\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitplanninggroups": {
    "operationId": "postworkforcemanagementbusinessunitplanninggroups",
    "functionName": "postWorkforcemanagementBusinessunitPlanninggroups",
    "signature": "postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "PlanningGroup",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Adds a new planning group\napiInstance.postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitPlanninggroups success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitPlanninggroups\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitservicegoaltemplates": {
    "operationId": "postworkforcemanagementbusinessunitservicegoaltemplates",
    "functionName": "postWorkforcemanagementBusinessunitServicegoaltemplates",
    "signature": "postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Adds a new service goal template\napiInstance.postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitServicegoaltemplates success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitServicegoaltemplates\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekscheduleagentschedulesquery": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleagentschedulesquery",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesQueryResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\nlet opts = { \n  \"forceAsync\": true, // Boolean | Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes\n  \"forceDownloadService\": true // Boolean | Force the result of this operation to be sent via download service. For testing/app development purposes\n};\n\n// Loads agent schedule data from the schedule. Used in combination with the metadata route\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, body, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekschedulecopy": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulecopy",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleCopy",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule to copy\nlet body = {}; // Object | body\n\n// Copy a schedule\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekScheduleCopy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekScheduleCopy\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekschedulereschedule": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulereschedule",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleReschedule",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleRunResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\n\n// Start a rescheduling run\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekScheduleReschedule success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekScheduleReschedule\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekscheduleupdate": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleupdate",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleUpdate",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleUpdate(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\n\n// Starts processing a schedule update\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleUpdate(businessUnitId, weekId, scheduleId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekScheduleUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekScheduleUpdate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekscheduleupdateuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleupdateuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UpdateScheduleUploadResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\n\n// Creates a signed upload URL for updating a schedule\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(businessUnitId, weekId, scheduleId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekschedules": {
    "operationId": "postworkforcemanagementbusinessunitweekschedules",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedules",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuScheduleMetadata",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n// Create a blank schedule\napiInstance.postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekSchedules\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekschedulesgenerate": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesgenerate",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleRunResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n// Generate a schedule\napiInstance.postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekSchedulesGenerate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekSchedulesGenerate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekschedulesimport": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesimport",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesImport",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesImport(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScheduleUploadProcessingResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | \n\n// Starts processing a schedule import\napiInstance.postWorkforcemanagementBusinessunitWeekSchedulesImport(businessUnitId, weekId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekSchedulesImport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekSchedulesImport\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekschedulesimportuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesimportuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ImportScheduleUploadResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n// Creates a signed upload URL for importing a schedule\napiInstance.postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(businessUnitId, weekId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastcopy": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastcopy",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, body, forceAsync)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AsyncForecastOperationResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast to copy\nlet body = {}; // Object | body\nlet opts = { \n  \"forceAsync\": true // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n};\n\n// Copy a short term forecast\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, body, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekShorttermforecastCopy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekShorttermforecastCopy\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsgenerate": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsgenerate",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, body, forceAsync)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AsyncForecastOperationResult",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\nlet opts = { \n  \"forceAsync\": true // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n};\n\n// Generate a short term forecast\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, body, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsimport": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsimport",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImport",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImport(businessUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ImportForecastResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n// Starts importing the uploaded short term forecast\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastsImport(businessUnitId, weekDateId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekShorttermforecastsImport success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekShorttermforecastsImport\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsimportuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsimportuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(businessUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ImportForecastUploadResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n// Creates a signed upload URL for importing a short term forecast\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(businessUnitId, weekDateId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementbusinessunits": {
    "operationId": "postworkforcemanagementbusinessunits",
    "functionName": "postWorkforcemanagementBusinessunits",
    "signature": "postWorkforcemanagementBusinessunits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnitResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Add a new business unit\napiInstance.postWorkforcemanagementBusinessunits(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementBusinessunits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementBusinessunits\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementcalendarurlics": {
    "operationId": "postworkforcemanagementcalendarurlics",
    "functionName": "postWorkforcemanagementCalendarUrlIcs",
    "signature": "postWorkforcemanagementCalendarUrlIcs(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CalendarUrlResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"language\": en-US // String | A language tag (which is sometimes referred to as a locale identifier) to use to localize default activity code names in the ics-formatted calendar\n};\n\n// Create a newly generated calendar link for the current user; if the current user has previously generated one, the generated link will be returned\napiInstance.postWorkforcemanagementCalendarUrlIcs(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementCalendarUrlIcs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementCalendarUrlIcs\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementhistoricaldatadeletejob": {
    "operationId": "postworkforcemanagementhistoricaldatadeletejob",
    "functionName": "postWorkforcemanagementHistoricaldataDeletejob",
    "signature": "postWorkforcemanagementHistoricaldataDeletejob()",
    "return": "HistoricalImportDeleteJobResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\n// Delete the entries of the historical data imports in the organization\napiInstance.postWorkforcemanagementHistoricaldataDeletejob()\n  .then((data) => {\n    console.log(`postWorkforcemanagementHistoricaldataDeletejob success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementHistoricaldataDeletejob\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementhistoricaldatavalidate": {
    "operationId": "postworkforcemanagementhistoricaldatavalidate",
    "functionName": "postWorkforcemanagementHistoricaldataValidate",
    "signature": "postWorkforcemanagementHistoricaldataValidate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Trigger validation process for historical import\napiInstance.postWorkforcemanagementHistoricaldataValidate(opts)\n  .then(() => {\n    console.log(\"postWorkforcemanagementHistoricaldataValidate returned successfully.\");\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementHistoricaldataValidate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementintegrationshritimeofftypesjobs": {
    "operationId": "postworkforcemanagementintegrationshritimeofftypesjobs",
    "functionName": "postWorkforcemanagementIntegrationsHriTimeofftypesJobs",
    "signature": "postWorkforcemanagementIntegrationsHriTimeofftypesJobs(hrisIntegrationId)",
    "parameters": [
      {
        "name": "hrisIntegrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "HrisTimeOffTypesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet hrisIntegrationId = \"hrisIntegrationId_example\"; // String | The ID of the HRIS integration for which time off types are queried.\n\n// Get list of time off types configured in integration\napiInstance.postWorkforcemanagementIntegrationsHriTimeofftypesJobs(hrisIntegrationId)\n  .then((data) => {\n    console.log(`postWorkforcemanagementIntegrationsHriTimeofftypesJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementIntegrationsHriTimeofftypesJobs\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitagentschedulessearch": {
    "operationId": "postworkforcemanagementmanagementunitagentschedulessearch",
    "functionName": "postWorkforcemanagementManagementunitAgentschedulesSearch",
    "signature": "postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, forceAsync, forceDownloadService, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesSearchResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"forceAsync\": true, // Boolean | Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes\n  \"forceDownloadService\": true, // Boolean | Force the result of this operation to be sent via download service. For testing/app development purposes\n  \"body\": {} // Object | body\n};\n\n// Query published schedules for given given time range for set of users\napiInstance.postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitAgentschedulesSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitAgentschedulesSearch\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunithistoricaladherencequery": {
    "operationId": "postworkforcemanagementmanagementunithistoricaladherencequery",
    "functionName": "postWorkforcemanagementManagementunitHistoricaladherencequery",
    "signature": "postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Request a historical adherence report\napiInstance.postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitHistoricaladherencequery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitHistoricaladherencequery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitmove": {
    "operationId": "postworkforcemanagementmanagementunitmove",
    "functionName": "postWorkforcemanagementManagementunitMove",
    "signature": "postWorkforcemanagementManagementunitMove(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "MoveManagementUnitResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Move the requested management unit to a new business unit\napiInstance.postWorkforcemanagementManagementunitMove(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitMove success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitMove\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitschedulessearch": {
    "operationId": "postworkforcemanagementmanagementunitschedulessearch",
    "functionName": "postWorkforcemanagementManagementunitSchedulesSearch",
    "signature": "postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserScheduleContainer",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Query published schedules for given given time range for set of users\napiInstance.postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitSchedulesSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitSchedulesSearch\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitshrinkagejobs": {
    "operationId": "postworkforcemanagementmanagementunitshrinkagejobs",
    "functionName": "postWorkforcemanagementManagementunitShrinkageJobs",
    "signature": "postWorkforcemanagementManagementunitShrinkageJobs(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalShrinkageResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Request a historical shrinkage report\napiInstance.postWorkforcemanagementManagementunitShrinkageJobs(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitShrinkageJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitShrinkageJobs\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunittimeofflimits": {
    "operationId": "postworkforcemanagementmanagementunittimeofflimits",
    "functionName": "postWorkforcemanagementManagementunitTimeofflimits",
    "signature": "postWorkforcemanagementManagementunitTimeofflimits(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Creates a new time off limit object under management unit.\napiInstance.postWorkforcemanagementManagementunitTimeofflimits(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitTimeofflimits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitTimeofflimits\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunittimeofflimitsvaluesquery": {
    "operationId": "postworkforcemanagementmanagementunittimeofflimitsvaluesquery",
    "functionName": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery",
    "signature": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "QueryTimeOffLimitValuesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Retrieves time off limit related values based on a given set of filters.\napiInstance.postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitTimeofflimitsValuesQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitTimeofflimitsValuesQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunittimeoffplans": {
    "operationId": "postworkforcemanagementmanagementunittimeoffplans",
    "functionName": "postWorkforcemanagementManagementunitTimeoffplans",
    "signature": "postWorkforcemanagementManagementunitTimeoffplans(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Creates a new time off plan\napiInstance.postWorkforcemanagementManagementunitTimeoffplans(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitTimeoffplans success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitTimeoffplans\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunittimeoffrequests": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequests",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequests",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a new time off request\napiInstance.postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitTimeoffrequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitTimeoffrequests\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunittimeoffrequestsintegrationstatusquery": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequestsintegrationstatusquery",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsIntegrationstatusQuery",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequestsIntegrationstatusQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserTimeOffIntegrationStatusResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Retrieves integration statuses for a list of time off requests\napiInstance.postWorkforcemanagementManagementunitTimeoffrequestsIntegrationstatusQuery(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitTimeoffrequestsIntegrationstatusQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitTimeoffrequestsIntegrationstatusQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunittimeoffrequestsquery": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequestsquery",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsQuery",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Fetches time off requests matching the conditions specified in the request body\napiInstance.postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitTimeoffrequestsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitTimeoffrequestsQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunittimeoffrequestswaitlistpositionsquery": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequestswaitlistpositionsquery",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WaitlistPositionListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Retrieves daily waitlist position for a list of time off requests\napiInstance.postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitusertimeoffbalancejobs": {
    "operationId": "postworkforcemanagementmanagementunitusertimeoffbalancejobs",
    "functionName": "postWorkforcemanagementManagementunitUserTimeoffbalanceJobs",
    "signature": "postWorkforcemanagementManagementunitUserTimeoffbalanceJobs(managementUnitId, userId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TimeOffBalancesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet userId = \"userId_example\"; // String | The ID of the user\nlet body = {}; // Object | The request body\n\n// Query time off balances for a given user for specified activity code and dates\napiInstance.postWorkforcemanagementManagementunitUserTimeoffbalanceJobs(managementUnitId, userId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitUserTimeoffbalanceJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitUserTimeoffbalanceJobs\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitusertimeoffrequesttimeoffbalancejobs": {
    "operationId": "postworkforcemanagementmanagementunitusertimeoffrequesttimeoffbalancejobs",
    "functionName": "postWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs",
    "signature": "postWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs(managementUnitId, userId, timeOffRequestId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffBalancesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet userId = \"userId_example\"; // String | The userId to whom the time off request applies.\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The time off request id.\n\n// Query time off balances for dates spanned by a given time off request\napiInstance.postWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs(managementUnitId, userId, timeOffRequestId)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitusertimeoffrequestsestimate": {
    "operationId": "postworkforcemanagementmanagementunitusertimeoffrequestsestimate",
    "functionName": "postWorkforcemanagementManagementunitUserTimeoffrequestsEstimate",
    "signature": "postWorkforcemanagementManagementunitUserTimeoffrequestsEstimate(managementUnitId, userId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "EstimateAvailableTimeOffResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit\nlet userId = \"userId_example\"; // String | The id of the user for whom the time off request estimate is requested\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Estimates available time off for an agent\napiInstance.postWorkforcemanagementManagementunitUserTimeoffrequestsEstimate(managementUnitId, userId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitUserTimeoffrequestsEstimate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitUserTimeoffrequestsEstimate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitweekshifttradematch": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradematch",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradeMatch",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, tradeId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tradeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MatchShiftTradeResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"weekDateId_example\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet tradeId = \"tradeId_example\"; // String | The ID of the shift trade to update\nlet body = {}; // Object | body\n\n// Matches a shift trade. This route can only be called by the receiving agent\napiInstance.postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, tradeId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWeekShifttradeMatch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWeekShifttradeMatch\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitweekshifttrades": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttrades",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttrades",
    "signature": "postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ShiftTradeResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"weekDateId_example\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n// Adds a shift trade\napiInstance.postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWeekShifttrades success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWeekShifttrades\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitweekshifttradessearch": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradessearch",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradesSearch",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SearchShiftTradesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"weekDateId_example\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n// Searches for potential shift trade matches for the current agent\napiInstance.postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWeekShifttradesSearch success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWeekShifttradesSearch\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitweekshifttradesstatebulk": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradesstatebulk",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, body, forceAsync)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BulkUpdateShiftTradeStateResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"weekDateId_example\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\nlet opts = { \n  \"forceAsync\": true // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n};\n\n// Updates the state of a batch of shift trades\napiInstance.postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, body, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWeekShifttradesStateBulk success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWeekShifttradesStateBulk\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitworkplancopy": {
    "operationId": "postworkforcemanagementmanagementunitworkplancopy",
    "functionName": "postWorkforcemanagementManagementunitWorkplanCopy",
    "signature": "postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to create a copy\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a copy of work plan\napiInstance.postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWorkplanCopy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWorkplanCopy\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitworkplanvalidate": {
    "operationId": "postworkforcemanagementmanagementunitworkplanvalidate",
    "functionName": "postWorkforcemanagementManagementunitWorkplanValidate",
    "signature": "postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, expand, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ValidateWorkPlanResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to validate. For new work plan, use the word 'new' for the ID.\nlet opts = { \n  \"expand\": [\"expand_example\"], // [String] | \n  \"body\": {} // Object | body\n};\n\n// Validate Work Plan\napiInstance.postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWorkplanValidate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWorkplanValidate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitworkplanrotationcopy": {
    "operationId": "postworkforcemanagementmanagementunitworkplanrotationcopy",
    "functionName": "postWorkforcemanagementManagementunitWorkplanrotationCopy",
    "signature": "postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to create a copy\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a copy of work plan rotation\napiInstance.postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWorkplanrotationCopy success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWorkplanrotationCopy\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitworkplanrotations": {
    "operationId": "postworkforcemanagementmanagementunitworkplanrotations",
    "functionName": "postWorkforcemanagementManagementunitWorkplanrotations",
    "signature": "postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a new work plan rotation\napiInstance.postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWorkplanrotations success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWorkplanrotations\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunitworkplans": {
    "operationId": "postworkforcemanagementmanagementunitworkplans",
    "functionName": "postWorkforcemanagementManagementunitWorkplans",
    "signature": "postWorkforcemanagementManagementunitWorkplans(managementUnitId, validationMode, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "validationMode",
        "type": "String",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  \"validationMode\": \"validationMode_example\", // String | Allows to create work plan even if the validation result is invalid\n  \"body\": {} // Object | body\n};\n\n// Create a new work plan\napiInstance.postWorkforcemanagementManagementunitWorkplans(managementUnitId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunitWorkplans success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunitWorkplans\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementmanagementunits": {
    "operationId": "postworkforcemanagementmanagementunits",
    "functionName": "postWorkforcemanagementManagementunits",
    "signature": "postWorkforcemanagementManagementunits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Add a management unit\napiInstance.postWorkforcemanagementManagementunits(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementManagementunits success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementManagementunits\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementnotificationsupdate": {
    "operationId": "postworkforcemanagementnotificationsupdate",
    "functionName": "postWorkforcemanagementNotificationsUpdate",
    "signature": "postWorkforcemanagementNotificationsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UpdateNotificationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Mark a list of notifications as read or unread\napiInstance.postWorkforcemanagementNotificationsUpdate(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementNotificationsUpdate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementNotificationsUpdate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementschedules": {
    "operationId": "postworkforcemanagementschedules",
    "functionName": "postWorkforcemanagementSchedules",
    "signature": "postWorkforcemanagementSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserScheduleContainer",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Get published schedule for the current user\napiInstance.postWorkforcemanagementSchedules(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementSchedules success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementSchedules\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementteamadherencehistorical": {
    "operationId": "postworkforcemanagementteamadherencehistorical",
    "functionName": "postWorkforcemanagementTeamAdherenceHistorical",
    "signature": "postWorkforcemanagementTeamAdherenceHistorical(teamId, body)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet teamId = \"teamId_example\"; // String | The ID of the team\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Request a teams historical adherence report\napiInstance.postWorkforcemanagementTeamAdherenceHistorical(teamId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementTeamAdherenceHistorical success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementTeamAdherenceHistorical\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementteamshrinkagejobs": {
    "operationId": "postworkforcemanagementteamshrinkagejobs",
    "functionName": "postWorkforcemanagementTeamShrinkageJobs",
    "signature": "postWorkforcemanagementTeamShrinkageJobs(teamId, body)",
    "parameters": [
      {
        "name": "teamId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalShrinkageResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet teamId = \"teamId_example\"; // String | The ID of the team\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Request a historical shrinkage report\napiInstance.postWorkforcemanagementTeamShrinkageJobs(teamId, opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementTeamShrinkageJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementTeamShrinkageJobs\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementtimeoffbalancejobs": {
    "operationId": "postworkforcemanagementtimeoffbalancejobs",
    "functionName": "postWorkforcemanagementTimeoffbalanceJobs",
    "signature": "postWorkforcemanagementTimeoffbalanceJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TimeOffBalancesResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet body = {}; // Object | The request body\n\n// Query time off balances for the current user for specified activity code and dates\napiInstance.postWorkforcemanagementTimeoffbalanceJobs(body)\n  .then((data) => {\n    console.log(`postWorkforcemanagementTimeoffbalanceJobs success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementTimeoffbalanceJobs\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementtimeofflimitsavailablequery": {
    "operationId": "postworkforcemanagementtimeofflimitsavailablequery",
    "functionName": "postWorkforcemanagementTimeofflimitsAvailableQuery",
    "signature": "postWorkforcemanagementTimeofflimitsAvailableQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "AvailableTimeOffResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Queries available time off for the current user\napiInstance.postWorkforcemanagementTimeofflimitsAvailableQuery(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementTimeofflimitsAvailableQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementTimeofflimitsAvailableQuery\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementtimeoffrequests": {
    "operationId": "postworkforcemanagementtimeoffrequests",
    "functionName": "postWorkforcemanagementTimeoffrequests",
    "signature": "postWorkforcemanagementTimeoffrequests(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Create a time off request for the current user\napiInstance.postWorkforcemanagementTimeoffrequests(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementTimeoffrequests success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementTimeoffrequests\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementtimeoffrequestsestimate": {
    "operationId": "postworkforcemanagementtimeoffrequestsestimate",
    "functionName": "postWorkforcemanagementTimeoffrequestsEstimate",
    "signature": "postWorkforcemanagementTimeoffrequestsEstimate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "EstimateAvailableTimeOffResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Estimates available time off for current user\napiInstance.postWorkforcemanagementTimeoffrequestsEstimate(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementTimeoffrequestsEstimate success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementTimeoffrequestsEstimate\");\n    console.error(err);\n  });"
  },
  "postworkforcemanagementtimeoffrequestsintegrationstatusquery": {
    "operationId": "postworkforcemanagementtimeoffrequestsintegrationstatusquery",
    "functionName": "postWorkforcemanagementTimeoffrequestsIntegrationstatusQuery",
    "signature": "postWorkforcemanagementTimeoffrequestsIntegrationstatusQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffIntegrationStatusResponseListing",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Retrieves integration statuses for a list of current user time off requests\napiInstance.postWorkforcemanagementTimeoffrequestsIntegrationstatusQuery(opts)\n  .then((data) => {\n    console.log(`postWorkforcemanagementTimeoffrequestsIntegrationstatusQuery success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling postWorkforcemanagementTimeoffrequestsIntegrationstatusQuery\");\n    console.error(err);\n  });"
  },
  "putworkforcemanagementagentintegrationshris": {
    "operationId": "putworkforcemanagementagentintegrationshris",
    "functionName": "putWorkforcemanagementAgentIntegrationsHris",
    "signature": "putWorkforcemanagementAgentIntegrationsHris(agentId, body)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AgentIntegrationsResponse",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet agentId = \"agentId_example\"; // String | The ID of the agent\nlet body = {}; // Object | body\n\n// Update integrations for agent\napiInstance.putWorkforcemanagementAgentIntegrationsHris(agentId, body)\n  .then((data) => {\n    console.log(`putWorkforcemanagementAgentIntegrationsHris success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putWorkforcemanagementAgentIntegrationsHris\");\n    console.error(err);\n  });"
  },
  "putworkforcemanagementmanagementunittimeofflimitvalues": {
    "operationId": "putworkforcemanagementmanagementunittimeofflimitvalues",
    "functionName": "putWorkforcemanagementManagementunitTimeofflimitValues",
    "signature": "putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "const platformClient = require(\"purecloud-platform-client-v2\");\n\nconst client = platformClient.ApiClient.instance;\nclient.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1); // Genesys Cloud region\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\nclient.setAccessToken(\"your_access_token\");\n\nlet apiInstance = new platformClient.WorkforceManagementApi();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The ID of the time off limit object to set values for\nlet opts = { \n  \"body\": {} // Object | body\n};\n\n// Sets daily values for a date range of time off limit object\napiInstance.putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, opts)\n  .then((data) => {\n    console.log(`putWorkforcemanagementManagementunitTimeofflimitValues success! data: ${JSON.stringify(data, null, 2)}`);\n  })\n  .catch((err) => {\n    console.log(\"There was a failure calling putWorkforcemanagementManagementunitTimeofflimitValues\");\n    console.error(err);\n  });"
  }
}