{
  "deletealertinginteractionstatsalert": {
    "operationId": "deletealertinginteractionstatsalert",
    "functionName": "deleteAlertingInteractionstatsAlert",
    "signature": "deleteAlertingInteractionstatsAlert(alertId)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAlertingInteractionstatsAlertRequest();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAlertingInteractionstatsAlert(alertId, callback);"
  },
  "deletealertinginteractionstatsrule": {
    "operationId": "deletealertinginteractionstatsrule",
    "functionName": "deleteAlertingInteractionstatsRule",
    "signature": "deleteAlertingInteractionstatsRule(ruleId)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAlertingInteractionstatsRuleRequest();\n\nlet ruleId = \"ruleId_example\"; // String | Rule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAlertingInteractionstatsRule(ruleId, callback);"
  },
  "getalertingalertsactive": {
    "operationId": "getalertingalertsactive",
    "functionName": "getAlertingAlertsActive",
    "signature": "getAlertingAlertsActive()",
    "return": "ActiveAlertCount",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAlertingAlertsActiveRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAlertingAlertsActive(callback);"
  },
  "getalertinginteractionstatsalert": {
    "operationId": "getalertinginteractionstatsalert",
    "functionName": "getAlertingInteractionstatsAlert",
    "signature": "getAlertingInteractionstatsAlert(alertId, expand)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsAlert",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAlertingInteractionstatsAlertRequest();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAlertingInteractionstatsAlert(alertId, opts, callback);"
  },
  "getalertinginteractionstatsalerts": {
    "operationId": "getalertinginteractionstatsalerts",
    "functionName": "getAlertingInteractionstatsAlerts",
    "signature": "getAlertingInteractionstatsAlerts(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsAlertContainer",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAlertingInteractionstatsAlertsRequest();\n\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAlertingInteractionstatsAlerts(opts, callback);"
  },
  "getalertinginteractionstatsalertsunread": {
    "operationId": "getalertinginteractionstatsalertsunread",
    "functionName": "getAlertingInteractionstatsAlertsUnread",
    "signature": "getAlertingInteractionstatsAlertsUnread()",
    "return": "UnreadMetric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAlertingInteractionstatsAlertsUnreadRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAlertingInteractionstatsAlertsUnread(callback);"
  },
  "getalertinginteractionstatsrule": {
    "operationId": "getalertinginteractionstatsrule",
    "functionName": "getAlertingInteractionstatsRule",
    "signature": "getAlertingInteractionstatsRule(ruleId, expand)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAlertingInteractionstatsRuleRequest();\n\nlet ruleId = \"ruleId_example\"; // String | Rule ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAlertingInteractionstatsRule(ruleId, opts, callback);"
  },
  "getalertinginteractionstatsrules": {
    "operationId": "getalertinginteractionstatsrules",
    "functionName": "getAlertingInteractionstatsRules",
    "signature": "getAlertingInteractionstatsRules(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRuleContainer",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAlertingInteractionstatsRulesRequest();\n\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAlertingInteractionstatsRules(opts, callback);"
  },
  "postalertinginteractionstatsrules": {
    "operationId": "postalertinginteractionstatsrules",
    "functionName": "postAlertingInteractionstatsRules",
    "signature": "postAlertingInteractionstatsRules(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAlertingInteractionstatsRulesRequest();\n\nlet body = {}; // Object | AlertingRule\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAlertingInteractionstatsRules(body, opts, callback);"
  },
  "putalertinginteractionstatsalert": {
    "operationId": "putalertinginteractionstatsalert",
    "functionName": "putAlertingInteractionstatsAlert",
    "signature": "putAlertingInteractionstatsAlert(alertId, body, expand)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UnreadStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAlertingInteractionstatsAlertRequest();\n\nlet alertId = \"alertId_example\"; // String | Alert ID\nlet body = {}; // Object | InteractionStatsAlert\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAlertingInteractionstatsAlert(alertId, body, opts, callback);"
  },
  "putalertinginteractionstatsrule": {
    "operationId": "putalertinginteractionstatsrule",
    "functionName": "putAlertingInteractionstatsRule",
    "signature": "putAlertingInteractionstatsRule(ruleId, body, expand)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAlertingInteractionstatsRuleRequest();\n\nlet ruleId = \"ruleId_example\"; // String | Rule ID\nlet body = {}; // Object | AlertingRule\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAlertingInteractionstatsRule(ruleId, body, opts, callback);"
  },
  "deleteanalyticsconversationsdetailsjob": {
    "operationId": "deleteanalyticsconversationsdetailsjob",
    "functionName": "deleteAnalyticsConversationsDetailsJob",
    "signature": "deleteAnalyticsConversationsDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAnalyticsConversationsDetailsJobRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAnalyticsConversationsDetailsJob(jobId, callback);"
  },
  "deleteanalyticsreportingschedule": {
    "operationId": "deleteanalyticsreportingschedule",
    "functionName": "deleteAnalyticsReportingSchedule",
    "signature": "deleteAnalyticsReportingSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAnalyticsReportingScheduleRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAnalyticsReportingSchedule(scheduleId, callback);"
  },
  "deleteanalyticsusersdetailsjob": {
    "operationId": "deleteanalyticsusersdetailsjob",
    "functionName": "deleteAnalyticsUsersDetailsJob",
    "signature": "deleteAnalyticsUsersDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAnalyticsUsersDetailsJobRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAnalyticsUsersDetailsJob(jobId, callback);"
  },
  "getanalyticsbotflowreportingturns": {
    "operationId": "getanalyticsbotflowreportingturns",
    "functionName": "getAnalyticsBotflowReportingturns",
    "signature": "getAnalyticsBotflowReportingturns(botFlowId, after, pageSize, actionId, sessionId)",
    "parameters": [
      {
        "name": "botFlowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "actionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sessionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportingTurnsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsBotflowReportingturnsRequest();\n\nlet botFlowId = \"botFlowId_example\"; // String | ID of the bot flow.\nlet opts = { \n  'after': \"after_example\", // String | The cursor that points to the ID of the last item in the list of entities that has been returned.\n  'pageSize': \"50\", // String | Max number of entities to return. Maximum of 250\n  'actionId': \"actionId_example\", // String | Optional action ID to get the reporting turns associated to a particular flow action\n  'sessionId': \"sessionId_example\" // String | Optional session ID to get the reporting turns for a particular session\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsBotflowReportingturns(botFlowId, opts, callback);"
  },
  "getanalyticsconversationdetails": {
    "operationId": "getanalyticsconversationdetails",
    "functionName": "getAnalyticsConversationDetails",
    "signature": "getAnalyticsConversationDetails(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributes",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsConversationDetailsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsConversationDetails(conversationId, callback);"
  },
  "getanalyticsconversationsdetails": {
    "operationId": "getanalyticsconversationsdetails",
    "functionName": "getAnalyticsConversationsDetails",
    "signature": "getAnalyticsConversationsDetails(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributesMultiGetResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsConversationsDetailsRequest();\n\nlet opts = { \n  'id': [\"id_example\"] // [String] | Comma-separated conversation ids\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsConversationsDetails(opts, callback);"
  },
  "getanalyticsconversationsdetailsjob": {
    "operationId": "getanalyticsconversationsdetailsjob",
    "functionName": "getAnalyticsConversationsDetailsJob",
    "signature": "getAnalyticsConversationsDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsConversationsDetailsJobRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsConversationsDetailsJob(jobId, callback);"
  },
  "getanalyticsconversationsdetailsjobresults": {
    "operationId": "getanalyticsconversationsdetailsjobresults",
    "functionName": "getAnalyticsConversationsDetailsJobResults",
    "signature": "getAnalyticsConversationsDetailsJobResults(jobId, cursor, pageSize)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "AnalyticsConversationAsyncQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsConversationsDetailsJobResultsRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  'cursor': \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  'pageSize': 56 // Number | The desired maximum number of results\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsConversationsDetailsJobResults(jobId, opts, callback);"
  },
  "getanalyticsconversationsdetailsjobsavailability": {
    "operationId": "getanalyticsconversationsdetailsjobsavailability",
    "functionName": "getAnalyticsConversationsDetailsJobsAvailability",
    "signature": "getAnalyticsConversationsDetailsJobsAvailability()",
    "return": "DataAvailabilityResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsConversationsDetailsJobsAvailabilityRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsConversationsDetailsJobsAvailability(callback);"
  },
  "getanalyticsreportingexports": {
    "operationId": "getanalyticsreportingexports",
    "functionName": "getAnalyticsReportingExports",
    "signature": "getAnalyticsReportingExports(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ReportingExportJobListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingExportsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingExports(opts, callback);"
  },
  "getanalyticsreportingexportsmetadata": {
    "operationId": "getanalyticsreportingexportsmetadata",
    "functionName": "getAnalyticsReportingExportsMetadata",
    "signature": "getAnalyticsReportingExportsMetadata()",
    "return": "ReportingExportMetadataJobListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingExportsMetadataRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingExportsMetadata(callback);"
  },
  "getanalyticsreportingmetadata": {
    "operationId": "getanalyticsreportingmetadata",
    "functionName": "getAnalyticsReportingMetadata",
    "signature": "getAnalyticsReportingMetadata(pageNumber, pageSize, locale)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportMetaDataEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingMetadataRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'locale': \"locale_example\" // String | Locale\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingMetadata(opts, callback);"
  },
  "getanalyticsreportingreportidmetadata": {
    "operationId": "getanalyticsreportingreportidmetadata",
    "functionName": "getAnalyticsReportingReportIdMetadata",
    "signature": "getAnalyticsReportingReportIdMetadata(reportId, locale)",
    "parameters": [
      {
        "name": "reportId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportMetaData",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingReportIdMetadataRequest();\n\nlet reportId = \"reportId_example\"; // String | Report ID\nlet opts = { \n  'locale': \"locale_example\" // String | Locale\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingReportIdMetadata(reportId, opts, callback);"
  },
  "getanalyticsreportingreportformats": {
    "operationId": "getanalyticsreportingreportformats",
    "functionName": "getAnalyticsReportingReportformats",
    "signature": "getAnalyticsReportingReportformats()",
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingReportformatsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingReportformats(callback);"
  },
  "getanalyticsreportingschedule": {
    "operationId": "getanalyticsreportingschedule",
    "functionName": "getAnalyticsReportingSchedule",
    "signature": "getAnalyticsReportingSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingScheduleRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingSchedule(scheduleId, callback);"
  },
  "getanalyticsreportingschedulehistory": {
    "operationId": "getanalyticsreportingschedulehistory",
    "functionName": "getAnalyticsReportingScheduleHistory",
    "signature": "getAnalyticsReportingScheduleHistory(scheduleId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ReportRunEntryEntityDomainListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingScheduleHistoryRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\nlet opts = { \n  'pageNumber': 1, // Number | \n  'pageSize': 25 // Number | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingScheduleHistory(scheduleId, opts, callback);"
  },
  "getanalyticsreportingschedulehistorylatest": {
    "operationId": "getanalyticsreportingschedulehistorylatest",
    "functionName": "getAnalyticsReportingScheduleHistoryLatest",
    "signature": "getAnalyticsReportingScheduleHistoryLatest(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportRunEntry",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingScheduleHistoryLatestRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingScheduleHistoryLatest(scheduleId, callback);"
  },
  "getanalyticsreportingschedulehistoryrunid": {
    "operationId": "getanalyticsreportingschedulehistoryrunid",
    "functionName": "getAnalyticsReportingScheduleHistoryRunId",
    "signature": "getAnalyticsReportingScheduleHistoryRunId(runId, scheduleId)",
    "parameters": [
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportRunEntry",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingScheduleHistoryRunIdRequest();\n\nlet runId = \"runId_example\"; // String | Run ID\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingScheduleHistoryRunId(runId, scheduleId, callback);"
  },
  "getanalyticsreportingschedules": {
    "operationId": "getanalyticsreportingschedules",
    "functionName": "getAnalyticsReportingSchedules",
    "signature": "getAnalyticsReportingSchedules(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ReportScheduleEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingSchedulesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingSchedules(opts, callback);"
  },
  "getanalyticsreportingsettings": {
    "operationId": "getanalyticsreportingsettings",
    "functionName": "getAnalyticsReportingSettings",
    "signature": "getAnalyticsReportingSettings()",
    "return": "AnalyticsReportingSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingSettings(callback);"
  },
  "getanalyticsreportingtimeperiods": {
    "operationId": "getanalyticsreportingtimeperiods",
    "functionName": "getAnalyticsReportingTimeperiods",
    "signature": "getAnalyticsReportingTimeperiods()",
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsReportingTimeperiodsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsReportingTimeperiods(callback);"
  },
  "getanalyticsusersdetailsjob": {
    "operationId": "getanalyticsusersdetailsjob",
    "functionName": "getAnalyticsUsersDetailsJob",
    "signature": "getAnalyticsUsersDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsUsersDetailsJobRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsUsersDetailsJob(jobId, callback);"
  },
  "getanalyticsusersdetailsjobresults": {
    "operationId": "getanalyticsusersdetailsjobresults",
    "functionName": "getAnalyticsUsersDetailsJobResults",
    "signature": "getAnalyticsUsersDetailsJobResults(jobId, cursor, pageSize)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "AnalyticsUserDetailsAsyncQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsUsersDetailsJobResultsRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  'cursor': \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  'pageSize': 56 // Number | The desired maximum number of results\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsUsersDetailsJobResults(jobId, opts, callback);"
  },
  "getanalyticsusersdetailsjobsavailability": {
    "operationId": "getanalyticsusersdetailsjobsavailability",
    "functionName": "getAnalyticsUsersDetailsJobsAvailability",
    "signature": "getAnalyticsUsersDetailsJobsAvailability()",
    "return": "DataAvailabilityResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAnalyticsUsersDetailsJobsAvailabilityRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAnalyticsUsersDetailsJobsAvailability(callback);"
  },
  "patchanalyticsreportingsettings": {
    "operationId": "patchanalyticsreportingsettings",
    "functionName": "patchAnalyticsReportingSettings",
    "signature": "patchAnalyticsReportingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsReportingSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchAnalyticsReportingSettingsRequest();\n\nlet body = {}; // Object | AnalyticsReportingSettingsRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchAnalyticsReportingSettings(body, callback);"
  },
  "postanalyticsbotsaggregatesquery": {
    "operationId": "postanalyticsbotsaggregatesquery",
    "functionName": "postAnalyticsBotsAggregatesQuery",
    "signature": "postAnalyticsBotsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BotAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsBotsAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsBotsAggregatesQuery(body, callback);"
  },
  "postanalyticsconversationdetailsproperties": {
    "operationId": "postanalyticsconversationdetailsproperties",
    "functionName": "postAnalyticsConversationDetailsProperties",
    "signature": "postAnalyticsConversationDetailsProperties(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PropertyIndexRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsConversationDetailsPropertiesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsConversationDetailsProperties(conversationId, body, callback);"
  },
  "postanalyticsconversationsaggregatesquery": {
    "operationId": "postanalyticsconversationsaggregatesquery",
    "functionName": "postAnalyticsConversationsAggregatesQuery",
    "signature": "postAnalyticsConversationsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConversationAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsConversationsAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsConversationsAggregatesQuery(body, callback);"
  },
  "postanalyticsconversationsdetailsjobs": {
    "operationId": "postanalyticsconversationsdetailsjobs",
    "functionName": "postAnalyticsConversationsDetailsJobs",
    "signature": "postAnalyticsConversationsDetailsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsConversationsDetailsJobsRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsConversationsDetailsJobs(body, callback);"
  },
  "postanalyticsconversationsdetailsquery": {
    "operationId": "postanalyticsconversationsdetailsquery",
    "functionName": "postAnalyticsConversationsDetailsQuery",
    "signature": "postAnalyticsConversationsDetailsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsConversationsDetailsQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsConversationsDetailsQuery(body, callback);"
  },
  "postanalyticsconversationstranscriptsquery": {
    "operationId": "postanalyticsconversationstranscriptsquery",
    "functionName": "postAnalyticsConversationsTranscriptsQuery",
    "signature": "postAnalyticsConversationsTranscriptsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributesMultiGetResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsConversationsTranscriptsQueryRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsConversationsTranscriptsQuery(body, callback);"
  },
  "postanalyticsevaluationsaggregatesquery": {
    "operationId": "postanalyticsevaluationsaggregatesquery",
    "functionName": "postAnalyticsEvaluationsAggregatesQuery",
    "signature": "postAnalyticsEvaluationsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsEvaluationsAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsEvaluationsAggregatesQuery(body, callback);"
  },
  "postanalyticsflowsaggregatesquery": {
    "operationId": "postanalyticsflowsaggregatesquery",
    "functionName": "postAnalyticsFlowsAggregatesQuery",
    "signature": "postAnalyticsFlowsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FlowAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsFlowsAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsFlowsAggregatesQuery(body, callback);"
  },
  "postanalyticsflowsobservationsquery": {
    "operationId": "postanalyticsflowsobservationsquery",
    "functionName": "postAnalyticsFlowsObservationsQuery",
    "signature": "postAnalyticsFlowsObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FlowObservationQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsFlowsObservationsQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsFlowsObservationsQuery(body, callback);"
  },
  "postanalyticsjourneysaggregatesquery": {
    "operationId": "postanalyticsjourneysaggregatesquery",
    "functionName": "postAnalyticsJourneysAggregatesQuery",
    "signature": "postAnalyticsJourneysAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "JourneyAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsJourneysAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsJourneysAggregatesQuery(body, callback);"
  },
  "postanalyticsqueuesobservationsquery": {
    "operationId": "postanalyticsqueuesobservationsquery",
    "functionName": "postAnalyticsQueuesObservationsQuery",
    "signature": "postAnalyticsQueuesObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueueObservationQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsQueuesObservationsQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsQueuesObservationsQuery(body, callback);"
  },
  "postanalyticsreportingexports": {
    "operationId": "postanalyticsreportingexports",
    "functionName": "postAnalyticsReportingExports",
    "signature": "postAnalyticsReportingExports(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ReportingExportJobResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsReportingExportsRequest();\n\nlet body = {}; // Object | ReportingExportJobRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsReportingExports(body, callback);"
  },
  "postanalyticsreportingschedulerunreport": {
    "operationId": "postanalyticsreportingschedulerunreport",
    "functionName": "postAnalyticsReportingScheduleRunreport",
    "signature": "postAnalyticsReportingScheduleRunreport(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RunNowResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsReportingScheduleRunreportRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsReportingScheduleRunreport(scheduleId, callback);"
  },
  "postanalyticsreportingschedules": {
    "operationId": "postanalyticsreportingschedules",
    "functionName": "postAnalyticsReportingSchedules",
    "signature": "postAnalyticsReportingSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsReportingSchedulesRequest();\n\nlet body = {}; // Object | ReportSchedule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsReportingSchedules(body, callback);"
  },
  "postanalyticssurveysaggregatesquery": {
    "operationId": "postanalyticssurveysaggregatesquery",
    "functionName": "postAnalyticsSurveysAggregatesQuery",
    "signature": "postAnalyticsSurveysAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsSurveysAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsSurveysAggregatesQuery(body, callback);"
  },
  "postanalyticstranscriptsaggregatesquery": {
    "operationId": "postanalyticstranscriptsaggregatesquery",
    "functionName": "postAnalyticsTranscriptsAggregatesQuery",
    "signature": "postAnalyticsTranscriptsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TranscriptAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsTranscriptsAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsTranscriptsAggregatesQuery(body, callback);"
  },
  "postanalyticsusersaggregatesquery": {
    "operationId": "postanalyticsusersaggregatesquery",
    "functionName": "postAnalyticsUsersAggregatesQuery",
    "signature": "postAnalyticsUsersAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsUsersAggregatesQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsUsersAggregatesQuery(body, callback);"
  },
  "postanalyticsusersdetailsjobs": {
    "operationId": "postanalyticsusersdetailsjobs",
    "functionName": "postAnalyticsUsersDetailsJobs",
    "signature": "postAnalyticsUsersDetailsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsUsersDetailsJobsRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsUsersDetailsJobs(body, callback);"
  },
  "postanalyticsusersdetailsquery": {
    "operationId": "postanalyticsusersdetailsquery",
    "functionName": "postAnalyticsUsersDetailsQuery",
    "signature": "postAnalyticsUsersDetailsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AnalyticsUserDetailsQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsUsersDetailsQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsUsersDetailsQuery(body, callback);"
  },
  "postanalyticsusersobservationsquery": {
    "operationId": "postanalyticsusersobservationsquery",
    "functionName": "postAnalyticsUsersObservationsQuery",
    "signature": "postAnalyticsUsersObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserObservationQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAnalyticsUsersObservationsQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAnalyticsUsersObservationsQuery(body, callback);"
  },
  "putanalyticsreportingschedule": {
    "operationId": "putanalyticsreportingschedule",
    "functionName": "putAnalyticsReportingSchedule",
    "signature": "putAnalyticsReportingSchedule(scheduleId, body)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAnalyticsReportingScheduleRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\nlet body = {}; // Object | ReportSchedule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAnalyticsReportingSchedule(scheduleId, body, callback);"
  },
  "deletearchitectemergencygroup": {
    "operationId": "deletearchitectemergencygroup",
    "functionName": "deleteArchitectEmergencygroup",
    "signature": "deleteArchitectEmergencygroup(emergencyGroupId)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectEmergencygroupRequest();\n\nlet emergencyGroupId = \"emergencyGroupId_example\"; // String | Emergency group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectEmergencygroup(emergencyGroupId, callback);"
  },
  "deletearchitectivr": {
    "operationId": "deletearchitectivr",
    "functionName": "deleteArchitectIvr",
    "signature": "deleteArchitectIvr(ivrId)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectIvrRequest();\n\nlet ivrId = \"ivrId_example\"; // String | IVR id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectIvr(ivrId, callback);"
  },
  "deletearchitectprompt": {
    "operationId": "deletearchitectprompt",
    "functionName": "deleteArchitectPrompt",
    "signature": "deleteArchitectPrompt(promptId, allResources)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "allResources",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectPromptRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet opts = { \n  'allResources': true // Boolean | Whether or not to delete all the prompt resources\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectPrompt(promptId, opts, callback);"
  },
  "deletearchitectpromptresource": {
    "operationId": "deletearchitectpromptresource",
    "functionName": "deleteArchitectPromptResource",
    "signature": "deleteArchitectPromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectPromptResourceRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectPromptResource(promptId, languageCode, callback);"
  },
  "deletearchitectpromptresourceaudio": {
    "operationId": "deletearchitectpromptresourceaudio",
    "functionName": "deleteArchitectPromptResourceAudio",
    "signature": "deleteArchitectPromptResourceAudio(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectPromptResourceAudioRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectPromptResourceAudio(promptId, languageCode, callback);"
  },
  "deletearchitectprompts": {
    "operationId": "deletearchitectprompts",
    "functionName": "deleteArchitectPrompts",
    "signature": "deleteArchitectPrompts(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectPromptsRequest();\n\nlet id = [\"id_example\"]; // [String] | List of Prompt IDs\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteArchitectPrompts(id, callback);"
  },
  "deletearchitectschedule": {
    "operationId": "deletearchitectschedule",
    "functionName": "deleteArchitectSchedule",
    "signature": "deleteArchitectSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectScheduleRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectSchedule(scheduleId, callback);"
  },
  "deletearchitectschedulegroup": {
    "operationId": "deletearchitectschedulegroup",
    "functionName": "deleteArchitectSchedulegroup",
    "signature": "deleteArchitectSchedulegroup(scheduleGroupId)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectSchedulegroupRequest();\n\nlet scheduleGroupId = \"scheduleGroupId_example\"; // String | Schedule group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectSchedulegroup(scheduleGroupId, callback);"
  },
  "deletearchitectsystempromptresource": {
    "operationId": "deletearchitectsystempromptresource",
    "functionName": "deleteArchitectSystempromptResource",
    "signature": "deleteArchitectSystempromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteArchitectSystempromptResourceRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteArchitectSystempromptResource(promptId, languageCode, callback);"
  },
  "deleteflow": {
    "operationId": "deleteflow",
    "functionName": "deleteFlow",
    "signature": "deleteFlow(flowId)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteFlowRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteFlow(flowId, callback);"
  },
  "deleteflows": {
    "operationId": "deleteflows",
    "functionName": "deleteFlows",
    "signature": "deleteFlows(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteFlowsRequest();\n\nlet id = [\"id_example\"]; // [String] | List of Flow IDs\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteFlows(id, callback);"
  },
  "deleteflowsdatatable": {
    "operationId": "deleteflowsdatatable",
    "functionName": "deleteFlowsDatatable",
    "signature": "deleteFlowsDatatable(datatableId, force)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteFlowsDatatableRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  'force': false // Boolean | force delete, even if in use\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteFlowsDatatable(datatableId, opts, callback);"
  },
  "deleteflowsdatatablerow": {
    "operationId": "deleteflowsdatatablerow",
    "functionName": "deleteFlowsDatatableRow",
    "signature": "deleteFlowsDatatableRow(datatableId, rowId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteFlowsDatatableRowRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet rowId = \"rowId_example\"; // String | the key for the row\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteFlowsDatatableRow(datatableId, rowId, callback);"
  },
  "deleteflowsmilestone": {
    "operationId": "deleteflowsmilestone",
    "functionName": "deleteFlowsMilestone",
    "signature": "deleteFlowsMilestone(milestoneId)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteFlowsMilestoneRequest();\n\nlet milestoneId = \"milestoneId_example\"; // String | flow milestone ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteFlowsMilestone(milestoneId, callback);"
  },
  "getarchitectdependencytracking": {
    "operationId": "getarchitectdependencytracking",
    "functionName": "getArchitectDependencytracking",
    "signature": "getArchitectDependencytracking(name, pageNumber, pageSize, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumingResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumingResourceType",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingRequest();\n\nlet name = \"name_example\"; // String | Object name to search for\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'objectType': [\"objectType_example\"], // [String] | Object type(s) to search for\n  'consumedResources': true, // Boolean | Include resources each result item consumes\n  'consumingResources': true, // Boolean | Include resources that consume each result item\n  'consumedResourceType': [\"consumedResourceType_example\"], // [String] | Types of consumed resources to return, if consumed resources are requested\n  'consumingResourceType': [\"consumingResourceType_example\"] // [String] | Types of consuming resources to return, if consuming resources are requested\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytracking(name, opts, callback);"
  },
  "getarchitectdependencytrackingbuild": {
    "operationId": "getarchitectdependencytrackingbuild",
    "functionName": "getArchitectDependencytrackingBuild",
    "signature": "getArchitectDependencytrackingBuild()",
    "return": "DependencyStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingBuildRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingBuild(callback);"
  },
  "getarchitectdependencytrackingconsumedresources": {
    "operationId": "getarchitectdependencytrackingconsumedresources",
    "functionName": "getArchitectDependencytrackingConsumedresources",
    "signature": "getArchitectDependencytrackingConsumedresources(id, version, objectType, resourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "resourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ConsumedResourcesEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingConsumedresourcesRequest();\n\nlet id = \"id_example\"; // String | Consuming object ID\nlet version = \"version_example\"; // String | Consuming object version\nlet objectType = \"objectType_example\"; // String | Consuming object type.  Only versioned types are allowed here.\nlet opts = { \n  'resourceType': [\"resourceType_example\"], // [String] | Types of consumed resources to show\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingConsumedresources(id, version, objectType, opts, callback);"
  },
  "getarchitectdependencytrackingconsumingresources": {
    "operationId": "getarchitectdependencytrackingconsumingresources",
    "functionName": "getArchitectDependencytrackingConsumingresources",
    "signature": "getArchitectDependencytrackingConsumingresources(id, objectType, resourceType, version, pageNumber, pageSize, flowFilter)",
    "parameters": [
      {
        "name": "id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "resourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "flowFilter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ConsumingResourcesEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingConsumingresourcesRequest();\n\nlet id = \"id_example\"; // String | Consumed object ID\nlet objectType = \"objectType_example\"; // String | Consumed object type\nlet opts = { \n  'resourceType': [\"resourceType_example\"], // [String] | Types of consuming resources to show.  Only versioned types are allowed here.\n  'version': \"version_example\", // String | Object version\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'flowFilter': \"flowFilter_example\" // String | Show only checkedIn or published flows\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingConsumingresources(id, objectType, opts, callback);"
  },
  "getarchitectdependencytrackingdeletedresourceconsumers": {
    "operationId": "getarchitectdependencytrackingdeletedresourceconsumers",
    "functionName": "getArchitectDependencytrackingDeletedresourceconsumers",
    "signature": "getArchitectDependencytrackingDeletedresourceconsumers(name, objectType, flowFilter, consumedResources, consumedResourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "flowFilter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingDeletedresourceconsumersRequest();\n\nlet opts = { \n  'name': \"name_example\", // String | Name to search for\n  'objectType': [\"objectType_example\"], // [String] | Object type(s) to search for\n  'flowFilter': \"flowFilter_example\", // String | Show only checkedIn or published flows\n  'consumedResources': false, // Boolean | Return consumed resources?\n  'consumedResourceType': [\"consumedResourceType_example\"], // [String] | Resource type(s) to return\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingDeletedresourceconsumers(opts, callback);"
  },
  "getarchitectdependencytrackingobject": {
    "operationId": "getarchitectdependencytrackingobject",
    "functionName": "getArchitectDependencytrackingObject",
    "signature": "getArchitectDependencytrackingObject(id, version, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType, consumedResourceRequest)",
    "parameters": [
      {
        "name": "id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumingResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumingResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResourceRequest",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DependencyObject",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingObjectRequest();\n\nlet id = \"id_example\"; // String | Object ID\nlet opts = { \n  'version': \"version_example\", // String | Object version\n  'objectType': \"objectType_example\", // String | Object type\n  'consumedResources': true, // Boolean | Include resources this item consumes\n  'consumingResources': true, // Boolean | Include resources that consume this item\n  'consumedResourceType': [\"consumedResourceType_example\"], // [String] | Types of consumed resources to return, if consumed resources are requested\n  'consumingResourceType': [\"consumingResourceType_example\"], // [String] | Types of consuming resources to return, if consuming resources are requested\n  'consumedResourceRequest': true // Boolean | Indicate that this is going to look up a consumed resource object\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingObject(id, opts, callback);"
  },
  "getarchitectdependencytrackingtype": {
    "operationId": "getarchitectdependencytrackingtype",
    "functionName": "getArchitectDependencytrackingType",
    "signature": "getArchitectDependencytrackingType(typeId)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DependencyType",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingTypeRequest();\n\nlet typeId = \"typeId_example\"; // String | Type ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingType(typeId, callback);"
  },
  "getarchitectdependencytrackingtypes": {
    "operationId": "getarchitectdependencytrackingtypes",
    "functionName": "getArchitectDependencytrackingTypes",
    "signature": "getArchitectDependencytrackingTypes(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DependencyTypeEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingTypesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingTypes(opts, callback);"
  },
  "getarchitectdependencytrackingupdatedresourceconsumers": {
    "operationId": "getarchitectdependencytrackingupdatedresourceconsumers",
    "functionName": "getArchitectDependencytrackingUpdatedresourceconsumers",
    "signature": "getArchitectDependencytrackingUpdatedresourceconsumers(name, objectType, consumedResources, consumedResourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectDependencytrackingUpdatedresourceconsumersRequest();\n\nlet opts = { \n  'name': \"name_example\", // String | Name to search for\n  'objectType': [\"objectType_example\"], // [String] | Object type(s) to search for\n  'consumedResources': false, // Boolean | Return consumed resources?\n  'consumedResourceType': [\"consumedResourceType_example\"], // [String] | Resource type(s) to return\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectDependencytrackingUpdatedresourceconsumers(opts, callback);"
  },
  "getarchitectemergencygroup": {
    "operationId": "getarchitectemergencygroup",
    "functionName": "getArchitectEmergencygroup",
    "signature": "getArchitectEmergencygroup(emergencyGroupId)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectEmergencygroupRequest();\n\nlet emergencyGroupId = \"emergencyGroupId_example\"; // String | Emergency group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectEmergencygroup(emergencyGroupId, callback);"
  },
  "getarchitectemergencygroups": {
    "operationId": "getarchitectemergencygroups",
    "functionName": "getArchitectEmergencygroups",
    "signature": "getArchitectEmergencygroups(pageNumber, pageSize, sortBy, sortOrder, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EmergencyGroupListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectEmergencygroupsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  'name': \"name_example\" // String | Name of the Emergency Group to filter by.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectEmergencygroups(opts, callback);"
  },
  "getarchitectivr": {
    "operationId": "getarchitectivr",
    "functionName": "getArchitectIvr",
    "signature": "getArchitectIvr(ivrId)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectIvrRequest();\n\nlet ivrId = \"ivrId_example\"; // String | IVR id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectIvr(ivrId, callback);"
  },
  "getarchitectivrs": {
    "operationId": "getarchitectivrs",
    "functionName": "getArchitectIvrs",
    "signature": "getArchitectIvrs(pageNumber, pageSize, sortBy, sortOrder, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IVREntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectIvrsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  'name': \"name_example\" // String | Name of the IVR to filter by.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectIvrs(opts, callback);"
  },
  "getarchitectprompt": {
    "operationId": "getarchitectprompt",
    "functionName": "getArchitectPrompt",
    "signature": "getArchitectPrompt(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectPromptRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectPrompt(promptId, callback);"
  },
  "getarchitectprompthistoryhistoryid": {
    "operationId": "getarchitectprompthistoryhistoryid",
    "functionName": "getArchitectPromptHistoryHistoryId",
    "signature": "getArchitectPromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectPromptHistoryHistoryIdRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet historyId = \"historyId_example\"; // String | History request ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortOrder': \"desc\", // String | Sort order\n  'sortBy': \"timestamp\", // String | Sort by\n  'action': [\"action_example\"] // [String] | Flow actions to include (omit to include all)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectPromptHistoryHistoryId(promptId, historyId, opts, callback);"
  },
  "getarchitectpromptresource": {
    "operationId": "getarchitectpromptresource",
    "functionName": "getArchitectPromptResource",
    "signature": "getArchitectPromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectPromptResourceRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectPromptResource(promptId, languageCode, callback);"
  },
  "getarchitectpromptresources": {
    "operationId": "getarchitectpromptresources",
    "functionName": "getArchitectPromptResources",
    "signature": "getArchitectPromptResources(promptId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "PromptAssetEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectPromptResourcesRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectPromptResources(promptId, opts, callback);"
  },
  "getarchitectprompts": {
    "operationId": "getarchitectprompts",
    "functionName": "getArchitectPrompts",
    "signature": "getArchitectPrompts(pageNumber, pageSize, name, description, nameOrDescription, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PromptEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectPromptsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'name': [\"name_example\"], // [String] | Name\n  'description': \"description_example\", // String | Description\n  'nameOrDescription': \"nameOrDescription_example\", // String | Name or description\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectPrompts(opts, callback);"
  },
  "getarchitectschedule": {
    "operationId": "getarchitectschedule",
    "functionName": "getArchitectSchedule",
    "signature": "getArchitectSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectScheduleRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSchedule(scheduleId, callback);"
  },
  "getarchitectschedulegroup": {
    "operationId": "getarchitectschedulegroup",
    "functionName": "getArchitectSchedulegroup",
    "signature": "getArchitectSchedulegroup(scheduleGroupId)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSchedulegroupRequest();\n\nlet scheduleGroupId = \"scheduleGroupId_example\"; // String | Schedule group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSchedulegroup(scheduleGroupId, callback);"
  },
  "getarchitectschedulegroups": {
    "operationId": "getarchitectschedulegroups",
    "functionName": "getArchitectSchedulegroups",
    "signature": "getArchitectSchedulegroups(pageNumber, pageSize, sortBy, sortOrder, name, scheduleIds, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scheduleIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleGroupEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSchedulegroupsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  'name': \"name_example\", // String | Name of the Schedule Group to filter by.\n  'scheduleIds': \"scheduleIds_example\", // String | A comma-delimited list of Schedule IDs to filter by.\n  'divisionId': [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSchedulegroups(opts, callback);"
  },
  "getarchitectschedules": {
    "operationId": "getarchitectschedules",
    "functionName": "getArchitectSchedules",
    "signature": "getArchitectSchedules(pageNumber, pageSize, sortBy, sortOrder, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSchedulesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  'name': \"name_example\", // String | Name of the Schedule to filter by.\n  'divisionId': [\"divisionId_example\"] // [String] | List of divisionIds on which to filter.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSchedules(opts, callback);"
  },
  "getarchitectsystemprompt": {
    "operationId": "getarchitectsystemprompt",
    "functionName": "getArchitectSystemprompt",
    "signature": "getArchitectSystemprompt(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SystemPrompt",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSystempromptRequest();\n\nlet promptId = \"promptId_example\"; // String | promptId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSystemprompt(promptId, callback);"
  },
  "getarchitectsystemprompthistoryhistoryid": {
    "operationId": "getarchitectsystemprompthistoryhistoryid",
    "functionName": "getArchitectSystempromptHistoryHistoryId",
    "signature": "getArchitectSystempromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSystempromptHistoryHistoryIdRequest();\n\nlet promptId = \"promptId_example\"; // String | promptId\nlet historyId = \"historyId_example\"; // String | History request ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortOrder': \"desc\", // String | Sort order\n  'sortBy': \"timestamp\", // String | Sort by\n  'action': [\"action_example\"] // [String] | Flow actions to include (omit to include all)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSystempromptHistoryHistoryId(promptId, historyId, opts, callback);"
  },
  "getarchitectsystempromptresource": {
    "operationId": "getarchitectsystempromptresource",
    "functionName": "getArchitectSystempromptResource",
    "signature": "getArchitectSystempromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSystempromptResourceRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSystempromptResource(promptId, languageCode, callback);"
  },
  "getarchitectsystempromptresources": {
    "operationId": "getarchitectsystempromptresources",
    "functionName": "getArchitectSystempromptResources",
    "signature": "getArchitectSystempromptResources(promptId, pageNumber, pageSize, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SystemPromptAssetEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSystempromptResourcesRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSystempromptResources(promptId, opts, callback);"
  },
  "getarchitectsystemprompts": {
    "operationId": "getarchitectsystemprompts",
    "functionName": "getArchitectSystemprompts",
    "signature": "getArchitectSystemprompts(pageNumber, pageSize, sortBy, sortOrder, name, description, nameOrDescription)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SystemPromptEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetArchitectSystempromptsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'name': \"name_example\", // String | Name\n  'description': \"description_example\", // String | Description\n  'nameOrDescription': \"nameOrDescription_example\" // String | Name or description\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getArchitectSystemprompts(opts, callback);"
  },
  "getflow": {
    "operationId": "getflow",
    "functionName": "getFlow",
    "signature": "getFlow(flowId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Flow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet opts = { \n  'deleted': false // Boolean | Deleted flows\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlow(flowId, opts, callback);"
  },
  "getflowhistoryhistoryid": {
    "operationId": "getflowhistoryhistoryid",
    "functionName": "getFlowHistoryHistoryId",
    "signature": "getFlowHistoryHistoryId(flowId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowHistoryHistoryIdRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet historyId = \"historyId_example\"; // String | History request ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortOrder': \"desc\", // String | Sort order\n  'sortBy': \"timestamp\", // String | Sort by\n  'action': [\"action_example\"] // [String] | Flow actions to include (omit to include all)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowHistoryHistoryId(flowId, historyId, opts, callback);"
  },
  "getflowlatestconfiguration": {
    "operationId": "getflowlatestconfiguration",
    "functionName": "getFlowLatestconfiguration",
    "signature": "getFlowLatestconfiguration(flowId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowLatestconfigurationRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet opts = { \n  'deleted': false // Boolean | Deleted flows\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowLatestconfiguration(flowId, opts, callback);"
  },
  "getflowversion": {
    "operationId": "getflowversion",
    "functionName": "getFlowVersion",
    "signature": "getFlowVersion(flowId, versionId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FlowVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowVersionRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet versionId = \"versionId_example\"; // String | Version ID\nlet opts = { \n  'deleted': \"deleted_example\" // String | Deleted flows\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowVersion(flowId, versionId, opts, callback);"
  },
  "getflowversionconfiguration": {
    "operationId": "getflowversionconfiguration",
    "functionName": "getFlowVersionConfiguration",
    "signature": "getFlowVersionConfiguration(flowId, versionId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowVersionConfigurationRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet versionId = \"versionId_example\"; // String | Version ID\nlet opts = { \n  'deleted': \"deleted_example\" // String | Deleted flows\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowVersionConfiguration(flowId, versionId, opts, callback);"
  },
  "getflowversions": {
    "operationId": "getflowversions",
    "functionName": "getFlowVersions",
    "signature": "getFlowVersions(flowId, pageNumber, pageSize, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "FlowVersionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowVersionsRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'deleted': true // Boolean | Include Deleted flows\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowVersions(flowId, opts, callback);"
  },
  "getflows": {
    "operationId": "getflows",
    "functionName": "getFlows",
    "signature": "getFlows(type, pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, publishVersionId, editableBy, lockedBy, lockedByClientId, secure, deleted, includeSchemas, publishedAfter, publishedBefore, divisionId)",
    "parameters": [
      {
        "name": "type",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishVersionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "editableBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lockedBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lockedByClientId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSchemas",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "publishedAfter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedBefore",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsRequest();\n\nlet opts = { \n  'type': [\"type_example\"], // [String] | Type\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'id': [\"id_example\"], // [String] | ID\n  'name': \"name_example\", // String | Name\n  'description': \"description_example\", // String | Description\n  'nameOrDescription': \"nameOrDescription_example\", // String | Name or description\n  'publishVersionId': \"publishVersionId_example\", // String | Publish version ID\n  'editableBy': \"editableBy_example\", // String | Editable by\n  'lockedBy': \"lockedBy_example\", // String | Locked by\n  'lockedByClientId': \"lockedByClientId_example\", // String | Locked by client ID\n  'secure': \"secure_example\", // String | Secure\n  'deleted': false, // Boolean | Include deleted\n  'includeSchemas': false, // Boolean | Include variable schemas\n  'publishedAfter': \"2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01\", // String | Published after\n  'publishedBefore': \"2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01\", // String | Published before\n  'divisionId': [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlows(opts, callback);"
  },
  "getflowsdatatable": {
    "operationId": "getflowsdatatable",
    "functionName": "getFlowsDatatable",
    "signature": "getFlowsDatatable(datatableId, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatableRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the result\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatable(datatableId, opts, callback);"
  },
  "getflowsdatatableexportjob": {
    "operationId": "getflowsdatatableexportjob",
    "functionName": "getFlowsDatatableExportJob",
    "signature": "getFlowsDatatableExportJob(datatableId, exportJobId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "exportJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableExportJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatableExportJobRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet exportJobId = \"exportJobId_example\"; // String | id of export job\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatableExportJob(datatableId, exportJobId, callback);"
  },
  "getflowsdatatableimportjob": {
    "operationId": "getflowsdatatableimportjob",
    "functionName": "getFlowsDatatableImportJob",
    "signature": "getFlowsDatatableImportJob(datatableId, importJobId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableImportJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatableImportJobRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet importJobId = \"importJobId_example\"; // String | id of import job\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatableImportJob(datatableId, importJobId, callback);"
  },
  "getflowsdatatableimportjobs": {
    "operationId": "getflowsdatatableimportjobs",
    "functionName": "getFlowsDatatableImportJobs",
    "signature": "getFlowsDatatableImportJobs(datatableId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DataTableImportEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatableImportJobsRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatableImportJobs(datatableId, opts, callback);"
  },
  "getflowsdatatablerow": {
    "operationId": "getflowsdatatablerow",
    "functionName": "getFlowsDatatableRow",
    "signature": "getFlowsDatatableRow(datatableId, rowId, showbrief)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "showbrief",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatableRowRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet rowId = \"rowId_example\"; // String | The key for the row\nlet opts = { \n  'showbrief': true // Boolean | if true returns just the key field for the row\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatableRow(datatableId, rowId, opts, callback);"
  },
  "getflowsdatatablerows": {
    "operationId": "getflowsdatatablerows",
    "functionName": "getFlowsDatatableRows",
    "signature": "getFlowsDatatableRows(datatableId, pageNumber, pageSize, showbrief)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "showbrief",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DataTableRowEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatableRowsRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'showbrief': true // Boolean | If true returns just the key value of the row\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatableRows(datatableId, opts, callback);"
  },
  "getflowsdatatables": {
    "operationId": "getflowsdatatables",
    "functionName": "getFlowsDatatables",
    "signature": "getFlowsDatatables(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
    "parameters": [
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTablesDomainEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatablesRequest();\n\nlet opts = { \n  'expand': \"expand_example\", // String | Expand instructions for the result\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"ascending\", // String | Sort order\n  'divisionId': [\"divisionId_example\"], // [String] | division ID(s)\n  'name': \"name_example\" // String | Name to filter by\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatables(opts, callback);"
  },
  "getflowsdatatablesdivisionview": {
    "operationId": "getflowsdatatablesdivisionview",
    "functionName": "getFlowsDatatablesDivisionview",
    "signature": "getFlowsDatatablesDivisionview(datatableId, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatablesDivisionviewRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the result\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatablesDivisionview(datatableId, opts, callback);"
  },
  "getflowsdatatablesdivisionviews": {
    "operationId": "getflowsdatatablesdivisionviews",
    "functionName": "getFlowsDatatablesDivisionviews",
    "signature": "getFlowsDatatablesDivisionviews(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
    "parameters": [
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTablesDomainEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDatatablesDivisionviewsRequest();\n\nlet opts = { \n  'expand': \"expand_example\", // String | Expand instructions for the result\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"ascending\", // String | Sort order\n  'divisionId': [\"divisionId_example\"], // [String] | division ID(s)\n  'name': \"name_example\" // String | Name to filter by\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDatatablesDivisionviews(opts, callback);"
  },
  "getflowsdivisionviews": {
    "operationId": "getflowsdivisionviews",
    "functionName": "getFlowsDivisionviews",
    "signature": "getFlowsDivisionviews(type, pageNumber, pageSize, sortBy, sortOrder, id, name, publishVersionId, publishedAfter, publishedBefore, divisionId, includeSchemas)",
    "parameters": [
      {
        "name": "type",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishVersionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedAfter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedBefore",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includeSchemas",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "FlowDivisionViewEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsDivisionviewsRequest();\n\nlet opts = { \n  'type': [\"type_example\"], // [String] | Type\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'id': [\"id_example\"], // [String] | ID\n  'name': \"name_example\", // String | Name\n  'publishVersionId': \"publishVersionId_example\", // String | Publish version ID\n  'publishedAfter': \"2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01\", // String | Published after\n  'publishedBefore': \"2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01\", // String | Published before\n  'divisionId': [\"divisionId_example\"], // [String] | division ID(s)\n  'includeSchemas': false // Boolean | Include variable schemas\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsDivisionviews(opts, callback);"
  },
  "getflowsexecution": {
    "operationId": "getflowsexecution",
    "functionName": "getFlowsExecution",
    "signature": "getFlowsExecution(flowExecutionId)",
    "parameters": [
      {
        "name": "flowExecutionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowRuntimeExecution",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsExecutionRequest();\n\nlet flowExecutionId = \"flowExecutionId_example\"; // String | flow execution ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsExecution(flowExecutionId, callback);"
  },
  "getflowsmilestone": {
    "operationId": "getflowsmilestone",
    "functionName": "getFlowsMilestone",
    "signature": "getFlowsMilestone(milestoneId)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowMilestone",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsMilestoneRequest();\n\nlet milestoneId = \"milestoneId_example\"; // String | flow milestone ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsMilestone(milestoneId, callback);"
  },
  "getflowsmilestones": {
    "operationId": "getflowsmilestones",
    "functionName": "getFlowsMilestones",
    "signature": "getFlowsMilestones(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowMilestoneListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsMilestonesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'id': [\"id_example\"], // [String] | ID\n  'name': \"name_example\", // String | Name\n  'description': \"description_example\", // String | Description\n  'nameOrDescription': \"nameOrDescription_example\", // String | Name or description\n  'divisionId': [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsMilestones(opts, callback);"
  },
  "getflowsmilestonesdivisionviews": {
    "operationId": "getflowsmilestonesdivisionviews",
    "functionName": "getFlowsMilestonesDivisionviews",
    "signature": "getFlowsMilestonesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowMilestoneDivisionViewEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsMilestonesDivisionviewsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'id': [\"id_example\"], // [String] | ID\n  'name': \"name_example\", // String | Name\n  'divisionId': [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsMilestonesDivisionviews(opts, callback);"
  },
  "getflowsoutcome": {
    "operationId": "getflowsoutcome",
    "functionName": "getFlowsOutcome",
    "signature": "getFlowsOutcome(flowOutcomeId)",
    "parameters": [
      {
        "name": "flowOutcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowOutcome",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsOutcomeRequest();\n\nlet flowOutcomeId = \"flowOutcomeId_example\"; // String | flow outcome ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsOutcome(flowOutcomeId, callback);"
  },
  "getflowsoutcomes": {
    "operationId": "getflowsoutcomes",
    "functionName": "getFlowsOutcomes",
    "signature": "getFlowsOutcomes(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowOutcomeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsOutcomesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'id': [\"id_example\"], // [String] | ID\n  'name': \"name_example\", // String | Name\n  'description': \"description_example\", // String | Description\n  'nameOrDescription': \"nameOrDescription_example\", // String | Name or description\n  'divisionId': [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsOutcomes(opts, callback);"
  },
  "getflowsoutcomesdivisionviews": {
    "operationId": "getflowsoutcomesdivisionviews",
    "functionName": "getFlowsOutcomesDivisionviews",
    "signature": "getFlowsOutcomesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowOutcomeDivisionViewEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFlowsOutcomesDivisionviewsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"id\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'id': [\"id_example\"], // [String] | ID\n  'name': \"name_example\", // String | Name\n  'divisionId': [\"divisionId_example\"] // [String] | division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFlowsOutcomesDivisionviews(opts, callback);"
  },
  "postarchitectdependencytrackingbuild": {
    "operationId": "postarchitectdependencytrackingbuild",
    "functionName": "postArchitectDependencytrackingBuild",
    "signature": "postArchitectDependencytrackingBuild()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectDependencytrackingBuildRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postArchitectDependencytrackingBuild(callback);"
  },
  "postarchitectemergencygroups": {
    "operationId": "postarchitectemergencygroups",
    "functionName": "postArchitectEmergencygroups",
    "signature": "postArchitectEmergencygroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectEmergencygroupsRequest();\n\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectEmergencygroups(body, callback);"
  },
  "postarchitectivrs": {
    "operationId": "postarchitectivrs",
    "functionName": "postArchitectIvrs",
    "signature": "postArchitectIvrs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectIvrsRequest();\n\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectIvrs(body, callback);"
  },
  "postarchitectprompthistory": {
    "operationId": "postarchitectprompthistory",
    "functionName": "postArchitectPromptHistory",
    "signature": "postArchitectPromptHistory(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectPromptHistoryRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectPromptHistory(promptId, callback);"
  },
  "postarchitectpromptresources": {
    "operationId": "postarchitectpromptresources",
    "functionName": "postArchitectPromptResources",
    "signature": "postArchitectPromptResources(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectPromptResourcesRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectPromptResources(promptId, body, callback);"
  },
  "postarchitectprompts": {
    "operationId": "postarchitectprompts",
    "functionName": "postArchitectPrompts",
    "signature": "postArchitectPrompts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectPromptsRequest();\n\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectPrompts(body, callback);"
  },
  "postarchitectschedulegroups": {
    "operationId": "postarchitectschedulegroups",
    "functionName": "postArchitectSchedulegroups",
    "signature": "postArchitectSchedulegroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectSchedulegroupsRequest();\n\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectSchedulegroups(body, callback);"
  },
  "postarchitectschedules": {
    "operationId": "postarchitectschedules",
    "functionName": "postArchitectSchedules",
    "signature": "postArchitectSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectSchedulesRequest();\n\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectSchedules(body, callback);"
  },
  "postarchitectsystemprompthistory": {
    "operationId": "postarchitectsystemprompthistory",
    "functionName": "postArchitectSystempromptHistory",
    "signature": "postArchitectSystempromptHistory(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectSystempromptHistoryRequest();\n\nlet promptId = \"promptId_example\"; // String | promptId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectSystempromptHistory(promptId, callback);"
  },
  "postarchitectsystempromptresources": {
    "operationId": "postarchitectsystempromptresources",
    "functionName": "postArchitectSystempromptResources",
    "signature": "postArchitectSystempromptResources(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostArchitectSystempromptResourcesRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postArchitectSystempromptResources(promptId, body, callback);"
  },
  "postflowhistory": {
    "operationId": "postflowhistory",
    "functionName": "postFlowHistory",
    "signature": "postFlowHistory(flowId)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowHistoryRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowHistory(flowId, callback);"
  },
  "postflowversions": {
    "operationId": "postflowversions",
    "functionName": "postFlowVersions",
    "signature": "postFlowVersions(flowId, body)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FlowVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowVersionsRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet body = null; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowVersions(flowId, body, callback);"
  },
  "postflows": {
    "operationId": "postflows",
    "functionName": "postFlows",
    "signature": "postFlows(body, language)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Flow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsRequest();\n\nlet body = {}; // Object | \nlet opts = { \n  'language': \"language_example\" // String | Language\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlows(body, opts, callback);"
  },
  "postflowsactionscheckin": {
    "operationId": "postflowsactionscheckin",
    "functionName": "postFlowsActionsCheckin",
    "signature": "postFlowsActionsCheckin(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsActionsCheckinRequest();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsActionsCheckin(flow, callback);"
  },
  "postflowsactionscheckout": {
    "operationId": "postflowsactionscheckout",
    "functionName": "postFlowsActionsCheckout",
    "signature": "postFlowsActionsCheckout(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsActionsCheckoutRequest();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsActionsCheckout(flow, callback);"
  },
  "postflowsactionsdeactivate": {
    "operationId": "postflowsactionsdeactivate",
    "functionName": "postFlowsActionsDeactivate",
    "signature": "postFlowsActionsDeactivate(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsActionsDeactivateRequest();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsActionsDeactivate(flow, callback);"
  },
  "postflowsactionspublish": {
    "operationId": "postflowsactionspublish",
    "functionName": "postFlowsActionsPublish",
    "signature": "postFlowsActionsPublish(flow, version)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsActionsPublishRequest();\n\nlet flow = \"flow_example\"; // String | Flow ID\nlet opts = { \n  'version': \"version_example\" // String | version\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsActionsPublish(flow, opts, callback);"
  },
  "postflowsactionsrevert": {
    "operationId": "postflowsactionsrevert",
    "functionName": "postFlowsActionsRevert",
    "signature": "postFlowsActionsRevert(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsActionsRevertRequest();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsActionsRevert(flow, callback);"
  },
  "postflowsactionsunlock": {
    "operationId": "postflowsactionsunlock",
    "functionName": "postFlowsActionsUnlock",
    "signature": "postFlowsActionsUnlock(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsActionsUnlockRequest();\n\nlet flow = \"flow_example\"; // String | Flow ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsActionsUnlock(flow, callback);"
  },
  "postflowsdatatableexportjobs": {
    "operationId": "postflowsdatatableexportjobs",
    "functionName": "postFlowsDatatableExportJobs",
    "signature": "postFlowsDatatableExportJobs(datatableId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableExportJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsDatatableExportJobsRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsDatatableExportJobs(datatableId, callback);"
  },
  "postflowsdatatableimportjobs": {
    "operationId": "postflowsdatatableimportjobs",
    "functionName": "postFlowsDatatableImportJobs",
    "signature": "postFlowsDatatableImportJobs(datatableId, body)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataTableImportJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsDatatableImportJobsRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet body = {}; // Object | import job information\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsDatatableImportJobs(datatableId, body, callback);"
  },
  "postflowsdatatablerows": {
    "operationId": "postflowsdatatablerows",
    "functionName": "postFlowsDatatableRows",
    "signature": "postFlowsDatatableRows(datatableId, dataTableRow)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "dataTableRow",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsDatatableRowsRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet dataTableRow = null; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsDatatableRows(datatableId, dataTableRow, callback);"
  },
  "postflowsdatatables": {
    "operationId": "postflowsdatatables",
    "functionName": "postFlowsDatatables",
    "signature": "postFlowsDatatables(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataTable",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsDatatablesRequest();\n\nlet body = {}; // Object | datatable json-schema\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsDatatables(body, callback);"
  },
  "postflowsexecutions": {
    "operationId": "postflowsexecutions",
    "functionName": "postFlowsExecutions",
    "signature": "postFlowsExecutions(flowLaunchRequest)",
    "parameters": [
      {
        "name": "flowLaunchRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FlowExecutionLaunchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsExecutionsRequest();\n\nlet flowLaunchRequest = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsExecutions(flowLaunchRequest, callback);"
  },
  "postflowsmilestones": {
    "operationId": "postflowsmilestones",
    "functionName": "postFlowsMilestones",
    "signature": "postFlowsMilestones(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "FlowMilestone",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsMilestonesRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsMilestones(opts, callback);"
  },
  "postflowsoutcomes": {
    "operationId": "postflowsoutcomes",
    "functionName": "postFlowsOutcomes",
    "signature": "postFlowsOutcomes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "FlowOutcome",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostFlowsOutcomesRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postFlowsOutcomes(opts, callback);"
  },
  "putarchitectemergencygroup": {
    "operationId": "putarchitectemergencygroup",
    "functionName": "putArchitectEmergencygroup",
    "signature": "putArchitectEmergencygroup(emergencyGroupId, body)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutArchitectEmergencygroupRequest();\n\nlet emergencyGroupId = \"emergencyGroupId_example\"; // String | Emergency group ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putArchitectEmergencygroup(emergencyGroupId, body, callback);"
  },
  "putarchitectivr": {
    "operationId": "putarchitectivr",
    "functionName": "putArchitectIvr",
    "signature": "putArchitectIvr(ivrId, body)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutArchitectIvrRequest();\n\nlet ivrId = \"ivrId_example\"; // String | IVR id\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putArchitectIvr(ivrId, body, callback);"
  },
  "putarchitectprompt": {
    "operationId": "putarchitectprompt",
    "functionName": "putArchitectPrompt",
    "signature": "putArchitectPrompt(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutArchitectPromptRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putArchitectPrompt(promptId, body, callback);"
  },
  "putarchitectpromptresource": {
    "operationId": "putarchitectpromptresource",
    "functionName": "putArchitectPromptResource",
    "signature": "putArchitectPromptResource(promptId, languageCode, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutArchitectPromptResourceRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putArchitectPromptResource(promptId, languageCode, body, callback);"
  },
  "putarchitectschedule": {
    "operationId": "putarchitectschedule",
    "functionName": "putArchitectSchedule",
    "signature": "putArchitectSchedule(scheduleId, body)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutArchitectScheduleRequest();\n\nlet scheduleId = \"scheduleId_example\"; // String | Schedule ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putArchitectSchedule(scheduleId, body, callback);"
  },
  "putarchitectschedulegroup": {
    "operationId": "putarchitectschedulegroup",
    "functionName": "putArchitectSchedulegroup",
    "signature": "putArchitectSchedulegroup(scheduleGroupId, body)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutArchitectSchedulegroupRequest();\n\nlet scheduleGroupId = \"scheduleGroupId_example\"; // String | Schedule group ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putArchitectSchedulegroup(scheduleGroupId, body, callback);"
  },
  "putarchitectsystempromptresource": {
    "operationId": "putarchitectsystempromptresource",
    "functionName": "putArchitectSystempromptResource",
    "signature": "putArchitectSystempromptResource(promptId, languageCode, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutArchitectSystempromptResourceRequest();\n\nlet promptId = \"promptId_example\"; // String | Prompt ID\nlet languageCode = \"languageCode_example\"; // String | Language\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putArchitectSystempromptResource(promptId, languageCode, body, callback);"
  },
  "putflow": {
    "operationId": "putflow",
    "functionName": "putFlow",
    "signature": "putFlow(flowId, body)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutFlowRequest();\n\nlet flowId = \"flowId_example\"; // String | Flow ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putFlow(flowId, body, callback);"
  },
  "putflowsdatatable": {
    "operationId": "putflowsdatatable",
    "functionName": "putFlowsDatatable",
    "signature": "putFlowsDatatable(datatableId, body, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutFlowsDatatableRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet body = {}; // Object | datatable json-schema\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the result\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putFlowsDatatable(datatableId, body, opts, callback);"
  },
  "putflowsdatatablerow": {
    "operationId": "putflowsdatatablerow",
    "functionName": "putFlowsDatatableRow",
    "signature": "putFlowsDatatableRow(datatableId, rowId, body)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutFlowsDatatableRowRequest();\n\nlet datatableId = \"datatableId_example\"; // String | id of datatable\nlet rowId = \"rowId_example\"; // String | the key for the row\nlet opts = { \n  'body': null // Object | datatable row\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putFlowsDatatableRow(datatableId, rowId, opts, callback);"
  },
  "putflowsmilestone": {
    "operationId": "putflowsmilestone",
    "functionName": "putFlowsMilestone",
    "signature": "putFlowsMilestone(milestoneId, body)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "FlowMilestone",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutFlowsMilestoneRequest();\n\nlet milestoneId = \"milestoneId_example\"; // String | flow milestone ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putFlowsMilestone(milestoneId, opts, callback);"
  },
  "putflowsoutcome": {
    "operationId": "putflowsoutcome",
    "functionName": "putFlowsOutcome",
    "signature": "putFlowsOutcome(flowOutcomeId, body)",
    "parameters": [
      {
        "name": "flowOutcomeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Operation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutFlowsOutcomeRequest();\n\nlet flowOutcomeId = \"flowOutcomeId_example\"; // String | flow outcome ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putFlowsOutcome(flowOutcomeId, opts, callback);"
  },
  "getauditsqueryrealtimeservicemapping": {
    "operationId": "getauditsqueryrealtimeservicemapping",
    "functionName": "getAuditsQueryRealtimeServicemapping",
    "signature": "getAuditsQueryRealtimeServicemapping()",
    "return": "AuditQueryServiceMapping",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuditsQueryRealtimeServicemappingRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuditsQueryRealtimeServicemapping(callback);"
  },
  "getauditsqueryservicemapping": {
    "operationId": "getauditsqueryservicemapping",
    "functionName": "getAuditsQueryServicemapping",
    "signature": "getAuditsQueryServicemapping()",
    "return": "AuditQueryServiceMapping",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuditsQueryServicemappingRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuditsQueryServicemapping(callback);"
  },
  "getauditsquerytransactionid": {
    "operationId": "getauditsquerytransactionid",
    "functionName": "getAuditsQueryTransactionId",
    "signature": "getAuditsQueryTransactionId(transactionId)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AuditQueryExecutionStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuditsQueryTransactionIdRequest();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuditsQueryTransactionId(transactionId, callback);"
  },
  "getauditsquerytransactionidresults": {
    "operationId": "getauditsquerytransactionidresults",
    "functionName": "getAuditsQueryTransactionIdResults",
    "signature": "getAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AuditQueryExecutionResultsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuditsQueryTransactionIdResultsRequest();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\nlet opts = { \n  'cursor': \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  'pageSize': 25, // Number | Page size\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuditsQueryTransactionIdResults(transactionId, opts, callback);"
  },
  "postauditsquery": {
    "operationId": "postauditsquery",
    "functionName": "postAuditsQuery",
    "signature": "postAuditsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuditQueryExecutionStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuditsQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAuditsQuery(body, callback);"
  },
  "postauditsqueryrealtime": {
    "operationId": "postauditsqueryrealtime",
    "functionName": "postAuditsQueryRealtime",
    "signature": "postAuditsQueryRealtime(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AuditRealtimeQueryResultsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuditsQueryRealtimeRequest();\n\nlet body = {}; // Object | query\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAuditsQueryRealtime(body, opts, callback);"
  },
  "deleteauthorizationdivision": {
    "operationId": "deleteauthorizationdivision",
    "functionName": "deleteAuthorizationDivision",
    "signature": "deleteAuthorizationDivision(divisionId, force)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAuthorizationDivisionRequest();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet opts = { \n  'force': false // Boolean | Force delete this division as well as the grants and objects associated with it\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAuthorizationDivision(divisionId, opts, callback);"
  },
  "deleteauthorizationrole": {
    "operationId": "deleteauthorizationrole",
    "functionName": "deleteAuthorizationRole",
    "signature": "deleteAuthorizationRole(roleId)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAuthorizationRoleRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAuthorizationRole(roleId, callback);"
  },
  "deleteauthorizationsubjectdivisionrole": {
    "operationId": "deleteauthorizationsubjectdivisionrole",
    "functionName": "deleteAuthorizationSubjectDivisionRole",
    "signature": "deleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteAuthorizationSubjectDivisionRoleRequest();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet divisionId = \"divisionId_example\"; // String | the id of the division of the grant\nlet roleId = \"roleId_example\"; // String | the id of the role of the grant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, callback);"
  },
  "getauthorizationdivision": {
    "operationId": "getauthorizationdivision",
    "functionName": "getAuthorizationDivision",
    "signature": "getAuthorizationDivision(divisionId, objectCount)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectCount",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AuthzDivision",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionRequest();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet opts = { \n  'objectCount': false // Boolean | Get count of objects in this division, grouped by type\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivision(divisionId, opts, callback);"
  },
  "getauthorizationdivisiongrants": {
    "operationId": "getauthorizationdivisiongrants",
    "functionName": "getAuthorizationDivisionGrants",
    "signature": "getAuthorizationDivisionGrants(divisionId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "AuthzDivisionGrantEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionGrantsRequest();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivisionGrants(divisionId, opts, callback);"
  },
  "getauthorizationdivisions": {
    "operationId": "getauthorizationdivisions",
    "functionName": "getAuthorizationDivisions",
    "signature": "getAuthorizationDivisions(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, objectCount, id, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectCount",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AuthzDivisionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'objectCount': false, // Boolean | Include the count of objects contained in the division\n  'id': [\"id_example\"], // [String] | Optionally request specific divisions by their IDs\n  'name': \"name_example\" // String | Search term to filter by division name\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivisions(opts, callback);"
  },
  "getauthorizationdivisionshome": {
    "operationId": "getauthorizationdivisionshome",
    "functionName": "getAuthorizationDivisionsHome",
    "signature": "getAuthorizationDivisionsHome()",
    "return": "AuthzDivision",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionsHomeRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivisionsHome(callback);"
  },
  "getauthorizationdivisionslimit": {
    "operationId": "getauthorizationdivisionslimit",
    "functionName": "getAuthorizationDivisionsLimit",
    "signature": "getAuthorizationDivisionsLimit()",
    "return": "'Number'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionsLimitRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivisionsLimit(callback);"
  },
  "getauthorizationdivisionspermittedme": {
    "operationId": "getauthorizationdivisionspermittedme",
    "functionName": "getAuthorizationDivisionspermittedMe",
    "signature": "getAuthorizationDivisionspermittedMe(permission, name)",
    "parameters": [
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[AuthzDivision]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionspermittedMeRequest();\n\nlet permission = \"permission_example\"; // String | The permission string, including the object to access, e.g. routing:queue:view\nlet opts = { \n  'name': \"name_example\" // String | Search term to filter by division name\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivisionspermittedMe(permission, opts, callback);"
  },
  "getauthorizationdivisionspermittedpagedme": {
    "operationId": "getauthorizationdivisionspermittedpagedme",
    "functionName": "getAuthorizationDivisionspermittedPagedMe",
    "signature": "getAuthorizationDivisionspermittedPagedMe(permission, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DivsPermittedEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionspermittedPagedMeRequest();\n\nlet permission = \"permission_example\"; // String | The permission string, including the object to access, e.g. routing:queue:view\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivisionspermittedPagedMe(permission, opts, callback);"
  },
  "getauthorizationdivisionspermittedpagedsubjectid": {
    "operationId": "getauthorizationdivisionspermittedpagedsubjectid",
    "functionName": "getAuthorizationDivisionspermittedPagedSubjectId",
    "signature": "getAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DivsPermittedEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationDivisionspermittedPagedSubjectIdRequest();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet permission = \"permission_example\"; // String | The permission string, including the object to access, e.g. routing:queue:view\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, opts, callback);"
  },
  "getauthorizationpermissions": {
    "operationId": "getauthorizationpermissions",
    "functionName": "getAuthorizationPermissions",
    "signature": "getAuthorizationPermissions(pageSize, pageNumber, queryType, query)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "queryType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "query",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PermissionCollectionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationPermissionsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'queryType': \"queryType_example\", // String | Query filter type\n  'query': \"query_example\" // String | Comma-separated list of permissions or domains to query\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationPermissions(opts, callback);"
  },
  "getauthorizationproducts": {
    "operationId": "getauthorizationproducts",
    "functionName": "getAuthorizationProducts",
    "signature": "getAuthorizationProducts()",
    "return": "OrganizationProductEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationProductsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationProducts(callback);"
  },
  "getauthorizationrole": {
    "operationId": "getauthorizationrole",
    "functionName": "getAuthorizationRole",
    "signature": "getAuthorizationRole(roleId, expand)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationRoleRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand. \\\"unusedPermissions\\\" returns the permissions not used for the role\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationRole(roleId, opts, callback);"
  },
  "getauthorizationrolecomparedefaultrightroleid": {
    "operationId": "getauthorizationrolecomparedefaultrightroleid",
    "functionName": "getAuthorizationRoleComparedefaultRightRoleId",
    "signature": "getAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId)",
    "parameters": [
      {
        "name": "leftRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rightRoleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainOrgRoleDifference",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationRoleComparedefaultRightRoleIdRequest();\n\nlet leftRoleId = \"leftRoleId_example\"; // String | Left Role ID\nlet rightRoleId = \"rightRoleId_example\"; // String | Right Role id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, callback);"
  },
  "getauthorizationrolesubjectgrants": {
    "operationId": "getauthorizationrolesubjectgrants",
    "functionName": "getAuthorizationRoleSubjectgrants",
    "signature": "getAuthorizationRoleSubjectgrants(roleId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SubjectDivisionGrantsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationRoleSubjectgrantsRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\" // String | Previous page token\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationRoleSubjectgrants(roleId, opts, callback);"
  },
  "getauthorizationroleusers": {
    "operationId": "getauthorizationroleusers",
    "functionName": "getAuthorizationRoleUsers",
    "signature": "getAuthorizationRoleUsers(roleId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationRoleUsersRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationRoleUsers(roleId, opts, callback);"
  },
  "getauthorizationroles": {
    "operationId": "getauthorizationroles",
    "functionName": "getAuthorizationRoles",
    "signature": "getAuthorizationRoles(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, permission, defaultRoleId, userCount, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "permission",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "defaultRoleId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "userCount",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationRolesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'name': \"name_example\", // String | \n  'permission': [\"permission_example\"], // [String] | \n  'defaultRoleId': [\"defaultRoleId_example\"], // [String] | \n  'userCount': true, // Boolean | \n  'id': [\"id_example\"] // [String] | id\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationRoles(opts, callback);"
  },
  "getauthorizationsubject": {
    "operationId": "getauthorizationsubject",
    "functionName": "getAuthorizationSubject",
    "signature": "getAuthorizationSubject(subjectId)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AuthzSubject",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationSubjectRequest();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationSubject(subjectId, callback);"
  },
  "getauthorizationsubjectsme": {
    "operationId": "getauthorizationsubjectsme",
    "functionName": "getAuthorizationSubjectsMe",
    "signature": "getAuthorizationSubjectsMe()",
    "return": "AuthzSubject",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationSubjectsMeRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationSubjectsMe(callback);"
  },
  "getauthorizationsubjectsrolecounts": {
    "operationId": "getauthorizationsubjectsrolecounts",
    "functionName": "getAuthorizationSubjectsRolecounts",
    "signature": "getAuthorizationSubjectsRolecounts(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetAuthorizationSubjectsRolecountsRequest();\n\nlet opts = { \n  'id': [\"id_example\"] // [String] | id\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getAuthorizationSubjectsRolecounts(opts, callback);"
  },
  "getuserroles": {
    "operationId": "getuserroles",
    "functionName": "getUserRoles",
    "signature": "getUserRoles(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserRolesRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserRoles(userId, callback);"
  },
  "patchauthorizationrole": {
    "operationId": "patchauthorizationrole",
    "functionName": "patchAuthorizationRole",
    "signature": "patchAuthorizationRole(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchAuthorizationRoleRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = {}; // Object | Organization role\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchAuthorizationRole(roleId, body, callback);"
  },
  "postauthorizationdivisionobject": {
    "operationId": "postauthorizationdivisionobject",
    "functionName": "postAuthorizationDivisionObject",
    "signature": "postAuthorizationDivisionObject(divisionId, objectType, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationDivisionObjectRequest();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet objectType = \"objectType_example\"; // String | The type of the objects. Must be one of the valid object types\nlet body = [{}]; // Object | Object Id List\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postAuthorizationDivisionObject(divisionId, objectType, body, callback);"
  },
  "postauthorizationdivisionrestore": {
    "operationId": "postauthorizationdivisionrestore",
    "functionName": "postAuthorizationDivisionRestore",
    "signature": "postAuthorizationDivisionRestore(divisionId, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationDivisionRestoreRequest();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet body = {}; // Object | Recreated division data\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAuthorizationDivisionRestore(divisionId, body, callback);"
  },
  "postauthorizationdivisions": {
    "operationId": "postauthorizationdivisions",
    "functionName": "postAuthorizationDivisions",
    "signature": "postAuthorizationDivisions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationDivisionsRequest();\n\nlet body = {}; // Object | Division\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAuthorizationDivisions(body, callback);"
  },
  "postauthorizationrole": {
    "operationId": "postauthorizationrole",
    "functionName": "postAuthorizationRole",
    "signature": "postAuthorizationRole(roleId, body, subjectType)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationRoleRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = {}; // Object | Subjects and Divisions\nlet opts = { \n  'subjectType': \"PC_USER\" // String | what the type of the subjects are (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postAuthorizationRole(roleId, body, opts, callback);"
  },
  "postauthorizationrolecomparedefaultrightroleid": {
    "operationId": "postauthorizationrolecomparedefaultrightroleid",
    "functionName": "postAuthorizationRoleComparedefaultRightRoleId",
    "signature": "postAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, body)",
    "parameters": [
      {
        "name": "leftRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rightRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrgRoleDifference",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationRoleComparedefaultRightRoleIdRequest();\n\nlet leftRoleId = \"leftRoleId_example\"; // String | Left Role ID\nlet rightRoleId = \"rightRoleId_example\"; // String | Right Role id\nlet body = {}; // Object | Organization role\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, body, callback);"
  },
  "postauthorizationroles": {
    "operationId": "postauthorizationroles",
    "functionName": "postAuthorizationRoles",
    "signature": "postAuthorizationRoles(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationRolesRequest();\n\nlet body = {}; // Object | Organization role\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAuthorizationRoles(body, callback);"
  },
  "postauthorizationrolesdefault": {
    "operationId": "postauthorizationrolesdefault",
    "functionName": "postAuthorizationRolesDefault",
    "signature": "postAuthorizationRolesDefault(force)",
    "parameters": [
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationRolesDefaultRequest();\n\nlet opts = { \n  'force': false // Boolean | Restore default roles\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postAuthorizationRolesDefault(opts, callback);"
  },
  "postauthorizationsubjectbulkadd": {
    "operationId": "postauthorizationsubjectbulkadd",
    "functionName": "postAuthorizationSubjectBulkadd",
    "signature": "postAuthorizationSubjectBulkadd(subjectId, body, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationSubjectBulkaddRequest();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet body = {}; // Object | Pairs of role and division IDs\nlet opts = { \n  'subjectType': \"PC_USER\" // String | what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postAuthorizationSubjectBulkadd(subjectId, body, opts, callback);"
  },
  "postauthorizationsubjectbulkremove": {
    "operationId": "postauthorizationsubjectbulkremove",
    "functionName": "postAuthorizationSubjectBulkremove",
    "signature": "postAuthorizationSubjectBulkremove(subjectId, body)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationSubjectBulkremoveRequest();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet body = {}; // Object | Pairs of role and division IDs\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postAuthorizationSubjectBulkremove(subjectId, body, callback);"
  },
  "postauthorizationsubjectbulkreplace": {
    "operationId": "postauthorizationsubjectbulkreplace",
    "functionName": "postAuthorizationSubjectBulkreplace",
    "signature": "postAuthorizationSubjectBulkreplace(subjectId, body, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationSubjectBulkreplaceRequest();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet body = {}; // Object | Pairs of role and division IDs\nlet opts = { \n  'subjectType': \"PC_USER\" // String | what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postAuthorizationSubjectBulkreplace(subjectId, body, opts, callback);"
  },
  "postauthorizationsubjectdivisionrole": {
    "operationId": "postauthorizationsubjectdivisionrole",
    "functionName": "postAuthorizationSubjectDivisionRole",
    "signature": "postAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostAuthorizationSubjectDivisionRoleRequest();\n\nlet subjectId = \"subjectId_example\"; // String | Subject ID (user or group)\nlet divisionId = \"divisionId_example\"; // String | the id of the division to which to make the grant\nlet roleId = \"roleId_example\"; // String | the id of the role to grant\nlet opts = { \n  'subjectType': \"PC_USER\" // String | what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, opts, callback);"
  },
  "putauthorizationdivision": {
    "operationId": "putauthorizationdivision",
    "functionName": "putAuthorizationDivision",
    "signature": "putAuthorizationDivision(divisionId, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAuthorizationDivisionRequest();\n\nlet divisionId = \"divisionId_example\"; // String | Division ID\nlet body = {}; // Object | Updated division data\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAuthorizationDivision(divisionId, body, callback);"
  },
  "putauthorizationrole": {
    "operationId": "putauthorizationrole",
    "functionName": "putAuthorizationRole",
    "signature": "putAuthorizationRole(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAuthorizationRoleRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = {}; // Object | Organization role\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAuthorizationRole(roleId, body, callback);"
  },
  "putauthorizationroleusersadd": {
    "operationId": "putauthorizationroleusersadd",
    "functionName": "putAuthorizationRoleUsersAdd",
    "signature": "putAuthorizationRoleUsersAdd(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAuthorizationRoleUsersAddRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = [{}]; // Object | List of user IDs\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAuthorizationRoleUsersAdd(roleId, body, callback);"
  },
  "putauthorizationroleusersremove": {
    "operationId": "putauthorizationroleusersremove",
    "functionName": "putAuthorizationRoleUsersRemove",
    "signature": "putAuthorizationRoleUsersRemove(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAuthorizationRoleUsersRemoveRequest();\n\nlet roleId = \"roleId_example\"; // String | Role ID\nlet body = [{}]; // Object | List of user IDs\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAuthorizationRoleUsersRemove(roleId, body, callback);"
  },
  "putauthorizationrolesdefault": {
    "operationId": "putauthorizationrolesdefault",
    "functionName": "putAuthorizationRolesDefault",
    "signature": "putAuthorizationRolesDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutAuthorizationRolesDefaultRequest();\n\nlet body = [{}]; // Object | Organization roles list\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putAuthorizationRolesDefault(body, callback);"
  },
  "putuserroles": {
    "operationId": "putuserroles",
    "functionName": "putUserRoles",
    "signature": "putUserRoles(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserRolesRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | List of roles\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserRoles(userId, body, callback);"
  },
  "getbillingreportsbillableusage": {
    "operationId": "getbillingreportsbillableusage",
    "functionName": "getBillingReportsBillableusage",
    "signature": "getBillingReportsBillableusage(startDate, endDate)",
    "parameters": [
      {
        "name": "startDate",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endDate",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "BillingUsageReport",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetBillingReportsBillableusageRequest();\n\nlet startDate = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | The period start date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet endDate = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | The period end date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getBillingReportsBillableusage(startDate, endDate, callback);"
  },
  "getbillingtrusteebillingoverviewtrustororgid": {
    "operationId": "getbillingtrusteebillingoverviewtrustororgid",
    "functionName": "getBillingTrusteebillingoverviewTrustorOrgId",
    "signature": "getBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId, billingPeriodIndex)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "billingPeriodIndex",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrusteeBillingOverview",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetBillingTrusteebillingoverviewTrustorOrgIdRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | The organization ID of the trustor (customer) organization.\nlet opts = { \n  'billingPeriodIndex': 0 // Number | 0 for active period (overview data may change until period closes). 1 for prior completed billing period. 2 for two billing cycles prior, and so on.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId, opts, callback);"
  },
  "getchatsettings": {
    "operationId": "getchatsettings",
    "functionName": "getChatSettings",
    "signature": "getChatSettings()",
    "return": "ChatSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetChatSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getChatSettings(callback);"
  },
  "patchchatsettings": {
    "operationId": "patchchatsettings",
    "functionName": "patchChatSettings",
    "signature": "patchChatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchChatSettingsRequest();\n\nlet body = {}; // Object | Chat\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchChatSettings(body, callback);"
  },
  "putchatsettings": {
    "operationId": "putchatsettings",
    "functionName": "putChatSettings",
    "signature": "putChatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutChatSettingsRequest();\n\nlet body = {}; // Object | Chat\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putChatSettings(body, callback);"
  },
  "deletecoachingappointment": {
    "operationId": "deletecoachingappointment",
    "functionName": "deleteCoachingAppointment",
    "signature": "deleteCoachingAppointment(appointmentId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentReference",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteCoachingAppointmentRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteCoachingAppointment(appointmentId, callback);"
  },
  "deletecoachingappointmentannotation": {
    "operationId": "deletecoachingappointmentannotation",
    "functionName": "deleteCoachingAppointmentAnnotation",
    "signature": "deleteCoachingAppointmentAnnotation(appointmentId, annotationId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteCoachingAppointmentAnnotationRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet annotationId = \"annotationId_example\"; // String | The ID of the annotation.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteCoachingAppointmentAnnotation(appointmentId, annotationId, callback);"
  },
  "getcoachingappointment": {
    "operationId": "getcoachingappointment",
    "functionName": "getCoachingAppointment",
    "signature": "getCoachingAppointment(appointmentId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingAppointmentRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingAppointment(appointmentId, callback);"
  },
  "getcoachingappointmentannotation": {
    "operationId": "getcoachingappointmentannotation",
    "functionName": "getCoachingAppointmentAnnotation",
    "signature": "getCoachingAppointmentAnnotation(appointmentId, annotationId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingAppointmentAnnotationRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet annotationId = \"annotationId_example\"; // String | The ID of the annotation.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingAppointmentAnnotation(appointmentId, annotationId, callback);"
  },
  "getcoachingappointmentannotations": {
    "operationId": "getcoachingappointmentannotations",
    "functionName": "getCoachingAppointmentAnnotations",
    "signature": "getCoachingAppointmentAnnotations(appointmentId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CoachingAnnotationList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingAppointmentAnnotationsRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingAppointmentAnnotations(appointmentId, opts, callback);"
  },
  "getcoachingappointmentstatuses": {
    "operationId": "getcoachingappointmentstatuses",
    "functionName": "getCoachingAppointmentStatuses",
    "signature": "getCoachingAppointmentStatuses(appointmentId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentStatusResponseList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingAppointmentStatusesRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingAppointmentStatuses(appointmentId, opts, callback);"
  },
  "getcoachingappointments": {
    "operationId": "getcoachingappointments",
    "functionName": "getCoachingAppointments",
    "signature": "getCoachingAppointments(userIds, interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
    "parameters": [
      {
        "name": "userIds",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "facilitatorIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "relationships",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "intervalCondition",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentResponseList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingAppointmentsRequest();\n\nlet userIds = [\"userIds_example\"]; // [String] | The user IDs for which to retrieve appointments\nlet opts = { \n  'interval': \"interval_example\", // String | Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'statuses': [\"statuses_example\"], // [String] | Appointment Statuses to filter by\n  'facilitatorIds': [\"facilitatorIds_example\"], // [String] | The facilitator IDs for which to retrieve appointments\n  'sortOrder': \"sortOrder_example\", // String | Sort (by due date) either Asc or Desc\n  'relationships': [\"relationships_example\"], // [String] | Relationships to filter by\n  'completionInterval': \"completionInterval_example\", // String | Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'overdue': \"overdue_example\", // String | Overdue status to filter by\n  'intervalCondition': \"intervalCondition_example\" // String | Filter condition for interval\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingAppointments(userIds, opts, callback);"
  },
  "getcoachingappointmentsme": {
    "operationId": "getcoachingappointmentsme",
    "functionName": "getCoachingAppointmentsMe",
    "signature": "getCoachingAppointmentsMe(interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
    "parameters": [
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "facilitatorIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "relationships",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "intervalCondition",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentResponseList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingAppointmentsMeRequest();\n\nlet opts = { \n  'interval': \"interval_example\", // String | Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'statuses': [\"statuses_example\"], // [String] | Appointment Statuses to filter by\n  'facilitatorIds': [\"facilitatorIds_example\"], // [String] | The facilitator IDs for which to retrieve appointments\n  'sortOrder': \"sortOrder_example\", // String | Sort (by due date) either Asc or Desc\n  'relationships': [\"relationships_example\"], // [String] | Relationships to filter by\n  'completionInterval': \"completionInterval_example\", // String | Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'overdue': \"overdue_example\", // String | Overdue status to filter by\n  'intervalCondition': \"intervalCondition_example\" // String | Filter condition for interval\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingAppointmentsMe(opts, callback);"
  },
  "getcoachingnotification": {
    "operationId": "getcoachingnotification",
    "functionName": "getCoachingNotification",
    "signature": "getCoachingNotification(notificationId, expand)",
    "parameters": [
      {
        "name": "notificationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CoachingNotification",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingNotificationRequest();\n\nlet notificationId = \"notificationId_example\"; // String | The ID of the notification.\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Indicates a field in the response which should be expanded.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingNotification(notificationId, opts, callback);"
  },
  "getcoachingnotifications": {
    "operationId": "getcoachingnotifications",
    "functionName": "getCoachingNotifications",
    "signature": "getCoachingNotifications(pageNumber, pageSize, expand)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CoachingNotificationList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetCoachingNotificationsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'expand': [\"expand_example\"] // [String] | Indicates a field in the response which should be expanded.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getCoachingNotifications(opts, callback);"
  },
  "patchcoachingappointment": {
    "operationId": "patchcoachingappointment",
    "functionName": "patchCoachingAppointment",
    "signature": "patchCoachingAppointment(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchCoachingAppointmentRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | The new version of the appointment\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchCoachingAppointment(appointmentId, body, callback);"
  },
  "patchcoachingappointmentannotation": {
    "operationId": "patchcoachingappointmentannotation",
    "functionName": "patchCoachingAppointmentAnnotation",
    "signature": "patchCoachingAppointmentAnnotation(appointmentId, annotationId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchCoachingAppointmentAnnotationRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet annotationId = \"annotationId_example\"; // String | The ID of the annotation.\nlet body = {}; // Object | The new version of the annotation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchCoachingAppointmentAnnotation(appointmentId, annotationId, body, callback);"
  },
  "patchcoachingappointmentstatus": {
    "operationId": "patchcoachingappointmentstatus",
    "functionName": "patchCoachingAppointmentStatus",
    "signature": "patchCoachingAppointmentStatus(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchCoachingAppointmentStatusRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | Updated status of the coaching appointment\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchCoachingAppointmentStatus(appointmentId, body, callback);"
  },
  "patchcoachingnotification": {
    "operationId": "patchcoachingnotification",
    "functionName": "patchCoachingNotification",
    "signature": "patchCoachingNotification(notificationId, body)",
    "parameters": [
      {
        "name": "notificationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingNotification",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchCoachingNotificationRequest();\n\nlet notificationId = \"notificationId_example\"; // String | The ID of the notification.\nlet body = {}; // Object | Change the read state of a notification\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchCoachingNotification(notificationId, body, callback);"
  },
  "postcoachingappointmentannotations": {
    "operationId": "postcoachingappointmentannotations",
    "functionName": "postCoachingAppointmentAnnotations",
    "signature": "postCoachingAppointmentAnnotations(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostCoachingAppointmentAnnotationsRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | The annotation to add\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postCoachingAppointmentAnnotations(appointmentId, body, callback);"
  },
  "postcoachingappointmentconversations": {
    "operationId": "postcoachingappointmentconversations",
    "functionName": "postCoachingAppointmentConversations",
    "signature": "postCoachingAppointmentConversations(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AddConversationResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostCoachingAppointmentConversationsRequest();\n\nlet appointmentId = \"appointmentId_example\"; // String | The ID of the coaching appointment.\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postCoachingAppointmentConversations(appointmentId, body, callback);"
  },
  "postcoachingappointments": {
    "operationId": "postcoachingappointments",
    "functionName": "postCoachingAppointments",
    "signature": "postCoachingAppointments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostCoachingAppointmentsRequest();\n\nlet body = {}; // Object | The appointment to add\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postCoachingAppointments(body, callback);"
  },
  "postcoachingappointmentsaggregatesquery": {
    "operationId": "postcoachingappointmentsaggregatesquery",
    "functionName": "postCoachingAppointmentsAggregatesQuery",
    "signature": "postCoachingAppointmentsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentAggregateResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostCoachingAppointmentsAggregatesQueryRequest();\n\nlet body = {}; // Object | Aggregate Request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postCoachingAppointmentsAggregatesQuery(body, callback);"
  },
  "postcoachingscheduleslotsquery": {
    "operationId": "postcoachingscheduleslotsquery",
    "functionName": "postCoachingScheduleslotsQuery",
    "signature": "postCoachingScheduleslotsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CoachingSlotsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostCoachingScheduleslotsQueryRequest();\n\nlet body = {}; // Object | The slot search request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postCoachingScheduleslotsQuery(body, callback);"
  },
  "deletecontentmanagementdocument": {
    "operationId": "deletecontentmanagementdocument",
    "functionName": "deleteContentmanagementDocument",
    "signature": "deleteContentmanagementDocument(documentId, override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteContentmanagementDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  'override': true // Boolean | Override any lock on the document\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteContentmanagementDocument(documentId, opts, callback);"
  },
  "deletecontentmanagementshare": {
    "operationId": "deletecontentmanagementshare",
    "functionName": "deleteContentmanagementShare",
    "signature": "deleteContentmanagementShare(shareId)",
    "parameters": [
      {
        "name": "shareId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteContentmanagementShareRequest();\n\nlet shareId = \"shareId_example\"; // String | Share ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteContentmanagementShare(shareId, callback);"
  },
  "deletecontentmanagementstatusstatusid": {
    "operationId": "deletecontentmanagementstatusstatusid",
    "functionName": "deleteContentmanagementStatusStatusId",
    "signature": "deleteContentmanagementStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteContentmanagementStatusStatusIdRequest();\n\nlet statusId = \"statusId_example\"; // String | Status ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteContentmanagementStatusStatusId(statusId, callback);"
  },
  "deletecontentmanagementworkspace": {
    "operationId": "deletecontentmanagementworkspace",
    "functionName": "deleteContentmanagementWorkspace",
    "signature": "deleteContentmanagementWorkspace(workspaceId, moveChildrenToWorkspaceId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "moveChildrenToWorkspaceId",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteContentmanagementWorkspaceRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  'moveChildrenToWorkspaceId': \"moveChildrenToWorkspaceId_example\" // String | New location for objects in deleted workspace.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteContentmanagementWorkspace(workspaceId, opts, callback);"
  },
  "deletecontentmanagementworkspacemember": {
    "operationId": "deletecontentmanagementworkspacemember",
    "functionName": "deleteContentmanagementWorkspaceMember",
    "signature": "deleteContentmanagementWorkspaceMember(workspaceId, memberId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteContentmanagementWorkspaceMemberRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet memberId = \"memberId_example\"; // String | Member ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteContentmanagementWorkspaceMember(workspaceId, memberId, callback);"
  },
  "deletecontentmanagementworkspacetagvalue": {
    "operationId": "deletecontentmanagementworkspacetagvalue",
    "functionName": "deleteContentmanagementWorkspaceTagvalue",
    "signature": "deleteContentmanagementWorkspaceTagvalue(workspaceId, tagId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteContentmanagementWorkspaceTagvalueRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet tagId = \"tagId_example\"; // String | Tag ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteContentmanagementWorkspaceTagvalue(workspaceId, tagId, callback);"
  },
  "getcontentmanagementdocument": {
    "operationId": "getcontentmanagementdocument",
    "functionName": "getContentmanagementDocument",
    "signature": "getContentmanagementDocument(documentId, expand)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementDocument(documentId, opts, callback);"
  },
  "getcontentmanagementdocumentaudits": {
    "operationId": "getcontentmanagementdocumentaudits",
    "functionName": "getContentmanagementDocumentAudits",
    "signature": "getContentmanagementDocumentAudits(documentId, pageSize, pageNumber, transactionFilter, level, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "transactionFilter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "level",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentAuditEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementDocumentAuditsRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'transactionFilter': \"transactionFilter_example\", // String | Transaction filter\n  'level': \"USER\", // String | level\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"ascending\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementDocumentAudits(documentId, opts, callback);"
  },
  "getcontentmanagementdocumentcontent": {
    "operationId": "getcontentmanagementdocumentcontent",
    "functionName": "getContentmanagementDocumentContent",
    "signature": "getContentmanagementDocumentContent(documentId, disposition, contentType)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "disposition",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contentType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DownloadResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementDocumentContentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet opts = { \n  'disposition': \"disposition_example\", // String | Request how the content will be downloaded: a file attachment or inline. Default is attachment.\n  'contentType': \"contentType_example\" // String | The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementDocumentContent(documentId, opts, callback);"
  },
  "getcontentmanagementdocuments": {
    "operationId": "getcontentmanagementdocuments",
    "functionName": "getContentmanagementDocuments",
    "signature": "getContentmanagementDocuments(workspaceId, name, expand, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementDocumentsRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  'name': \"name_example\", // String | Name\n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"sortBy_example\", // String | name or dateCreated\n  'sortOrder': \"ascending\" // String | ascending or descending\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementDocuments(workspaceId, opts, callback);"
  },
  "getcontentmanagementquery": {
    "operationId": "getcontentmanagementquery",
    "functionName": "getContentmanagementQuery",
    "signature": "getContentmanagementQuery(queryPhrase, pageSize, pageNumber, sortBy, sortOrder, expand)",
    "parameters": [
      {
        "name": "queryPhrase",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueryResults",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementQueryRequest();\n\nlet queryPhrase = \"queryPhrase_example\"; // String | Phrase tokens are ANDed together over all searchable fields\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"name\", // String | name or dateCreated\n  'sortOrder': \"ascending\", // String | ascending or descending\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementQuery(queryPhrase, opts, callback);"
  },
  "getcontentmanagementsecurityprofile": {
    "operationId": "getcontentmanagementsecurityprofile",
    "functionName": "getContentmanagementSecurityprofile",
    "signature": "getContentmanagementSecurityprofile(securityProfileId)",
    "parameters": [
      {
        "name": "securityProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecurityProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementSecurityprofileRequest();\n\nlet securityProfileId = \"securityProfileId_example\"; // String | Security Profile Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementSecurityprofile(securityProfileId, callback);"
  },
  "getcontentmanagementsecurityprofiles": {
    "operationId": "getcontentmanagementsecurityprofiles",
    "functionName": "getContentmanagementSecurityprofiles",
    "signature": "getContentmanagementSecurityprofiles()",
    "return": "SecurityProfileEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementSecurityprofilesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementSecurityprofiles(callback);"
  },
  "getcontentmanagementshare": {
    "operationId": "getcontentmanagementshare",
    "functionName": "getContentmanagementShare",
    "signature": "getContentmanagementShare(shareId, expand)",
    "parameters": [
      {
        "name": "shareId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Share",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementShareRequest();\n\nlet shareId = \"shareId_example\"; // String | Share ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementShare(shareId, opts, callback);"
  },
  "getcontentmanagementsharedsharedid": {
    "operationId": "getcontentmanagementsharedsharedid",
    "functionName": "getContentmanagementSharedSharedId",
    "signature": "getContentmanagementSharedSharedId(sharedId, redirect, disposition, contentType, expand)",
    "parameters": [
      {
        "name": "sharedId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "redirect",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "disposition",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contentType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SharedResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementSharedSharedIdRequest();\n\nlet sharedId = \"sharedId_example\"; // String | Shared ID\nlet opts = { \n  'redirect': true, // Boolean | Turn on or off redirect\n  'disposition': \"attachment\", // String | Request how the share content will be downloaded: attached as a file or inline. Default is attachment.\n  'contentType': \"contentType_example\", // String | The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav\n  'expand': \"expand_example\" // String | Expand some document fields\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementSharedSharedId(sharedId, opts, callback);"
  },
  "getcontentmanagementshares": {
    "operationId": "getcontentmanagementshares",
    "functionName": "getContentmanagementShares",
    "signature": "getContentmanagementShares(entityId, expand, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "entityId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ShareEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementSharesRequest();\n\nlet opts = { \n  'entityId': \"entityId_example\", // String | Filters the shares returned to only the entity specified by the value of this parameter.\n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementShares(opts, callback);"
  },
  "getcontentmanagementstatus": {
    "operationId": "getcontentmanagementstatus",
    "functionName": "getContentmanagementStatus",
    "signature": "getContentmanagementStatus(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CommandStatusEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementStatusRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementStatus(opts, callback);"
  },
  "getcontentmanagementstatusstatusid": {
    "operationId": "getcontentmanagementstatusstatusid",
    "functionName": "getContentmanagementStatusStatusId",
    "signature": "getContentmanagementStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CommandStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementStatusStatusIdRequest();\n\nlet statusId = \"statusId_example\"; // String | Status ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementStatusStatusId(statusId, callback);"
  },
  "getcontentmanagementusage": {
    "operationId": "getcontentmanagementusage",
    "functionName": "getContentmanagementUsage",
    "signature": "getContentmanagementUsage()",
    "return": "Usage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementUsageRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementUsage(callback);"
  },
  "getcontentmanagementworkspace": {
    "operationId": "getcontentmanagementworkspace",
    "functionName": "getContentmanagementWorkspace",
    "signature": "getContentmanagementWorkspace(workspaceId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Workspace",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementWorkspaceRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementWorkspace(workspaceId, opts, callback);"
  },
  "getcontentmanagementworkspacedocuments": {
    "operationId": "getcontentmanagementworkspacedocuments",
    "functionName": "getContentmanagementWorkspaceDocuments",
    "signature": "getContentmanagementWorkspaceDocuments(workspaceId, expand, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementWorkspaceDocumentsRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"sortBy_example\", // String | name or dateCreated\n  'sortOrder': \"ascending\" // String | ascending or descending\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementWorkspaceDocuments(workspaceId, opts, callback);"
  },
  "getcontentmanagementworkspacemember": {
    "operationId": "getcontentmanagementworkspacemember",
    "functionName": "getContentmanagementWorkspaceMember",
    "signature": "getContentmanagementWorkspaceMember(workspaceId, memberId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceMember",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementWorkspaceMemberRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementWorkspaceMember(workspaceId, memberId, opts, callback);"
  },
  "getcontentmanagementworkspacemembers": {
    "operationId": "getcontentmanagementworkspacemembers",
    "functionName": "getContentmanagementWorkspaceMembers",
    "signature": "getContentmanagementWorkspaceMembers(workspaceId, pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceMemberEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementWorkspaceMembersRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementWorkspaceMembers(workspaceId, opts, callback);"
  },
  "getcontentmanagementworkspacetagvalue": {
    "operationId": "getcontentmanagementworkspacetagvalue",
    "functionName": "getContentmanagementWorkspaceTagvalue",
    "signature": "getContentmanagementWorkspaceTagvalue(workspaceId, tagId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValue",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementWorkspaceTagvalueRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet tagId = \"tagId_example\"; // String | Tag ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementWorkspaceTagvalue(workspaceId, tagId, opts, callback);"
  },
  "getcontentmanagementworkspacetagvalues": {
    "operationId": "getcontentmanagementworkspacetagvalues",
    "functionName": "getContentmanagementWorkspaceTagvalues",
    "signature": "getContentmanagementWorkspaceTagvalues(workspaceId, value, pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "value",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementWorkspaceTagvaluesRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet opts = { \n  'value': \"value_example\", // String | filter the list of tags returned\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementWorkspaceTagvalues(workspaceId, opts, callback);"
  },
  "getcontentmanagementworkspaces": {
    "operationId": "getcontentmanagementworkspaces",
    "functionName": "getContentmanagementWorkspaces",
    "signature": "getContentmanagementWorkspaces(pageSize, pageNumber, access, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "access",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetContentmanagementWorkspacesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'access': [\"access_example\"], // [String] | Requested access level.\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getContentmanagementWorkspaces(opts, callback);"
  },
  "postcontentmanagementauditquery": {
    "operationId": "postcontentmanagementauditquery",
    "functionName": "postContentmanagementAuditquery",
    "signature": "postContentmanagementAuditquery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueryResults",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementAuditqueryRequest();\n\nlet body = {}; // Object | Allows for a filtered query returning facet information\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementAuditquery(body, callback);"
  },
  "postcontentmanagementdocument": {
    "operationId": "postcontentmanagementdocument",
    "functionName": "postContentmanagementDocument",
    "signature": "postContentmanagementDocument(documentId, body, expand, override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet body = {}; // Object | Document\nlet opts = { \n  'expand': \"expand_example\", // String | Expand some document fields\n  'override': true // Boolean | Override any lock on the document\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementDocument(documentId, body, opts, callback);"
  },
  "postcontentmanagementdocumentcontent": {
    "operationId": "postcontentmanagementdocumentcontent",
    "functionName": "postContentmanagementDocumentContent",
    "signature": "postContentmanagementDocumentContent(documentId, body, override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ReplaceResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementDocumentContentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet body = {}; // Object | Replace Request\nlet opts = { \n  'override': true // Boolean | Override any lock on the document\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementDocumentContent(documentId, body, opts, callback);"
  },
  "postcontentmanagementdocuments": {
    "operationId": "postcontentmanagementdocuments",
    "functionName": "postContentmanagementDocuments",
    "signature": "postContentmanagementDocuments(body, copySource, moveSource, override)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "copySource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "moveSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "override",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementDocumentsRequest();\n\nlet body = {}; // Object | Document\nlet opts = { \n  'copySource': \"copySource_example\", // String | Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source.\n  'moveSource': \"moveSource_example\", // String | Move a document to a new workspace. Provide a document ID as the move source.\n  'override': true // Boolean | Override any lock on the source document\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementDocuments(body, opts, callback);"
  },
  "postcontentmanagementquery": {
    "operationId": "postcontentmanagementquery",
    "functionName": "postContentmanagementQuery",
    "signature": "postContentmanagementQuery(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "QueryResults",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementQueryRequest();\n\nlet body = {}; // Object | Allows for a filtered query returning facet information\nlet opts = { \n  'expand': \"expand_example\" // String | Expand some document fields\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementQuery(body, opts, callback);"
  },
  "postcontentmanagementshares": {
    "operationId": "postcontentmanagementshares",
    "functionName": "postContentmanagementShares",
    "signature": "postContentmanagementShares(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateShareResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementSharesRequest();\n\nlet body = {}; // Object | CreateShareRequest - entity id and type and a single member or list of members are required\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementShares(body, callback);"
  },
  "postcontentmanagementworkspacetagvalues": {
    "operationId": "postcontentmanagementworkspacetagvalues",
    "functionName": "postContentmanagementWorkspaceTagvalues",
    "signature": "postContentmanagementWorkspaceTagvalues(workspaceId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TagValue",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementWorkspaceTagvaluesRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet body = {}; // Object | tag\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementWorkspaceTagvalues(workspaceId, body, callback);"
  },
  "postcontentmanagementworkspacetagvaluesquery": {
    "operationId": "postcontentmanagementworkspacetagvaluesquery",
    "functionName": "postContentmanagementWorkspaceTagvaluesQuery",
    "signature": "postContentmanagementWorkspaceTagvaluesQuery(workspaceId, body, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementWorkspaceTagvaluesQueryRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet body = {}; // Object | query\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementWorkspaceTagvaluesQuery(workspaceId, body, opts, callback);"
  },
  "postcontentmanagementworkspaces": {
    "operationId": "postcontentmanagementworkspaces",
    "functionName": "postContentmanagementWorkspaces",
    "signature": "postContentmanagementWorkspaces(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Workspace",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostContentmanagementWorkspacesRequest();\n\nlet body = {}; // Object | Workspace\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postContentmanagementWorkspaces(body, callback);"
  },
  "putcontentmanagementworkspace": {
    "operationId": "putcontentmanagementworkspace",
    "functionName": "putContentmanagementWorkspace",
    "signature": "putContentmanagementWorkspace(workspaceId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Workspace",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutContentmanagementWorkspaceRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet body = {}; // Object | Workspace\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putContentmanagementWorkspace(workspaceId, body, callback);"
  },
  "putcontentmanagementworkspacemember": {
    "operationId": "putcontentmanagementworkspacemember",
    "functionName": "putContentmanagementWorkspaceMember",
    "signature": "putContentmanagementWorkspaceMember(workspaceId, memberId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WorkspaceMember",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutContentmanagementWorkspaceMemberRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet body = {}; // Object | Workspace Member\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putContentmanagementWorkspaceMember(workspaceId, memberId, body, callback);"
  },
  "putcontentmanagementworkspacetagvalue": {
    "operationId": "putcontentmanagementworkspacetagvalue",
    "functionName": "putContentmanagementWorkspaceTagvalue",
    "signature": "putContentmanagementWorkspaceTagvalue(workspaceId, tagId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TagValue",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutContentmanagementWorkspaceTagvalueRequest();\n\nlet workspaceId = \"workspaceId_example\"; // String | Workspace ID\nlet tagId = \"tagId_example\"; // String | Tag ID\nlet body = {}; // Object | Workspace\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putContentmanagementWorkspaceTagvalue(workspaceId, tagId, body, callback);"
  },
  "deleteconversationparticipantcode": {
    "operationId": "deleteconversationparticipantcode",
    "functionName": "deleteConversationParticipantCode",
    "signature": "deleteConversationParticipantCode(conversationId, participantId, addCommunicationCode)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "addCommunicationCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationParticipantCodeRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet addCommunicationCode = \"addCommunicationCode_example\"; // String | addCommunicationCode\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationParticipantCode(conversationId, participantId, addCommunicationCode, callback);"
  },
  "deleteconversationparticipantflaggedreason": {
    "operationId": "deleteconversationparticipantflaggedreason",
    "functionName": "deleteConversationParticipantFlaggedreason",
    "signature": "deleteConversationParticipantFlaggedreason(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationParticipantFlaggedreasonRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationParticipantFlaggedreason(conversationId, participantId, callback);"
  },
  "deleteconversationscallparticipantconsult": {
    "operationId": "deleteconversationscallparticipantconsult",
    "functionName": "deleteConversationsCallParticipantConsult",
    "signature": "deleteConversationsCallParticipantConsult(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsCallParticipantConsultRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationsCallParticipantConsult(conversationId, participantId, callback);"
  },
  "deleteconversationsemailmessagesdraftattachment": {
    "operationId": "deleteconversationsemailmessagesdraftattachment",
    "functionName": "deleteConversationsEmailMessagesDraftAttachment",
    "signature": "deleteConversationsEmailMessagesDraftAttachment(conversationId, attachmentId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attachmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsEmailMessagesDraftAttachmentRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet attachmentId = \"attachmentId_example\"; // String | attachmentId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationsEmailMessagesDraftAttachment(conversationId, attachmentId, callback);"
  },
  "deleteconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsMessagingIntegrationsFacebookIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, callback);"
  },
  "deleteconversationsmessagingintegrationslineintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationslineintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsMessagingIntegrationsLineIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId, callback);"
  },
  "deleteconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationsopenintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsMessagingIntegrationsOpenIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId, callback);"
  },
  "deleteconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsMessagingIntegrationsTwitterIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, callback);"
  },
  "deleteconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsMessagingIntegrationsWhatsappIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, callback);"
  },
  "deleteconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "deleteconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "deleteConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "deleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationsMessagingSupportedcontentSupportedContentIdRequest();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, callback);"
  },
  "getconversation": {
    "operationId": "getconversation",
    "functionName": "getConversation",
    "signature": "getConversation(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversation(conversationId, callback);"
  },
  "getconversationparticipantsecureivrsession": {
    "operationId": "getconversationparticipantsecureivrsession",
    "functionName": "getConversationParticipantSecureivrsession",
    "signature": "getConversationParticipantSecureivrsession(conversationId, participantId, secureSessionId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "secureSessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecureSession",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationParticipantSecureivrsessionRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet secureSessionId = \"secureSessionId_example\"; // String | secure IVR session ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationParticipantSecureivrsession(conversationId, participantId, secureSessionId, callback);"
  },
  "getconversationparticipantsecureivrsessions": {
    "operationId": "getconversationparticipantsecureivrsessions",
    "functionName": "getConversationParticipantSecureivrsessions",
    "signature": "getConversationParticipantSecureivrsessions(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecureSessionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationParticipantSecureivrsessionsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationParticipantSecureivrsessions(conversationId, participantId, callback);"
  },
  "getconversationparticipantwrapup": {
    "operationId": "getconversationparticipantwrapup",
    "functionName": "getConversationParticipantWrapup",
    "signature": "getConversationParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationParticipantWrapupRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  'provisional': false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationParticipantWrapup(conversationId, participantId, opts, callback);"
  },
  "getconversationparticipantwrapupcodes": {
    "operationId": "getconversationparticipantwrapupcodes",
    "functionName": "getConversationParticipantWrapupcodes",
    "signature": "getConversationParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationParticipantWrapupcodesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationParticipantWrapupcodes(conversationId, participantId, callback);"
  },
  "getconversations": {
    "operationId": "getconversations",
    "functionName": "getConversations",
    "signature": "getConversations(communicationType)",
    "parameters": [
      {
        "name": "communicationType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsRequest();\n\nlet opts = { \n  'communicationType': \"communicationType_example\" // String | Call or Chat communication filtering\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversations(opts, callback);"
  },
  "getconversationscall": {
    "operationId": "getconversationscall",
    "functionName": "getConversationsCall",
    "signature": "getConversationsCall(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCall(conversationId, callback);"
  },
  "getconversationscallparticipantwrapup": {
    "operationId": "getconversationscallparticipantwrapup",
    "functionName": "getConversationsCallParticipantWrapup",
    "signature": "getConversationsCallParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallParticipantWrapupRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'provisional': false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallParticipantWrapup(conversationId, participantId, opts, callback);"
  },
  "getconversationscallparticipantwrapupcodes": {
    "operationId": "getconversationscallparticipantwrapupcodes",
    "functionName": "getConversationsCallParticipantWrapupcodes",
    "signature": "getConversationsCallParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallParticipantWrapupcodesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallParticipantWrapupcodes(conversationId, participantId, callback);"
  },
  "getconversationscallback": {
    "operationId": "getconversationscallback",
    "functionName": "getConversationsCallback",
    "signature": "getConversationsCallback(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallbackConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallbackRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallback(conversationId, callback);"
  },
  "getconversationscallbackparticipantwrapup": {
    "operationId": "getconversationscallbackparticipantwrapup",
    "functionName": "getConversationsCallbackParticipantWrapup",
    "signature": "getConversationsCallbackParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallbackParticipantWrapupRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'provisional': false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallbackParticipantWrapup(conversationId, participantId, opts, callback);"
  },
  "getconversationscallbackparticipantwrapupcodes": {
    "operationId": "getconversationscallbackparticipantwrapupcodes",
    "functionName": "getConversationsCallbackParticipantWrapupcodes",
    "signature": "getConversationsCallbackParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallbackParticipantWrapupcodesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallbackParticipantWrapupcodes(conversationId, participantId, callback);"
  },
  "getconversationscallbacks": {
    "operationId": "getconversationscallbacks",
    "functionName": "getConversationsCallbacks",
    "signature": "getConversationsCallbacks()",
    "return": "CallbackConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallbacksRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallbacks(callback);"
  },
  "getconversationscalls": {
    "operationId": "getconversationscalls",
    "functionName": "getConversationsCalls",
    "signature": "getConversationsCalls()",
    "return": "CallConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCalls(callback);"
  },
  "getconversationscallshistory": {
    "operationId": "getconversationscallshistory",
    "functionName": "getConversationsCallsHistory",
    "signature": "getConversationsCallsHistory(pageSize, pageNumber, interval, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CallHistoryConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallsHistoryRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size, maximum 50\n  'pageNumber': 1, // Number | Page number\n  'interval': \"interval_example\", // String | Interval string; format is ISO-8601. Separate start and end times with forward slash '/'\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallsHistory(opts, callback);"
  },
  "getconversationscallsmaximumconferenceparties": {
    "operationId": "getconversationscallsmaximumconferenceparties",
    "functionName": "getConversationsCallsMaximumconferenceparties",
    "signature": "getConversationsCallsMaximumconferenceparties()",
    "return": "MaxParticipants",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCallsMaximumconferencepartiesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCallsMaximumconferenceparties(callback);"
  },
  "getconversationschat": {
    "operationId": "getconversationschat",
    "functionName": "getConversationsChat",
    "signature": "getConversationsChat(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ChatConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsChatRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsChat(conversationId, callback);"
  },
  "getconversationschatmessage": {
    "operationId": "getconversationschatmessage",
    "functionName": "getConversationsChatMessage",
    "signature": "getConversationsChatMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsChatMessageRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsChatMessage(conversationId, messageId, callback);"
  },
  "getconversationschatmessages": {
    "operationId": "getconversationschatmessages",
    "functionName": "getConversationsChatMessages",
    "signature": "getConversationsChatMessages(conversationId, after, before, sortOrder, maxResults)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "maxResults",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WebChatMessageEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsChatMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  'after': \"after_example\", // String | If specified, get the messages chronologically after the id of this message\n  'before': \"before_example\", // String | If specified, get the messages chronologically before the id of this message\n  'sortOrder': \"ascending\", // String | Sort order\n  'maxResults': 100 // Number | Limit the returned number of messages, up to a maximum of 100\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsChatMessages(conversationId, opts, callback);"
  },
  "getconversationschatparticipantwrapup": {
    "operationId": "getconversationschatparticipantwrapup",
    "functionName": "getConversationsChatParticipantWrapup",
    "signature": "getConversationsChatParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsChatParticipantWrapupRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'provisional': false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsChatParticipantWrapup(conversationId, participantId, opts, callback);"
  },
  "getconversationschatparticipantwrapupcodes": {
    "operationId": "getconversationschatparticipantwrapupcodes",
    "functionName": "getConversationsChatParticipantWrapupcodes",
    "signature": "getConversationsChatParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsChatParticipantWrapupcodesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsChatParticipantWrapupcodes(conversationId, participantId, callback);"
  },
  "getconversationschats": {
    "operationId": "getconversationschats",
    "functionName": "getConversationsChats",
    "signature": "getConversationsChats()",
    "return": "ChatConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsChatsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsChats(callback);"
  },
  "getconversationscobrowsesession": {
    "operationId": "getconversationscobrowsesession",
    "functionName": "getConversationsCobrowsesession",
    "signature": "getConversationsCobrowsesession(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CobrowseConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCobrowsesessionRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCobrowsesession(conversationId, callback);"
  },
  "getconversationscobrowsesessionparticipantwrapup": {
    "operationId": "getconversationscobrowsesessionparticipantwrapup",
    "functionName": "getConversationsCobrowsesessionParticipantWrapup",
    "signature": "getConversationsCobrowsesessionParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCobrowsesessionParticipantWrapupRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'provisional': false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCobrowsesessionParticipantWrapup(conversationId, participantId, opts, callback);"
  },
  "getconversationscobrowsesessionparticipantwrapupcodes": {
    "operationId": "getconversationscobrowsesessionparticipantwrapupcodes",
    "functionName": "getConversationsCobrowsesessionParticipantWrapupcodes",
    "signature": "getConversationsCobrowsesessionParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCobrowsesessionParticipantWrapupcodesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCobrowsesessionParticipantWrapupcodes(conversationId, participantId, callback);"
  },
  "getconversationscobrowsesessions": {
    "operationId": "getconversationscobrowsesessions",
    "functionName": "getConversationsCobrowsesessions",
    "signature": "getConversationsCobrowsesessions()",
    "return": "CobrowseConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsCobrowsesessionsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsCobrowsesessions(callback);"
  },
  "getconversationsemail": {
    "operationId": "getconversationsemail",
    "functionName": "getConversationsEmail",
    "signature": "getConversationsEmail(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmail(conversationId, callback);"
  },
  "getconversationsemailmessage": {
    "operationId": "getconversationsemailmessage",
    "functionName": "getConversationsEmailMessage",
    "signature": "getConversationsEmailMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailMessageRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmailMessage(conversationId, messageId, callback);"
  },
  "getconversationsemailmessages": {
    "operationId": "getconversationsemailmessages",
    "functionName": "getConversationsEmailMessages",
    "signature": "getConversationsEmailMessages(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessageListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmailMessages(conversationId, callback);"
  },
  "getconversationsemailmessagesdraft": {
    "operationId": "getconversationsemailmessagesdraft",
    "functionName": "getConversationsEmailMessagesDraft",
    "signature": "getConversationsEmailMessagesDraft(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailMessagesDraftRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmailMessagesDraft(conversationId, callback);"
  },
  "getconversationsemailparticipantwrapup": {
    "operationId": "getconversationsemailparticipantwrapup",
    "functionName": "getConversationsEmailParticipantWrapup",
    "signature": "getConversationsEmailParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailParticipantWrapupRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'provisional': false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmailParticipantWrapup(conversationId, participantId, opts, callback);"
  },
  "getconversationsemailparticipantwrapupcodes": {
    "operationId": "getconversationsemailparticipantwrapupcodes",
    "functionName": "getConversationsEmailParticipantWrapupcodes",
    "signature": "getConversationsEmailParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailParticipantWrapupcodesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmailParticipantWrapupcodes(conversationId, participantId, callback);"
  },
  "getconversationsemailsettings": {
    "operationId": "getconversationsemailsettings",
    "functionName": "getConversationsEmailSettings",
    "signature": "getConversationsEmailSettings(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailsSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailSettingsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmailSettings(conversationId, callback);"
  },
  "getconversationsemails": {
    "operationId": "getconversationsemails",
    "functionName": "getConversationsEmails",
    "signature": "getConversationsEmails()",
    "return": "EmailConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsEmailsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsEmails(callback);"
  },
  "getconversationsmessage": {
    "operationId": "getconversationsmessage",
    "functionName": "getConversationsMessage",
    "signature": "getConversationsMessage(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessageRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessage(conversationId, callback);"
  },
  "getconversationsmessagecommunicationmessagesmediamediaid": {
    "operationId": "getconversationsmessagecommunicationmessagesmediamediaid",
    "functionName": "getConversationsMessageCommunicationMessagesMediaMediaId",
    "signature": "getConversationsMessageCommunicationMessagesMediaMediaId(conversationId, communicationId, mediaId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageMediaData",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessageCommunicationMessagesMediaMediaIdRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet mediaId = \"mediaId_example\"; // String | mediaId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessageCommunicationMessagesMediaMediaId(conversationId, communicationId, mediaId, callback);"
  },
  "getconversationsmessagedetails": {
    "operationId": "getconversationsmessagedetails",
    "functionName": "getConversationsMessageDetails",
    "signature": "getConversationsMessageDetails(messageId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageData",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessageDetailsRequest();\n\nlet messageId = \"messageId_example\"; // String | messageId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessageDetails(messageId, callback);"
  },
  "getconversationsmessagemessage": {
    "operationId": "getconversationsmessagemessage",
    "functionName": "getConversationsMessageMessage",
    "signature": "getConversationsMessageMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageData",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessageMessageRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessageMessage(conversationId, messageId, callback);"
  },
  "getconversationsmessageparticipantwrapup": {
    "operationId": "getconversationsmessageparticipantwrapup",
    "functionName": "getConversationsMessageParticipantWrapup",
    "signature": "getConversationsMessageParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessageParticipantWrapupRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'provisional': false // Boolean | Indicates if the wrap-up code is provisional.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessageParticipantWrapup(conversationId, participantId, opts, callback);"
  },
  "getconversationsmessageparticipantwrapupcodes": {
    "operationId": "getconversationsmessageparticipantwrapupcodes",
    "functionName": "getConversationsMessageParticipantWrapupcodes",
    "signature": "getConversationsMessageParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessageParticipantWrapupcodesRequest();\n\nlet conversationId = \"conversationId_example\"; // String |  conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessageParticipantWrapupcodes(conversationId, participantId, callback);"
  },
  "getconversationsmessages": {
    "operationId": "getconversationsmessages",
    "functionName": "getConversationsMessages",
    "signature": "getConversationsMessages()",
    "return": "MessageConversationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessages(callback);"
  },
  "getconversationsmessagingfacebookapp": {
    "operationId": "getconversationsmessagingfacebookapp",
    "functionName": "getConversationsMessagingFacebookApp",
    "signature": "getConversationsMessagingFacebookApp()",
    "return": "FacebookAppCredentials",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingFacebookAppRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingFacebookApp(callback);"
  },
  "getconversationsmessagingintegrations": {
    "operationId": "getconversationsmessagingintegrations",
    "functionName": "getConversationsMessagingIntegrations",
    "signature": "getConversationsMessagingIntegrations(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MessagingIntegrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand instructions for the return value.\n  'supportedContentId': \"supportedContentId_example\" // String | Filter integrations returned based on the supported content ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrations(opts, callback);"
  },
  "getconversationsmessagingintegrationsfacebook": {
    "operationId": "getconversationsmessagingintegrationsfacebook",
    "functionName": "getConversationsMessagingIntegrationsFacebook",
    "signature": "getConversationsMessagingIntegrationsFacebook(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FacebookIntegrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsFacebookRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand instructions for the return value.\n  'supportedContentId': \"supportedContentId_example\" // String | Filter integrations returned based on the supported content ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsFacebook(opts, callback);"
  },
  "getconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "getconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "getConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FacebookIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsFacebookIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, opts, callback);"
  },
  "getconversationsmessagingintegrationsline": {
    "operationId": "getconversationsmessagingintegrationsline",
    "functionName": "getConversationsMessagingIntegrationsLine",
    "signature": "getConversationsMessagingIntegrationsLine(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LineIntegrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsLineRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand instructions for the return value.\n  'supportedContentId': \"supportedContentId_example\" // String | Filter integrations returned based on the supported content ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsLine(opts, callback);"
  },
  "getconversationsmessagingintegrationslineintegrationid": {
    "operationId": "getconversationsmessagingintegrationslineintegrationid",
    "functionName": "getConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "getConversationsMessagingIntegrationsLineIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LineIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsLineIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsLineIntegrationId(integrationId, opts, callback);"
  },
  "getconversationsmessagingintegrationsopen": {
    "operationId": "getconversationsmessagingintegrationsopen",
    "functionName": "getConversationsMessagingIntegrationsOpen",
    "signature": "getConversationsMessagingIntegrationsOpen(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OpenIntegrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsOpenRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand instructions for the return value.\n  'supportedContentId': \"supportedContentId_example\" // String | Filter integrations returned based on the supported content ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsOpen(opts, callback);"
  },
  "getconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "getconversationsmessagingintegrationsopenintegrationid",
    "functionName": "getConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "getConversationsMessagingIntegrationsOpenIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OpenIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsOpenIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsOpenIntegrationId(integrationId, opts, callback);"
  },
  "getconversationsmessagingintegrationstwitter": {
    "operationId": "getconversationsmessagingintegrationstwitter",
    "functionName": "getConversationsMessagingIntegrationsTwitter",
    "signature": "getConversationsMessagingIntegrationsTwitter(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TwitterIntegrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsTwitterRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand instructions for the return value.\n  'supportedContentId': \"supportedContentId_example\" // String | Filter integrations returned based on the supported content ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsTwitter(opts, callback);"
  },
  "getconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "getconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "getConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TwitterIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsTwitterIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, opts, callback);"
  },
  "getconversationsmessagingintegrationswhatsapp": {
    "operationId": "getconversationsmessagingintegrationswhatsapp",
    "functionName": "getConversationsMessagingIntegrationsWhatsapp",
    "signature": "getConversationsMessagingIntegrationsWhatsapp(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WhatsAppIntegrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsWhatsappRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand instructions for the return value.\n  'supportedContentId': \"supportedContentId_example\" // String | Filter integrations returned based on the supported content ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsWhatsapp(opts, callback);"
  },
  "getconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "getconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "getConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingIntegrationsWhatsappIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, opts, callback);"
  },
  "getconversationsmessagingsticker": {
    "operationId": "getconversationsmessagingsticker",
    "functionName": "getConversationsMessagingSticker",
    "signature": "getConversationsMessagingSticker(messengerType, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "messengerType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "MessagingStickerEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingStickerRequest();\n\nlet messengerType = \"messengerType_example\"; // String | Messenger Type\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingSticker(messengerType, opts, callback);"
  },
  "getconversationsmessagingsupportedcontent": {
    "operationId": "getconversationsmessagingsupportedcontent",
    "functionName": "getConversationsMessagingSupportedcontent",
    "signature": "getConversationsMessagingSupportedcontent(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SupportedContentListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingSupportedcontentRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingSupportedcontent(opts, callback);"
  },
  "getconversationsmessagingsupportedcontentdefault": {
    "operationId": "getconversationsmessagingsupportedcontentdefault",
    "functionName": "getConversationsMessagingSupportedcontentDefault",
    "signature": "getConversationsMessagingSupportedcontentDefault()",
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingSupportedcontentDefaultRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingSupportedcontentDefault(callback);"
  },
  "getconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "getconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "getConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "getConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingSupportedcontentSupportedContentIdRequest();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, callback);"
  },
  "getconversationsmessagingthreadingtimeline": {
    "operationId": "getconversationsmessagingthreadingtimeline",
    "functionName": "getConversationsMessagingThreadingtimeline",
    "signature": "getConversationsMessagingThreadingtimeline()",
    "return": "ConversationThreadingWindow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationsMessagingThreadingtimelineRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationsMessagingThreadingtimeline(callback);"
  },
  "patchconversationparticipant": {
    "operationId": "patchconversationparticipant",
    "functionName": "patchConversationParticipant",
    "signature": "patchConversationParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationParticipantRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Update request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationParticipant(conversationId, participantId, body, callback);"
  },
  "patchconversationparticipantattributes": {
    "operationId": "patchconversationparticipantattributes",
    "functionName": "patchConversationParticipantAttributes",
    "signature": "patchConversationParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationParticipantAttributesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Participant attributes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationParticipantAttributes(conversationId, participantId, body, callback);"
  },
  "patchconversationscall": {
    "operationId": "patchconversationscall",
    "functionName": "patchConversationsCall",
    "signature": "patchConversationsCall(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCall(conversationId, body, callback);"
  },
  "patchconversationscallparticipant": {
    "operationId": "patchconversationscallparticipant",
    "functionName": "patchConversationsCallParticipant",
    "signature": "patchConversationsCallParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallParticipantRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsCallParticipant(conversationId, participantId, body, callback);"
  },
  "patchconversationscallparticipantattributes": {
    "operationId": "patchconversationscallparticipantattributes",
    "functionName": "patchConversationsCallParticipantAttributes",
    "signature": "patchConversationsCallParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallParticipantAttributesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant attributes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsCallParticipantAttributes(conversationId, participantId, body, callback);"
  },
  "patchconversationscallparticipantcommunication": {
    "operationId": "patchconversationscallparticipantcommunication",
    "functionName": "patchConversationsCallParticipantCommunication",
    "signature": "patchConversationsCallParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallParticipantCommunicationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCallParticipantCommunication(conversationId, participantId, communicationId, body, callback);"
  },
  "patchconversationscallparticipantconsult": {
    "operationId": "patchconversationscallparticipantconsult",
    "functionName": "patchConversationsCallParticipantConsult",
    "signature": "patchConversationsCallParticipantConsult(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallParticipantConsultRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | new speak to\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCallParticipantConsult(conversationId, participantId, body, callback);"
  },
  "patchconversationscallback": {
    "operationId": "patchconversationscallback",
    "functionName": "patchConversationsCallback",
    "signature": "patchConversationsCallback(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallbackRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCallback(conversationId, body, callback);"
  },
  "patchconversationscallbackparticipant": {
    "operationId": "patchconversationscallbackparticipant",
    "functionName": "patchConversationsCallbackParticipant",
    "signature": "patchConversationsCallbackParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallbackParticipantRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsCallbackParticipant(conversationId, participantId, body, callback);"
  },
  "patchconversationscallbackparticipantattributes": {
    "operationId": "patchconversationscallbackparticipantattributes",
    "functionName": "patchConversationsCallbackParticipantAttributes",
    "signature": "patchConversationsCallbackParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallbackParticipantAttributesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Attributes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsCallbackParticipantAttributes(conversationId, participantId, body, callback);"
  },
  "patchconversationscallbackparticipantcommunication": {
    "operationId": "patchconversationscallbackparticipantcommunication",
    "functionName": "patchConversationsCallbackParticipantCommunication",
    "signature": "patchConversationsCallbackParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallbackParticipantCommunicationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCallbackParticipantCommunication(conversationId, participantId, communicationId, body, callback);"
  },
  "patchconversationscallbacks": {
    "operationId": "patchconversationscallbacks",
    "functionName": "patchConversationsCallbacks",
    "signature": "patchConversationsCallbacks(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PatchCallbackResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCallbacksRequest();\n\nlet body = {}; // Object | PatchCallbackRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCallbacks(body, callback);"
  },
  "patchconversationschat": {
    "operationId": "patchconversationschat",
    "functionName": "patchConversationsChat",
    "signature": "patchConversationsChat(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsChatRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsChat(conversationId, body, callback);"
  },
  "patchconversationschatparticipant": {
    "operationId": "patchconversationschatparticipant",
    "functionName": "patchConversationsChatParticipant",
    "signature": "patchConversationsChatParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsChatParticipantRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Update request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsChatParticipant(conversationId, participantId, body, callback);"
  },
  "patchconversationschatparticipantattributes": {
    "operationId": "patchconversationschatparticipantattributes",
    "functionName": "patchConversationsChatParticipantAttributes",
    "signature": "patchConversationsChatParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsChatParticipantAttributesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant attributes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsChatParticipantAttributes(conversationId, participantId, body, callback);"
  },
  "patchconversationschatparticipantcommunication": {
    "operationId": "patchconversationschatparticipantcommunication",
    "functionName": "patchConversationsChatParticipantCommunication",
    "signature": "patchConversationsChatParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsChatParticipantCommunicationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsChatParticipantCommunication(conversationId, participantId, communicationId, body, callback);"
  },
  "patchconversationscobrowsesession": {
    "operationId": "patchconversationscobrowsesession",
    "functionName": "patchConversationsCobrowsesession",
    "signature": "patchConversationsCobrowsesession(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCobrowsesessionRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCobrowsesession(conversationId, body, callback);"
  },
  "patchconversationscobrowsesessionparticipant": {
    "operationId": "patchconversationscobrowsesessionparticipant",
    "functionName": "patchConversationsCobrowsesessionParticipant",
    "signature": "patchConversationsCobrowsesessionParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCobrowsesessionParticipantRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsCobrowsesessionParticipant(conversationId, participantId, opts, callback);"
  },
  "patchconversationscobrowsesessionparticipantattributes": {
    "operationId": "patchconversationscobrowsesessionparticipantattributes",
    "functionName": "patchConversationsCobrowsesessionParticipantAttributes",
    "signature": "patchConversationsCobrowsesessionParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCobrowsesessionParticipantAttributesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsCobrowsesessionParticipantAttributes(conversationId, participantId, opts, callback);"
  },
  "patchconversationscobrowsesessionparticipantcommunication": {
    "operationId": "patchconversationscobrowsesessionparticipantcommunication",
    "functionName": "patchConversationsCobrowsesessionParticipantCommunication",
    "signature": "patchConversationsCobrowsesessionParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsCobrowsesessionParticipantCommunicationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsCobrowsesessionParticipantCommunication(conversationId, participantId, communicationId, body, callback);"
  },
  "patchconversationsemail": {
    "operationId": "patchconversationsemail",
    "functionName": "patchConversationsEmail",
    "signature": "patchConversationsEmail(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsEmailRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsEmail(conversationId, body, callback);"
  },
  "patchconversationsemailparticipant": {
    "operationId": "patchconversationsemailparticipant",
    "functionName": "patchConversationsEmailParticipant",
    "signature": "patchConversationsEmailParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsEmailParticipantRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Update request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsEmailParticipant(conversationId, participantId, body, callback);"
  },
  "patchconversationsemailparticipantattributes": {
    "operationId": "patchconversationsemailparticipantattributes",
    "functionName": "patchConversationsEmailParticipantAttributes",
    "signature": "patchConversationsEmailParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsEmailParticipantAttributesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Participant attributes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsEmailParticipantAttributes(conversationId, participantId, body, callback);"
  },
  "patchconversationsemailparticipantcommunication": {
    "operationId": "patchconversationsemailparticipantcommunication",
    "functionName": "patchConversationsEmailParticipantCommunication",
    "signature": "patchConversationsEmailParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsEmailParticipantCommunicationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsEmailParticipantCommunication(conversationId, participantId, communicationId, body, callback);"
  },
  "patchconversationsmessage": {
    "operationId": "patchconversationsmessage",
    "functionName": "patchConversationsMessage",
    "signature": "patchConversationsMessage(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessageRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsMessage(conversationId, body, callback);"
  },
  "patchconversationsmessageparticipant": {
    "operationId": "patchconversationsmessageparticipant",
    "functionName": "patchConversationsMessageParticipant",
    "signature": "patchConversationsMessageParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessageParticipantRequest();\n\nlet conversationId = \"conversationId_example\"; // String |  conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsMessageParticipant(conversationId, participantId, opts, callback);"
  },
  "patchconversationsmessageparticipantattributes": {
    "operationId": "patchconversationsmessageparticipantattributes",
    "functionName": "patchConversationsMessageParticipantAttributes",
    "signature": "patchConversationsMessageParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessageParticipantAttributesRequest();\n\nlet conversationId = \"conversationId_example\"; // String |  conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchConversationsMessageParticipantAttributes(conversationId, participantId, opts, callback);"
  },
  "patchconversationsmessageparticipantcommunication": {
    "operationId": "patchconversationsmessageparticipantcommunication",
    "functionName": "patchConversationsMessageParticipantCommunication",
    "signature": "patchConversationsMessageParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessageParticipantCommunicationRequest();\n\nlet conversationId = \"conversationId_example\"; // String |  conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Participant\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsMessageParticipantCommunication(conversationId, participantId, communicationId, body, callback);"
  },
  "patchconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "patchconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FacebookIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessagingIntegrationsFacebookIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | FacebookIntegrationUpdateRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, body, callback);"
  },
  "patchconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "patchconversationsmessagingintegrationsopenintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsOpenIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessagingIntegrationsOpenIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | OpenIntegrationUpdateRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsMessagingIntegrationsOpenIntegrationId(integrationId, body, callback);"
  },
  "patchconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "patchconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TwitterIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessagingIntegrationsTwitterIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | TwitterIntegrationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, body, callback);"
  },
  "patchconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "patchconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessagingIntegrationsWhatsappIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | WhatsAppIntegrationUpdateRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, body, callback);"
  },
  "patchconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "patchconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "patchConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "patchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchConversationsMessagingSupportedcontentSupportedContentIdRequest();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\nlet body = {}; // Object | SupportedContent\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, body, callback);"
  },
  "postconversationassign": {
    "operationId": "postconversationassign",
    "functionName": "postConversationAssign",
    "signature": "postConversationAssign(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationAssignRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet body = {}; // Object | Targeted user\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationAssign(conversationId, body, callback);"
  },
  "postconversationdisconnect": {
    "operationId": "postconversationdisconnect",
    "functionName": "postConversationDisconnect",
    "signature": "postConversationDisconnect(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationDisconnectRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationDisconnect(conversationId, callback);"
  },
  "postconversationparticipantcallbacks": {
    "operationId": "postconversationparticipantcallbacks",
    "functionName": "postConversationParticipantCallbacks",
    "signature": "postConversationParticipantCallbacks(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationParticipantCallbacksRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationParticipantCallbacks(conversationId, participantId, opts, callback);"
  },
  "postconversationparticipantdigits": {
    "operationId": "postconversationparticipantdigits",
    "functionName": "postConversationParticipantDigits",
    "signature": "postConversationParticipantDigits(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationParticipantDigitsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  'body': {} // Object | Digits\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationParticipantDigits(conversationId, participantId, opts, callback);"
  },
  "postconversationparticipantreplace": {
    "operationId": "postconversationparticipantreplace",
    "functionName": "postConversationParticipantReplace",
    "signature": "postConversationParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationParticipantReplaceRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet body = {}; // Object | Transfer request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationParticipantReplace(conversationId, participantId, body, callback);"
  },
  "postconversationparticipantsecureivrsessions": {
    "operationId": "postconversationparticipantsecureivrsessions",
    "functionName": "postConversationParticipantSecureivrsessions",
    "signature": "postConversationParticipantSecureivrsessions(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "SecureSession",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationParticipantSecureivrsessionsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationParticipantSecureivrsessions(conversationId, participantId, opts, callback);"
  },
  "postconversationscall": {
    "operationId": "postconversationscall",
    "functionName": "postConversationsCall",
    "signature": "postConversationsCall(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsCall(conversationId, body, callback);"
  },
  "postconversationscallparticipantcoach": {
    "operationId": "postconversationscallparticipantcoach",
    "functionName": "postConversationsCallParticipantCoach",
    "signature": "postConversationsCallParticipantCoach(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallParticipantCoachRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsCallParticipantCoach(conversationId, participantId, callback);"
  },
  "postconversationscallparticipantconsult": {
    "operationId": "postconversationscallparticipantconsult",
    "functionName": "postConversationsCallParticipantConsult",
    "signature": "postConversationsCallParticipantConsult(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallParticipantConsultRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Destination address & initial speak to\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsCallParticipantConsult(conversationId, participantId, body, callback);"
  },
  "postconversationscallparticipantmonitor": {
    "operationId": "postconversationscallparticipantmonitor",
    "functionName": "postConversationsCallParticipantMonitor",
    "signature": "postConversationsCallParticipantMonitor(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallParticipantMonitorRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsCallParticipantMonitor(conversationId, participantId, callback);"
  },
  "postconversationscallparticipantreplace": {
    "operationId": "postconversationscallparticipantreplace",
    "functionName": "postConversationsCallParticipantReplace",
    "signature": "postConversationsCallParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallParticipantReplaceRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsCallParticipantReplace(conversationId, participantId, body, callback);"
  },
  "postconversationscallparticipants": {
    "operationId": "postconversationscallparticipants",
    "functionName": "postConversationsCallParticipants",
    "signature": "postConversationsCallParticipants(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallParticipantsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsCallParticipants(conversationId, body, callback);"
  },
  "postconversationscallbackparticipantreplace": {
    "operationId": "postconversationscallbackparticipantreplace",
    "functionName": "postConversationsCallbackParticipantReplace",
    "signature": "postConversationsCallbackParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallbackParticipantReplaceRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsCallbackParticipantReplace(conversationId, participantId, body, callback);"
  },
  "postconversationscallbacks": {
    "operationId": "postconversationscallbacks",
    "functionName": "postConversationsCallbacks",
    "signature": "postConversationsCallbacks(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateCallbackResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallbacksRequest();\n\nlet body = {}; // Object | Callback\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsCallbacks(body, callback);"
  },
  "postconversationscallbacksbulkdisconnect": {
    "operationId": "postconversationscallbacksbulkdisconnect",
    "functionName": "postConversationsCallbacksBulkDisconnect",
    "signature": "postConversationsCallbacksBulkDisconnect(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallbacksBulkDisconnectRequest();\n\nlet body = {}; // Object | BulkCallbackDisconnectRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsCallbacksBulkDisconnect(body, callback);"
  },
  "postconversationscallbacksbulkupdate": {
    "operationId": "postconversationscallbacksbulkupdate",
    "functionName": "postConversationsCallbacksBulkUpdate",
    "signature": "postConversationsCallbacksBulkUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkCallbackPatchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallbacksBulkUpdateRequest();\n\nlet body = {}; // Object | BulkCallbackPatchRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsCallbacksBulkUpdate(body, callback);"
  },
  "postconversationscalls": {
    "operationId": "postconversationscalls",
    "functionName": "postConversationsCalls",
    "signature": "postConversationsCalls(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateCallResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCallsRequest();\n\nlet body = {}; // Object | Call request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsCalls(body, callback);"
  },
  "postconversationschatcommunicationmessages": {
    "operationId": "postconversationschatcommunicationmessages",
    "functionName": "postConversationsChatCommunicationMessages",
    "signature": "postConversationsChatCommunicationMessages(conversationId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsChatCommunicationMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Message\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsChatCommunicationMessages(conversationId, communicationId, body, callback);"
  },
  "postconversationschatcommunicationtyping": {
    "operationId": "postconversationschatcommunicationtyping",
    "functionName": "postConversationsChatCommunicationTyping",
    "signature": "postConversationsChatCommunicationTyping(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatTyping",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsChatCommunicationTypingRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsChatCommunicationTyping(conversationId, communicationId, callback);"
  },
  "postconversationschatparticipantreplace": {
    "operationId": "postconversationschatparticipantreplace",
    "functionName": "postConversationsChatParticipantReplace",
    "signature": "postConversationsChatParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsChatParticipantReplaceRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsChatParticipantReplace(conversationId, participantId, body, callback);"
  },
  "postconversationschats": {
    "operationId": "postconversationschats",
    "functionName": "postConversationsChats",
    "signature": "postConversationsChats(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChatConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsChatsRequest();\n\nlet body = {}; // Object | Create web chat request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsChats(body, callback);"
  },
  "postconversationscobrowsesessionparticipantreplace": {
    "operationId": "postconversationscobrowsesessionparticipantreplace",
    "functionName": "postConversationsCobrowsesessionParticipantReplace",
    "signature": "postConversationsCobrowsesessionParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsCobrowsesessionParticipantReplaceRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsCobrowsesessionParticipantReplace(conversationId, participantId, opts, callback);"
  },
  "postconversationsemailinboundmessages": {
    "operationId": "postconversationsemailinboundmessages",
    "functionName": "postConversationsEmailInboundmessages",
    "signature": "postConversationsEmailInboundmessages(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsEmailInboundmessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Send external email reply\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsEmailInboundmessages(conversationId, body, callback);"
  },
  "postconversationsemailmessages": {
    "operationId": "postconversationsemailmessages",
    "functionName": "postConversationsEmailMessages",
    "signature": "postConversationsEmailMessages(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsEmailMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Reply\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsEmailMessages(conversationId, body, callback);"
  },
  "postconversationsemailmessagesdraftattachmentscopy": {
    "operationId": "postconversationsemailmessagesdraftattachmentscopy",
    "functionName": "postConversationsEmailMessagesDraftAttachmentsCopy",
    "signature": "postConversationsEmailMessagesDraftAttachmentsCopy(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsEmailMessagesDraftAttachmentsCopyRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Copy Attachment Request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsEmailMessagesDraftAttachmentsCopy(conversationId, body, callback);"
  },
  "postconversationsemailparticipantreplace": {
    "operationId": "postconversationsemailparticipantreplace",
    "functionName": "postConversationsEmailParticipantReplace",
    "signature": "postConversationsEmailParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsEmailParticipantReplaceRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsEmailParticipantReplace(conversationId, participantId, body, callback);"
  },
  "postconversationsemails": {
    "operationId": "postconversationsemails",
    "functionName": "postConversationsEmails",
    "signature": "postConversationsEmails(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsEmailsRequest();\n\nlet body = {}; // Object | Create email request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsEmails(body, callback);"
  },
  "postconversationsfaxes": {
    "operationId": "postconversationsfaxes",
    "functionName": "postConversationsFaxes",
    "signature": "postConversationsFaxes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FaxSendResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsFaxesRequest();\n\nlet body = {}; // Object | Fax\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsFaxes(body, callback);"
  },
  "postconversationsmessagecommunicationmessages": {
    "operationId": "postconversationsmessagecommunicationmessages",
    "functionName": "postConversationsMessageCommunicationMessages",
    "signature": "postConversationsMessageCommunicationMessages(conversationId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessageData",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessageCommunicationMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | Message\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessageCommunicationMessages(conversationId, communicationId, body, callback);"
  },
  "postconversationsmessagecommunicationmessagesmedia": {
    "operationId": "postconversationsmessagecommunicationmessagesmedia",
    "functionName": "postConversationsMessageCommunicationMessagesMedia",
    "signature": "postConversationsMessageCommunicationMessagesMedia(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageMediaData",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessageCommunicationMessagesMediaRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet communicationId = \"communicationId_example\"; // String | communicationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessageCommunicationMessagesMedia(conversationId, communicationId, callback);"
  },
  "postconversationsmessagemessagesbulk": {
    "operationId": "postconversationsmessagemessagesbulk",
    "functionName": "postConversationsMessageMessagesBulk",
    "signature": "postConversationsMessageMessagesBulk(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TextMessageListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessageMessagesBulkRequest();\n\nlet conversationId = \"conversationId_example\"; // String | \nlet opts = { \n  'body': [{}] // Object | messageIds\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessageMessagesBulk(conversationId, opts, callback);"
  },
  "postconversationsmessageparticipantreplace": {
    "operationId": "postconversationsmessageparticipantreplace",
    "functionName": "postConversationsMessageParticipantReplace",
    "signature": "postConversationsMessageParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessageParticipantReplaceRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet body = {}; // Object | Transfer request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postConversationsMessageParticipantReplace(conversationId, participantId, body, callback);"
  },
  "postconversationsmessages": {
    "operationId": "postconversationsmessages",
    "functionName": "postConversationsMessages",
    "signature": "postConversationsMessages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessageConversation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagesRequest();\n\nlet body = {}; // Object | Create outbound messaging conversation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessages(body, callback);"
  },
  "postconversationsmessagesagentless": {
    "operationId": "postconversationsmessagesagentless",
    "functionName": "postConversationsMessagesAgentless",
    "signature": "postConversationsMessagesAgentless(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SendAgentlessOutboundMessageResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagesAgentlessRequest();\n\nlet body = {}; // Object | Create agentless outbound messaging request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagesAgentless(body, callback);"
  },
  "postconversationsmessagesinboundopen": {
    "operationId": "postconversationsmessagesinboundopen",
    "functionName": "postConversationsMessagesInboundOpen",
    "signature": "postConversationsMessagesInboundOpen(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenNormalizedMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagesInboundOpenRequest();\n\nlet body = {}; // Object | NormalizedMessage\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagesInboundOpen(body, callback);"
  },
  "postconversationsmessagingintegrationsfacebook": {
    "operationId": "postconversationsmessagingintegrationsfacebook",
    "functionName": "postConversationsMessagingIntegrationsFacebook",
    "signature": "postConversationsMessagingIntegrationsFacebook(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FacebookIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagingIntegrationsFacebookRequest();\n\nlet body = {}; // Object | FacebookIntegrationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagingIntegrationsFacebook(body, callback);"
  },
  "postconversationsmessagingintegrationsline": {
    "operationId": "postconversationsmessagingintegrationsline",
    "functionName": "postConversationsMessagingIntegrationsLine",
    "signature": "postConversationsMessagingIntegrationsLine(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LineIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagingIntegrationsLineRequest();\n\nlet body = {}; // Object | LineIntegrationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagingIntegrationsLine(body, callback);"
  },
  "postconversationsmessagingintegrationsopen": {
    "operationId": "postconversationsmessagingintegrationsopen",
    "functionName": "postConversationsMessagingIntegrationsOpen",
    "signature": "postConversationsMessagingIntegrationsOpen(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OpenIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagingIntegrationsOpenRequest();\n\nlet body = {}; // Object | OpenIntegrationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagingIntegrationsOpen(body, callback);"
  },
  "postconversationsmessagingintegrationstwitter": {
    "operationId": "postconversationsmessagingintegrationstwitter",
    "functionName": "postConversationsMessagingIntegrationsTwitter",
    "signature": "postConversationsMessagingIntegrationsTwitter(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TwitterIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagingIntegrationsTwitterRequest();\n\nlet body = {}; // Object | TwitterIntegrationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagingIntegrationsTwitter(body, callback);"
  },
  "postconversationsmessagingintegrationswhatsapp": {
    "operationId": "postconversationsmessagingintegrationswhatsapp",
    "functionName": "postConversationsMessagingIntegrationsWhatsapp",
    "signature": "postConversationsMessagingIntegrationsWhatsapp(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagingIntegrationsWhatsappRequest();\n\nlet body = {}; // Object | WhatsAppIntegrationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagingIntegrationsWhatsapp(body, callback);"
  },
  "postconversationsmessagingsupportedcontent": {
    "operationId": "postconversationsmessagingsupportedcontent",
    "functionName": "postConversationsMessagingSupportedcontent",
    "signature": "postConversationsMessagingSupportedcontent(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationsMessagingSupportedcontentRequest();\n\nlet body = {}; // Object | SupportedContent\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationsMessagingSupportedcontent(body, callback);"
  },
  "putconversationparticipantflaggedreason": {
    "operationId": "putconversationparticipantflaggedreason",
    "functionName": "putConversationParticipantFlaggedreason",
    "signature": "putConversationParticipantFlaggedreason(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationParticipantFlaggedreasonRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet participantId = \"participantId_example\"; // String | participant ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.putConversationParticipantFlaggedreason(conversationId, participantId, callback);"
  },
  "putconversationtags": {
    "operationId": "putconversationtags",
    "functionName": "putConversationTags",
    "signature": "putConversationTags(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationTagsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversation ID\nlet body = {}; // Object | Conversation Tags\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationTags(conversationId, body, callback);"
  },
  "putconversationscallparticipantcommunicationuuidata": {
    "operationId": "putconversationscallparticipantcommunicationuuidata",
    "functionName": "putConversationsCallParticipantCommunicationUuidata",
    "signature": "putConversationsCallParticipantCommunicationUuidata(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationsCallParticipantCommunicationUuidataRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet participantId = \"participantId_example\"; // String | participantId\nlet communicationId = \"communicationId_example\"; // String | communicationId\nlet body = {}; // Object | UUIData Request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationsCallParticipantCommunicationUuidata(conversationId, participantId, communicationId, body, callback);"
  },
  "putconversationsemailmessagesdraft": {
    "operationId": "putconversationsemailmessagesdraft",
    "functionName": "putConversationsEmailMessagesDraft",
    "signature": "putConversationsEmailMessagesDraft(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationsEmailMessagesDraftRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | Draft\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationsEmailMessagesDraft(conversationId, body, callback);"
  },
  "putconversationsmessagingintegrationslineintegrationid": {
    "operationId": "putconversationsmessagingintegrationslineintegrationid",
    "functionName": "putConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "putConversationsMessagingIntegrationsLineIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LineIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationsMessagingIntegrationsLineIntegrationIdRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration ID\nlet body = {}; // Object | LineIntegrationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationsMessagingIntegrationsLineIntegrationId(integrationId, body, callback);"
  },
  "putconversationsmessagingsupportedcontentdefault": {
    "operationId": "putconversationsmessagingsupportedcontentdefault",
    "functionName": "putConversationsMessagingSupportedcontentDefault",
    "signature": "putConversationsMessagingSupportedcontentDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationsMessagingSupportedcontentDefaultRequest();\n\nlet body = {}; // Object | SupportedContent\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationsMessagingSupportedcontentDefault(body, callback);"
  },
  "putconversationsmessagingthreadingtimeline": {
    "operationId": "putconversationsmessagingthreadingtimeline",
    "functionName": "putConversationsMessagingThreadingtimeline",
    "signature": "putConversationsMessagingThreadingtimeline(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ConversationThreadingWindow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationsMessagingThreadingtimelineRequest();\n\nlet body = {}; // Object | ConversationThreadingWindowRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationsMessagingThreadingtimeline(body, callback);"
  },
  "getdataextensionscoretype": {
    "operationId": "getdataextensionscoretype",
    "functionName": "getDataextensionsCoretype",
    "signature": "getDataextensionsCoretype(coretypeName)",
    "parameters": [
      {
        "name": "coretypeName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Coretype",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetDataextensionsCoretypeRequest();\n\nlet coretypeName = \"coretypeName_example\"; // String | The core type's name\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getDataextensionsCoretype(coretypeName, callback);"
  },
  "getdataextensionscoretypes": {
    "operationId": "getdataextensionscoretypes",
    "functionName": "getDataextensionsCoretypes",
    "signature": "getDataextensionsCoretypes()",
    "return": "CoretypeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetDataextensionsCoretypesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getDataextensionsCoretypes(callback);"
  },
  "getdataextensionslimits": {
    "operationId": "getdataextensionslimits",
    "functionName": "getDataextensionsLimits",
    "signature": "getDataextensionsLimits()",
    "return": "SchemaQuantityLimits",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetDataextensionsLimitsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getDataextensionsLimits(callback);"
  },
  "deleteexternalcontactscontact": {
    "operationId": "deleteexternalcontactscontact",
    "functionName": "deleteExternalcontactsContact",
    "signature": "deleteExternalcontactsContact(contactId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteExternalcontactsContactRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteExternalcontactsContact(contactId, callback);"
  },
  "deleteexternalcontactscontactnote": {
    "operationId": "deleteexternalcontactscontactnote",
    "functionName": "deleteExternalcontactsContactNote",
    "signature": "deleteExternalcontactsContactNote(contactId, noteId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteExternalcontactsContactNoteRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet noteId = \"noteId_example\"; // String | Note Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteExternalcontactsContactNote(contactId, noteId, callback);"
  },
  "deleteexternalcontactscontactsschema": {
    "operationId": "deleteexternalcontactscontactsschema",
    "functionName": "deleteExternalcontactsContactsSchema",
    "signature": "deleteExternalcontactsContactsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteExternalcontactsContactsSchemaRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteExternalcontactsContactsSchema(schemaId, callback);"
  },
  "deleteexternalcontactsorganization": {
    "operationId": "deleteexternalcontactsorganization",
    "functionName": "deleteExternalcontactsOrganization",
    "signature": "deleteExternalcontactsOrganization(externalOrganizationId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteExternalcontactsOrganizationRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteExternalcontactsOrganization(externalOrganizationId, callback);"
  },
  "deleteexternalcontactsorganizationnote": {
    "operationId": "deleteexternalcontactsorganizationnote",
    "functionName": "deleteExternalcontactsOrganizationNote",
    "signature": "deleteExternalcontactsOrganizationNote(externalOrganizationId, noteId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteExternalcontactsOrganizationNoteRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet noteId = \"noteId_example\"; // String | Note Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteExternalcontactsOrganizationNote(externalOrganizationId, noteId, callback);"
  },
  "deleteexternalcontactsorganizationtrustor": {
    "operationId": "deleteexternalcontactsorganizationtrustor",
    "functionName": "deleteExternalcontactsOrganizationTrustor",
    "signature": "deleteExternalcontactsOrganizationTrustor(externalOrganizationId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteExternalcontactsOrganizationTrustorRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteExternalcontactsOrganizationTrustor(externalOrganizationId, callback);"
  },
  "deleteexternalcontactsrelationship": {
    "operationId": "deleteexternalcontactsrelationship",
    "functionName": "deleteExternalcontactsRelationship",
    "signature": "deleteExternalcontactsRelationship(relationshipId)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteExternalcontactsRelationshipRequest();\n\nlet relationshipId = \"relationshipId_example\"; // String | Relationship Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteExternalcontactsRelationship(relationshipId, callback);"
  },
  "getexternalcontactscontact": {
    "operationId": "getexternalcontactscontact",
    "functionName": "getExternalcontactsContact",
    "signature": "getExternalcontactsContact(contactId, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ExternalContact",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | which fields, if any, to expand (externalOrganization,externalDataSources)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContact(contactId, opts, callback);"
  },
  "getexternalcontactscontactnote": {
    "operationId": "getexternalcontactscontactnote",
    "functionName": "getExternalcontactsContactNote",
    "signature": "getExternalcontactsContactNote(contactId, noteId, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Note",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactNoteRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContactNote(contactId, noteId, opts, callback);"
  },
  "getexternalcontactscontactnotes": {
    "operationId": "getexternalcontactscontactnotes",
    "functionName": "getExternalcontactsContactNotes",
    "signature": "getExternalcontactsContactNotes(contactId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NoteListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactNotesRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet opts = { \n  'pageSize': 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'pageNumber': 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'sortOrder': \"sortOrder_example\", // String | Sort order\n  'expand': [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContactNotes(contactId, opts, callback);"
  },
  "getexternalcontactscontacts": {
    "operationId": "getexternalcontactscontacts",
    "functionName": "getExternalcontactsContacts",
    "signature": "getExternalcontactsContacts(pageSize, pageNumber, q, sortOrder, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ContactListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactsRequest();\n\nlet opts = { \n  'pageSize': 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'pageNumber': 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'q': \"q_example\", // String | User supplied search keywords (no special syntax is currently supported)\n  'sortOrder': \"sortOrder_example\", // String | Sort order\n  'expand': [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContacts(opts, callback);"
  },
  "getexternalcontactscontactsschema": {
    "operationId": "getexternalcontactscontactsschema",
    "functionName": "getExternalcontactsContactsSchema",
    "signature": "getExternalcontactsContactsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactsSchemaRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContactsSchema(schemaId, callback);"
  },
  "getexternalcontactscontactsschemaversion": {
    "operationId": "getexternalcontactscontactsschemaversion",
    "functionName": "getExternalcontactsContactsSchemaVersion",
    "signature": "getExternalcontactsContactsSchemaVersion(schemaId, versionId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactsSchemaVersionRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet versionId = \"versionId_example\"; // String | Schema version\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContactsSchemaVersion(schemaId, versionId, callback);"
  },
  "getexternalcontactscontactsschemaversions": {
    "operationId": "getexternalcontactscontactsschemaversions",
    "functionName": "getExternalcontactsContactsSchemaVersions",
    "signature": "getExternalcontactsContactsSchemaVersions(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactsSchemaVersionsRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContactsSchemaVersions(schemaId, callback);"
  },
  "getexternalcontactscontactsschemas": {
    "operationId": "getexternalcontactscontactsschemas",
    "functionName": "getExternalcontactsContactsSchemas",
    "signature": "getExternalcontactsContactsSchemas()",
    "return": "DataSchemaListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsContactsSchemasRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsContactsSchemas(callback);"
  },
  "getexternalcontactsorganization": {
    "operationId": "getexternalcontactsorganization",
    "functionName": "getExternalcontactsOrganization",
    "signature": "getExternalcontactsOrganization(externalOrganizationId, expand, includeTrustors)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeTrustors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ExternalOrganization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet opts = { \n  'expand': \"expand_example\", // String | which fields, if any, to expand (externalDataSources)\n  'includeTrustors': true // Boolean | (true or false) whether or not to include trustor information embedded in the externalOrganization\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganization(externalOrganizationId, opts, callback);"
  },
  "getexternalcontactsorganizationcontacts": {
    "operationId": "getexternalcontactsorganizationcontacts",
    "functionName": "getExternalcontactsOrganizationContacts",
    "signature": "getExternalcontactsOrganizationContacts(externalOrganizationId, pageSize, pageNumber, q, sortOrder, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ContactListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationContactsRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet opts = { \n  'pageSize': 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'pageNumber': 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'q': \"q_example\", // String | User supplied search keywords (no special syntax is currently supported)\n  'sortOrder': \"sortOrder_example\", // String | Sort order\n  'expand': [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationContacts(externalOrganizationId, opts, callback);"
  },
  "getexternalcontactsorganizationnote": {
    "operationId": "getexternalcontactsorganizationnote",
    "functionName": "getExternalcontactsOrganizationNote",
    "signature": "getExternalcontactsOrganizationNote(externalOrganizationId, noteId, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Note",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationNoteRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationNote(externalOrganizationId, noteId, opts, callback);"
  },
  "getexternalcontactsorganizationnotes": {
    "operationId": "getexternalcontactsorganizationnotes",
    "functionName": "getExternalcontactsOrganizationNotes",
    "signature": "getExternalcontactsOrganizationNotes(externalOrganizationId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NoteListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationNotesRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet opts = { \n  'pageSize': 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'pageNumber': 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'sortOrder': \"sortOrder_example\", // String | Sort order\n  'expand': [\"expand_example\"] // [String] | which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationNotes(externalOrganizationId, opts, callback);"
  },
  "getexternalcontactsorganizationrelationships": {
    "operationId": "getexternalcontactsorganizationrelationships",
    "functionName": "getExternalcontactsOrganizationRelationships",
    "signature": "getExternalcontactsOrganizationRelationships(externalOrganizationId, pageSize, pageNumber, expand, sortOrder)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RelationshipListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationRelationshipsRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet opts = { \n  'pageSize': 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'pageNumber': 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'expand': \"expand_example\", // String | which fields, if any, to expand\n  'sortOrder': \"sortOrder_example\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationRelationships(externalOrganizationId, opts, callback);"
  },
  "getexternalcontactsorganizations": {
    "operationId": "getexternalcontactsorganizations",
    "functionName": "getExternalcontactsOrganizations",
    "signature": "getExternalcontactsOrganizations(pageSize, pageNumber, q, trustorId, sortOrder, expand, includeTrustors)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trustorId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includeTrustors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ExternalOrganizationListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationsRequest();\n\nlet opts = { \n  'pageSize': 20, // Number | Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'pageNumber': 1, // Number | Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\n  'q': \"q_example\", // String | Search query\n  'trustorId': [\"trustorId_example\"], // [String] | Search for external organizations by trustorIds (limit 25). If supplied, the 'q' parameters is ignored. Items are returned in the order requested\n  'sortOrder': \"sortOrder_example\", // String | Sort order\n  'expand': [\"expand_example\"], // [String] | which fields, if any, to expand\n  'includeTrustors': true // Boolean | (true or false) whether or not to include trustor information embedded in the externalOrganization\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizations(opts, callback);"
  },
  "getexternalcontactsorganizationsschema": {
    "operationId": "getexternalcontactsorganizationsschema",
    "functionName": "getExternalcontactsOrganizationsSchema",
    "signature": "getExternalcontactsOrganizationsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationsSchemaRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationsSchema(schemaId, callback);"
  },
  "getexternalcontactsorganizationsschemaversion": {
    "operationId": "getexternalcontactsorganizationsschemaversion",
    "functionName": "getExternalcontactsOrganizationsSchemaVersion",
    "signature": "getExternalcontactsOrganizationsSchemaVersion(schemaId, versionId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationsSchemaVersionRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet versionId = \"versionId_example\"; // String | Schema version\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationsSchemaVersion(schemaId, versionId, callback);"
  },
  "getexternalcontactsorganizationsschemaversions": {
    "operationId": "getexternalcontactsorganizationsschemaversions",
    "functionName": "getExternalcontactsOrganizationsSchemaVersions",
    "signature": "getExternalcontactsOrganizationsSchemaVersions(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationsSchemaVersionsRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationsSchemaVersions(schemaId, callback);"
  },
  "getexternalcontactsorganizationsschemas": {
    "operationId": "getexternalcontactsorganizationsschemas",
    "functionName": "getExternalcontactsOrganizationsSchemas",
    "signature": "getExternalcontactsOrganizationsSchemas()",
    "return": "DataSchemaListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsOrganizationsSchemasRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsOrganizationsSchemas(callback);"
  },
  "getexternalcontactsrelationship": {
    "operationId": "getexternalcontactsrelationship",
    "functionName": "getExternalcontactsRelationship",
    "signature": "getExternalcontactsRelationship(relationshipId, expand)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Relationship",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsRelationshipRequest();\n\nlet relationshipId = \"relationshipId_example\"; // String | Relationship Id\nlet opts = { \n  'expand': \"expand_example\" // String | which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsRelationship(relationshipId, opts, callback);"
  },
  "getexternalcontactsreversewhitepageslookup": {
    "operationId": "getexternalcontactsreversewhitepageslookup",
    "functionName": "getExternalcontactsReversewhitepageslookup",
    "signature": "getExternalcontactsReversewhitepageslookup(lookupVal, expand)",
    "parameters": [
      {
        "name": "lookupVal",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ReverseWhitepagesLookupResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsReversewhitepageslookupRequest();\n\nlet lookupVal = \"lookupVal_example\"; // String | User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names)\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | which field, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsReversewhitepageslookup(lookupVal, opts, callback);"
  },
  "getexternalcontactsscancontacts": {
    "operationId": "getexternalcontactsscancontacts",
    "functionName": "getExternalcontactsScanContacts",
    "signature": "getExternalcontactsScanContacts(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorContactListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsScanContactsRequest();\n\nlet opts = { \n  'limit': 56, // Number | The number of contacts per page; must be between 10 and 200, default is 100)\n  'cursor': \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsScanContacts(opts, callback);"
  },
  "getexternalcontactsscannotes": {
    "operationId": "getexternalcontactsscannotes",
    "functionName": "getExternalcontactsScanNotes",
    "signature": "getExternalcontactsScanNotes(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorNoteListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsScanNotesRequest();\n\nlet opts = { \n  'limit': 56, // Number | The number of notes per page; must be between 10 and 200, default is 100)\n  'cursor': \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsScanNotes(opts, callback);"
  },
  "getexternalcontactsscanorganizations": {
    "operationId": "getexternalcontactsscanorganizations",
    "functionName": "getExternalcontactsScanOrganizations",
    "signature": "getExternalcontactsScanOrganizations(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorOrganizationListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsScanOrganizationsRequest();\n\nlet opts = { \n  'limit': 56, // Number | The number of organizations per page; must be between 10 and 200, default is 100)\n  'cursor': \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsScanOrganizations(opts, callback);"
  },
  "getexternalcontactsscanrelationships": {
    "operationId": "getexternalcontactsscanrelationships",
    "functionName": "getExternalcontactsScanRelationships",
    "signature": "getExternalcontactsScanRelationships(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorRelationshipListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetExternalcontactsScanRelationshipsRequest();\n\nlet opts = { \n  'limit': 56, // Number | The number of relationships per page; must be between 10 and 200, default is 100)\n  'cursor': \"cursor_example\" // String | Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getExternalcontactsScanRelationships(opts, callback);"
  },
  "postexternalcontactsbulkcontacts": {
    "operationId": "postexternalcontactsbulkcontacts",
    "functionName": "postExternalcontactsBulkContacts",
    "signature": "postExternalcontactsBulkContacts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchContactsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkContactsRequest();\n\nlet body = {}; // Object | Contact ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkContacts(body, callback);"
  },
  "postexternalcontactsbulkcontactsadd": {
    "operationId": "postexternalcontactsbulkcontactsadd",
    "functionName": "postExternalcontactsBulkContactsAdd",
    "signature": "postExternalcontactsBulkContactsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkContactsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkContactsAddRequest();\n\nlet body = {}; // Object | Contacts\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkContactsAdd(body, callback);"
  },
  "postexternalcontactsbulkcontactsremove": {
    "operationId": "postexternalcontactsbulkcontactsremove",
    "functionName": "postExternalcontactsBulkContactsRemove",
    "signature": "postExternalcontactsBulkContactsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkContactsRemoveRequest();\n\nlet body = {}; // Object | Contact ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkContactsRemove(body, callback);"
  },
  "postexternalcontactsbulkcontactsupdate": {
    "operationId": "postexternalcontactsbulkcontactsupdate",
    "functionName": "postExternalcontactsBulkContactsUpdate",
    "signature": "postExternalcontactsBulkContactsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkContactsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkContactsUpdateRequest();\n\nlet body = {}; // Object | Contacts\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkContactsUpdate(body, callback);"
  },
  "postexternalcontactsbulknotes": {
    "operationId": "postexternalcontactsbulknotes",
    "functionName": "postExternalcontactsBulkNotes",
    "signature": "postExternalcontactsBulkNotes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchNotesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkNotesRequest();\n\nlet body = {}; // Object | Note ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkNotes(body, callback);"
  },
  "postexternalcontactsbulknotesadd": {
    "operationId": "postexternalcontactsbulknotesadd",
    "functionName": "postExternalcontactsBulkNotesAdd",
    "signature": "postExternalcontactsBulkNotesAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkNotesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkNotesAddRequest();\n\nlet body = {}; // Object | Notes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkNotesAdd(body, callback);"
  },
  "postexternalcontactsbulknotesremove": {
    "operationId": "postexternalcontactsbulknotesremove",
    "functionName": "postExternalcontactsBulkNotesRemove",
    "signature": "postExternalcontactsBulkNotesRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkNotesRemoveRequest();\n\nlet body = {}; // Object | Note ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkNotesRemove(body, callback);"
  },
  "postexternalcontactsbulknotesupdate": {
    "operationId": "postexternalcontactsbulknotesupdate",
    "functionName": "postExternalcontactsBulkNotesUpdate",
    "signature": "postExternalcontactsBulkNotesUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkNotesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkNotesUpdateRequest();\n\nlet body = {}; // Object | Notes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkNotesUpdate(body, callback);"
  },
  "postexternalcontactsbulkorganizations": {
    "operationId": "postexternalcontactsbulkorganizations",
    "functionName": "postExternalcontactsBulkOrganizations",
    "signature": "postExternalcontactsBulkOrganizations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchOrganizationsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkOrganizationsRequest();\n\nlet body = {}; // Object | Organizations ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkOrganizations(body, callback);"
  },
  "postexternalcontactsbulkorganizationsadd": {
    "operationId": "postexternalcontactsbulkorganizationsadd",
    "functionName": "postExternalcontactsBulkOrganizationsAdd",
    "signature": "postExternalcontactsBulkOrganizationsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkOrganizationsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkOrganizationsAddRequest();\n\nlet body = {}; // Object | Organizations\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkOrganizationsAdd(body, callback);"
  },
  "postexternalcontactsbulkorganizationsremove": {
    "operationId": "postexternalcontactsbulkorganizationsremove",
    "functionName": "postExternalcontactsBulkOrganizationsRemove",
    "signature": "postExternalcontactsBulkOrganizationsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkOrganizationsRemoveRequest();\n\nlet body = {}; // Object | Organization ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkOrganizationsRemove(body, callback);"
  },
  "postexternalcontactsbulkorganizationsupdate": {
    "operationId": "postexternalcontactsbulkorganizationsupdate",
    "functionName": "postExternalcontactsBulkOrganizationsUpdate",
    "signature": "postExternalcontactsBulkOrganizationsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkOrganizationsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkOrganizationsUpdateRequest();\n\nlet body = {}; // Object | Organizations\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkOrganizationsUpdate(body, callback);"
  },
  "postexternalcontactsbulkrelationships": {
    "operationId": "postexternalcontactsbulkrelationships",
    "functionName": "postExternalcontactsBulkRelationships",
    "signature": "postExternalcontactsBulkRelationships(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkFetchRelationshipsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkRelationshipsRequest();\n\nlet body = {}; // Object | Relationships ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkRelationships(body, callback);"
  },
  "postexternalcontactsbulkrelationshipsadd": {
    "operationId": "postexternalcontactsbulkrelationshipsadd",
    "functionName": "postExternalcontactsBulkRelationshipsAdd",
    "signature": "postExternalcontactsBulkRelationshipsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkRelationshipsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkRelationshipsAddRequest();\n\nlet body = {}; // Object | Relationships\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkRelationshipsAdd(body, callback);"
  },
  "postexternalcontactsbulkrelationshipsremove": {
    "operationId": "postexternalcontactsbulkrelationshipsremove",
    "functionName": "postExternalcontactsBulkRelationshipsRemove",
    "signature": "postExternalcontactsBulkRelationshipsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkRelationshipsRemoveRequest();\n\nlet body = {}; // Object | Relationships ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkRelationshipsRemove(body, callback);"
  },
  "postexternalcontactsbulkrelationshipsupdate": {
    "operationId": "postexternalcontactsbulkrelationshipsupdate",
    "functionName": "postExternalcontactsBulkRelationshipsUpdate",
    "signature": "postExternalcontactsBulkRelationshipsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BulkRelationshipsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsBulkRelationshipsUpdateRequest();\n\nlet body = {}; // Object | Relationships\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsBulkRelationshipsUpdate(body, callback);"
  },
  "postexternalcontactscontactnotes": {
    "operationId": "postexternalcontactscontactnotes",
    "functionName": "postExternalcontactsContactNotes",
    "signature": "postExternalcontactsContactNotes(contactId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsContactNotesRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet body = {}; // Object | ExternalContact\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsContactNotes(contactId, body, callback);"
  },
  "postexternalcontactscontacts": {
    "operationId": "postexternalcontactscontacts",
    "functionName": "postExternalcontactsContacts",
    "signature": "postExternalcontactsContacts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsContactsRequest();\n\nlet body = {}; // Object | ExternalContact\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsContacts(body, callback);"
  },
  "postexternalcontactscontactsschemas": {
    "operationId": "postexternalcontactscontactsschemas",
    "functionName": "postExternalcontactsContactsSchemas",
    "signature": "postExternalcontactsContactsSchemas(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsContactsSchemasRequest();\n\nlet body = {}; // Object | Schema\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsContactsSchemas(body, callback);"
  },
  "postexternalcontactsorganizationnotes": {
    "operationId": "postexternalcontactsorganizationnotes",
    "functionName": "postExternalcontactsOrganizationNotes",
    "signature": "postExternalcontactsOrganizationNotes(externalOrganizationId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsOrganizationNotesRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet body = {}; // Object | ExternalContact\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsOrganizationNotes(externalOrganizationId, body, callback);"
  },
  "postexternalcontactsorganizations": {
    "operationId": "postexternalcontactsorganizations",
    "functionName": "postExternalcontactsOrganizations",
    "signature": "postExternalcontactsOrganizations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalOrganization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsOrganizationsRequest();\n\nlet body = {}; // Object | ExternalOrganization\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsOrganizations(body, callback);"
  },
  "postexternalcontactsorganizationsschemas": {
    "operationId": "postexternalcontactsorganizationsschemas",
    "functionName": "postExternalcontactsOrganizationsSchemas",
    "signature": "postExternalcontactsOrganizationsSchemas(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsOrganizationsSchemasRequest();\n\nlet body = {}; // Object | Schema\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsOrganizationsSchemas(body, callback);"
  },
  "postexternalcontactsrelationships": {
    "operationId": "postexternalcontactsrelationships",
    "functionName": "postExternalcontactsRelationships",
    "signature": "postExternalcontactsRelationships(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Relationship",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostExternalcontactsRelationshipsRequest();\n\nlet body = {}; // Object | Relationship\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postExternalcontactsRelationships(body, callback);"
  },
  "putexternalcontactscontact": {
    "operationId": "putexternalcontactscontact",
    "functionName": "putExternalcontactsContact",
    "signature": "putExternalcontactsContact(contactId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsContactRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact ID\nlet body = {}; // Object | ExternalContact\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsContact(contactId, body, callback);"
  },
  "putexternalcontactscontactnote": {
    "operationId": "putexternalcontactscontactnote",
    "functionName": "putExternalcontactsContactNote",
    "signature": "putExternalcontactsContactNote(contactId, noteId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsContactNoteRequest();\n\nlet contactId = \"contactId_example\"; // String | ExternalContact Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet body = {}; // Object | Note\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsContactNote(contactId, noteId, body, callback);"
  },
  "putexternalcontactscontactsschema": {
    "operationId": "putexternalcontactscontactsschema",
    "functionName": "putExternalcontactsContactsSchema",
    "signature": "putExternalcontactsContactsSchema(schemaId, body)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsContactsSchemaRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet body = {}; // Object | Data Schema\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsContactsSchema(schemaId, body, callback);"
  },
  "putexternalcontactsconversation": {
    "operationId": "putexternalcontactsconversation",
    "functionName": "putExternalcontactsConversation",
    "signature": "putExternalcontactsConversation(body, conversationId)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsConversationRequest();\n\nlet body = {}; // Object | ConversationAssociation\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.putExternalcontactsConversation(body, conversationId, callback);"
  },
  "putexternalcontactsorganization": {
    "operationId": "putexternalcontactsorganization",
    "functionName": "putExternalcontactsOrganization",
    "signature": "putExternalcontactsOrganization(externalOrganizationId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExternalOrganization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsOrganizationRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet body = {}; // Object | ExternalOrganization\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsOrganization(externalOrganizationId, body, callback);"
  },
  "putexternalcontactsorganizationnote": {
    "operationId": "putexternalcontactsorganizationnote",
    "functionName": "putExternalcontactsOrganizationNote",
    "signature": "putExternalcontactsOrganizationNote(externalOrganizationId, noteId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsOrganizationNoteRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization Id\nlet noteId = \"noteId_example\"; // String | Note Id\nlet body = {}; // Object | Note\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsOrganizationNote(externalOrganizationId, noteId, body, callback);"
  },
  "putexternalcontactsorganizationtrustortrustorid": {
    "operationId": "putexternalcontactsorganizationtrustortrustorid",
    "functionName": "putExternalcontactsOrganizationTrustorTrustorId",
    "signature": "putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trustorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExternalOrganizationTrustorLink",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsOrganizationTrustorTrustorIdRequest();\n\nlet externalOrganizationId = \"externalOrganizationId_example\"; // String | External Organization ID\nlet trustorId = \"trustorId_example\"; // String | Trustor ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId, callback);"
  },
  "putexternalcontactsorganizationsschema": {
    "operationId": "putexternalcontactsorganizationsschema",
    "functionName": "putExternalcontactsOrganizationsSchema",
    "signature": "putExternalcontactsOrganizationsSchema(schemaId, body)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsOrganizationsSchemaRequest();\n\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet body = {}; // Object | Data Schema\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsOrganizationsSchema(schemaId, body, callback);"
  },
  "putexternalcontactsrelationship": {
    "operationId": "putexternalcontactsrelationship",
    "functionName": "putExternalcontactsRelationship",
    "signature": "putExternalcontactsRelationship(relationshipId, body)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Relationship",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutExternalcontactsRelationshipRequest();\n\nlet relationshipId = \"relationshipId_example\"; // String | Relationship Id\nlet body = {}; // Object | Relationship\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putExternalcontactsRelationship(relationshipId, body, callback);"
  },
  "deletefaxdocument": {
    "operationId": "deletefaxdocument",
    "functionName": "deleteFaxDocument",
    "signature": "deleteFaxDocument(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteFaxDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteFaxDocument(documentId, callback);"
  },
  "getfaxdocument": {
    "operationId": "getfaxdocument",
    "functionName": "getFaxDocument",
    "signature": "getFaxDocument(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FaxDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFaxDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFaxDocument(documentId, callback);"
  },
  "getfaxdocumentcontent": {
    "operationId": "getfaxdocumentcontent",
    "functionName": "getFaxDocumentContent",
    "signature": "getFaxDocumentContent(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DownloadResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFaxDocumentContentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFaxDocumentContent(documentId, callback);"
  },
  "getfaxdocuments": {
    "operationId": "getfaxdocuments",
    "functionName": "getFaxDocuments",
    "signature": "getFaxDocuments(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "FaxDocumentEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFaxDocumentsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFaxDocuments(opts, callback);"
  },
  "getfaxsummary": {
    "operationId": "getfaxsummary",
    "functionName": "getFaxSummary",
    "signature": "getFaxSummary()",
    "return": "FaxSummary",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFaxSummaryRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFaxSummary(callback);"
  },
  "putfaxdocument": {
    "operationId": "putfaxdocument",
    "functionName": "putFaxDocument",
    "signature": "putFaxDocument(documentId, body)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FaxDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutFaxDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet body = {}; // Object | Document\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putFaxDocument(documentId, body, callback);"
  },
  "getgamificationleaderboard": {
    "operationId": "getgamificationleaderboard",
    "functionName": "getGamificationLeaderboard",
    "signature": "getGamificationLeaderboard(startWorkday, endWorkday, metricId)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Leaderboard",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationLeaderboardRequest();\n\nlet startWorkday = \"2013-10-20\"; // String | Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'metricId': \"metricId_example\" // String | Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationLeaderboard(startWorkday, endWorkday, opts, callback);"
  },
  "getgamificationleaderboardall": {
    "operationId": "getgamificationleaderboardall",
    "functionName": "getGamificationLeaderboardAll",
    "signature": "getGamificationLeaderboardAll(filterType, filterId, startWorkday, endWorkday, metricId)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Leaderboard",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationLeaderboardAllRequest();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type. For example, division or performance profile Id\nlet startWorkday = \"2013-10-20\"; // String | Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'metricId': \"metricId_example\" // String | Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationLeaderboardAll(filterType, filterId, startWorkday, endWorkday, opts, callback);"
  },
  "getgamificationleaderboardallbestpoints": {
    "operationId": "getgamificationleaderboardallbestpoints",
    "functionName": "getGamificationLeaderboardAllBestpoints",
    "signature": "getGamificationLeaderboardAllBestpoints(filterType, filterId)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OverallBestPoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationLeaderboardAllBestpointsRequest();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type. For example, division or performance profile Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationLeaderboardAllBestpoints(filterType, filterId, callback);"
  },
  "getgamificationleaderboardbestpoints": {
    "operationId": "getgamificationleaderboardbestpoints",
    "functionName": "getGamificationLeaderboardBestpoints",
    "signature": "getGamificationLeaderboardBestpoints()",
    "return": "OverallBestPoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationLeaderboardBestpointsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationLeaderboardBestpoints(callback);"
  },
  "getgamificationmetric": {
    "operationId": "getgamificationmetric",
    "functionName": "getGamificationMetric",
    "signature": "getGamificationMetric(metricId, workday, performanceProfileId)",
    "parameters": [
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      },
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Metric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationMetricRequest();\n\nlet metricId = \"metricId_example\"; // String | metric Id\nlet opts = { \n  'workday': \"2013-10-20\", // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  'performanceProfileId': \"performanceProfileId_example\" // String | The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationMetric(metricId, opts, callback);"
  },
  "getgamificationmetricdefinition": {
    "operationId": "getgamificationmetricdefinition",
    "functionName": "getGamificationMetricdefinition",
    "signature": "getGamificationMetricdefinition(metricDefinitionId)",
    "parameters": [
      {
        "name": "metricDefinitionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MetricDefinition",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationMetricdefinitionRequest();\n\nlet metricDefinitionId = \"metricDefinitionId_example\"; // String | metric definition id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationMetricdefinition(metricDefinitionId, callback);"
  },
  "getgamificationmetricdefinitions": {
    "operationId": "getgamificationmetricdefinitions",
    "functionName": "getGamificationMetricdefinitions",
    "signature": "getGamificationMetricdefinitions()",
    "return": "GetMetricDefinitionsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationMetricdefinitionsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationMetricdefinitions(callback);"
  },
  "getgamificationmetrics": {
    "operationId": "getgamificationmetrics",
    "functionName": "getGamificationMetrics",
    "signature": "getGamificationMetrics(performanceProfileId, workday)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GetMetricsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationMetricsRequest();\n\nlet opts = { \n  'performanceProfileId': \"performanceProfileId_example\", // String | The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given.\n  'workday': \"2013-10-20\" // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationMetrics(opts, callback);"
  },
  "getgamificationprofile": {
    "operationId": "getgamificationprofile",
    "functionName": "getGamificationProfile",
    "signature": "getGamificationProfile(performanceProfileId)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfileRequest();\n\nlet performanceProfileId = \"performanceProfileId_example\"; // String | Performance Profile Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfile(performanceProfileId, callback);"
  },
  "getgamificationprofilemembers": {
    "operationId": "getgamificationprofilemembers",
    "functionName": "getGamificationProfileMembers",
    "signature": "getGamificationProfileMembers(performanceProfileId)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MemberListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfileMembersRequest();\n\nlet performanceProfileId = \"performanceProfileId_example\"; // String | Performance Profile Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfileMembers(performanceProfileId, callback);"
  },
  "getgamificationprofilemetric": {
    "operationId": "getgamificationprofilemetric",
    "functionName": "getGamificationProfileMetric",
    "signature": "getGamificationProfileMetric(profileId, metricId, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Metric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfileMetricRequest();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet metricId = \"metricId_example\"; // String | Metric Id\nlet opts = { \n  'workday': \"2013-10-20\" // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfileMetric(profileId, metricId, opts, callback);"
  },
  "getgamificationprofilemetrics": {
    "operationId": "getgamificationprofilemetrics",
    "functionName": "getGamificationProfileMetrics",
    "signature": "getGamificationProfileMetrics(profileId, expand, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GetMetricResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfileMetricsRequest();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  'workday': \"2013-10-20\" // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfileMetrics(profileId, opts, callback);"
  },
  "getgamificationprofilemetricsobjectivedetails": {
    "operationId": "getgamificationprofilemetricsobjectivedetails",
    "functionName": "getGamificationProfileMetricsObjectivedetails",
    "signature": "getGamificationProfileMetricsObjectivedetails(profileId, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GetMetricsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfileMetricsObjectivedetailsRequest();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet opts = { \n  'workday': \"2013-10-20\" // String | The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfileMetricsObjectivedetails(profileId, opts, callback);"
  },
  "getgamificationprofiles": {
    "operationId": "getgamificationprofiles",
    "functionName": "getGamificationProfiles",
    "signature": "getGamificationProfiles()",
    "return": "GetProfilesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfilesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfiles(callback);"
  },
  "getgamificationprofilesuser": {
    "operationId": "getgamificationprofilesuser",
    "functionName": "getGamificationProfilesUser",
    "signature": "getGamificationProfilesUser(userId, workday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfilesUserRequest();\n\nlet userId = \"userId_example\"; // String | \nlet opts = { \n  'workday': \"2013-10-20\" // String | Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfilesUser(userId, opts, callback);"
  },
  "getgamificationprofilesusersme": {
    "operationId": "getgamificationprofilesusersme",
    "functionName": "getGamificationProfilesUsersMe",
    "signature": "getGamificationProfilesUsersMe(workday)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationProfilesUsersMeRequest();\n\nlet opts = { \n  'workday': \"2013-10-20\" // String | Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationProfilesUsersMe(opts, callback);"
  },
  "getgamificationscorecards": {
    "operationId": "getgamificationscorecards",
    "functionName": "getGamificationScorecards",
    "signature": "getGamificationScorecards(workday, expand)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkdayMetricListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsRequest();\n\nlet workday = \"2013-10-20\"; // String | Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecards(workday, opts, callback);"
  },
  "getgamificationscorecardsattendance": {
    "operationId": "getgamificationscorecardsattendance",
    "functionName": "getGamificationScorecardsAttendance",
    "signature": "getGamificationScorecardsAttendance(startWorkday, endWorkday)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AttendanceStatusListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsAttendanceRequest();\n\nlet startWorkday = \"2013-10-20\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsAttendance(startWorkday, endWorkday, callback);"
  },
  "getgamificationscorecardsbestpoints": {
    "operationId": "getgamificationscorecardsbestpoints",
    "functionName": "getGamificationScorecardsBestpoints",
    "signature": "getGamificationScorecardsBestpoints()",
    "return": "UserBestPoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsBestpointsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsBestpoints(callback);"
  },
  "getgamificationscorecardspointsalltime": {
    "operationId": "getgamificationscorecardspointsalltime",
    "functionName": "getGamificationScorecardsPointsAlltime",
    "signature": "getGamificationScorecardsPointsAlltime(endWorkday)",
    "parameters": [
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AllTimePoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsPointsAlltimeRequest();\n\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsPointsAlltime(endWorkday, callback);"
  },
  "getgamificationscorecardspointsaverage": {
    "operationId": "getgamificationscorecardspointsaverage",
    "functionName": "getGamificationScorecardsPointsAverage",
    "signature": "getGamificationScorecardsPointsAverage(workday)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SingleWorkdayAveragePoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsPointsAverageRequest();\n\nlet workday = \"2013-10-20\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsPointsAverage(workday, callback);"
  },
  "getgamificationscorecardspointstrends": {
    "operationId": "getgamificationscorecardspointstrends",
    "functionName": "getGamificationScorecardsPointsTrends",
    "signature": "getGamificationScorecardsPointsTrends(startWorkday, endWorkday, dayOfWeek)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "dayOfWeek",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayPointsTrend",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsPointsTrendsRequest();\n\nlet startWorkday = \"2013-10-20\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'dayOfWeek': \"dayOfWeek_example\" // String | Optional filter to specify which day of weeks to be included in the response\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsPointsTrends(startWorkday, endWorkday, opts, callback);"
  },
  "getgamificationscorecardsuser": {
    "operationId": "getgamificationscorecardsuser",
    "functionName": "getGamificationScorecardsUser",
    "signature": "getGamificationScorecardsUser(userId, workday, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkdayMetricListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUserRequest();\n\nlet userId = \"userId_example\"; // String | \nlet workday = \"2013-10-20\"; // String | Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUser(userId, workday, opts, callback);"
  },
  "getgamificationscorecardsuserattendance": {
    "operationId": "getgamificationscorecardsuserattendance",
    "functionName": "getGamificationScorecardsUserAttendance",
    "signature": "getGamificationScorecardsUserAttendance(userId, startWorkday, endWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AttendanceStatusListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUserAttendanceRequest();\n\nlet userId = \"userId_example\"; // String | \nlet startWorkday = \"2013-10-20\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUserAttendance(userId, startWorkday, endWorkday, callback);"
  },
  "getgamificationscorecardsuserbestpoints": {
    "operationId": "getgamificationscorecardsuserbestpoints",
    "functionName": "getGamificationScorecardsUserBestpoints",
    "signature": "getGamificationScorecardsUserBestpoints(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserBestPoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUserBestpointsRequest();\n\nlet userId = \"userId_example\"; // String | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUserBestpoints(userId, callback);"
  },
  "getgamificationscorecardsuserpointsalltime": {
    "operationId": "getgamificationscorecardsuserpointsalltime",
    "functionName": "getGamificationScorecardsUserPointsAlltime",
    "signature": "getGamificationScorecardsUserPointsAlltime(userId, endWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AllTimePoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUserPointsAlltimeRequest();\n\nlet userId = \"userId_example\"; // String | \nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUserPointsAlltime(userId, endWorkday, callback);"
  },
  "getgamificationscorecardsuserpointstrends": {
    "operationId": "getgamificationscorecardsuserpointstrends",
    "functionName": "getGamificationScorecardsUserPointsTrends",
    "signature": "getGamificationScorecardsUserPointsTrends(userId, startWorkday, endWorkday, dayOfWeek)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "dayOfWeek",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayPointsTrend",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUserPointsTrendsRequest();\n\nlet userId = \"userId_example\"; // String | \nlet startWorkday = \"2013-10-20\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'dayOfWeek': \"dayOfWeek_example\" // String | Optional filter to specify which day of weeks to be included in the response\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUserPointsTrends(userId, startWorkday, endWorkday, opts, callback);"
  },
  "getgamificationscorecardsuservaluestrends": {
    "operationId": "getgamificationscorecardsuservaluestrends",
    "functionName": "getGamificationScorecardsUserValuesTrends",
    "signature": "getGamificationScorecardsUserValuesTrends(userId, startWorkday, endWorkday, timeZone)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUserValuesTrendsRequest();\n\nlet userId = \"userId_example\"; // String | \nlet startWorkday = \"2013-10-20\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'timeZone': \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUserValuesTrends(userId, startWorkday, endWorkday, opts, callback);"
  },
  "getgamificationscorecardsuserspointsaverage": {
    "operationId": "getgamificationscorecardsuserspointsaverage",
    "functionName": "getGamificationScorecardsUsersPointsAverage",
    "signature": "getGamificationScorecardsUsersPointsAverage(filterType, filterId, workday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SingleWorkdayAveragePoints",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUsersPointsAverageRequest();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet workday = \"2013-10-20\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUsersPointsAverage(filterType, filterId, workday, callback);"
  },
  "getgamificationscorecardsusersvaluesaverage": {
    "operationId": "getgamificationscorecardsusersvaluesaverage",
    "functionName": "getGamificationScorecardsUsersValuesAverage",
    "signature": "getGamificationScorecardsUsersValuesAverage(filterType, filterId, workday, timeZone)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SingleWorkdayAverageValues",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUsersValuesAverageRequest();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type. For example, division Id\nlet workday = \"2013-10-20\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'timeZone': \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUsersValuesAverage(filterType, filterId, workday, opts, callback);"
  },
  "getgamificationscorecardsusersvaluestrends": {
    "operationId": "getgamificationscorecardsusersvaluestrends",
    "functionName": "getGamificationScorecardsUsersValuesTrends",
    "signature": "getGamificationScorecardsUsersValuesTrends(filterType, filterId, startWorkday, endWorkday, timeZone)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsUsersValuesTrendsRequest();\n\nlet filterType = \"filterType_example\"; // String | Filter type for the query request.\nlet filterId = \"filterId_example\"; // String | ID for the filter type.\nlet startWorkday = \"2013-10-20\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'timeZone': \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsUsersValuesTrends(filterType, filterId, startWorkday, endWorkday, opts, callback);"
  },
  "getgamificationscorecardsvaluesaverage": {
    "operationId": "getgamificationscorecardsvaluesaverage",
    "functionName": "getGamificationScorecardsValuesAverage",
    "signature": "getGamificationScorecardsValuesAverage(workday, timeZone)",
    "parameters": [
      {
        "name": "workday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SingleWorkdayAverageValues",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsValuesAverageRequest();\n\nlet workday = \"2013-10-20\"; // String | The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'timeZone': \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsValuesAverage(workday, opts, callback);"
  },
  "getgamificationscorecardsvaluestrends": {
    "operationId": "getgamificationscorecardsvaluestrends",
    "functionName": "getGamificationScorecardsValuesTrends",
    "signature": "getGamificationScorecardsValuesTrends(startWorkday, endWorkday, filterType, referenceWorkday, timeZone)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "referenceWorkday",
        "type": "String",
        "required": "false"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationScorecardsValuesTrendsRequest();\n\nlet startWorkday = \"2013-10-20\"; // String | Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday = \"2013-10-20\"; // String | End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'filterType': \"filterType_example\", // String | Filter type for the query request. If not set, then the request is for the requesting user.\n  'referenceWorkday': \"2013-10-20\", // String | Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user's current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n  'timeZone': \"UTC\" // String | Timezone for the workday. Defaults to UTC\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationScorecardsValuesTrends(startWorkday, endWorkday, opts, callback);"
  },
  "getgamificationstatus": {
    "operationId": "getgamificationstatus",
    "functionName": "getGamificationStatus",
    "signature": "getGamificationStatus()",
    "return": "GamificationStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationStatusRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationStatus(callback);"
  },
  "getgamificationtemplate": {
    "operationId": "getgamificationtemplate",
    "functionName": "getGamificationTemplate",
    "signature": "getGamificationTemplate(templateId)",
    "parameters": [
      {
        "name": "templateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ObjectiveTemplate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationTemplateRequest();\n\nlet templateId = \"templateId_example\"; // String | template id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationTemplate(templateId, callback);"
  },
  "getgamificationtemplates": {
    "operationId": "getgamificationtemplates",
    "functionName": "getGamificationTemplates",
    "signature": "getGamificationTemplates()",
    "return": "GetTemplatesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGamificationTemplatesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGamificationTemplates(callback);"
  },
  "postgamificationmetrics": {
    "operationId": "postgamificationmetrics",
    "functionName": "postGamificationMetrics",
    "signature": "postGamificationMetrics(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationMetricsRequest();\n\nlet body = {}; // Object | Metric\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationMetrics(body, callback);"
  },
  "postgamificationprofileactivate": {
    "operationId": "postgamificationprofileactivate",
    "functionName": "postGamificationProfileActivate",
    "signature": "postGamificationProfileActivate(performanceProfileId)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationProfileActivateRequest();\n\nlet performanceProfileId = \"performanceProfileId_example\"; // String | Performance Profile Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationProfileActivate(performanceProfileId, callback);"
  },
  "postgamificationprofiledeactivate": {
    "operationId": "postgamificationprofiledeactivate",
    "functionName": "postGamificationProfileDeactivate",
    "signature": "postGamificationProfileDeactivate(performanceProfileId)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationProfileDeactivateRequest();\n\nlet performanceProfileId = \"performanceProfileId_example\"; // String | Performance Profile Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationProfileDeactivate(performanceProfileId, callback);"
  },
  "postgamificationprofilemembers": {
    "operationId": "postgamificationprofilemembers",
    "functionName": "postGamificationProfileMembers",
    "signature": "postGamificationProfileMembers(performanceProfileId, body)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Assignment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationProfileMembersRequest();\n\nlet performanceProfileId = \"performanceProfileId_example\"; // String | Performance Profile Id\nlet body = {}; // Object | assignUsers\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationProfileMembers(performanceProfileId, body, callback);"
  },
  "postgamificationprofilemembersvalidate": {
    "operationId": "postgamificationprofilemembersvalidate",
    "functionName": "postGamificationProfileMembersValidate",
    "signature": "postGamificationProfileMembersValidate(performanceProfileId, body)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AssignmentValidation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationProfileMembersValidateRequest();\n\nlet performanceProfileId = \"performanceProfileId_example\"; // String | Performance Profile Id\nlet body = {}; // Object | memberAssignments\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationProfileMembersValidate(performanceProfileId, body, callback);"
  },
  "postgamificationprofilemetriclink": {
    "operationId": "postgamificationprofilemetriclink",
    "functionName": "postGamificationProfileMetricLink",
    "signature": "postGamificationProfileMetricLink(sourceProfileId, sourceMetricId, body)",
    "parameters": [
      {
        "name": "sourceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceMetricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationProfileMetricLinkRequest();\n\nlet sourceProfileId = \"sourceProfileId_example\"; // String | Source Performance Profile Id\nlet sourceMetricId = \"sourceMetricId_example\"; // String | Source Metric Id\nlet body = {}; // Object | linkedMetric\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationProfileMetricLink(sourceProfileId, sourceMetricId, body, callback);"
  },
  "postgamificationprofilemetrics": {
    "operationId": "postgamificationprofilemetrics",
    "functionName": "postGamificationProfileMetrics",
    "signature": "postGamificationProfileMetrics(profileId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationProfileMetricsRequest();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet body = {}; // Object | Metric\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationProfileMetrics(profileId, body, callback);"
  },
  "postgamificationprofiles": {
    "operationId": "postgamificationprofiles",
    "functionName": "postGamificationProfiles",
    "signature": "postGamificationProfiles(body, copyMetrics)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "copyMetrics",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGamificationProfilesRequest();\n\nlet body = {}; // Object | performanceProfile\nlet opts = { \n  'copyMetrics': true // Boolean | Flag to copy metrics. If set to false, there will be no metrics associated with the new profile. If set to true or is absent (the default behavior), all metrics from the default profile will be copied over into the new profile.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGamificationProfiles(body, opts, callback);"
  },
  "putgamificationmetric": {
    "operationId": "putgamificationmetric",
    "functionName": "putGamificationMetric",
    "signature": "putGamificationMetric(metricId, body, performanceProfileId)",
    "parameters": [
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Metric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGamificationMetricRequest();\n\nlet metricId = \"metricId_example\"; // String | metric Id\nlet body = {}; // Object | Metric\nlet opts = { \n  'performanceProfileId': \"performanceProfileId_example\" // String | The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGamificationMetric(metricId, body, opts, callback);"
  },
  "putgamificationprofile": {
    "operationId": "putgamificationprofile",
    "functionName": "putGamificationProfile",
    "signature": "putGamificationProfile(performanceProfileId, body)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGamificationProfileRequest();\n\nlet performanceProfileId = \"performanceProfileId_example\"; // String | Performance Profile Id\nlet opts = { \n  'body': {} // Object | performanceProfile\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGamificationProfile(performanceProfileId, opts, callback);"
  },
  "putgamificationprofilemetric": {
    "operationId": "putgamificationprofilemetric",
    "functionName": "putGamificationProfileMetric",
    "signature": "putGamificationProfileMetric(profileId, metricId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGamificationProfileMetricRequest();\n\nlet profileId = \"profileId_example\"; // String | Performance Profile Id\nlet metricId = \"metricId_example\"; // String | Metric Id\nlet body = {}; // Object | Metric\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGamificationProfileMetric(profileId, metricId, body, callback);"
  },
  "putgamificationstatus": {
    "operationId": "putgamificationstatus",
    "functionName": "putGamificationStatus",
    "signature": "putGamificationStatus(status)",
    "parameters": [
      {
        "name": "status",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GamificationStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGamificationStatusRequest();\n\nlet status = {}; // Object | Gamification status\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGamificationStatus(status, callback);"
  },
  "getgdprrequest": {
    "operationId": "getgdprrequest",
    "functionName": "getGdprRequest",
    "signature": "getGdprRequest(requestId)",
    "parameters": [
      {
        "name": "requestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GDPRRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGdprRequestRequest();\n\nlet requestId = \"requestId_example\"; // String | Request id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGdprRequest(requestId, callback);"
  },
  "getgdprrequests": {
    "operationId": "getgdprrequests",
    "functionName": "getGdprRequests",
    "signature": "getGdprRequests(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "GDPRRequestEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGdprRequestsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGdprRequests(opts, callback);"
  },
  "getgdprsubjects": {
    "operationId": "getgdprsubjects",
    "functionName": "getGdprSubjects",
    "signature": "getGdprSubjects(searchType, searchValue)",
    "parameters": [
      {
        "name": "searchType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "searchValue",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GDPRSubjectEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGdprSubjectsRequest();\n\nlet searchType = \"searchType_example\"; // String | Search Type\nlet searchValue = \"searchValue_example\"; // String | Search Value\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGdprSubjects(searchType, searchValue, callback);"
  },
  "postgdprrequests": {
    "operationId": "postgdprrequests",
    "functionName": "postGdprRequests",
    "signature": "postGdprRequests(body, deleteConfirmed)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "deleteConfirmed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "GDPRRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGdprRequestsRequest();\n\nlet body = {}; // Object | GDPR request\nlet opts = { \n  'deleteConfirmed': false // Boolean | Confirm delete\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGdprRequests(body, opts, callback);"
  },
  "getgeolocationssettings": {
    "operationId": "getgeolocationssettings",
    "functionName": "getGeolocationsSettings",
    "signature": "getGeolocationsSettings()",
    "return": "GeolocationSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGeolocationsSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGeolocationsSettings(callback);"
  },
  "getusergeolocation": {
    "operationId": "getusergeolocation",
    "functionName": "getUserGeolocation",
    "signature": "getUserGeolocation(userId, clientId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Geolocation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserGeolocationRequest();\n\nlet userId = \"userId_example\"; // String | user Id\nlet clientId = \"clientId_example\"; // String | client Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserGeolocation(userId, clientId, callback);"
  },
  "patchgeolocationssettings": {
    "operationId": "patchgeolocationssettings",
    "functionName": "patchGeolocationsSettings",
    "signature": "patchGeolocationsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GeolocationSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchGeolocationsSettingsRequest();\n\nlet body = {}; // Object | Geolocation settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchGeolocationsSettings(body, callback);"
  },
  "patchusergeolocation": {
    "operationId": "patchusergeolocation",
    "functionName": "patchUserGeolocation",
    "signature": "patchUserGeolocation(userId, clientId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Geolocation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserGeolocationRequest();\n\nlet userId = \"userId_example\"; // String | user Id\nlet clientId = \"clientId_example\"; // String | client Id\nlet body = {}; // Object | Geolocation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserGeolocation(userId, clientId, body, callback);"
  },
  "deletegreeting": {
    "operationId": "deletegreeting",
    "functionName": "deleteGreeting",
    "signature": "deleteGreeting(greetingId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteGreetingRequest();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteGreeting(greetingId, callback);"
  },
  "getgreeting": {
    "operationId": "getgreeting",
    "functionName": "getGreeting",
    "signature": "getGreeting(greetingId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGreetingRequest();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGreeting(greetingId, callback);"
  },
  "getgreetingmedia": {
    "operationId": "getgreetingmedia",
    "functionName": "getGreetingMedia",
    "signature": "getGreetingMedia(greetingId, formatId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GreetingMediaInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGreetingMediaRequest();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\nlet opts = { \n  'formatId': \"WAV\" // String | The desired media format.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGreetingMedia(greetingId, opts, callback);"
  },
  "getgreetings": {
    "operationId": "getgreetings",
    "functionName": "getGreetings",
    "signature": "getGreetings(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DomainEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGreetingsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGreetings(opts, callback);"
  },
  "getgreetingsdefaults": {
    "operationId": "getgreetingsdefaults",
    "functionName": "getGreetingsDefaults",
    "signature": "getGreetingsDefaults()",
    "return": "DefaultGreetingList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGreetingsDefaultsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGreetingsDefaults(callback);"
  },
  "getgroupgreetings": {
    "operationId": "getgroupgreetings",
    "functionName": "getGroupGreetings",
    "signature": "getGroupGreetings(groupId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "GreetingListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupGreetingsRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroupGreetings(groupId, opts, callback);"
  },
  "getgroupgreetingsdefaults": {
    "operationId": "getgroupgreetingsdefaults",
    "functionName": "getGroupGreetingsDefaults",
    "signature": "getGroupGreetingsDefaults(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupGreetingsDefaultsRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroupGreetingsDefaults(groupId, callback);"
  },
  "getusergreetings": {
    "operationId": "getusergreetings",
    "functionName": "getUserGreetings",
    "signature": "getUserGreetings(userId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "DomainEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserGreetingsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserGreetings(userId, opts, callback);"
  },
  "getusergreetingsdefaults": {
    "operationId": "getusergreetingsdefaults",
    "functionName": "getUserGreetingsDefaults",
    "signature": "getUserGreetingsDefaults(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserGreetingsDefaultsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserGreetingsDefaults(userId, callback);"
  },
  "postgreetings": {
    "operationId": "postgreetings",
    "functionName": "postGreetings",
    "signature": "postGreetings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGreetingsRequest();\n\nlet body = {}; // Object | The Greeting to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGreetings(body, callback);"
  },
  "postgroupgreetings": {
    "operationId": "postgroupgreetings",
    "functionName": "postGroupGreetings",
    "signature": "postGroupGreetings(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGroupGreetingsRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | The Greeting to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGroupGreetings(groupId, body, callback);"
  },
  "postusergreetings": {
    "operationId": "postusergreetings",
    "functionName": "postUserGreetings",
    "signature": "postUserGreetings(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUserGreetingsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The Greeting to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUserGreetings(userId, body, callback);"
  },
  "putgreeting": {
    "operationId": "putgreeting",
    "functionName": "putGreeting",
    "signature": "putGreeting(greetingId, body)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGreetingRequest();\n\nlet greetingId = \"greetingId_example\"; // String | Greeting ID\nlet body = {}; // Object | The updated Greeting\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGreeting(greetingId, body, callback);"
  },
  "putgreetingsdefaults": {
    "operationId": "putgreetingsdefaults",
    "functionName": "putGreetingsDefaults",
    "signature": "putGreetingsDefaults(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGreetingsDefaultsRequest();\n\nlet body = {}; // Object | The updated defaultGreetingList\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGreetingsDefaults(body, callback);"
  },
  "putgroupgreetingsdefaults": {
    "operationId": "putgroupgreetingsdefaults",
    "functionName": "putGroupGreetingsDefaults",
    "signature": "putGroupGreetingsDefaults(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGroupGreetingsDefaultsRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | The updated defaultGreetingList\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGroupGreetingsDefaults(groupId, body, callback);"
  },
  "putusergreetingsdefaults": {
    "operationId": "putusergreetingsdefaults",
    "functionName": "putUserGreetingsDefaults",
    "signature": "putUserGreetingsDefaults(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserGreetingsDefaultsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The updated defaultGreetingList\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserGreetingsDefaults(userId, body, callback);"
  },
  "deletegroup": {
    "operationId": "deletegroup",
    "functionName": "deleteGroup",
    "signature": "deleteGroup(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteGroupRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteGroup(groupId, callback);"
  },
  "deletegroupmembers": {
    "operationId": "deletegroupmembers",
    "functionName": "deleteGroupMembers",
    "signature": "deleteGroupMembers(groupId, ids)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteGroupMembersRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet ids = \"ids_example\"; // String | Comma separated list of userIds to remove\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteGroupMembers(groupId, ids, callback);"
  },
  "getfieldconfig": {
    "operationId": "getfieldconfig",
    "functionName": "getFieldconfig",
    "signature": "getFieldconfig(type)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FieldConfig",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetFieldconfigRequest();\n\nlet type = \"type_example\"; // String | Field type\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getFieldconfig(type, callback);"
  },
  "getgroup": {
    "operationId": "getgroup",
    "functionName": "getGroup",
    "signature": "getGroup(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroup(groupId, callback);"
  },
  "getgroupindividuals": {
    "operationId": "getgroupindividuals",
    "functionName": "getGroupIndividuals",
    "signature": "getGroupIndividuals(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupIndividualsRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroupIndividuals(groupId, callback);"
  },
  "getgroupmembers": {
    "operationId": "getgroupmembers",
    "functionName": "getGroupMembers",
    "signature": "getGroupMembers(groupId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupMembersRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ASC\", // String | Ascending or descending sort order\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroupMembers(groupId, opts, callback);"
  },
  "getgroupprofile": {
    "operationId": "getgroupprofile",
    "functionName": "getGroupProfile",
    "signature": "getGroupProfile(groupId, fields)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fields",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupProfileRequest();\n\nlet groupId = \"groupId_example\"; // String | groupId\nlet opts = { \n  'fields': \"fields_example\" // String | Comma separated fields to return.  Allowable values can be found by querying /api/v2/fieldconfig?type=group and using the key for the elements returned by the fieldList\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroupProfile(groupId, opts, callback);"
  },
  "getgroups": {
    "operationId": "getgroups",
    "functionName": "getGroups",
    "signature": "getGroups(pageSize, pageNumber, id, jabberId, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jabberId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'id': [\"id_example\"], // [String] | id\n  'jabberId': [\"jabberId_example\"], // [String] | A list of jabberIds to fetch by bulk (cannot be used with the \\\"id\\\" parameter)\n  'sortOrder': \"ASC\" // String | Ascending or descending sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroups(opts, callback);"
  },
  "getgroupssearch": {
    "operationId": "getgroupssearch",
    "functionName": "getGroupsSearch",
    "signature": "getGroupsSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "GroupsSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetGroupsSearchRequest();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getGroupsSearch(q64, opts, callback);"
  },
  "getprofilesgroups": {
    "operationId": "getprofilesgroups",
    "functionName": "getProfilesGroups",
    "signature": "getProfilesGroups(pageSize, pageNumber, id, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupProfileEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetProfilesGroupsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'id': [\"id_example\"], // [String] | id\n  'sortOrder': \"ASC\" // String | Ascending or descending sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getProfilesGroups(opts, callback);"
  },
  "postgroupmembers": {
    "operationId": "postgroupmembers",
    "functionName": "postGroupMembers",
    "signature": "postGroupMembers(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGroupMembersRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | Add members\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGroupMembers(groupId, body, callback);"
  },
  "postgroups": {
    "operationId": "postgroups",
    "functionName": "postGroups",
    "signature": "postGroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGroupsRequest();\n\nlet body = {}; // Object | Group\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGroups(body, callback);"
  },
  "postgroupssearch": {
    "operationId": "postgroupssearch",
    "functionName": "postGroupsSearch",
    "signature": "postGroupsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GroupsSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostGroupsSearchRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postGroupsSearch(body, callback);"
  },
  "putgroup": {
    "operationId": "putgroup",
    "functionName": "putGroup",
    "signature": "putGroup(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutGroupRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  'body': {} // Object | Group\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putGroup(groupId, opts, callback);"
  },
  "deleteidentityprovidersadfs": {
    "operationId": "deleteidentityprovidersadfs",
    "functionName": "deleteIdentityprovidersAdfs",
    "signature": "deleteIdentityprovidersAdfs()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersAdfsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersAdfs(callback);"
  },
  "deleteidentityproviderscic": {
    "operationId": "deleteidentityproviderscic",
    "functionName": "deleteIdentityprovidersCic",
    "signature": "deleteIdentityprovidersCic()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersCicRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersCic(callback);"
  },
  "deleteidentityprovidersgeneric": {
    "operationId": "deleteidentityprovidersgeneric",
    "functionName": "deleteIdentityprovidersGeneric",
    "signature": "deleteIdentityprovidersGeneric()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersGenericRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersGeneric(callback);"
  },
  "deleteidentityprovidersgsuite": {
    "operationId": "deleteidentityprovidersgsuite",
    "functionName": "deleteIdentityprovidersGsuite",
    "signature": "deleteIdentityprovidersGsuite()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersGsuiteRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersGsuite(callback);"
  },
  "deleteidentityprovidersidentitynow": {
    "operationId": "deleteidentityprovidersidentitynow",
    "functionName": "deleteIdentityprovidersIdentitynow",
    "signature": "deleteIdentityprovidersIdentitynow()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersIdentitynowRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersIdentitynow(callback);"
  },
  "deleteidentityprovidersokta": {
    "operationId": "deleteidentityprovidersokta",
    "functionName": "deleteIdentityprovidersOkta",
    "signature": "deleteIdentityprovidersOkta()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersOktaRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersOkta(callback);"
  },
  "deleteidentityprovidersonelogin": {
    "operationId": "deleteidentityprovidersonelogin",
    "functionName": "deleteIdentityprovidersOnelogin",
    "signature": "deleteIdentityprovidersOnelogin()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersOneloginRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersOnelogin(callback);"
  },
  "deleteidentityprovidersping": {
    "operationId": "deleteidentityprovidersping",
    "functionName": "deleteIdentityprovidersPing",
    "signature": "deleteIdentityprovidersPing()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersPingRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersPing(callback);"
  },
  "deleteidentityproviderspurecloud": {
    "operationId": "deleteidentityproviderspurecloud",
    "functionName": "deleteIdentityprovidersPurecloud",
    "signature": "deleteIdentityprovidersPurecloud()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersPurecloudRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersPurecloud(callback);"
  },
  "deleteidentityproviderspureengage": {
    "operationId": "deleteidentityproviderspureengage",
    "functionName": "deleteIdentityprovidersPureengage",
    "signature": "deleteIdentityprovidersPureengage()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersPureengageRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersPureengage(callback);"
  },
  "deleteidentityproviderssalesforce": {
    "operationId": "deleteidentityproviderssalesforce",
    "functionName": "deleteIdentityprovidersSalesforce",
    "signature": "deleteIdentityprovidersSalesforce()",
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIdentityprovidersSalesforceRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIdentityprovidersSalesforce(callback);"
  },
  "getidentityproviders": {
    "operationId": "getidentityproviders",
    "functionName": "getIdentityproviders",
    "signature": "getIdentityproviders()",
    "return": "OAuthProviderEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityproviders(callback);"
  },
  "getidentityprovidersadfs": {
    "operationId": "getidentityprovidersadfs",
    "functionName": "getIdentityprovidersAdfs",
    "signature": "getIdentityprovidersAdfs()",
    "return": "ADFS",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersAdfsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersAdfs(callback);"
  },
  "getidentityproviderscic": {
    "operationId": "getidentityproviderscic",
    "functionName": "getIdentityprovidersCic",
    "signature": "getIdentityprovidersCic()",
    "return": "CustomerInteractionCenter",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersCicRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersCic(callback);"
  },
  "getidentityprovidersgeneric": {
    "operationId": "getidentityprovidersgeneric",
    "functionName": "getIdentityprovidersGeneric",
    "signature": "getIdentityprovidersGeneric()",
    "return": "GenericSAML",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersGenericRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersGeneric(callback);"
  },
  "getidentityprovidersgsuite": {
    "operationId": "getidentityprovidersgsuite",
    "functionName": "getIdentityprovidersGsuite",
    "signature": "getIdentityprovidersGsuite()",
    "return": "GSuite",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersGsuiteRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersGsuite(callback);"
  },
  "getidentityprovidersidentitynow": {
    "operationId": "getidentityprovidersidentitynow",
    "functionName": "getIdentityprovidersIdentitynow",
    "signature": "getIdentityprovidersIdentitynow()",
    "return": "IdentityNow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersIdentitynowRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersIdentitynow(callback);"
  },
  "getidentityprovidersokta": {
    "operationId": "getidentityprovidersokta",
    "functionName": "getIdentityprovidersOkta",
    "signature": "getIdentityprovidersOkta()",
    "return": "Okta",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersOktaRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersOkta(callback);"
  },
  "getidentityprovidersonelogin": {
    "operationId": "getidentityprovidersonelogin",
    "functionName": "getIdentityprovidersOnelogin",
    "signature": "getIdentityprovidersOnelogin()",
    "return": "OneLogin",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersOneloginRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersOnelogin(callback);"
  },
  "getidentityprovidersping": {
    "operationId": "getidentityprovidersping",
    "functionName": "getIdentityprovidersPing",
    "signature": "getIdentityprovidersPing()",
    "return": "PingIdentity",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersPingRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersPing(callback);"
  },
  "getidentityproviderspurecloud": {
    "operationId": "getidentityproviderspurecloud",
    "functionName": "getIdentityprovidersPurecloud",
    "signature": "getIdentityprovidersPurecloud()",
    "return": "PureCloud",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersPurecloudRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersPurecloud(callback);"
  },
  "getidentityproviderspureengage": {
    "operationId": "getidentityproviderspureengage",
    "functionName": "getIdentityprovidersPureengage",
    "signature": "getIdentityprovidersPureengage()",
    "return": "PureEngage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersPureengageRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersPureengage(callback);"
  },
  "getidentityproviderssalesforce": {
    "operationId": "getidentityproviderssalesforce",
    "functionName": "getIdentityprovidersSalesforce",
    "signature": "getIdentityprovidersSalesforce()",
    "return": "Salesforce",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIdentityprovidersSalesforceRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIdentityprovidersSalesforce(callback);"
  },
  "putidentityprovidersadfs": {
    "operationId": "putidentityprovidersadfs",
    "functionName": "putIdentityprovidersAdfs",
    "signature": "putIdentityprovidersAdfs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersAdfsRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersAdfs(body, callback);"
  },
  "putidentityproviderscic": {
    "operationId": "putidentityproviderscic",
    "functionName": "putIdentityprovidersCic",
    "signature": "putIdentityprovidersCic(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersCicRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersCic(body, callback);"
  },
  "putidentityprovidersgeneric": {
    "operationId": "putidentityprovidersgeneric",
    "functionName": "putIdentityprovidersGeneric",
    "signature": "putIdentityprovidersGeneric(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersGenericRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersGeneric(body, callback);"
  },
  "putidentityprovidersgsuite": {
    "operationId": "putidentityprovidersgsuite",
    "functionName": "putIdentityprovidersGsuite",
    "signature": "putIdentityprovidersGsuite(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersGsuiteRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersGsuite(body, callback);"
  },
  "putidentityprovidersidentitynow": {
    "operationId": "putidentityprovidersidentitynow",
    "functionName": "putIdentityprovidersIdentitynow",
    "signature": "putIdentityprovidersIdentitynow(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IdentityNow",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersIdentitynowRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersIdentitynow(body, callback);"
  },
  "putidentityprovidersokta": {
    "operationId": "putidentityprovidersokta",
    "functionName": "putIdentityprovidersOkta",
    "signature": "putIdentityprovidersOkta(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersOktaRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersOkta(body, callback);"
  },
  "putidentityprovidersonelogin": {
    "operationId": "putidentityprovidersonelogin",
    "functionName": "putIdentityprovidersOnelogin",
    "signature": "putIdentityprovidersOnelogin(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersOneloginRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersOnelogin(body, callback);"
  },
  "putidentityprovidersping": {
    "operationId": "putidentityprovidersping",
    "functionName": "putIdentityprovidersPing",
    "signature": "putIdentityprovidersPing(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersPingRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersPing(body, callback);"
  },
  "putidentityproviderspurecloud": {
    "operationId": "putidentityproviderspurecloud",
    "functionName": "putIdentityprovidersPurecloud",
    "signature": "putIdentityprovidersPurecloud(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersPurecloudRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersPurecloud(body, callback);"
  },
  "putidentityproviderspureengage": {
    "operationId": "putidentityproviderspureengage",
    "functionName": "putIdentityprovidersPureengage",
    "signature": "putIdentityprovidersPureengage(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersPureengageRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersPureengage(body, callback);"
  },
  "putidentityproviderssalesforce": {
    "operationId": "putidentityproviderssalesforce",
    "functionName": "putIdentityprovidersSalesforce",
    "signature": "putIdentityprovidersSalesforce(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIdentityprovidersSalesforceRequest();\n\nlet body = {}; // Object | Provider\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIdentityprovidersSalesforce(body, callback);"
  },
  "deleteintegration": {
    "operationId": "deleteintegration",
    "functionName": "deleteIntegration",
    "signature": "deleteIntegration(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Integration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIntegrationRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteIntegration(integrationId, callback);"
  },
  "deleteintegrationsaction": {
    "operationId": "deleteintegrationsaction",
    "functionName": "deleteIntegrationsAction",
    "signature": "deleteIntegrationsAction(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIntegrationsActionRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteIntegrationsAction(actionId, callback);"
  },
  "deleteintegrationsactiondraft": {
    "operationId": "deleteintegrationsactiondraft",
    "functionName": "deleteIntegrationsActionDraft",
    "signature": "deleteIntegrationsActionDraft(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIntegrationsActionDraftRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteIntegrationsActionDraft(actionId, callback);"
  },
  "deleteintegrationscredential": {
    "operationId": "deleteintegrationscredential",
    "functionName": "deleteIntegrationsCredential",
    "signature": "deleteIntegrationsCredential(credentialId)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteIntegrationsCredentialRequest();\n\nlet credentialId = \"credentialId_example\"; // String | Credential ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteIntegrationsCredential(credentialId, callback);"
  },
  "getintegration": {
    "operationId": "getintegration",
    "functionName": "getIntegration",
    "signature": "getIntegration(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\" // String | Previous page token\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegration(integrationId, opts, callback);"
  },
  "getintegrationconfigcurrent": {
    "operationId": "getintegrationconfigcurrent",
    "functionName": "getIntegrationConfigCurrent",
    "signature": "getIntegrationConfigCurrent(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationConfiguration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationConfigCurrentRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationConfigCurrent(integrationId, callback);"
  },
  "getintegrations": {
    "operationId": "getintegrations",
    "functionName": "getIntegrations",
    "signature": "getIntegrations(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\" // String | Previous page token\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrations(opts, callback);"
  },
  "getintegrationsaction": {
    "operationId": "getintegrationsaction",
    "functionName": "getIntegrationsAction",
    "signature": "getIntegrationsAction(actionId, expand, includeConfig)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeConfig",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet opts = { \n  'expand': \"expand_example\", // String | Indicates a field in the response which should be expanded.\n  'includeConfig': false // Boolean | Return config in response.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsAction(actionId, opts, callback);"
  },
  "getintegrationsactiondraft": {
    "operationId": "getintegrationsactiondraft",
    "functionName": "getIntegrationsActionDraft",
    "signature": "getIntegrationsActionDraft(actionId, expand, includeConfig)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeConfig",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionDraftRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet opts = { \n  'expand': \"expand_example\", // String | Indicates a field in the response which should be expanded.\n  'includeConfig': false // Boolean | Return config in response.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionDraft(actionId, opts, callback);"
  },
  "getintegrationsactiondraftschema": {
    "operationId": "getintegrationsactiondraftschema",
    "functionName": "getIntegrationsActionDraftSchema",
    "signature": "getIntegrationsActionDraftSchema(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionDraftSchemaRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of schema file to be retrieved for this draft.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionDraftSchema(actionId, fileName, callback);"
  },
  "getintegrationsactiondrafttemplate": {
    "operationId": "getintegrationsactiondrafttemplate",
    "functionName": "getIntegrationsActionDraftTemplate",
    "signature": "getIntegrationsActionDraftTemplate(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionDraftTemplateRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of template file to be retrieved for this action draft.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionDraftTemplate(actionId, fileName, callback);"
  },
  "getintegrationsactiondraftvalidation": {
    "operationId": "getintegrationsactiondraftvalidation",
    "functionName": "getIntegrationsActionDraftValidation",
    "signature": "getIntegrationsActionDraftValidation(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DraftValidationResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionDraftValidationRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionDraftValidation(actionId, callback);"
  },
  "getintegrationsactionschema": {
    "operationId": "getintegrationsactionschema",
    "functionName": "getIntegrationsActionSchema",
    "signature": "getIntegrationsActionSchema(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionSchemaRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of schema file to be retrieved for this action.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionSchema(actionId, fileName, callback);"
  },
  "getintegrationsactiontemplate": {
    "operationId": "getintegrationsactiontemplate",
    "functionName": "getIntegrationsActionTemplate",
    "signature": "getIntegrationsActionTemplate(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionTemplateRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet fileName = \"fileName_example\"; // String | Name of template file to be retrieved for this action.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionTemplate(actionId, fileName, callback);"
  },
  "getintegrationsactions": {
    "operationId": "getintegrationsactions",
    "functionName": "getIntegrationsActions",
    "signature": "getIntegrationsActions(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, secure, includeAuthActions)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeAuthActions",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'sortBy': \"sortBy_example\", // String | Root level field name to sort on.\n  'sortOrder': \"asc\", // String | Direction to sort 'sortBy' field.\n  'category': \"category_example\", // String | Filter by category name\n  'name': \"name_example\", // String | Filter by action name. Provide full or just the first part of name.\n  'secure': \"secure_example\", // String | Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions.\n  'includeAuthActions': \"false\" // String | Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActions(opts, callback);"
  },
  "getintegrationsactionscategories": {
    "operationId": "getintegrationsactionscategories",
    "functionName": "getIntegrationsActionsCategories",
    "signature": "getIntegrationsActionsCategories(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, secure)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CategoryEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionsCategoriesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'sortBy': \"sortBy_example\", // String | Root level field name to sort on.  Only 'name' is supported on this endpoint.\n  'sortOrder': \"asc\", // String | Direction to sort 'sortBy' field.\n  'secure': \"secure_example\" // String | Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionsCategories(opts, callback);"
  },
  "getintegrationsactionsdrafts": {
    "operationId": "getintegrationsactionsdrafts",
    "functionName": "getIntegrationsActionsDrafts",
    "signature": "getIntegrationsActionsDrafts(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, secure, includeAuthActions)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeAuthActions",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsActionsDraftsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'sortBy': \"sortBy_example\", // String | Root level field name to sort on.\n  'sortOrder': \"asc\", // String | Direction to sort 'sortBy' field.\n  'category': \"category_example\", // String | Filter by category name\n  'name': \"name_example\", // String | Filter by action name. Provide full or just the first part of name.\n  'secure': \"secure_example\", // String | Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions.\n  'includeAuthActions': \"false\" // String | Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsActionsDrafts(opts, callback);"
  },
  "getintegrationsbotconnectorintegrationidbot": {
    "operationId": "getintegrationsbotconnectorintegrationidbot",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBot",
    "signature": "getIntegrationsBotconnectorIntegrationIdBot(integrationId, botId, version)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BotConnectorBot",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsBotconnectorIntegrationIdBotRequest();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\nlet botId = \"botId_example\"; // String | The botID for this bot\nlet opts = { \n  'version': \"version_example\" // String | Specific Version\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsBotconnectorIntegrationIdBot(integrationId, botId, opts, callback);"
  },
  "getintegrationsbotconnectorintegrationidbotversions": {
    "operationId": "getintegrationsbotconnectorintegrationidbotversions",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBotVersions",
    "signature": "getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId, botId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "BotConnectorBotVersionSummaryEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsBotconnectorIntegrationIdBotVersionsRequest();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this bot group\nlet botId = \"botId_example\"; // String | The botID for this bot\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId, botId, opts, callback);"
  },
  "getintegrationsbotconnectorintegrationidbots": {
    "operationId": "getintegrationsbotconnectorintegrationidbots",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBots",
    "signature": "getIntegrationsBotconnectorIntegrationIdBots(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BotList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsBotconnectorIntegrationIdBotsRequest();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsBotconnectorIntegrationIdBots(integrationId, callback);"
  },
  "getintegrationsbotconnectorintegrationidbotssummaries": {
    "operationId": "getintegrationsbotconnectorintegrationidbotssummaries",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBotsSummaries",
    "signature": "getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "BotConnectorBotSummaryEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsBotconnectorIntegrationIdBotsSummariesRequest();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId, opts, callback);"
  },
  "getintegrationsclientapps": {
    "operationId": "getintegrationsclientapps",
    "functionName": "getIntegrationsClientapps",
    "signature": "getIntegrationsClientapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ClientAppEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsClientappsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\" // String | Previous page token\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsClientapps(opts, callback);"
  },
  "getintegrationsclientappsunifiedcommunications": {
    "operationId": "getintegrationsclientappsunifiedcommunications",
    "functionName": "getIntegrationsClientappsUnifiedcommunications",
    "signature": "getIntegrationsClientappsUnifiedcommunications(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UCIntegrationListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsClientappsUnifiedcommunicationsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\" // String | Previous page token\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsClientappsUnifiedcommunications(opts, callback);"
  },
  "getintegrationscredential": {
    "operationId": "getintegrationscredential",
    "functionName": "getIntegrationsCredential",
    "signature": "getIntegrationsCredential(credentialId)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Credential",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsCredentialRequest();\n\nlet credentialId = \"credentialId_example\"; // String | Credential ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsCredential(credentialId, callback);"
  },
  "getintegrationscredentials": {
    "operationId": "getintegrationscredentials",
    "functionName": "getIntegrationsCredentials",
    "signature": "getIntegrationsCredentials(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "CredentialInfoListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsCredentialsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsCredentials(opts, callback);"
  },
  "getintegrationscredentialstypes": {
    "operationId": "getintegrationscredentialstypes",
    "functionName": "getIntegrationsCredentialsTypes",
    "signature": "getIntegrationsCredentialsTypes()",
    "return": "CredentialTypeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsCredentialsTypesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsCredentialsTypes(callback);"
  },
  "getintegrationseventlog": {
    "operationId": "getintegrationseventlog",
    "functionName": "getIntegrationsEventlog",
    "signature": "getIntegrationsEventlog(pageSize, pageNumber, sortBy, sortOrder, entityId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "entityId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationEventEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsEventlogRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"timestamp\", // String | Sort by\n  'sortOrder': \"descending\", // String | Order by\n  'entityId': \"entityId_example\" // String | Include only events with this entity ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsEventlog(opts, callback);"
  },
  "getintegrationseventlogeventid": {
    "operationId": "getintegrationseventlogeventid",
    "functionName": "getIntegrationsEventlogEventId",
    "signature": "getIntegrationsEventlogEventId(eventId)",
    "parameters": [
      {
        "name": "eventId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationEvent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsEventlogEventIdRequest();\n\nlet eventId = \"eventId_example\"; // String | Event Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsEventlogEventId(eventId, callback);"
  },
  "getintegrationsspeechdialogflowagent": {
    "operationId": "getintegrationsspeechdialogflowagent",
    "functionName": "getIntegrationsSpeechDialogflowAgent",
    "signature": "getIntegrationsSpeechDialogflowAgent(agentId)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DialogflowAgent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechDialogflowAgentRequest();\n\nlet agentId = \"agentId_example\"; // String | The agent ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechDialogflowAgent(agentId, callback);"
  },
  "getintegrationsspeechdialogflowagents": {
    "operationId": "getintegrationsspeechdialogflowagents",
    "functionName": "getIntegrationsSpeechDialogflowAgents",
    "signature": "getIntegrationsSpeechDialogflowAgents(pageNumber, pageSize, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DialogflowAgentSummaryEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechDialogflowAgentsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'name': \"name_example\" // String | Filter on agent name\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechDialogflowAgents(opts, callback);"
  },
  "getintegrationsspeechlexbotalias": {
    "operationId": "getintegrationsspeechlexbotalias",
    "functionName": "getIntegrationsSpeechLexBotAlias",
    "signature": "getIntegrationsSpeechLexBotAlias(aliasId)",
    "parameters": [
      {
        "name": "aliasId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LexBotAlias",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechLexBotAliasRequest();\n\nlet aliasId = \"aliasId_example\"; // String | The alias ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechLexBotAlias(aliasId, callback);"
  },
  "getintegrationsspeechlexbotbotidaliases": {
    "operationId": "getintegrationsspeechlexbotbotidaliases",
    "functionName": "getIntegrationsSpeechLexBotBotIdAliases",
    "signature": "getIntegrationsSpeechLexBotBotIdAliases(botId, pageNumber, pageSize, status, name)",
    "parameters": [
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "status",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LexBotAliasEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechLexBotBotIdAliasesRequest();\n\nlet botId = \"botId_example\"; // String | The bot ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'status': \"status_example\", // String | Filter on alias status\n  'name': \"name_example\" // String | Filter on alias name\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechLexBotBotIdAliases(botId, opts, callback);"
  },
  "getintegrationsspeechlexbots": {
    "operationId": "getintegrationsspeechlexbots",
    "functionName": "getIntegrationsSpeechLexBots",
    "signature": "getIntegrationsSpeechLexBots(pageNumber, pageSize, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LexBotEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechLexBotsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'name': \"name_example\" // String | Filter on bot name\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechLexBots(opts, callback);"
  },
  "getintegrationsspeechttsengine": {
    "operationId": "getintegrationsspeechttsengine",
    "functionName": "getIntegrationsSpeechTtsEngine",
    "signature": "getIntegrationsSpeechTtsEngine(engineId, includeVoices)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeVoices",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TtsEngineEntity",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechTtsEngineRequest();\n\nlet engineId = \"engineId_example\"; // String | The engine ID\nlet opts = { \n  'includeVoices': false // Boolean | Include voices for the engine\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechTtsEngine(engineId, opts, callback);"
  },
  "getintegrationsspeechttsenginevoice": {
    "operationId": "getintegrationsspeechttsenginevoice",
    "functionName": "getIntegrationsSpeechTtsEngineVoice",
    "signature": "getIntegrationsSpeechTtsEngineVoice(engineId, voiceId)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "voiceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TtsVoiceEntity",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechTtsEngineVoiceRequest();\n\nlet engineId = \"engineId_example\"; // String | The engine ID\nlet voiceId = \"voiceId_example\"; // String | The voice ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechTtsEngineVoice(engineId, voiceId, callback);"
  },
  "getintegrationsspeechttsenginevoices": {
    "operationId": "getintegrationsspeechttsenginevoices",
    "functionName": "getIntegrationsSpeechTtsEngineVoices",
    "signature": "getIntegrationsSpeechTtsEngineVoices(engineId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TtsVoiceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechTtsEngineVoicesRequest();\n\nlet engineId = \"engineId_example\"; // String | The engine ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechTtsEngineVoices(engineId, opts, callback);"
  },
  "getintegrationsspeechttsengines": {
    "operationId": "getintegrationsspeechttsengines",
    "functionName": "getIntegrationsSpeechTtsEngines",
    "signature": "getIntegrationsSpeechTtsEngines(pageNumber, pageSize, includeVoices, name, language)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "includeVoices",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TtsEngineEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechTtsEnginesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'includeVoices': false, // Boolean | Include voices for the engine\n  'name': \"name_example\", // String | Filter on engine name\n  'language': \"language_example\" // String | Filter on supported language. If includeVoices=true then the voices are also filtered.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechTtsEngines(opts, callback);"
  },
  "getintegrationsspeechttssettings": {
    "operationId": "getintegrationsspeechttssettings",
    "functionName": "getIntegrationsSpeechTtsSettings",
    "signature": "getIntegrationsSpeechTtsSettings()",
    "return": "TtsSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsSpeechTtsSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsSpeechTtsSettings(callback);"
  },
  "getintegrationstype": {
    "operationId": "getintegrationstype",
    "functionName": "getIntegrationsType",
    "signature": "getIntegrationsType(typeId)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationType",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsTypeRequest();\n\nlet typeId = \"typeId_example\"; // String | Integration Type Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsType(typeId, callback);"
  },
  "getintegrationstypeconfigschema": {
    "operationId": "getintegrationstypeconfigschema",
    "functionName": "getIntegrationsTypeConfigschema",
    "signature": "getIntegrationsTypeConfigschema(typeId, configType)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "configType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsTypeConfigschemaRequest();\n\nlet typeId = \"typeId_example\"; // String | Integration Type Id\nlet configType = \"configType_example\"; // String | Config schema type\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsTypeConfigschema(typeId, configType, callback);"
  },
  "getintegrationstypes": {
    "operationId": "getintegrationstypes",
    "functionName": "getIntegrationsTypes",
    "signature": "getIntegrationsTypes(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationTypeEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsTypesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\" // String | Previous page token\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsTypes(opts, callback);"
  },
  "getintegrationsuserapps": {
    "operationId": "getintegrationsuserapps",
    "functionName": "getIntegrationsUserapps",
    "signature": "getIntegrationsUserapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, appHost)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "appHost",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserAppEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIntegrationsUserappsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'appHost': \"appHost_example\" // String | The type of UserApp to filter by\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIntegrationsUserapps(opts, callback);"
  },
  "patchintegration": {
    "operationId": "patchintegration",
    "functionName": "patchIntegration",
    "signature": "patchIntegration(integrationId, body, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchIntegrationRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\nlet opts = { \n  'body': {}, // Object | Integration Update\n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\" // String | Previous page token\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchIntegration(integrationId, opts, callback);"
  },
  "patchintegrationsaction": {
    "operationId": "patchintegrationsaction",
    "functionName": "patchIntegrationsAction",
    "signature": "patchIntegrationsAction(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchIntegrationsActionRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = {}; // Object | Input used to patch the Action.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchIntegrationsAction(actionId, body, callback);"
  },
  "patchintegrationsactiondraft": {
    "operationId": "patchintegrationsactiondraft",
    "functionName": "patchIntegrationsActionDraft",
    "signature": "patchIntegrationsActionDraft(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchIntegrationsActionDraftRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = {}; // Object | Input used to patch the Action Draft.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchIntegrationsActionDraft(actionId, body, callback);"
  },
  "postintegrations": {
    "operationId": "postintegrations",
    "functionName": "postIntegrations",
    "signature": "postIntegrations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsRequest();\n\nlet opts = { \n  'body': {} // Object | Integration\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrations(opts, callback);"
  },
  "postintegrationsactiondraft": {
    "operationId": "postintegrationsactiondraft",
    "functionName": "postIntegrationsActionDraft",
    "signature": "postIntegrationsActionDraft(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsActionDraftRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsActionDraft(actionId, callback);"
  },
  "postintegrationsactiondraftpublish": {
    "operationId": "postintegrationsactiondraftpublish",
    "functionName": "postIntegrationsActionDraftPublish",
    "signature": "postIntegrationsActionDraftPublish(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsActionDraftPublishRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = {}; // Object | Input used to patch the Action.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsActionDraftPublish(actionId, body, callback);"
  },
  "postintegrationsactiondrafttest": {
    "operationId": "postintegrationsactiondrafttest",
    "functionName": "postIntegrationsActionDraftTest",
    "signature": "postIntegrationsActionDraftTest(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TestExecutionResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsActionDraftTestRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = null; // Object | Map of parameters used for variable substitution.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsActionDraftTest(actionId, body, callback);"
  },
  "postintegrationsactionexecute": {
    "operationId": "postintegrationsactionexecute",
    "functionName": "postIntegrationsActionExecute",
    "signature": "postIntegrationsActionExecute(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Object",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsActionExecuteRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = null; // Object | Map of parameters used for variable substitution.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsActionExecute(actionId, body, callback);"
  },
  "postintegrationsactiontest": {
    "operationId": "postintegrationsactiontest",
    "functionName": "postIntegrationsActionTest",
    "signature": "postIntegrationsActionTest(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TestExecutionResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsActionTestRequest();\n\nlet actionId = \"actionId_example\"; // String | actionId\nlet body = null; // Object | Map of parameters used for variable substitution.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsActionTest(actionId, body, callback);"
  },
  "postintegrationsactions": {
    "operationId": "postintegrationsactions",
    "functionName": "postIntegrationsActions",
    "signature": "postIntegrationsActions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsActionsRequest();\n\nlet body = {}; // Object | Input used to create Action.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsActions(body, callback);"
  },
  "postintegrationsactionsdrafts": {
    "operationId": "postintegrationsactionsdrafts",
    "functionName": "postIntegrationsActionsDrafts",
    "signature": "postIntegrationsActionsDrafts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsActionsDraftsRequest();\n\nlet body = {}; // Object | Input used to create Action Draft.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsActionsDrafts(body, callback);"
  },
  "postintegrationscredentials": {
    "operationId": "postintegrationscredentials",
    "functionName": "postIntegrationsCredentials",
    "signature": "postIntegrationsCredentials(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "CredentialInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsCredentialsRequest();\n\nlet opts = { \n  'body': {} // Object | Credential\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsCredentials(opts, callback);"
  },
  "postintegrationsworkforcemanagementvendorconnection": {
    "operationId": "postintegrationsworkforcemanagementvendorconnection",
    "functionName": "postIntegrationsWorkforcemanagementVendorconnection",
    "signature": "postIntegrationsWorkforcemanagementVendorconnection(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserActionCategoryEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostIntegrationsWorkforcemanagementVendorconnectionRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postIntegrationsWorkforcemanagementVendorconnection(opts, callback);"
  },
  "putintegrationconfigcurrent": {
    "operationId": "putintegrationconfigcurrent",
    "functionName": "putIntegrationConfigCurrent",
    "signature": "putIntegrationConfigCurrent(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "IntegrationConfiguration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIntegrationConfigCurrentRequest();\n\nlet integrationId = \"integrationId_example\"; // String | Integration Id\nlet opts = { \n  'body': {} // Object | Integration Configuration\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIntegrationConfigCurrent(integrationId, opts, callback);"
  },
  "putintegrationsbotconnectorintegrationidbots": {
    "operationId": "putintegrationsbotconnectorintegrationidbots",
    "functionName": "putIntegrationsBotconnectorIntegrationIdBots",
    "signature": "putIntegrationsBotconnectorIntegrationIdBots(integrationId, botList)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botList",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIntegrationsBotconnectorIntegrationIdBotsRequest();\n\nlet integrationId = \"integrationId_example\"; // String | The integration ID for this group of bots\nlet botList = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.putIntegrationsBotconnectorIntegrationIdBots(integrationId, botList, callback);"
  },
  "putintegrationscredential": {
    "operationId": "putintegrationscredential",
    "functionName": "putIntegrationsCredential",
    "signature": "putIntegrationsCredential(credentialId, body)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "CredentialInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIntegrationsCredentialRequest();\n\nlet credentialId = \"credentialId_example\"; // String | Credential ID\nlet opts = { \n  'body': {} // Object | Credential\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIntegrationsCredential(credentialId, opts, callback);"
  },
  "putintegrationsspeechttssettings": {
    "operationId": "putintegrationsspeechttssettings",
    "functionName": "putIntegrationsSpeechTtsSettings",
    "signature": "putIntegrationsSpeechTtsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TtsSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutIntegrationsSpeechTtsSettingsRequest();\n\nlet body = {}; // Object | Updated TtsSettings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putIntegrationsSpeechTtsSettings(body, callback);"
  },
  "deletejourneyactionmap": {
    "operationId": "deletejourneyactionmap",
    "functionName": "deleteJourneyActionmap",
    "signature": "deleteJourneyActionmap(actionMapId)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteJourneyActionmapRequest();\n\nlet actionMapId = \"actionMapId_example\"; // String | ID of the action map.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteJourneyActionmap(actionMapId, callback);"
  },
  "deletejourneyactiontemplate": {
    "operationId": "deletejourneyactiontemplate",
    "functionName": "deleteJourneyActiontemplate",
    "signature": "deleteJourneyActiontemplate(actionTemplateId, hardDelete)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "hardDelete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteJourneyActiontemplateRequest();\n\nlet actionTemplateId = \"actionTemplateId_example\"; // String | ID of the action template.\nlet opts = { \n  'hardDelete': true // Boolean | Determines whether Action Template should be soft-deleted (have it's state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteJourneyActiontemplate(actionTemplateId, opts, callback);"
  },
  "deletejourneyoutcome": {
    "operationId": "deletejourneyoutcome",
    "functionName": "deleteJourneyOutcome",
    "signature": "deleteJourneyOutcome(outcomeId)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteJourneyOutcomeRequest();\n\nlet outcomeId = \"outcomeId_example\"; // String | ID of the outcome.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteJourneyOutcome(outcomeId, callback);"
  },
  "deletejourneysegment": {
    "operationId": "deletejourneysegment",
    "functionName": "deleteJourneySegment",
    "signature": "deleteJourneySegment(segmentId)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteJourneySegmentRequest();\n\nlet segmentId = \"segmentId_example\"; // String | ID of the segment.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteJourneySegment(segmentId, callback);"
  },
  "getjourneyactionmap": {
    "operationId": "getjourneyactionmap",
    "functionName": "getJourneyActionmap",
    "signature": "getJourneyActionmap(actionMapId)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionMap",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyActionmapRequest();\n\nlet actionMapId = \"actionMapId_example\"; // String | ID of the action map.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyActionmap(actionMapId, callback);"
  },
  "getjourneyactionmaps": {
    "operationId": "getjourneyactionmaps",
    "functionName": "getJourneyActionmaps",
    "signature": "getJourneyActionmaps(pageNumber, pageSize, sortBy, filterField, filterValue, actionMapIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "filterField",
        "type": "String",
        "required": "false"
      },
      {
        "name": "filterValue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "actionMapIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionMapListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyActionmapsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"sortBy_example\", // String | Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\n  'filterField': \"filterField_example\", // String | Field to filter by (e.g. filterField=weight or filterField=action.actionTemplate.id). Requires 'filterField' to also be set.\n  'filterValue': \"filterValue_example\", // String | Value to filter by. Requires 'filterValue' to also be set.\n  'actionMapIds': [\"actionMapIds_example\"], // [String] | IDs of action maps to return. Use of this parameter is not compatible with pagination, filtering, sorting or querying. A maximum of 100 action maps are allowed per request.\n  'queryFields': [\"queryFields_example\"], // [String] | Action Map field(s) to query on. Requires 'queryValue' to also be set.\n  'queryValue': \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyActionmaps(opts, callback);"
  },
  "getjourneyactiontarget": {
    "operationId": "getjourneyactiontarget",
    "functionName": "getJourneyActiontarget",
    "signature": "getJourneyActiontarget(actionTargetId)",
    "parameters": [
      {
        "name": "actionTargetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionTarget",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyActiontargetRequest();\n\nlet actionTargetId = \"actionTargetId_example\"; // String | ID of the action target.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyActiontarget(actionTargetId, callback);"
  },
  "getjourneyactiontargets": {
    "operationId": "getjourneyactiontargets",
    "functionName": "getJourneyActiontargets",
    "signature": "getJourneyActiontargets(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ActionTargetListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyActiontargetsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyActiontargets(opts, callback);"
  },
  "getjourneyactiontemplate": {
    "operationId": "getjourneyactiontemplate",
    "functionName": "getJourneyActiontemplate",
    "signature": "getJourneyActiontemplate(actionTemplateId)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionTemplate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyActiontemplateRequest();\n\nlet actionTemplateId = \"actionTemplateId_example\"; // String | ID of the action template.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyActiontemplate(actionTemplateId, callback);"
  },
  "getjourneyactiontemplates": {
    "operationId": "getjourneyactiontemplates",
    "functionName": "getJourneyActiontemplates",
    "signature": "getJourneyActiontemplates(pageNumber, pageSize, sortBy, mediaType, state, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionTemplateListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyActiontemplatesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"sortBy_example\", // String | Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=name,-createdDate).\n  'mediaType': \"mediaType_example\", // String | Media type\n  'state': \"state_example\", // String | Action template state.\n  'queryFields': [\"queryFields_example\"], // [String] | ActionTemplate field(s) to query on. Requires 'queryValue' to also be set.\n  'queryValue': \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyActiontemplates(opts, callback);"
  },
  "getjourneyoutcome": {
    "operationId": "getjourneyoutcome",
    "functionName": "getJourneyOutcome",
    "signature": "getJourneyOutcome(outcomeId)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Outcome",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyOutcomeRequest();\n\nlet outcomeId = \"outcomeId_example\"; // String | ID of the outcome.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyOutcome(outcomeId, callback);"
  },
  "getjourneyoutcomes": {
    "operationId": "getjourneyoutcomes",
    "functionName": "getJourneyOutcomes",
    "signature": "getJourneyOutcomes(pageNumber, pageSize, sortBy, outcomeIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "outcomeIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutcomeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneyOutcomesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"sortBy_example\", // String | Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\n  'outcomeIds': [\"outcomeIds_example\"], // [String] | IDs of outcomes to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 20 outcomes are allowed per request.\n  'queryFields': [\"queryFields_example\"], // [String] | Outcome field(s) to query on. Requires 'queryValue' to also be set.\n  'queryValue': \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneyOutcomes(opts, callback);"
  },
  "getjourneysegment": {
    "operationId": "getjourneysegment",
    "functionName": "getJourneySegment",
    "signature": "getJourneySegment(segmentId)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JourneySegment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneySegmentRequest();\n\nlet segmentId = \"segmentId_example\"; // String | ID of the segment.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneySegment(segmentId, callback);"
  },
  "getjourneysegments": {
    "operationId": "getjourneysegments",
    "functionName": "getJourneySegments",
    "signature": "getJourneySegments(sortBy, pageSize, pageNumber, isActive, segmentIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "isActive",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "segmentIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SegmentListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneySegmentsRequest();\n\nlet opts = { \n  'sortBy': \"sortBy_example\", // String | Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'isActive': true, // Boolean | Determines whether or not to show only active segments.\n  'segmentIds': [\"segmentIds_example\"], // [String] | IDs of segments to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 100 segments are allowed per request.\n  'queryFields': [\"queryFields_example\"], // [String] | Segment field(s) to query on. Requires 'queryValue' to also be set.\n  'queryValue': \"queryValue_example\" // String | Value to query on. Requires 'queryFields' to also be set.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneySegments(opts, callback);"
  },
  "getjourneysession": {
    "operationId": "getjourneysession",
    "functionName": "getJourneySession",
    "signature": "getJourneySession(sessionId)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Session",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneySessionRequest();\n\nlet sessionId = \"sessionId_example\"; // String | ID of the session.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneySession(sessionId, callback);"
  },
  "getjourneysessionoutcomescores": {
    "operationId": "getjourneysessionoutcomescores",
    "functionName": "getJourneySessionOutcomescores",
    "signature": "getJourneySessionOutcomescores(sessionId)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutcomeScoresResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetJourneySessionOutcomescoresRequest();\n\nlet sessionId = \"sessionId_example\"; // String | ID of the session.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getJourneySessionOutcomescores(sessionId, callback);"
  },
  "patchjourneyactionmap": {
    "operationId": "patchjourneyactionmap",
    "functionName": "patchJourneyActionmap",
    "signature": "patchJourneyActionmap(actionMapId, body)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionMap",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchJourneyActionmapRequest();\n\nlet actionMapId = \"actionMapId_example\"; // String | ID of the action map.\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchJourneyActionmap(actionMapId, opts, callback);"
  },
  "patchjourneyactiontarget": {
    "operationId": "patchjourneyactiontarget",
    "functionName": "patchJourneyActiontarget",
    "signature": "patchJourneyActiontarget(actionTargetId, body)",
    "parameters": [
      {
        "name": "actionTargetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionTarget",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchJourneyActiontargetRequest();\n\nlet actionTargetId = \"actionTargetId_example\"; // String | ID of the action target.\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchJourneyActiontarget(actionTargetId, opts, callback);"
  },
  "patchjourneyactiontemplate": {
    "operationId": "patchjourneyactiontemplate",
    "functionName": "patchJourneyActiontemplate",
    "signature": "patchJourneyActiontemplate(actionTemplateId, body)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionTemplate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchJourneyActiontemplateRequest();\n\nlet actionTemplateId = \"actionTemplateId_example\"; // String | ID of the action template.\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchJourneyActiontemplate(actionTemplateId, opts, callback);"
  },
  "patchjourneyoutcome": {
    "operationId": "patchjourneyoutcome",
    "functionName": "patchJourneyOutcome",
    "signature": "patchJourneyOutcome(outcomeId, body)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Outcome",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchJourneyOutcomeRequest();\n\nlet outcomeId = \"outcomeId_example\"; // String | ID of the outcome.\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchJourneyOutcome(outcomeId, opts, callback);"
  },
  "patchjourneysegment": {
    "operationId": "patchjourneysegment",
    "functionName": "patchJourneySegment",
    "signature": "patchJourneySegment(segmentId, body)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "JourneySegment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchJourneySegmentRequest();\n\nlet segmentId = \"segmentId_example\"; // String | ID of the segment.\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchJourneySegment(segmentId, opts, callback);"
  },
  "postjourneyactionmaps": {
    "operationId": "postjourneyactionmaps",
    "functionName": "postJourneyActionmaps",
    "signature": "postJourneyActionmaps(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionMap",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostJourneyActionmapsRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postJourneyActionmaps(opts, callback);"
  },
  "postjourneyactiontemplates": {
    "operationId": "postjourneyactiontemplates",
    "functionName": "postJourneyActiontemplates",
    "signature": "postJourneyActiontemplates(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ActionTemplate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostJourneyActiontemplatesRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postJourneyActiontemplates(opts, callback);"
  },
  "postjourneyoutcomes": {
    "operationId": "postjourneyoutcomes",
    "functionName": "postJourneyOutcomes",
    "signature": "postJourneyOutcomes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Outcome",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostJourneyOutcomesRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postJourneyOutcomes(opts, callback);"
  },
  "postjourneysegments": {
    "operationId": "postjourneysegments",
    "functionName": "postJourneySegments",
    "signature": "postJourneySegments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "JourneySegment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostJourneySegmentsRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postJourneySegments(opts, callback);"
  },
  "deleteknowledgeknowledgebase": {
    "operationId": "deleteknowledgeknowledgebase",
    "functionName": "deleteKnowledgeKnowledgebase",
    "signature": "deleteKnowledgeKnowledgebase(knowledgeBaseId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteKnowledgeKnowledgebaseRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteKnowledgeKnowledgebase(knowledgeBaseId, callback);"
  },
  "deleteknowledgeknowledgebaselanguagecategory": {
    "operationId": "deleteknowledgeknowledgebaselanguagecategory",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageCategory",
    "signature": "deleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeCategory",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteKnowledgeKnowledgebaseLanguageCategoryRequest();\n\nlet categoryId = \"categoryId_example\"; // String | Category ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, callback);"
  },
  "deleteknowledgeknowledgebaselanguagedocument": {
    "operationId": "deleteknowledgeknowledgebaselanguagedocument",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageDocument",
    "signature": "deleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteKnowledgeKnowledgebaseLanguageDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, callback);"
  },
  "deleteknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "deleteknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteKnowledgeKnowledgebaseLanguageDocumentsImportRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet importId = \"importId_example\"; // String | Import ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, callback);"
  },
  "getknowledgeknowledgebase": {
    "operationId": "getknowledgeknowledgebase",
    "functionName": "getKnowledgeKnowledgebase",
    "signature": "getKnowledgeKnowledgebase(knowledgeBaseId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebase(knowledgeBaseId, callback);"
  },
  "getknowledgeknowledgebaselanguagecategories": {
    "operationId": "getknowledgeknowledgebaselanguagecategories",
    "functionName": "getKnowledgeKnowledgebaseLanguageCategories",
    "signature": "getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, before, after, limit, pageSize, name)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CategoryListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseLanguageCategoriesRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet opts = { \n  'before': \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  'after': \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  'limit': \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\n  'pageSize': \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  'name': \"name_example\" // String | Filter to return the categories that starts with the given category name.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, opts, callback);"
  },
  "getknowledgeknowledgebaselanguagecategory": {
    "operationId": "getknowledgeknowledgebaselanguagecategory",
    "functionName": "getKnowledgeKnowledgebaseLanguageCategory",
    "signature": "getKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseLanguageCategoryRequest();\n\nlet categoryId = \"categoryId_example\"; // String | Category ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, callback);"
  },
  "getknowledgeknowledgebaselanguagedocument": {
    "operationId": "getknowledgeknowledgebaselanguagedocument",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocument",
    "signature": "getKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseLanguageDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, callback);"
  },
  "getknowledgeknowledgebaselanguagedocuments": {
    "operationId": "getknowledgeknowledgebaselanguagedocuments",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, before, after, limit, pageSize, categories, title, sortBy, sortOrder, documentIds)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "categories",
        "type": "String",
        "required": "false"
      },
      {
        "name": "title",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "documentIds",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DocumentListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseLanguageDocumentsRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet opts = { \n  'before': \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  'after': \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  'limit': \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\n  'pageSize': \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  'categories': \"categories_example\", // String | Filter by categories ids, comma separated values expected.\n  'title': \"title_example\", // String | Filter by document title.\n  'sortBy': \"sortBy_example\", // String | Sort by.\n  'sortOrder': \"sortOrder_example\", // String | Sort Order.\n  'documentIds': [\"documentIds_example\"] // [String] | Comma-separated list of document identifiers to fetch by.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, opts, callback);"
  },
  "getknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "getknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseLanguageDocumentsImportRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet importId = \"importId_example\"; // String | Import ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, callback);"
  },
  "getknowledgeknowledgebaselanguagetraining": {
    "operationId": "getknowledgeknowledgebaselanguagetraining",
    "functionName": "getKnowledgeKnowledgebaseLanguageTraining",
    "signature": "getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trainingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseLanguageTrainingRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet trainingId = \"trainingId_example\"; // String | Training ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId, callback);"
  },
  "getknowledgeknowledgebaselanguagetrainings": {
    "operationId": "getknowledgeknowledgebaselanguagetrainings",
    "functionName": "getKnowledgeKnowledgebaseLanguageTrainings",
    "signature": "getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, before, after, limit, pageSize, knowledgeDocumentsState)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "knowledgeDocumentsState",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrainingListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebaseLanguageTrainingsRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet opts = { \n  'before': \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  'after': \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  'limit': \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\n  'pageSize': \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  'knowledgeDocumentsState': \"knowledgeDocumentsState_example\" // String | Return the training with the specified state of the trained documents.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, opts, callback);"
  },
  "getknowledgeknowledgebases": {
    "operationId": "getknowledgeknowledgebases",
    "functionName": "getKnowledgeKnowledgebases",
    "signature": "getKnowledgeKnowledgebases(before, after, limit, pageSize, name, coreLanguage, published, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "coreLanguage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "published",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "KnowledgeBaseListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetKnowledgeKnowledgebasesRequest();\n\nlet opts = { \n  'before': \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  'after': \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  'limit': \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\n  'pageSize': \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  'name': \"name_example\", // String | Filter by Name.\n  'coreLanguage': \"coreLanguage_example\", // String | Filter by core language.\n  'published': true, // Boolean | Filter by published status.\n  'sortBy': \"sortBy_example\", // String | Sort by.\n  'sortOrder': \"sortOrder_example\" // String | Sort Order.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getKnowledgeKnowledgebases(opts, callback);"
  },
  "patchknowledgeknowledgebase": {
    "operationId": "patchknowledgeknowledgebase",
    "functionName": "patchKnowledgeKnowledgebase",
    "signature": "patchKnowledgeKnowledgebase(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchKnowledgeKnowledgebaseRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchKnowledgeKnowledgebase(knowledgeBaseId, body, callback);"
  },
  "patchknowledgeknowledgebaselanguagecategory": {
    "operationId": "patchknowledgeknowledgebaselanguagecategory",
    "functionName": "patchKnowledgeKnowledgebaseLanguageCategory",
    "signature": "patchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchKnowledgeKnowledgebaseLanguageCategoryRequest();\n\nlet categoryId = \"categoryId_example\"; // String | Category ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body, callback);"
  },
  "patchknowledgeknowledgebaselanguagedocument": {
    "operationId": "patchknowledgeknowledgebaselanguagedocument",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocument",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchKnowledgeKnowledgebaseLanguageDocumentRequest();\n\nlet documentId = \"documentId_example\"; // String | Document ID\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body, callback);"
  },
  "patchknowledgeknowledgebaselanguagedocuments": {
    "operationId": "patchknowledgeknowledgebaselanguagedocuments",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DocumentListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchKnowledgeKnowledgebaseLanguageDocumentsRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet body = [{}]; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body, callback);"
  },
  "patchknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "patchknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchKnowledgeKnowledgebaseLanguageDocumentsImportRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet importId = \"importId_example\"; // String | Import ID\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body, callback);"
  },
  "postknowledgedocumentuploads": {
    "operationId": "postknowledgedocumentuploads",
    "functionName": "postKnowledgeDocumentuploads",
    "signature": "postKnowledgeDocumentuploads(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeDocumentuploadsRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeDocumentuploads(body, callback);"
  },
  "postknowledgeknowledgebaselanguagecategories": {
    "operationId": "postknowledgeknowledgebaselanguagecategories",
    "functionName": "postKnowledgeKnowledgebaseLanguageCategories",
    "signature": "postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeKnowledgebaseLanguageCategoriesRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body, callback);"
  },
  "postknowledgeknowledgebaselanguagedocuments": {
    "operationId": "postknowledgeknowledgebaselanguagedocuments",
    "functionName": "postKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeKnowledgebaseLanguageDocumentsRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body, callback);"
  },
  "postknowledgeknowledgebaselanguagedocumentsimports": {
    "operationId": "postknowledgeknowledgebaselanguagedocumentsimports",
    "functionName": "postKnowledgeKnowledgebaseLanguageDocumentsImports",
    "signature": "postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeKnowledgebaseLanguageDocumentsImportsRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body, callback);"
  },
  "postknowledgeknowledgebaselanguagetrainingpromote": {
    "operationId": "postknowledgeknowledgebaselanguagetrainingpromote",
    "functionName": "postKnowledgeKnowledgebaseLanguageTrainingPromote",
    "signature": "postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trainingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeKnowledgebaseLanguageTrainingPromoteRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\nlet trainingId = \"trainingId_example\"; // String | Training ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId, callback);"
  },
  "postknowledgeknowledgebaselanguagetrainings": {
    "operationId": "postknowledgeknowledgebaselanguagetrainings",
    "functionName": "postKnowledgeKnowledgebaseLanguageTrainings",
    "signature": "postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeKnowledgebaseLanguageTrainingsRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet languageCode = \"en-US\"; // String | Language code, format: iso2-LOCALE\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, callback);"
  },
  "postknowledgeknowledgebasesearch": {
    "operationId": "postknowledgeknowledgebasesearch",
    "functionName": "postKnowledgeKnowledgebaseSearch",
    "signature": "postKnowledgeKnowledgebaseSearch(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "KnowledgeSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeKnowledgebaseSearchRequest();\n\nlet knowledgeBaseId = \"knowledgeBaseId_example\"; // String | Knowledge base ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeKnowledgebaseSearch(knowledgeBaseId, opts, callback);"
  },
  "postknowledgeknowledgebases": {
    "operationId": "postknowledgeknowledgebases",
    "functionName": "postKnowledgeKnowledgebases",
    "signature": "postKnowledgeKnowledgebases(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostKnowledgeKnowledgebasesRequest();\n\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postKnowledgeKnowledgebases(body, callback);"
  },
  "deletelanguageunderstandingdomain": {
    "operationId": "deletelanguageunderstandingdomain",
    "functionName": "deleteLanguageunderstandingDomain",
    "signature": "deleteLanguageunderstandingDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLanguageunderstandingDomainRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLanguageunderstandingDomain(domainId, callback);"
  },
  "deletelanguageunderstandingdomainfeedbackfeedbackid": {
    "operationId": "deletelanguageunderstandingdomainfeedbackfeedbackid",
    "functionName": "deleteLanguageunderstandingDomainFeedbackFeedbackId",
    "signature": "deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feedbackId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLanguageunderstandingDomainFeedbackFeedbackIdRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet feedbackId = \"feedbackId_example\"; // String | ID of the Feedback\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, callback);"
  },
  "deletelanguageunderstandingdomainversion": {
    "operationId": "deletelanguageunderstandingdomainversion",
    "functionName": "deleteLanguageunderstandingDomainVersion",
    "signature": "deleteLanguageunderstandingDomainVersion(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLanguageunderstandingDomainVersionRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLanguageunderstandingDomainVersion(domainId, domainVersionId, callback);"
  },
  "deletelanguageunderstandingminer": {
    "operationId": "deletelanguageunderstandingminer",
    "functionName": "deleteLanguageunderstandingMiner",
    "signature": "deleteLanguageunderstandingMiner(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLanguageunderstandingMinerRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLanguageunderstandingMiner(minerId, callback);"
  },
  "deletelanguageunderstandingminerdraft": {
    "operationId": "deletelanguageunderstandingminerdraft",
    "functionName": "deleteLanguageunderstandingMinerDraft",
    "signature": "deleteLanguageunderstandingMinerDraft(minerId, draftId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLanguageunderstandingMinerDraftRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet draftId = \"draftId_example\"; // String | Draft ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLanguageunderstandingMinerDraft(minerId, draftId, callback);"
  },
  "getlanguageunderstandingdomain": {
    "operationId": "getlanguageunderstandingdomain",
    "functionName": "getLanguageunderstandingDomain",
    "signature": "getLanguageunderstandingDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingDomainRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingDomain(domainId, callback);"
  },
  "getlanguageunderstandingdomainfeedback": {
    "operationId": "getlanguageunderstandingdomainfeedback",
    "functionName": "getLanguageunderstandingDomainFeedback",
    "signature": "getLanguageunderstandingDomainFeedback(domainId, intentName, assessment, dateStart, dateEnd, includeDeleted, pageNumber, pageSize, enableCursorPagination, after, fields)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "intentName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "assessment",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateStart",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateEnd",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeDeleted",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "enableCursorPagination",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NluFeedbackListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingDomainFeedbackRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet opts = { \n  'intentName': \"intentName_example\", // String | The top intent name to retrieve feedback for.\n  'assessment': \"assessment_example\", // String | The top assessment to retrieve feedback for.\n  'dateStart': \"2013-10-20\", // String | Begin of time window as ISO-8601 date.\n  'dateEnd': \"2013-10-20\", // String | End of time window as ISO-8601 date.\n  'includeDeleted': true, // Boolean | Whether to include soft-deleted items in the result.\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'enableCursorPagination': false, // Boolean | Enable Cursor Pagination\n  'after': \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned. This is considered only when enableCursorPagination=true\n  'fields': [\"fields_example\"] // [String] | Fields and properties to get, comma-separated\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingDomainFeedback(domainId, opts, callback);"
  },
  "getlanguageunderstandingdomainfeedbackfeedbackid": {
    "operationId": "getlanguageunderstandingdomainfeedbackfeedbackid",
    "functionName": "getLanguageunderstandingDomainFeedbackFeedbackId",
    "signature": "getLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, fields)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feedbackId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NluFeedbackResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingDomainFeedbackFeedbackIdRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet feedbackId = \"feedbackId_example\"; // String | ID of the Feedback\nlet opts = { \n  'fields': [\"fields_example\"] // [String] | Fields and properties to get, comma-separated\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, opts, callback);"
  },
  "getlanguageunderstandingdomainversion": {
    "operationId": "getlanguageunderstandingdomainversion",
    "functionName": "getLanguageunderstandingDomainVersion",
    "signature": "getLanguageunderstandingDomainVersion(domainId, domainVersionId, includeUtterances)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeUtterances",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "NluDomainVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingDomainVersionRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\nlet opts = { \n  'includeUtterances': true // Boolean | Whether utterances for intent definition should be included when marshalling response.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingDomainVersion(domainId, domainVersionId, opts, callback);"
  },
  "getlanguageunderstandingdomainversionreport": {
    "operationId": "getlanguageunderstandingdomainversionreport",
    "functionName": "getLanguageunderstandingDomainVersionReport",
    "signature": "getLanguageunderstandingDomainVersionReport(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersionQualityReport",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingDomainVersionReportRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingDomainVersionReport(domainId, domainVersionId, callback);"
  },
  "getlanguageunderstandingdomainversions": {
    "operationId": "getlanguageunderstandingdomainversions",
    "functionName": "getLanguageunderstandingDomainVersions",
    "signature": "getLanguageunderstandingDomainVersions(domainId, includeUtterances, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeUtterances",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "NluDomainVersionListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingDomainVersionsRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet opts = { \n  'includeUtterances': true, // Boolean | Whether utterances for intent definition should be included when marshalling response.\n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingDomainVersions(domainId, opts, callback);"
  },
  "getlanguageunderstandingdomains": {
    "operationId": "getlanguageunderstandingdomains",
    "functionName": "getLanguageunderstandingDomains",
    "signature": "getLanguageunderstandingDomains(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "NluDomainListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingDomainsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25 // Number | Page size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingDomains(opts, callback);"
  },
  "getlanguageunderstandingminer": {
    "operationId": "getlanguageunderstandingminer",
    "functionName": "getLanguageunderstandingMiner",
    "signature": "getLanguageunderstandingMiner(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Miner",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingMinerRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingMiner(minerId, callback);"
  },
  "getlanguageunderstandingminerdraft": {
    "operationId": "getlanguageunderstandingminerdraft",
    "functionName": "getLanguageunderstandingMinerDraft",
    "signature": "getLanguageunderstandingMinerDraft(minerId, draftId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Draft",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingMinerDraftRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet draftId = \"draftId_example\"; // String | Draft ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingMinerDraft(minerId, draftId, callback);"
  },
  "getlanguageunderstandingminerdrafts": {
    "operationId": "getlanguageunderstandingminerdrafts",
    "functionName": "getLanguageunderstandingMinerDrafts",
    "signature": "getLanguageunderstandingMinerDrafts(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DraftListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingMinerDraftsRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingMinerDrafts(minerId, callback);"
  },
  "getlanguageunderstandingminerintent": {
    "operationId": "getlanguageunderstandingminerintent",
    "functionName": "getLanguageunderstandingMinerIntent",
    "signature": "getLanguageunderstandingMinerIntent(minerId, intentId, expand)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "intentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinerIntent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingMinerIntentRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet intentId = \"intentId_example\"; // String | The ID of the intent to be retrieved.\nlet opts = { \n  'expand': \"expand_example\" // String | Option to fetch utterances\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingMinerIntent(minerId, intentId, opts, callback);"
  },
  "getlanguageunderstandingminerintents": {
    "operationId": "getlanguageunderstandingminerintents",
    "functionName": "getLanguageunderstandingMinerIntents",
    "signature": "getLanguageunderstandingMinerIntents(minerId, expand)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinedIntentsListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingMinerIntentsRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet opts = { \n  'expand': \"expand_example\" // String | Option to fetch utterances.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingMinerIntents(minerId, opts, callback);"
  },
  "getlanguageunderstandingminers": {
    "operationId": "getlanguageunderstandingminers",
    "functionName": "getLanguageunderstandingMiners",
    "signature": "getLanguageunderstandingMiners()",
    "return": "MinerListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageunderstandingMinersRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguageunderstandingMiners(callback);"
  },
  "patchlanguageunderstandingdomain": {
    "operationId": "patchlanguageunderstandingdomain",
    "functionName": "patchLanguageunderstandingDomain",
    "signature": "patchLanguageunderstandingDomain(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchLanguageunderstandingDomainRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet body = {}; // Object | The updated NLU Domain.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchLanguageunderstandingDomain(domainId, body, callback);"
  },
  "patchlanguageunderstandingminerdraft": {
    "operationId": "patchlanguageunderstandingminerdraft",
    "functionName": "patchLanguageunderstandingMinerDraft",
    "signature": "patchLanguageunderstandingMinerDraft(minerId, draftId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Draft",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchLanguageunderstandingMinerDraftRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet draftId = \"draftId_example\"; // String | Draft ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchLanguageunderstandingMinerDraft(minerId, draftId, opts, callback);"
  },
  "postlanguageunderstandingdomainfeedback": {
    "operationId": "postlanguageunderstandingdomainfeedback",
    "functionName": "postLanguageunderstandingDomainFeedback",
    "signature": "postLanguageunderstandingDomainFeedback(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluFeedbackResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingDomainFeedbackRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet body = {}; // Object | The Feedback to create.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingDomainFeedback(domainId, body, callback);"
  },
  "postlanguageunderstandingdomainversiondetect": {
    "operationId": "postlanguageunderstandingdomainversiondetect",
    "functionName": "postLanguageunderstandingDomainVersionDetect",
    "signature": "postLanguageunderstandingDomainVersionDetect(domainId, domainVersionId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDetectionResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingDomainVersionDetectRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\nlet body = {}; // Object | The input data to perform detection on.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingDomainVersionDetect(domainId, domainVersionId, body, callback);"
  },
  "postlanguageunderstandingdomainversionpublish": {
    "operationId": "postlanguageunderstandingdomainversionpublish",
    "functionName": "postLanguageunderstandingDomainVersionPublish",
    "signature": "postLanguageunderstandingDomainVersionPublish(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingDomainVersionPublishRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingDomainVersionPublish(domainId, domainVersionId, callback);"
  },
  "postlanguageunderstandingdomainversiontrain": {
    "operationId": "postlanguageunderstandingdomainversiontrain",
    "functionName": "postLanguageunderstandingDomainVersionTrain",
    "signature": "postLanguageunderstandingDomainVersionTrain(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersionTrainingResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingDomainVersionTrainRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingDomainVersionTrain(domainId, domainVersionId, callback);"
  },
  "postlanguageunderstandingdomainversions": {
    "operationId": "postlanguageunderstandingdomainversions",
    "functionName": "postLanguageunderstandingDomainVersions",
    "signature": "postLanguageunderstandingDomainVersions(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingDomainVersionsRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet body = {}; // Object | The NLU Domain Version to create.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingDomainVersions(domainId, body, callback);"
  },
  "postlanguageunderstandingdomains": {
    "operationId": "postlanguageunderstandingdomains",
    "functionName": "postLanguageunderstandingDomains",
    "signature": "postLanguageunderstandingDomains(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingDomainsRequest();\n\nlet body = {}; // Object | The NLU Domain to create.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingDomains(body, callback);"
  },
  "postlanguageunderstandingminerdrafts": {
    "operationId": "postlanguageunderstandingminerdrafts",
    "functionName": "postLanguageunderstandingMinerDrafts",
    "signature": "postLanguageunderstandingMinerDrafts(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Draft",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingMinerDraftsRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet body = {}; // Object | Details for creating draft resource\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingMinerDrafts(minerId, body, callback);"
  },
  "postlanguageunderstandingminerexecute": {
    "operationId": "postlanguageunderstandingminerexecute",
    "functionName": "postLanguageunderstandingMinerExecute",
    "signature": "postLanguageunderstandingMinerExecute(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Miner",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingMinerExecuteRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingMinerExecute(minerId, opts, callback);"
  },
  "postlanguageunderstandingminers": {
    "operationId": "postlanguageunderstandingminers",
    "functionName": "postLanguageunderstandingMiners",
    "signature": "postLanguageunderstandingMiners(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Miner",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingMinersRequest();\n\nlet body = {}; // Object | Details for creating a new miner resource.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingMiners(body, callback);"
  },
  "putlanguageunderstandingdomainversion": {
    "operationId": "putlanguageunderstandingdomainversion",
    "functionName": "putLanguageunderstandingDomainVersion",
    "signature": "putLanguageunderstandingDomainVersion(domainId, domainVersionId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutLanguageunderstandingDomainVersionRequest();\n\nlet domainId = \"domainId_example\"; // String | ID of the NLU domain.\nlet domainVersionId = \"domainVersionId_example\"; // String | ID of the NLU domain version.\nlet body = {}; // Object | The updated NLU Domain Version.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putLanguageunderstandingDomainVersion(domainId, domainVersionId, body, callback);"
  },
  "deletelanguage": {
    "operationId": "deletelanguage",
    "functionName": "deleteLanguage",
    "signature": "deleteLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLanguageRequest();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLanguage(languageId, callback);"
  },
  "deleteroutinglanguage": {
    "operationId": "deleteroutinglanguage",
    "functionName": "deleteRoutingLanguage",
    "signature": "deleteRoutingLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingLanguageRequest();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingLanguage(languageId, callback);"
  },
  "getlanguage": {
    "operationId": "getlanguage",
    "functionName": "getLanguage",
    "signature": "getLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguageRequest();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguage(languageId, callback);"
  },
  "getlanguages": {
    "operationId": "getlanguages",
    "functionName": "getLanguages",
    "signature": "getLanguages(pageSize, pageNumber, sortOrder, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LanguageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguagesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ASC\", // String | Ascending or descending sort order\n  'name': \"name_example\" // String | Name\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguages(opts, callback);"
  },
  "getlanguagestranslations": {
    "operationId": "getlanguagestranslations",
    "functionName": "getLanguagesTranslations",
    "signature": "getLanguagesTranslations()",
    "return": "AvailableTranslations",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguagesTranslationsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguagesTranslations(callback);"
  },
  "getlanguagestranslationsbuiltin": {
    "operationId": "getlanguagestranslationsbuiltin",
    "functionName": "getLanguagesTranslationsBuiltin",
    "signature": "getLanguagesTranslationsBuiltin(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguagesTranslationsBuiltinRequest();\n\nlet language = \"language_example\"; // String | The language of the builtin translation to retrieve\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguagesTranslationsBuiltin(language, callback);"
  },
  "getlanguagestranslationsorganization": {
    "operationId": "getlanguagestranslationsorganization",
    "functionName": "getLanguagesTranslationsOrganization",
    "signature": "getLanguagesTranslationsOrganization(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguagesTranslationsOrganizationRequest();\n\nlet language = \"language_example\"; // String | The language of the translation to retrieve for the organization\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguagesTranslationsOrganization(language, callback);"
  },
  "getlanguagestranslationsuser": {
    "operationId": "getlanguagestranslationsuser",
    "functionName": "getLanguagesTranslationsUser",
    "signature": "getLanguagesTranslationsUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLanguagesTranslationsUserRequest();\n\nlet userId = \"userId_example\"; // String | The user id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLanguagesTranslationsUser(userId, callback);"
  },
  "getroutinglanguage": {
    "operationId": "getroutinglanguage",
    "functionName": "getRoutingLanguage",
    "signature": "getRoutingLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingLanguageRequest();\n\nlet languageId = \"languageId_example\"; // String | Language ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingLanguage(languageId, callback);"
  },
  "postlanguages": {
    "operationId": "postlanguages",
    "functionName": "postLanguages",
    "signature": "postLanguages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguagesRequest();\n\nlet body = {}; // Object | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguages(body, callback);"
  },
  "deletelearningassignment": {
    "operationId": "deletelearningassignment",
    "functionName": "deleteLearningAssignment",
    "signature": "deleteLearningAssignment(assignmentId)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLearningAssignmentRequest();\n\nlet assignmentId = \"assignmentId_example\"; // String | The Learning Assignment ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLearningAssignment(assignmentId, callback);"
  },
  "deletelearningmodule": {
    "operationId": "deletelearningmodule",
    "functionName": "deleteLearningModule",
    "signature": "deleteLearningModule(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLearningModuleRequest();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLearningModule(moduleId, callback);"
  },
  "getlearningassignment": {
    "operationId": "getlearningassignment",
    "functionName": "getLearningAssignment",
    "signature": "getLearningAssignment(assignmentId, expand)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLearningAssignmentRequest();\n\nlet assignmentId = \"assignmentId_example\"; // String | The ID of Learning Assignment\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Fields to expand in response\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLearningAssignment(assignmentId, opts, callback);"
  },
  "getlearningassignments": {
    "operationId": "getlearningassignments",
    "functionName": "getLearningAssignments",
    "signature": "getLearningAssignments(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, userId, types, states, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "minPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "maxPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "states",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentsDomainEntity",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLearningAssignmentsRequest();\n\nlet opts = { \n  'moduleId': \"moduleId_example\", // String | Specifies the ID of the learning module. Fetch assignments for learning module ID\n  'interval': \"interval_example\", // String | Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'completionInterval': \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'overdue': \"Any\", // String | Specifies if only the non-overdue (overdue is \\\"False\\\") or overdue (overdue is \\\"True\\\") assignments are returned. If overdue is \\\"Any\\\" or if the overdue parameter is not supplied, all assignments are returned\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'pass': \"Any\", // String | Specifies if only the failed (pass is \\\"False\\\") or passed (pass is \\\"True\\\") assignments (completed with assessment)are returned. If pass is \\\"Any\\\" or if the pass parameter is not supplied, all assignments are returned\n  'minPercentageScore': 3.4, // Number | The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  'maxPercentageScore': 3.4, // Number | The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  'sortOrder': \"Desc\", // String | Specifies result set sort order; if not specified, default sort order is descending (Desc)\n  'sortBy': \"sortBy_example\", // String | Specifies which field to sort the results by, default sort is by recommendedCompletionDate\n  'userId': [\"userId_example\"], // [String] | Specifies the list of user IDs to be queried, up to 100 user IDs.\n  'types': [\"types_example\"], // [String] | Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned\n  'states': [\"states_example\"], // [String] | Specifies the assignment states to filter by\n  'expand': [\"expand_example\"] // [String] | Specifies the expand option for returning additional information\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLearningAssignments(opts, callback);"
  },
  "getlearningassignmentsme": {
    "operationId": "getlearningassignmentsme",
    "functionName": "getLearningAssignmentsMe",
    "signature": "getLearningAssignmentsMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, types, states, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "minPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "maxPercentageScore",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "states",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentsDomainEntity",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLearningAssignmentsMeRequest();\n\nlet opts = { \n  'moduleId': \"moduleId_example\", // String | Specifies the ID of the learning module. Fetch assignments for learning module ID\n  'interval': \"interval_example\", // String | Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'completionInterval': \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'overdue': \"Any\", // String | Specifies if only the non-overdue (overdue is \\\"False\\\") or overdue (overdue is \\\"True\\\") assignments are returned. If overdue is \\\"Any\\\" or if the overdue parameter is not supplied, all assignments are returned\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'pass': \"Any\", // String | Specifies if only the failed (pass is \\\"False\\\") or passed (pass is \\\"True\\\") assignments (completed with assessment)are returned. If pass is \\\"Any\\\" or if the pass parameter is not supplied, all assignments are returned\n  'minPercentageScore': 3.4, // Number | The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  'maxPercentageScore': 3.4, // Number | The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\n  'sortOrder': \"Desc\", // String | Specifies result set sort order; if not specified, default sort order is descending (Desc)\n  'sortBy': \"sortBy_example\", // String | Specifies which field to sort the results by, default sort is by recommendedCompletionDate\n  'types': [\"types_example\"], // [String] | Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned\n  'states': [\"states_example\"], // [String] | Specifies the assignment states to filter by\n  'expand': [\"expand_example\"] // [String] | Specifies the expand option for returning additional information\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLearningAssignmentsMe(opts, callback);"
  },
  "getlearningmodule": {
    "operationId": "getlearningmodule",
    "functionName": "getLearningModule",
    "signature": "getLearningModule(moduleId, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningModule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLearningModuleRequest();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Fields to expand in response(case insensitive)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLearningModule(moduleId, opts, callback);"
  },
  "getlearningmodulerule": {
    "operationId": "getlearningmodulerule",
    "functionName": "getLearningModuleRule",
    "signature": "getLearningModuleRule(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModuleRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLearningModuleRuleRequest();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLearningModuleRule(moduleId, callback);"
  },
  "getlearningmoduleversion": {
    "operationId": "getlearningmoduleversion",
    "functionName": "getLearningModuleVersion",
    "signature": "getLearningModuleVersion(moduleId, versionId, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningModule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLearningModuleVersionRequest();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet versionId = \"versionId_example\"; // String | The version of learning module\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Fields to expand in response(case insensitive)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLearningModuleVersion(moduleId, versionId, opts, callback);"
  },
  "getlearningmodules": {
    "operationId": "getlearningmodules",
    "functionName": "getLearningModules",
    "signature": "getLearningModules(isArchived, types, pageSize, pageNumber, sortOrder, sortBy, searchTerm, expand, isPublished)",
    "parameters": [
      {
        "name": "isArchived",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "searchTerm",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "isPublished",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LearningModulesDomainEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLearningModulesRequest();\n\nlet opts = { \n  'isArchived': false, // Boolean | Archive status\n  'types': [\"types_example\"], // [String] | Specifies the module types.\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ascending\", // String | Sort order\n  'sortBy': \"name\", // String | Sort by\n  'searchTerm': \"searchTerm_example\", // String | Search Term (searchable by name)\n  'expand': [\"expand_example\"], // [String] | Fields to expand in response(case insensitive)\n  'isPublished': \"Any\" // String | Specifies if only the Unpublished (isPublished is \\\"False\\\") or Published (isPublished is \\\"True\\\") modules are returned. If isPublished is \\\"Any\\\" or omitted, both types are returned\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLearningModules(opts, callback);"
  },
  "patchlearningassignment": {
    "operationId": "patchlearningassignment",
    "functionName": "patchLearningAssignment",
    "signature": "patchLearningAssignment(assignmentId, body)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchLearningAssignmentRequest();\n\nlet assignmentId = \"assignmentId_example\"; // String | The ID of Learning Assignment\nlet opts = { \n  'body': {} // Object | The Learning Assignment to be updated\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchLearningAssignment(assignmentId, opts, callback);"
  },
  "postlearningassessmentsscoring": {
    "operationId": "postlearningassessmentsscoring",
    "functionName": "postLearningAssessmentsScoring",
    "signature": "postLearningAssessmentsScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AssessmentScoringSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningAssessmentsScoringRequest();\n\nlet body = {}; // Object | Assessment form and answers to score\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningAssessmentsScoring(body, callback);"
  },
  "postlearningassignments": {
    "operationId": "postlearningassignments",
    "functionName": "postLearningAssignments",
    "signature": "postLearningAssignments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningAssignmentsRequest();\n\nlet opts = { \n  'body': {} // Object | The Learning Assignment to be created\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningAssignments(opts, callback);"
  },
  "postlearningassignmentsaggregatesquery": {
    "operationId": "postlearningassignmentsaggregatesquery",
    "functionName": "postLearningAssignmentsAggregatesQuery",
    "signature": "postLearningAssignmentsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningAssignmentAggregateResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningAssignmentsAggregatesQueryRequest();\n\nlet body = {}; // Object | Aggregate Request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningAssignmentsAggregatesQuery(body, callback);"
  },
  "postlearningassignmentsbulkadd": {
    "operationId": "postlearningassignmentsbulkadd",
    "functionName": "postLearningAssignmentsBulkadd",
    "signature": "postLearningAssignmentsBulkadd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentBulkAddResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningAssignmentsBulkaddRequest();\n\nlet opts = { \n  'body': [{}] // Object | The learning assignments to be created\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningAssignmentsBulkadd(opts, callback);"
  },
  "postlearningassignmentsbulkremove": {
    "operationId": "postlearningassignmentsbulkremove",
    "functionName": "postLearningAssignmentsBulkremove",
    "signature": "postLearningAssignmentsBulkremove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentBulkRemoveResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningAssignmentsBulkremoveRequest();\n\nlet opts = { \n  'body': [{}] // Object | The IDs of the learning assignments to be removed\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningAssignmentsBulkremove(opts, callback);"
  },
  "postlearningmodulepublish": {
    "operationId": "postlearningmodulepublish",
    "functionName": "postLearningModulePublish",
    "signature": "postLearningModulePublish(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModulePublishResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningModulePublishRequest();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningModulePublish(moduleId, callback);"
  },
  "postlearningmodules": {
    "operationId": "postlearningmodules",
    "functionName": "postLearningModules",
    "signature": "postLearningModules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningModule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningModulesRequest();\n\nlet body = {}; // Object | The learning module to be created\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningModules(body, callback);"
  },
  "postlearningrulesquery": {
    "operationId": "postlearningrulesquery",
    "functionName": "postLearningRulesQuery",
    "signature": "postLearningRulesQuery(pageSize, pageNumber, body)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningAssignmentUserListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLearningRulesQueryRequest();\n\nlet pageSize = 50; // Number | Page size\nlet pageNumber = 1; // Number | Page number\nlet body = {}; // Object | The learning module rule to fetch users\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLearningRulesQuery(pageSize, pageNumber, body, callback);"
  },
  "putlearningmodule": {
    "operationId": "putlearningmodule",
    "functionName": "putLearningModule",
    "signature": "putLearningModule(moduleId, body)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningModule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutLearningModuleRequest();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet body = {}; // Object | The learning module to be updated\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putLearningModule(moduleId, body, callback);"
  },
  "putlearningmodulerule": {
    "operationId": "putlearningmodulerule",
    "functionName": "putLearningModuleRule",
    "signature": "putLearningModuleRule(moduleId, body)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LearningModuleRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutLearningModuleRuleRequest();\n\nlet moduleId = \"moduleId_example\"; // String | The ID of the learning module\nlet body = {}; // Object | The learning module rule to be updated\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putLearningModuleRule(moduleId, body, callback);"
  },
  "getlicensedefinition": {
    "operationId": "getlicensedefinition",
    "functionName": "getLicenseDefinition",
    "signature": "getLicenseDefinition(licenseId)",
    "parameters": [
      {
        "name": "licenseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseDefinition",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLicenseDefinitionRequest();\n\nlet licenseId = \"licenseId_example\"; // String | ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLicenseDefinition(licenseId, callback);"
  },
  "getlicensedefinitions": {
    "operationId": "getlicensedefinitions",
    "functionName": "getLicenseDefinitions",
    "signature": "getLicenseDefinitions()",
    "return": "[LicenseDefinition]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLicenseDefinitionsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLicenseDefinitions(callback);"
  },
  "getlicensetoggle": {
    "operationId": "getlicensetoggle",
    "functionName": "getLicenseToggle",
    "signature": "getLicenseToggle(featureName)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseOrgToggle",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLicenseToggleRequest();\n\nlet featureName = \"featureName_example\"; // String | featureName\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLicenseToggle(featureName, callback);"
  },
  "getlicenseuser": {
    "operationId": "getlicenseuser",
    "functionName": "getLicenseUser",
    "signature": "getLicenseUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseUser",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLicenseUserRequest();\n\nlet userId = \"userId_example\"; // String | ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLicenseUser(userId, callback);"
  },
  "getlicenseusers": {
    "operationId": "getlicenseusers",
    "functionName": "getLicenseUsers",
    "signature": "getLicenseUsers(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "UserLicensesEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLicenseUsersRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLicenseUsers(opts, callback);"
  },
  "postlicenseinfer": {
    "operationId": "postlicenseinfer",
    "functionName": "postLicenseInfer",
    "signature": "postLicenseInfer(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLicenseInferRequest();\n\nlet opts = { \n  'body': [{}] // Object | The roleIds to use while inferring licenses\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLicenseInfer(opts, callback);"
  },
  "postlicenseorganization": {
    "operationId": "postlicenseorganization",
    "functionName": "postLicenseOrganization",
    "signature": "postLicenseOrganization(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "[LicenseUpdateStatus]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLicenseOrganizationRequest();\n\nlet opts = { \n  'body': {} // Object | The license assignments to update.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLicenseOrganization(opts, callback);"
  },
  "postlicensetoggle": {
    "operationId": "postlicensetoggle",
    "functionName": "postLicenseToggle",
    "signature": "postLicenseToggle(featureName)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseOrgToggle",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLicenseToggleRequest();\n\nlet featureName = \"featureName_example\"; // String | featureName\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLicenseToggle(featureName, callback);"
  },
  "postlicenseusers": {
    "operationId": "postlicenseusers",
    "functionName": "postLicenseUsers",
    "signature": "postLicenseUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "{'String': Object}",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLicenseUsersRequest();\n\nlet opts = { \n  'body': [{}] // Object | The user IDs to fetch.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLicenseUsers(opts, callback);"
  },
  "deletelocation": {
    "operationId": "deletelocation",
    "functionName": "deleteLocation",
    "signature": "deleteLocation(locationId)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteLocationRequest();\n\nlet locationId = \"locationId_example\"; // String | Location ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteLocation(locationId, callback);"
  },
  "getlocation": {
    "operationId": "getlocation",
    "functionName": "getLocation",
    "signature": "getLocation(locationId, expand)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LocationDefinition",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLocationRequest();\n\nlet locationId = \"locationId_example\"; // String | Location ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLocation(locationId, opts, callback);"
  },
  "getlocationsublocations": {
    "operationId": "getlocationsublocations",
    "functionName": "getLocationSublocations",
    "signature": "getLocationSublocations(locationId)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LocationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLocationSublocationsRequest();\n\nlet locationId = \"locationId_example\"; // String | Location ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLocationSublocations(locationId, callback);"
  },
  "getlocations": {
    "operationId": "getlocations",
    "functionName": "getLocations",
    "signature": "getLocations(pageSize, pageNumber, id, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LocationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLocationsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'id': [\"id_example\"], // [String] | id\n  'sortOrder': \"sortOrder_example\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLocations(opts, callback);"
  },
  "getlocationssearch": {
    "operationId": "getlocationssearch",
    "functionName": "getLocationsSearch",
    "signature": "getLocationsSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LocationsSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetLocationsSearchRequest();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Provides more details about a specified resource\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getLocationsSearch(q64, opts, callback);"
  },
  "patchlocation": {
    "operationId": "patchlocation",
    "functionName": "patchLocation",
    "signature": "patchLocation(locationId, body)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocationDefinition",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchLocationRequest();\n\nlet locationId = \"locationId_example\"; // String | Location ID\nlet body = {}; // Object | Location\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchLocation(locationId, body, callback);"
  },
  "postlocations": {
    "operationId": "postlocations",
    "functionName": "postLocations",
    "signature": "postLocations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocationDefinition",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLocationsRequest();\n\nlet body = {}; // Object | Location\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLocations(body, callback);"
  },
  "postlocationssearch": {
    "operationId": "postlocationssearch",
    "functionName": "postLocationsSearch",
    "signature": "postLocationsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocationsSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLocationsSearchRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLocationsSearch(body, callback);"
  },
  "deletemessagingsupportedcontentsupportedcontentid": {
    "operationId": "deletemessagingsupportedcontentsupportedcontentid",
    "functionName": "deleteMessagingSupportedcontentSupportedContentId",
    "signature": "deleteMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteMessagingSupportedcontentSupportedContentIdRequest();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteMessagingSupportedcontentSupportedContentId(supportedContentId, callback);"
  },
  "getmessagingsupportedcontent": {
    "operationId": "getmessagingsupportedcontent",
    "functionName": "getMessagingSupportedcontent",
    "signature": "getMessagingSupportedcontent(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SupportedContentListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetMessagingSupportedcontentRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getMessagingSupportedcontent(opts, callback);"
  },
  "getmessagingsupportedcontentsupportedcontentid": {
    "operationId": "getmessagingsupportedcontentsupportedcontentid",
    "functionName": "getMessagingSupportedcontentSupportedContentId",
    "signature": "getMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetMessagingSupportedcontentSupportedContentIdRequest();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getMessagingSupportedcontentSupportedContentId(supportedContentId, callback);"
  },
  "patchmessagingsupportedcontentsupportedcontentid": {
    "operationId": "patchmessagingsupportedcontentsupportedcontentid",
    "functionName": "patchMessagingSupportedcontentSupportedContentId",
    "signature": "patchMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchMessagingSupportedcontentSupportedContentIdRequest();\n\nlet supportedContentId = \"supportedContentId_example\"; // String | Supported Content ID\nlet body = {}; // Object | SupportedContent\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchMessagingSupportedcontentSupportedContentId(supportedContentId, body, callback);"
  },
  "postmessagingsupportedcontent": {
    "operationId": "postmessagingsupportedcontent",
    "functionName": "postMessagingSupportedcontent",
    "signature": "postMessagingSupportedcontent(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostMessagingSupportedcontentRequest();\n\nlet body = {}; // Object | SupportedContent\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postMessagingSupportedcontent(body, callback);"
  },
  "deletemobiledevice": {
    "operationId": "deletemobiledevice",
    "functionName": "deleteMobiledevice",
    "signature": "deleteMobiledevice(deviceId)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteMobiledeviceRequest();\n\nlet deviceId = \"deviceId_example\"; // String | Device ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteMobiledevice(deviceId, callback);"
  },
  "getmobiledevice": {
    "operationId": "getmobiledevice",
    "functionName": "getMobiledevice",
    "signature": "getMobiledevice(deviceId)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserDevice",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetMobiledeviceRequest();\n\nlet deviceId = \"deviceId_example\"; // String | Device ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getMobiledevice(deviceId, callback);"
  },
  "getmobiledevices": {
    "operationId": "getmobiledevices",
    "functionName": "getMobiledevices",
    "signature": "getMobiledevices(pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DirectoryUserDevicesListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetMobiledevicesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ascending\" // String | Ascending or descending sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getMobiledevices(opts, callback);"
  },
  "postmobiledevices": {
    "operationId": "postmobiledevices",
    "functionName": "postMobiledevices",
    "signature": "postMobiledevices(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserDevice",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostMobiledevicesRequest();\n\nlet body = {}; // Object | Device\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postMobiledevices(body, callback);"
  },
  "putmobiledevice": {
    "operationId": "putmobiledevice",
    "functionName": "putMobiledevice",
    "signature": "putMobiledevice(deviceId, body)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserDevice",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutMobiledeviceRequest();\n\nlet deviceId = \"deviceId_example\"; // String | Device ID\nlet opts = { \n  'body': {} // Object | Device\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putMobiledevice(deviceId, opts, callback);"
  },
  "deletenotificationschannelsubscriptions": {
    "operationId": "deletenotificationschannelsubscriptions",
    "functionName": "deleteNotificationsChannelSubscriptions",
    "signature": "deleteNotificationsChannelSubscriptions(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteNotificationsChannelSubscriptionsRequest();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteNotificationsChannelSubscriptions(channelId, callback);"
  },
  "getnotificationsavailabletopics": {
    "operationId": "getnotificationsavailabletopics",
    "functionName": "getNotificationsAvailabletopics",
    "signature": "getNotificationsAvailabletopics(expand, includePreview)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includePreview",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AvailableTopicEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetNotificationsAvailabletopicsRequest();\n\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand\n  'includePreview': true // Boolean | Whether or not to include Preview topics\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getNotificationsAvailabletopics(opts, callback);"
  },
  "getnotificationschannelsubscriptions": {
    "operationId": "getnotificationschannelsubscriptions",
    "functionName": "getNotificationsChannelSubscriptions",
    "signature": "getNotificationsChannelSubscriptions(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetNotificationsChannelSubscriptionsRequest();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getNotificationsChannelSubscriptions(channelId, callback);"
  },
  "getnotificationschannels": {
    "operationId": "getnotificationschannels",
    "functionName": "getNotificationsChannels",
    "signature": "getNotificationsChannels(includechannels)",
    "parameters": [
      {
        "name": "includechannels",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ChannelEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetNotificationsChannelsRequest();\n\nlet opts = { \n  'includechannels': \"token\" // String | Show user's channels for this specific token or across all tokens for this user and app.  Channel Ids for other access tokens will not be shown, but will be presented to show their existence.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getNotificationsChannels(opts, callback);"
  },
  "headnotificationschannel": {
    "operationId": "headnotificationschannel",
    "functionName": "headNotificationsChannel",
    "signature": "headNotificationsChannel(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .HeadNotificationsChannelRequest();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.headNotificationsChannel(channelId, callback);"
  },
  "postnotificationschannelsubscriptions": {
    "operationId": "postnotificationschannelsubscriptions",
    "functionName": "postNotificationsChannelSubscriptions",
    "signature": "postNotificationsChannelSubscriptions(channelId, body)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostNotificationsChannelSubscriptionsRequest();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\nlet body = [{}]; // Object | Body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postNotificationsChannelSubscriptions(channelId, body, callback);"
  },
  "postnotificationschannels": {
    "operationId": "postnotificationschannels",
    "functionName": "postNotificationsChannels",
    "signature": "postNotificationsChannels()",
    "return": "Channel",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostNotificationsChannelsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postNotificationsChannels(callback);"
  },
  "putnotificationschannelsubscriptions": {
    "operationId": "putnotificationschannelsubscriptions",
    "functionName": "putNotificationsChannelSubscriptions",
    "signature": "putNotificationsChannelSubscriptions(channelId, body)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutNotificationsChannelSubscriptionsRequest();\n\nlet channelId = \"channelId_example\"; // String | Channel ID\nlet body = [{}]; // Object | Body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putNotificationsChannelSubscriptions(channelId, body, callback);"
  },
  "deleteoauthclient": {
    "operationId": "deleteoauthclient",
    "functionName": "deleteOauthClient",
    "signature": "deleteOauthClient(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOauthClientRequest();\n\nlet clientId = \"clientId_example\"; // String | Client ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOauthClient(clientId, callback);"
  },
  "getoauthauthorization": {
    "operationId": "getoauthauthorization",
    "functionName": "getOauthAuthorization",
    "signature": "getOauthAuthorization(clientId, acceptLanguage)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthAuthorization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthAuthorizationRequest();\n\nlet clientId = \"clientId_example\"; // String | The ID of client\nlet opts = { \n  'acceptLanguage': \"en-us\" // String | The language in which to display the client descriptions.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthAuthorization(clientId, opts, callback);"
  },
  "getoauthauthorizations": {
    "operationId": "getoauthauthorizations",
    "functionName": "getOauthAuthorizations",
    "signature": "getOauthAuthorizations(acceptLanguage)",
    "parameters": [
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthAuthorizationListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthAuthorizationsRequest();\n\nlet opts = { \n  'acceptLanguage': \"en-us\" // String | The language in which to display the client descriptions.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthAuthorizations(opts, callback);"
  },
  "getoauthclient": {
    "operationId": "getoauthclient",
    "functionName": "getOauthClient",
    "signature": "getOauthClient(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthClientRequest();\n\nlet clientId = \"clientId_example\"; // String | Client ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthClient(clientId, callback);"
  },
  "getoauthclientusagequeryresult": {
    "operationId": "getoauthclientusagequeryresult",
    "functionName": "getOauthClientUsageQueryResult",
    "signature": "getOauthClientUsageQueryResult(executionId, clientId)",
    "parameters": [
      {
        "name": "executionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ApiUsageQueryResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthClientUsageQueryResultRequest();\n\nlet executionId = \"executionId_example\"; // String | ID of the query execution\nlet clientId = \"clientId_example\"; // String | Client ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthClientUsageQueryResult(executionId, clientId, callback);"
  },
  "getoauthclientusagesummary": {
    "operationId": "getoauthclientusagesummary",
    "functionName": "getOauthClientUsageSummary",
    "signature": "getOauthClientUsageSummary(clientId, days)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "days",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthClientUsageSummaryRequest();\n\nlet clientId = \"clientId_example\"; // String | Client ID\nlet opts = { \n  'days': \"7\" // String | Previous number of days to query\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthClientUsageSummary(clientId, opts, callback);"
  },
  "getoauthclients": {
    "operationId": "getoauthclients",
    "functionName": "getOauthClients",
    "signature": "getOauthClients()",
    "return": "OAuthClientEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthClientsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthClients(callback);"
  },
  "getoauthscope": {
    "operationId": "getoauthscope",
    "functionName": "getOauthScope",
    "signature": "getOauthScope(scopeId, acceptLanguage)",
    "parameters": [
      {
        "name": "scopeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthScope",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthScopeRequest();\n\nlet scopeId = \"scopeId_example\"; // String | Scope ID\nlet opts = { \n  'acceptLanguage': \"en-us\" // String | The language with which to display the scope description.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthScope(scopeId, opts, callback);"
  },
  "getoauthscopes": {
    "operationId": "getoauthscopes",
    "functionName": "getOauthScopes",
    "signature": "getOauthScopes(acceptLanguage)",
    "parameters": [
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthScopeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOauthScopesRequest();\n\nlet opts = { \n  'acceptLanguage': \"en-us\" // String | The language with which to display the scope descriptions.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOauthScopes(opts, callback);"
  },
  "postoauthclientsecret": {
    "operationId": "postoauthclientsecret",
    "functionName": "postOauthClientSecret",
    "signature": "postOauthClientSecret(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOauthClientSecretRequest();\n\nlet clientId = \"clientId_example\"; // String | Client ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOauthClientSecret(clientId, callback);"
  },
  "postoauthclientusagequery": {
    "operationId": "postoauthclientusagequery",
    "functionName": "postOauthClientUsageQuery",
    "signature": "postOauthClientUsageQuery(clientId, body)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOauthClientUsageQueryRequest();\n\nlet clientId = \"clientId_example\"; // String | Client ID\nlet body = {}; // Object | Query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOauthClientUsageQuery(clientId, body, callback);"
  },
  "postoauthclients": {
    "operationId": "postoauthclients",
    "functionName": "postOauthClients",
    "signature": "postOauthClients(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOauthClientsRequest();\n\nlet body = {}; // Object | Client\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOauthClients(body, callback);"
  },
  "putoauthclient": {
    "operationId": "putoauthclient",
    "functionName": "putOauthClient",
    "signature": "putOauthClient(clientId, body)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOauthClientRequest();\n\nlet clientId = \"clientId_example\"; // String | Client ID\nlet body = {}; // Object | Client\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOauthClient(clientId, body, callback);"
  },
  "getorganizationsembeddedintegration": {
    "operationId": "getorganizationsembeddedintegration",
    "functionName": "getOrganizationsEmbeddedintegration",
    "signature": "getOrganizationsEmbeddedintegration()",
    "return": "EmbeddedIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsEmbeddedintegrationRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsEmbeddedintegration(callback);"
  },
  "getorganizationsipaddressauthentication": {
    "operationId": "getorganizationsipaddressauthentication",
    "functionName": "getOrganizationsIpaddressauthentication",
    "signature": "getOrganizationsIpaddressauthentication()",
    "return": "IpAddressAuthentication",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsIpaddressauthenticationRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsIpaddressauthentication(callback);"
  },
  "getorganizationslimitschangerequest": {
    "operationId": "getorganizationslimitschangerequest",
    "functionName": "getOrganizationsLimitsChangerequest",
    "signature": "getOrganizationsLimitsChangerequest(requestId)",
    "parameters": [
      {
        "name": "requestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitChangeRequestDetails",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsLimitsChangerequestRequest();\n\nlet requestId = \"requestId_example\"; // String | Unique id for the limit change request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsLimitsChangerequest(requestId, callback);"
  },
  "getorganizationslimitschangerequests": {
    "operationId": "getorganizationslimitschangerequests",
    "functionName": "getOrganizationsLimitsChangerequests",
    "signature": "getOrganizationsLimitsChangerequests(after, before, status, pageSize, expand)",
    "parameters": [
      {
        "name": "after",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "before",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "status",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LimitChangeRequestsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsLimitsChangerequestsRequest();\n\nlet opts = { \n  'after': 789, // Number | Timestamp indicating the date to begin after when searching for requests.\n  'before': 789, // Number | Timestamp indicating the date to end before when searching for requests.\n  'status': \"status_example\", // String | Status of the request to be filtered by\n  'pageSize': 25, // Number | Page Size\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsLimitsChangerequests(opts, callback);"
  },
  "getorganizationslimitsdocs": {
    "operationId": "getorganizationslimitsdocs",
    "functionName": "getOrganizationsLimitsDocs",
    "signature": "getOrganizationsLimitsDocs()",
    "return": "UrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsLimitsDocsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsLimitsDocs(callback);"
  },
  "getorganizationslimitsnamespace": {
    "operationId": "getorganizationslimitsnamespace",
    "functionName": "getOrganizationsLimitsNamespace",
    "signature": "getOrganizationsLimitsNamespace(namespaceName)",
    "parameters": [
      {
        "name": "namespaceName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsLimitsNamespaceRequest();\n\nlet namespaceName = \"namespaceName_example\"; // String | The namespace to fetch limits for\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsLimitsNamespace(namespaceName, callback);"
  },
  "getorganizationslimitsnamespacedefaults": {
    "operationId": "getorganizationslimitsnamespacedefaults",
    "functionName": "getOrganizationsLimitsNamespaceDefaults",
    "signature": "getOrganizationsLimitsNamespaceDefaults(namespaceName)",
    "parameters": [
      {
        "name": "namespaceName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsLimitsNamespaceDefaultsRequest();\n\nlet namespaceName = \"namespaceName_example\"; // String | The namespace to fetch defaults limits for\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsLimitsNamespaceDefaults(namespaceName, callback);"
  },
  "getorganizationslimitsnamespaces": {
    "operationId": "getorganizationslimitsnamespaces",
    "functionName": "getOrganizationsLimitsNamespaces",
    "signature": "getOrganizationsLimitsNamespaces(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "PagedNamespaceListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsLimitsNamespacesRequest();\n\nlet opts = { \n  'pageSize': 100, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsLimitsNamespaces(opts, callback);"
  },
  "getorganizationsme": {
    "operationId": "getorganizationsme",
    "functionName": "getOrganizationsMe",
    "signature": "getOrganizationsMe()",
    "return": "Organization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsMeRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsMe(callback);"
  },
  "getorganizationswhitelist": {
    "operationId": "getorganizationswhitelist",
    "functionName": "getOrganizationsWhitelist",
    "signature": "getOrganizationsWhitelist()",
    "return": "OrgWhitelistSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrganizationsWhitelistRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrganizationsWhitelist(callback);"
  },
  "patchorganizationsfeature": {
    "operationId": "patchorganizationsfeature",
    "functionName": "patchOrganizationsFeature",
    "signature": "patchOrganizationsFeature(featureName, enabled)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "enabled",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationFeatures",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchOrganizationsFeatureRequest();\n\nlet featureName = \"featureName_example\"; // String | Organization feature\nlet enabled = {}; // Object | New state of feature\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchOrganizationsFeature(featureName, enabled, callback);"
  },
  "putorganizationsembeddedintegration": {
    "operationId": "putorganizationsembeddedintegration",
    "functionName": "putOrganizationsEmbeddedintegration",
    "signature": "putOrganizationsEmbeddedintegration(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EmbeddedIntegration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrganizationsEmbeddedintegrationRequest();\n\nlet body = {}; // Object | Whitelist settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrganizationsEmbeddedintegration(body, callback);"
  },
  "putorganizationsipaddressauthentication": {
    "operationId": "putorganizationsipaddressauthentication",
    "functionName": "putOrganizationsIpaddressauthentication",
    "signature": "putOrganizationsIpaddressauthentication(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "IpAddressAuthentication",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrganizationsIpaddressauthenticationRequest();\n\nlet body = {}; // Object | IP address Whitelist settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrganizationsIpaddressauthentication(body, callback);"
  },
  "putorganizationsme": {
    "operationId": "putorganizationsme",
    "functionName": "putOrganizationsMe",
    "signature": "putOrganizationsMe(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Organization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrganizationsMeRequest();\n\nlet opts = { \n  'body': {} // Object | Organization\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrganizationsMe(opts, callback);"
  },
  "putorganizationswhitelist": {
    "operationId": "putorganizationswhitelist",
    "functionName": "putOrganizationsWhitelist",
    "signature": "putOrganizationsWhitelist(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrgWhitelistSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrganizationsWhitelistRequest();\n\nlet body = {}; // Object | Whitelist settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrganizationsWhitelist(body, callback);"
  },
  "deleteorgauthorizationtrustee": {
    "operationId": "deleteorgauthorizationtrustee",
    "functionName": "deleteOrgauthorizationTrustee",
    "signature": "deleteOrgauthorizationTrustee(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrgauthorizationTrusteeRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOrgauthorizationTrustee(trusteeOrgId, callback);"
  },
  "deleteorgauthorizationtrusteecloneduser": {
    "operationId": "deleteorgauthorizationtrusteecloneduser",
    "functionName": "deleteOrgauthorizationTrusteeCloneduser",
    "signature": "deleteOrgauthorizationTrusteeCloneduser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrgauthorizationTrusteeCloneduserRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Id of the cloned user to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOrgauthorizationTrusteeCloneduser(trusteeOrgId, trusteeUserId, callback);"
  },
  "deleteorgauthorizationtrusteeuser": {
    "operationId": "deleteorgauthorizationtrusteeuser",
    "functionName": "deleteOrgauthorizationTrusteeUser",
    "signature": "deleteOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrgauthorizationTrusteeUserRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId, callback);"
  },
  "deleteorgauthorizationtrusteeuserroles": {
    "operationId": "deleteorgauthorizationtrusteeuserroles",
    "functionName": "deleteOrgauthorizationTrusteeUserRoles",
    "signature": "deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrgauthorizationTrusteeUserRolesRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, callback);"
  },
  "deleteorgauthorizationtrustor": {
    "operationId": "deleteorgauthorizationtrustor",
    "functionName": "deleteOrgauthorizationTrustor",
    "signature": "deleteOrgauthorizationTrustor(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrgauthorizationTrustorRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOrgauthorizationTrustor(trustorOrgId, callback);"
  },
  "deleteorgauthorizationtrustorcloneduser": {
    "operationId": "deleteorgauthorizationtrustorcloneduser",
    "functionName": "deleteOrgauthorizationTrustorCloneduser",
    "signature": "deleteOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrgauthorizationTrustorCloneduserRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId, callback);"
  },
  "deleteorgauthorizationtrustoruser": {
    "operationId": "deleteorgauthorizationtrustoruser",
    "functionName": "deleteOrgauthorizationTrustorUser",
    "signature": "deleteOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrgauthorizationTrustorUserRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId, callback);"
  },
  "getorgauthorizationpairing": {
    "operationId": "getorgauthorizationpairing",
    "functionName": "getOrgauthorizationPairing",
    "signature": "getOrgauthorizationPairing(pairingId)",
    "parameters": [
      {
        "name": "pairingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationPairingRequest();\n\nlet pairingId = \"pairingId_example\"; // String | Pairing Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationPairing(pairingId, callback);"
  },
  "getorgauthorizationtrustee": {
    "operationId": "getorgauthorizationtrustee",
    "functionName": "getOrgauthorizationTrustee",
    "signature": "getOrgauthorizationTrustee(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrusteeRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustee(trusteeOrgId, callback);"
  },
  "getorgauthorizationtrusteeclonedusers": {
    "operationId": "getorgauthorizationtrusteeclonedusers",
    "functionName": "getOrgauthorizationTrusteeClonedusers",
    "signature": "getOrgauthorizationTrusteeClonedusers(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrusteeClonedusersRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrusteeClonedusers(trusteeOrgId, callback);"
  },
  "getorgauthorizationtrusteeuser": {
    "operationId": "getorgauthorizationtrusteeuser",
    "functionName": "getOrgauthorizationTrusteeUser",
    "signature": "getOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrusteeUserRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId, callback);"
  },
  "getorgauthorizationtrusteeuserroles": {
    "operationId": "getorgauthorizationtrusteeuserroles",
    "functionName": "getOrgauthorizationTrusteeUserRoles",
    "signature": "getOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrusteeUserRolesRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, callback);"
  },
  "getorgauthorizationtrusteeusers": {
    "operationId": "getorgauthorizationtrusteeusers",
    "functionName": "getOrgauthorizationTrusteeUsers",
    "signature": "getOrgauthorizationTrusteeUsers(trusteeOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustUserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrusteeUsersRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrusteeUsers(trusteeOrgId, opts, callback);"
  },
  "getorgauthorizationtrustees": {
    "operationId": "getorgauthorizationtrustees",
    "functionName": "getOrgauthorizationTrustees",
    "signature": "getOrgauthorizationTrustees(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrusteesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustees(opts, callback);"
  },
  "getorgauthorizationtrusteesdefault": {
    "operationId": "getorgauthorizationtrusteesdefault",
    "functionName": "getOrgauthorizationTrusteesDefault",
    "signature": "getOrgauthorizationTrusteesDefault()",
    "return": "Trustee",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrusteesDefaultRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrusteesDefault(callback);"
  },
  "getorgauthorizationtrustor": {
    "operationId": "getorgauthorizationtrustor",
    "functionName": "getOrgauthorizationTrustor",
    "signature": "getOrgauthorizationTrustor(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trustor",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrustorRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustor(trustorOrgId, callback);"
  },
  "getorgauthorizationtrustorcloneduser": {
    "operationId": "getorgauthorizationtrustorcloneduser",
    "functionName": "getOrgauthorizationTrustorCloneduser",
    "signature": "getOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUser",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrustorCloneduserRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId, callback);"
  },
  "getorgauthorizationtrustorclonedusers": {
    "operationId": "getorgauthorizationtrustorclonedusers",
    "functionName": "getOrgauthorizationTrustorClonedusers",
    "signature": "getOrgauthorizationTrustorClonedusers(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrustorClonedusersRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustorClonedusers(trustorOrgId, callback);"
  },
  "getorgauthorizationtrustoruser": {
    "operationId": "getorgauthorizationtrustoruser",
    "functionName": "getOrgauthorizationTrustorUser",
    "signature": "getOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrustorUserRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId, callback);"
  },
  "getorgauthorizationtrustorusers": {
    "operationId": "getorgauthorizationtrustorusers",
    "functionName": "getOrgauthorizationTrustorUsers",
    "signature": "getOrgauthorizationTrustorUsers(trustorOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustUserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrustorUsersRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustee Organization Id\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustorUsers(trustorOrgId, opts, callback);"
  },
  "getorgauthorizationtrustors": {
    "operationId": "getorgauthorizationtrustors",
    "functionName": "getOrgauthorizationTrustors",
    "signature": "getOrgauthorizationTrustors(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustorEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrgauthorizationTrustorsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrgauthorizationTrustors(opts, callback);"
  },
  "postorgauthorizationpairings": {
    "operationId": "postorgauthorizationpairings",
    "functionName": "postOrgauthorizationPairings",
    "signature": "postOrgauthorizationPairings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrustRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOrgauthorizationPairingsRequest();\n\nlet body = {}; // Object | Pairing Info\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOrgauthorizationPairings(body, callback);"
  },
  "postorgauthorizationtrusteeusers": {
    "operationId": "postorgauthorizationtrusteeusers",
    "functionName": "postOrgauthorizationTrusteeUsers",
    "signature": "postOrgauthorizationTrusteeUsers(trusteeOrgId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOrgauthorizationTrusteeUsersRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet body = {}; // Object | Trust\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOrgauthorizationTrusteeUsers(trusteeOrgId, body, callback);"
  },
  "postorgauthorizationtrustees": {
    "operationId": "postorgauthorizationtrustees",
    "functionName": "postOrgauthorizationTrustees",
    "signature": "postOrgauthorizationTrustees(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOrgauthorizationTrusteesRequest();\n\nlet body = {}; // Object | Trust\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOrgauthorizationTrustees(body, callback);"
  },
  "postorgauthorizationtrusteesaudits": {
    "operationId": "postorgauthorizationtrusteesaudits",
    "functionName": "postOrgauthorizationTrusteesAudits",
    "signature": "postOrgauthorizationTrusteesAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AuditQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOrgauthorizationTrusteesAuditsRequest();\n\nlet body = {}; // Object | Values to scope the request.\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"timestamp\", // String | Sort by\n  'sortOrder': \"descending\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOrgauthorizationTrusteesAudits(body, opts, callback);"
  },
  "postorgauthorizationtrusteesdefault": {
    "operationId": "postorgauthorizationtrusteesdefault",
    "functionName": "postOrgauthorizationTrusteesDefault",
    "signature": "postOrgauthorizationTrusteesDefault(assignDefaultRole, autoExpire)",
    "parameters": [
      {
        "name": "assignDefaultRole",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "autoExpire",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "Trustee",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOrgauthorizationTrusteesDefaultRequest();\n\nlet opts = { \n  'assignDefaultRole': true, // Boolean | Assign Admin role to default pairing with Customer Care\n  'autoExpire': true // Boolean | Automatically expire pairing after 30 days\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOrgauthorizationTrusteesDefault(opts, callback);"
  },
  "postorgauthorizationtrustoraudits": {
    "operationId": "postorgauthorizationtrustoraudits",
    "functionName": "postOrgauthorizationTrustorAudits",
    "signature": "postOrgauthorizationTrustorAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AuditQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOrgauthorizationTrustorAuditsRequest();\n\nlet body = {}; // Object | Values to scope the request.\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"timestamp\", // String | Sort by\n  'sortOrder': \"descending\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOrgauthorizationTrustorAudits(body, opts, callback);"
  },
  "putorgauthorizationtrustee": {
    "operationId": "putorgauthorizationtrustee",
    "functionName": "putOrgauthorizationTrustee",
    "signature": "putOrgauthorizationTrustee(trusteeOrgId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrgauthorizationTrusteeRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet body = {}; // Object | Client\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrgauthorizationTrustee(trusteeOrgId, body, callback);"
  },
  "putorgauthorizationtrusteeuserroledivisions": {
    "operationId": "putorgauthorizationtrusteeuserroledivisions",
    "functionName": "putOrgauthorizationTrusteeUserRoledivisions",
    "signature": "putOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId, trusteeUserId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrgauthorizationTrusteeUserRoledivisionsRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\nlet body = {}; // Object | Set of roles with corresponding divisions to apply\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId, trusteeUserId, body, callback);"
  },
  "putorgauthorizationtrusteeuserroles": {
    "operationId": "putorgauthorizationtrusteeuserroles",
    "functionName": "putOrgauthorizationTrusteeUserRoles",
    "signature": "putOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrgauthorizationTrusteeUserRolesRequest();\n\nlet trusteeOrgId = \"trusteeOrgId_example\"; // String | Trustee Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\nlet body = [{}]; // Object | List of roles\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, body, callback);"
  },
  "putorgauthorizationtrustorcloneduser": {
    "operationId": "putorgauthorizationtrustorcloneduser",
    "functionName": "putOrgauthorizationTrustorCloneduser",
    "signature": "putOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUser",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrgauthorizationTrustorCloneduserRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId, callback);"
  },
  "putorgauthorizationtrustoruser": {
    "operationId": "putorgauthorizationtrustoruser",
    "functionName": "putOrgauthorizationTrustorUser",
    "signature": "putOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrgauthorizationTrustorUserRequest();\n\nlet trustorOrgId = \"trustorOrgId_example\"; // String | Trustor Organization Id\nlet trusteeUserId = \"trusteeUserId_example\"; // String | Trustee User Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId, callback);"
  },
  "deleteoutboundattemptlimit": {
    "operationId": "deleteoutboundattemptlimit",
    "functionName": "deleteOutboundAttemptlimit",
    "signature": "deleteOutboundAttemptlimit(attemptLimitsId)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundAttemptlimitRequest();\n\nlet attemptLimitsId = \"attemptLimitsId_example\"; // String | Attempt limits ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundAttemptlimit(attemptLimitsId, callback);"
  },
  "deleteoutboundcallabletimeset": {
    "operationId": "deleteoutboundcallabletimeset",
    "functionName": "deleteOutboundCallabletimeset",
    "signature": "deleteOutboundCallabletimeset(callableTimeSetId)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundCallabletimesetRequest();\n\nlet callableTimeSetId = \"callableTimeSetId_example\"; // String | Callable Time Set ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundCallabletimeset(callableTimeSetId, callback);"
  },
  "deleteoutboundcallanalysisresponseset": {
    "operationId": "deleteoutboundcallanalysisresponseset",
    "functionName": "deleteOutboundCallanalysisresponseset",
    "signature": "deleteOutboundCallanalysisresponseset(callAnalysisSetId)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundCallanalysisresponsesetRequest();\n\nlet callAnalysisSetId = \"callAnalysisSetId_example\"; // String | Call Analysis Response Set ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundCallanalysisresponseset(callAnalysisSetId, callback);"
  },
  "deleteoutboundcampaign": {
    "operationId": "deleteoutboundcampaign",
    "functionName": "deleteOutboundCampaign",
    "signature": "deleteOutboundCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundCampaignRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteOutboundCampaign(campaignId, callback);"
  },
  "deleteoutboundcampaignprogress": {
    "operationId": "deleteoutboundcampaignprogress",
    "functionName": "deleteOutboundCampaignProgress",
    "signature": "deleteOutboundCampaignProgress(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundCampaignProgressRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundCampaignProgress(campaignId, callback);"
  },
  "deleteoutboundcampaignrule": {
    "operationId": "deleteoutboundcampaignrule",
    "functionName": "deleteOutboundCampaignrule",
    "signature": "deleteOutboundCampaignrule(campaignRuleId)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundCampaignruleRequest();\n\nlet campaignRuleId = \"campaignRuleId_example\"; // String | Campaign Rule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundCampaignrule(campaignRuleId, callback);"
  },
  "deleteoutboundcontactlist": {
    "operationId": "deleteoutboundcontactlist",
    "functionName": "deleteOutboundContactlist",
    "signature": "deleteOutboundContactlist(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundContactlistRequest();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundContactlist(contactListId, callback);"
  },
  "deleteoutboundcontactlistcontact": {
    "operationId": "deleteoutboundcontactlistcontact",
    "functionName": "deleteOutboundContactlistContact",
    "signature": "deleteOutboundContactlistContact(contactListId, contactId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundContactlistContactRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactId = \"contactId_example\"; // String | Contact ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundContactlistContact(contactListId, contactId, callback);"
  },
  "deleteoutboundcontactlistcontacts": {
    "operationId": "deleteoutboundcontactlistcontacts",
    "functionName": "deleteOutboundContactlistContacts",
    "signature": "deleteOutboundContactlistContacts(contactListId, contactIds)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactIds",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundContactlistContactsRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactIds = [\"contactIds_example\"]; // [String] | ContactIds to delete.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundContactlistContacts(contactListId, contactIds, callback);"
  },
  "deleteoutboundcontactlistfilter": {
    "operationId": "deleteoutboundcontactlistfilter",
    "functionName": "deleteOutboundContactlistfilter",
    "signature": "deleteOutboundContactlistfilter(contactListFilterId)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundContactlistfilterRequest();\n\nlet contactListFilterId = \"contactListFilterId_example\"; // String | Contact List Filter ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundContactlistfilter(contactListFilterId, callback);"
  },
  "deleteoutboundcontactlists": {
    "operationId": "deleteoutboundcontactlists",
    "functionName": "deleteOutboundContactlists",
    "signature": "deleteOutboundContactlists(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundContactlistsRequest();\n\nlet id = [\"id_example\"]; // [String] | contact list id(s) to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundContactlists(id, callback);"
  },
  "deleteoutbounddnclist": {
    "operationId": "deleteoutbounddnclist",
    "functionName": "deleteOutboundDnclist",
    "signature": "deleteOutboundDnclist(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundDnclistRequest();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundDnclist(dncListId, callback);"
  },
  "deleteoutboundmessagingcampaign": {
    "operationId": "deleteoutboundmessagingcampaign",
    "functionName": "deleteOutboundMessagingcampaign",
    "signature": "deleteOutboundMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundMessagingcampaignRequest();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteOutboundMessagingcampaign(messagingCampaignId, callback);"
  },
  "deleteoutboundruleset": {
    "operationId": "deleteoutboundruleset",
    "functionName": "deleteOutboundRuleset",
    "signature": "deleteOutboundRuleset(ruleSetId)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundRulesetRequest();\n\nlet ruleSetId = \"ruleSetId_example\"; // String | Rule Set ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundRuleset(ruleSetId, callback);"
  },
  "deleteoutboundschedulescampaign": {
    "operationId": "deleteoutboundschedulescampaign",
    "functionName": "deleteOutboundSchedulesCampaign",
    "signature": "deleteOutboundSchedulesCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundSchedulesCampaignRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundSchedulesCampaign(campaignId, callback);"
  },
  "deleteoutboundschedulessequence": {
    "operationId": "deleteoutboundschedulessequence",
    "functionName": "deleteOutboundSchedulesSequence",
    "signature": "deleteOutboundSchedulesSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundSchedulesSequenceRequest();\n\nlet sequenceId = \"sequenceId_example\"; // String | Sequence ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundSchedulesSequence(sequenceId, callback);"
  },
  "deleteoutboundsequence": {
    "operationId": "deleteoutboundsequence",
    "functionName": "deleteOutboundSequence",
    "signature": "deleteOutboundSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOutboundSequenceRequest();\n\nlet sequenceId = \"sequenceId_example\"; // String | Campaign Sequence ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteOutboundSequence(sequenceId, callback);"
  },
  "getoutboundattemptlimit": {
    "operationId": "getoutboundattemptlimit",
    "functionName": "getOutboundAttemptlimit",
    "signature": "getOutboundAttemptlimit(attemptLimitsId)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundAttemptlimitRequest();\n\nlet attemptLimitsId = \"attemptLimitsId_example\"; // String | Attempt limits ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundAttemptlimit(attemptLimitsId, callback);"
  },
  "getoutboundattemptlimits": {
    "operationId": "getoutboundattemptlimits",
    "functionName": "getOutboundAttemptlimits",
    "signature": "getOutboundAttemptlimits(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AttemptLimitsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundAttemptlimitsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundAttemptlimits(opts, callback);"
  },
  "getoutboundcallabletimeset": {
    "operationId": "getoutboundcallabletimeset",
    "functionName": "getOutboundCallabletimeset",
    "signature": "getOutboundCallabletimeset(callableTimeSetId)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCallabletimesetRequest();\n\nlet callableTimeSetId = \"callableTimeSetId_example\"; // String | Callable Time Set ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCallabletimeset(callableTimeSetId, callback);"
  },
  "getoutboundcallabletimesets": {
    "operationId": "getoutboundcallabletimesets",
    "functionName": "getOutboundCallabletimesets",
    "signature": "getOutboundCallabletimesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CallableTimeSetEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCallabletimesetsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCallabletimesets(opts, callback);"
  },
  "getoutboundcallanalysisresponseset": {
    "operationId": "getoutboundcallanalysisresponseset",
    "functionName": "getOutboundCallanalysisresponseset",
    "signature": "getOutboundCallanalysisresponseset(callAnalysisSetId)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCallanalysisresponsesetRequest();\n\nlet callAnalysisSetId = \"callAnalysisSetId_example\"; // String | Call Analysis Response Set ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCallanalysisresponseset(callAnalysisSetId, callback);"
  },
  "getoutboundcallanalysisresponsesets": {
    "operationId": "getoutboundcallanalysisresponsesets",
    "functionName": "getOutboundCallanalysisresponsesets",
    "signature": "getOutboundCallanalysisresponsesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ResponseSetEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCallanalysisresponsesetsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCallanalysisresponsesets(opts, callback);"
  },
  "getoutboundcampaign": {
    "operationId": "getoutboundcampaign",
    "functionName": "getOutboundCampaign",
    "signature": "getOutboundCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaign(campaignId, callback);"
  },
  "getoutboundcampaignagentownedmappingpreviewresults": {
    "operationId": "getoutboundcampaignagentownedmappingpreviewresults",
    "functionName": "getOutboundCampaignAgentownedmappingpreviewResults",
    "signature": "getOutboundCampaignAgentownedmappingpreviewResults(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentOwnedMappingPreviewListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignAgentownedmappingpreviewResultsRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignAgentownedmappingpreviewResults(campaignId, callback);"
  },
  "getoutboundcampaigndiagnostics": {
    "operationId": "getoutboundcampaigndiagnostics",
    "functionName": "getOutboundCampaignDiagnostics",
    "signature": "getOutboundCampaignDiagnostics(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignDiagnostics",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignDiagnosticsRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignDiagnostics(campaignId, callback);"
  },
  "getoutboundcampaigninteractions": {
    "operationId": "getoutboundcampaigninteractions",
    "functionName": "getOutboundCampaignInteractions",
    "signature": "getOutboundCampaignInteractions(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignInteractions",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignInteractionsRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignInteractions(campaignId, callback);"
  },
  "getoutboundcampaignprogress": {
    "operationId": "getoutboundcampaignprogress",
    "functionName": "getOutboundCampaignProgress",
    "signature": "getOutboundCampaignProgress(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignProgress",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignProgressRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignProgress(campaignId, callback);"
  },
  "getoutboundcampaignstats": {
    "operationId": "getoutboundcampaignstats",
    "functionName": "getOutboundCampaignStats",
    "signature": "getOutboundCampaignStats(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignStats",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignStatsRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignStats(campaignId, callback);"
  },
  "getoutboundcampaignrule": {
    "operationId": "getoutboundcampaignrule",
    "functionName": "getOutboundCampaignrule",
    "signature": "getOutboundCampaignrule(campaignRuleId)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignruleRequest();\n\nlet campaignRuleId = \"campaignRuleId_example\"; // String | Campaign Rule ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignrule(campaignRuleId, callback);"
  },
  "getoutboundcampaignrules": {
    "operationId": "getoutboundcampaignrules",
    "functionName": "getOutboundCampaignrules",
    "signature": "getOutboundCampaignrules(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignRuleEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignrulesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignrules(opts, callback);"
  },
  "getoutboundcampaigns": {
    "operationId": "getoutboundcampaigns",
    "functionName": "getOutboundCampaigns",
    "signature": "getOutboundCampaigns(pageSize, pageNumber, filterType, name, id, contactListId, dncListIds, distributionQueueId, edgeGroupId, callAnalysisResponseSetId, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncListIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "distributionQueueId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "callAnalysisResponseSetId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'id': [\"id_example\"], // [String] | id\n  'contactListId': \"contactListId_example\", // String | Contact List ID\n  'dncListIds': \"dncListIds_example\", // String | DNC list ID\n  'distributionQueueId': \"distributionQueueId_example\", // String | Distribution queue ID\n  'edgeGroupId': \"edgeGroupId_example\", // String | Edge group ID\n  'callAnalysisResponseSetId': \"callAnalysisResponseSetId_example\", // String | Call analysis response set ID\n  'divisionId': [\"divisionId_example\"], // [String] | Division ID(s)\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaigns(opts, callback);"
  },
  "getoutboundcampaignsall": {
    "operationId": "getoutboundcampaignsall",
    "functionName": "getOutboundCampaignsAll",
    "signature": "getOutboundCampaignsAll(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CommonCampaignEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignsAllRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'id': [\"id_example\"], // [String] | Campaign ID(s)\n  'name': \"name_example\", // String | Campaign name(s)\n  'divisionId': [\"divisionId_example\"], // [String] | Division ID(s)\n  'mediaType': [\"mediaType_example\"], // [String] | Media type(s)\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignsAll(opts, callback);"
  },
  "getoutboundcampaignsalldivisionviews": {
    "operationId": "getoutboundcampaignsalldivisionviews",
    "functionName": "getOutboundCampaignsAllDivisionviews",
    "signature": "getOutboundCampaignsAllDivisionviews(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CommonCampaignDivisionViewEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignsAllDivisionviewsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'id': [\"id_example\"], // [String] | Campaign ID(s)\n  'name': \"name_example\", // String | Campaign name(s)\n  'divisionId': [\"divisionId_example\"], // [String] | Division ID(s)\n  'mediaType': [\"mediaType_example\"], // [String] | Media type(s)\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignsAllDivisionviews(opts, callback);"
  },
  "getoutboundcampaignsdivisionview": {
    "operationId": "getoutboundcampaignsdivisionview",
    "functionName": "getOutboundCampaignsDivisionview",
    "signature": "getOutboundCampaignsDivisionview(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignDivisionView",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignsDivisionviewRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignsDivisionview(campaignId, callback);"
  },
  "getoutboundcampaignsdivisionviews": {
    "operationId": "getoutboundcampaignsdivisionviews",
    "functionName": "getOutboundCampaignsDivisionviews",
    "signature": "getOutboundCampaignsDivisionviews(pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignDivisionViewListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundCampaignsDivisionviewsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'id': [\"id_example\"], // [String] | id\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundCampaignsDivisionviews(opts, callback);"
  },
  "getoutboundcontactlist": {
    "operationId": "getoutboundcontactlist",
    "functionName": "getOutboundContactlist",
    "signature": "getOutboundContactlist(contactListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ContactList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistRequest();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\nlet opts = { \n  'includeImportStatus': false, // Boolean | Import status\n  'includeSize': false // Boolean | Include size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlist(contactListId, opts, callback);"
  },
  "getoutboundcontactlistcontact": {
    "operationId": "getoutboundcontactlistcontact",
    "functionName": "getOutboundContactlistContact",
    "signature": "getOutboundContactlistContact(contactListId, contactId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DialerContact",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistContactRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactId = \"contactId_example\"; // String | Contact ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistContact(contactListId, contactId, callback);"
  },
  "getoutboundcontactlistexport": {
    "operationId": "getoutboundcontactlistexport",
    "functionName": "getOutboundContactlistExport",
    "signature": "getOutboundContactlistExport(contactListId, download)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "download",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExportUri",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistExportRequest();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\nlet opts = { \n  'download': \"false\" // String | Redirect to download uri\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistExport(contactListId, opts, callback);"
  },
  "getoutboundcontactlistimportstatus": {
    "operationId": "getoutboundcontactlistimportstatus",
    "functionName": "getOutboundContactlistImportstatus",
    "signature": "getOutboundContactlistImportstatus(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ImportStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistImportstatusRequest();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistImportstatus(contactListId, callback);"
  },
  "getoutboundcontactlisttimezonemappingpreview": {
    "operationId": "getoutboundcontactlisttimezonemappingpreview",
    "functionName": "getOutboundContactlistTimezonemappingpreview",
    "signature": "getOutboundContactlistTimezonemappingpreview(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeZoneMappingPreview",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistTimezonemappingpreviewRequest();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistTimezonemappingpreview(contactListId, callback);"
  },
  "getoutboundcontactlistfilter": {
    "operationId": "getoutboundcontactlistfilter",
    "functionName": "getOutboundContactlistfilter",
    "signature": "getOutboundContactlistfilter(contactListFilterId)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistfilterRequest();\n\nlet contactListFilterId = \"contactListFilterId_example\"; // String | Contact List Filter ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistfilter(contactListFilterId, callback);"
  },
  "getoutboundcontactlistfilters": {
    "operationId": "getoutboundcontactlistfilters",
    "functionName": "getOutboundContactlistfilters",
    "signature": "getOutboundContactlistfilters(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder, contactListId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListFilterEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistfiltersRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\", // String | Sort order\n  'contactListId': \"contactListId_example\" // String | Contact List ID\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistfilters(opts, callback);"
  },
  "getoutboundcontactlists": {
    "operationId": "getoutboundcontactlists",
    "functionName": "getOutboundContactlists",
    "signature": "getOutboundContactlists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, id, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistsRequest();\n\nlet opts = { \n  'includeImportStatus': false, // Boolean | Include import status\n  'includeSize': false, // Boolean | Include size\n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'id': [\"id_example\"], // [String] | id\n  'divisionId': [\"divisionId_example\"], // [String] | Division ID(s)\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlists(opts, callback);"
  },
  "getoutboundcontactlistsdivisionview": {
    "operationId": "getoutboundcontactlistsdivisionview",
    "functionName": "getOutboundContactlistsDivisionview",
    "signature": "getOutboundContactlistsDivisionview(contactListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ContactListDivisionView",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistsDivisionviewRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contactlist ID\nlet opts = { \n  'includeImportStatus': false, // Boolean | Include import status\n  'includeSize': false // Boolean | Include size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistsDivisionview(contactListId, opts, callback);"
  },
  "getoutboundcontactlistsdivisionviews": {
    "operationId": "getoutboundcontactlistsdivisionviews",
    "functionName": "getOutboundContactlistsDivisionviews",
    "signature": "getOutboundContactlistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListDivisionViewListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundContactlistsDivisionviewsRequest();\n\nlet opts = { \n  'includeImportStatus': false, // Boolean | Include import status\n  'includeSize': false, // Boolean | Include size\n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'id': [\"id_example\"], // [String] | id\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundContactlistsDivisionviews(opts, callback);"
  },
  "getoutbounddnclist": {
    "operationId": "getoutbounddnclist",
    "functionName": "getOutboundDnclist",
    "signature": "getOutboundDnclist(dncListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DncList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundDnclistRequest();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet opts = { \n  'includeImportStatus': false, // Boolean | Import status\n  'includeSize': false // Boolean | Include size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundDnclist(dncListId, opts, callback);"
  },
  "getoutbounddnclistexport": {
    "operationId": "getoutbounddnclistexport",
    "functionName": "getOutboundDnclistExport",
    "signature": "getOutboundDnclistExport(dncListId, download)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "download",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExportUri",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundDnclistExportRequest();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet opts = { \n  'download': \"false\" // String | Redirect to download uri\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundDnclistExport(dncListId, opts, callback);"
  },
  "getoutbounddnclistimportstatus": {
    "operationId": "getoutbounddnclistimportstatus",
    "functionName": "getOutboundDnclistImportstatus",
    "signature": "getOutboundDnclistImportstatus(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ImportStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundDnclistImportstatusRequest();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundDnclistImportstatus(dncListId, callback);"
  },
  "getoutbounddnclists": {
    "operationId": "getoutbounddnclists",
    "functionName": "getOutboundDnclists",
    "signature": "getOutboundDnclists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, dncSourceType, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncSourceType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DncListEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundDnclistsRequest();\n\nlet opts = { \n  'includeImportStatus': false, // Boolean | Import status\n  'includeSize': false, // Boolean | Include size\n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'dncSourceType': \"dncSourceType_example\", // String | DncSourceType\n  'divisionId': [\"divisionId_example\"], // [String] | Division ID(s)\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"sortOrder_example\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundDnclists(opts, callback);"
  },
  "getoutbounddnclistsdivisionview": {
    "operationId": "getoutbounddnclistsdivisionview",
    "functionName": "getOutboundDnclistsDivisionview",
    "signature": "getOutboundDnclistsDivisionview(dncListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "DncListDivisionView",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundDnclistsDivisionviewRequest();\n\nlet dncListId = \"dncListId_example\"; // String | Dnclist ID\nlet opts = { \n  'includeImportStatus': false, // Boolean | Include import status\n  'includeSize': false // Boolean | Include size\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundDnclistsDivisionview(dncListId, opts, callback);"
  },
  "getoutbounddnclistsdivisionviews": {
    "operationId": "getoutbounddnclistsdivisionviews",
    "functionName": "getOutboundDnclistsDivisionviews",
    "signature": "getOutboundDnclistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, dncSourceType, id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncSourceType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DncListDivisionViewListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundDnclistsDivisionviewsRequest();\n\nlet opts = { \n  'includeImportStatus': false, // Boolean | Include import status\n  'includeSize': false, // Boolean | Include size\n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'dncSourceType': \"dncSourceType_example\", // String | DncSourceType\n  'id': [\"id_example\"], // [String] | id\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundDnclistsDivisionviews(opts, callback);"
  },
  "getoutboundevent": {
    "operationId": "getoutboundevent",
    "functionName": "getOutboundEvent",
    "signature": "getOutboundEvent(eventId)",
    "parameters": [
      {
        "name": "eventId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EventLog",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundEventRequest();\n\nlet eventId = \"eventId_example\"; // String | Event Log ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundEvent(eventId, callback);"
  },
  "getoutboundevents": {
    "operationId": "getoutboundevents",
    "functionName": "getOutboundEvents",
    "signature": "getOutboundEvents(pageSize, pageNumber, filterType, category, level, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "level",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DialerEventEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundEventsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'filterType': \"Prefix\", // String | Filter type\n  'category': \"category_example\", // String | Category\n  'level': \"level_example\", // String | Level\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundEvents(opts, callback);"
  },
  "getoutboundmessagingcampaign": {
    "operationId": "getoutboundmessagingcampaign",
    "functionName": "getOutboundMessagingcampaign",
    "signature": "getOutboundMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundMessagingcampaignRequest();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundMessagingcampaign(messagingCampaignId, callback);"
  },
  "getoutboundmessagingcampaignprogress": {
    "operationId": "getoutboundmessagingcampaignprogress",
    "functionName": "getOutboundMessagingcampaignProgress",
    "signature": "getOutboundMessagingcampaignProgress(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignProgress",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundMessagingcampaignProgressRequest();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundMessagingcampaignProgress(messagingCampaignId, callback);"
  },
  "getoutboundmessagingcampaigns": {
    "operationId": "getoutboundmessagingcampaigns",
    "functionName": "getOutboundMessagingcampaigns",
    "signature": "getOutboundMessagingcampaigns(pageSize, pageNumber, sortBy, sortOrder, name, contactListId, divisionId, type, senderSmsPhoneNumber, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "senderSmsPhoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "MessagingCampaignEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundMessagingcampaignsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"name\", // String | The field to sort by\n  'sortOrder': \"ascending\", // String | The direction to sort\n  'name': \"name_example\", // String | Name\n  'contactListId': \"contactListId_example\", // String | Contact List ID\n  'divisionId': [\"divisionId_example\"], // [String] | Division ID(s)\n  'type': \"type_example\", // String | Campaign Type\n  'senderSmsPhoneNumber': \"senderSmsPhoneNumber_example\", // String | Sender SMS Phone Number\n  'id': [\"id_example\"] // [String] | A list of messaging campaign ids to bulk fetch\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundMessagingcampaigns(opts, callback);"
  },
  "getoutboundmessagingcampaignsdivisionview": {
    "operationId": "getoutboundmessagingcampaignsdivisionview",
    "functionName": "getOutboundMessagingcampaignsDivisionview",
    "signature": "getOutboundMessagingcampaignsDivisionview(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignDivisionView",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundMessagingcampaignsDivisionviewRequest();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundMessagingcampaignsDivisionview(messagingCampaignId, callback);"
  },
  "getoutboundmessagingcampaignsdivisionviews": {
    "operationId": "getoutboundmessagingcampaignsdivisionviews",
    "functionName": "getOutboundMessagingcampaignsDivisionviews",
    "signature": "getOutboundMessagingcampaignsDivisionviews(pageSize, pageNumber, sortOrder, name, type, id, senderSmsPhoneNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "senderSmsPhoneNumber",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MessagingCampaignDivisionViewEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundMessagingcampaignsDivisionviewsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"a\", // String | The direction to sort\n  'name': \"name_example\", // String | Name\n  'type': \"type_example\", // String | Campaign Type\n  'id': [\"id_example\"], // [String] | id\n  'senderSmsPhoneNumber': \"senderSmsPhoneNumber_example\" // String | Sender SMS Phone Number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundMessagingcampaignsDivisionviews(opts, callback);"
  },
  "getoutboundruleset": {
    "operationId": "getoutboundruleset",
    "functionName": "getOutboundRuleset",
    "signature": "getOutboundRuleset(ruleSetId)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundRulesetRequest();\n\nlet ruleSetId = \"ruleSetId_example\"; // String | Rule Set ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundRuleset(ruleSetId, callback);"
  },
  "getoutboundrulesets": {
    "operationId": "getoutboundrulesets",
    "functionName": "getOutboundRulesets",
    "signature": "getOutboundRulesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RuleSetEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundRulesetsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundRulesets(opts, callback);"
  },
  "getoutboundschedulescampaign": {
    "operationId": "getoutboundschedulescampaign",
    "functionName": "getOutboundSchedulesCampaign",
    "signature": "getOutboundSchedulesCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundSchedulesCampaignRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundSchedulesCampaign(campaignId, callback);"
  },
  "getoutboundschedulescampaigns": {
    "operationId": "getoutboundschedulescampaigns",
    "functionName": "getOutboundSchedulesCampaigns",
    "signature": "getOutboundSchedulesCampaigns()",
    "return": "[CampaignSchedule]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundSchedulesCampaignsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundSchedulesCampaigns(callback);"
  },
  "getoutboundschedulessequence": {
    "operationId": "getoutboundschedulessequence",
    "functionName": "getOutboundSchedulesSequence",
    "signature": "getOutboundSchedulesSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SequenceSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundSchedulesSequenceRequest();\n\nlet sequenceId = \"sequenceId_example\"; // String | Sequence ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundSchedulesSequence(sequenceId, callback);"
  },
  "getoutboundschedulessequences": {
    "operationId": "getoutboundschedulessequences",
    "functionName": "getOutboundSchedulesSequences",
    "signature": "getOutboundSchedulesSequences()",
    "return": "[SequenceSchedule]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundSchedulesSequencesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundSchedulesSequences(callback);"
  },
  "getoutboundsequence": {
    "operationId": "getoutboundsequence",
    "functionName": "getOutboundSequence",
    "signature": "getOutboundSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundSequenceRequest();\n\nlet sequenceId = \"sequenceId_example\"; // String | Campaign Sequence ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundSequence(sequenceId, callback);"
  },
  "getoutboundsequences": {
    "operationId": "getoutboundsequences",
    "functionName": "getOutboundSequences",
    "signature": "getOutboundSequences(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignSequenceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundSequencesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size. The max that will be returned is 100.\n  'pageNumber': 1, // Number | Page number\n  'allowEmptyResult': false, // Boolean | Whether to return an empty page when there are no results for that page\n  'filterType': \"Prefix\", // String | Filter type\n  'name': \"name_example\", // String | Name\n  'sortBy': \"sortBy_example\", // String | Sort by\n  'sortOrder': \"a\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundSequences(opts, callback);"
  },
  "getoutboundsettings": {
    "operationId": "getoutboundsettings",
    "functionName": "getOutboundSettings",
    "signature": "getOutboundSettings()",
    "return": "OutboundSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundSettings(callback);"
  },
  "getoutboundwrapupcodemappings": {
    "operationId": "getoutboundwrapupcodemappings",
    "functionName": "getOutboundWrapupcodemappings",
    "signature": "getOutboundWrapupcodemappings()",
    "return": "WrapUpCodeMapping",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOutboundWrapupcodemappingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOutboundWrapupcodemappings(callback);"
  },
  "patchoutboundsettings": {
    "operationId": "patchoutboundsettings",
    "functionName": "patchOutboundSettings",
    "signature": "patchOutboundSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchOutboundSettingsRequest();\n\nlet body = {}; // Object | outboundSettings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchOutboundSettings(body, callback);"
  },
  "postoutboundattemptlimits": {
    "operationId": "postoutboundattemptlimits",
    "functionName": "postOutboundAttemptlimits",
    "signature": "postOutboundAttemptlimits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundAttemptlimitsRequest();\n\nlet body = {}; // Object | AttemptLimits\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundAttemptlimits(body, callback);"
  },
  "postoutboundaudits": {
    "operationId": "postoutboundaudits",
    "functionName": "postOutboundAudits",
    "signature": "postOutboundAudits(body, pageSize, pageNumber, sortBy, sortOrder, facetsOnly)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "facetsOnly",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AuditSearchResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundAuditsRequest();\n\nlet body = {}; // Object | AuditSearch\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"entity.name\", // String | Sort by\n  'sortOrder': \"ascending\", // String | Sort order\n  'facetsOnly': false // Boolean | Facets only\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundAudits(body, opts, callback);"
  },
  "postoutboundcallabletimesets": {
    "operationId": "postoutboundcallabletimesets",
    "functionName": "postOutboundCallabletimesets",
    "signature": "postOutboundCallabletimesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundCallabletimesetsRequest();\n\nlet body = {}; // Object | DialerCallableTimeSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundCallabletimesets(body, callback);"
  },
  "postoutboundcallanalysisresponsesets": {
    "operationId": "postoutboundcallanalysisresponsesets",
    "functionName": "postOutboundCallanalysisresponsesets",
    "signature": "postOutboundCallanalysisresponsesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundCallanalysisresponsesetsRequest();\n\nlet body = {}; // Object | ResponseSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundCallanalysisresponsesets(body, callback);"
  },
  "postoutboundcampaignagentownedmappingpreview": {
    "operationId": "postoutboundcampaignagentownedmappingpreview",
    "functionName": "postOutboundCampaignAgentownedmappingpreview",
    "signature": "postOutboundCampaignAgentownedmappingpreview(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundCampaignAgentownedmappingpreviewRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundCampaignAgentownedmappingpreview(campaignId, callback);"
  },
  "postoutboundcampaigncallbackschedule": {
    "operationId": "postoutboundcampaigncallbackschedule",
    "functionName": "postOutboundCampaignCallbackSchedule",
    "signature": "postOutboundCampaignCallbackSchedule(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactCallbackRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundCampaignCallbackScheduleRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet body = {}; // Object | ContactCallbackRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundCampaignCallbackSchedule(campaignId, body, callback);"
  },
  "postoutboundcampaignrules": {
    "operationId": "postoutboundcampaignrules",
    "functionName": "postOutboundCampaignrules",
    "signature": "postOutboundCampaignrules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundCampaignrulesRequest();\n\nlet body = {}; // Object | CampaignRule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundCampaignrules(body, callback);"
  },
  "postoutboundcampaigns": {
    "operationId": "postoutboundcampaigns",
    "functionName": "postOutboundCampaigns",
    "signature": "postOutboundCampaigns(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundCampaignsRequest();\n\nlet body = {}; // Object | Campaign\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundCampaigns(body, callback);"
  },
  "postoutboundcampaignsprogress": {
    "operationId": "postoutboundcampaignsprogress",
    "functionName": "postOutboundCampaignsProgress",
    "signature": "postOutboundCampaignsProgress(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[CampaignProgress]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundCampaignsProgressRequest();\n\nlet body = [{}]; // Object | Campaign IDs\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundCampaignsProgress(body, callback);"
  },
  "postoutboundcontactlistclear": {
    "operationId": "postoutboundcontactlistclear",
    "functionName": "postOutboundContactlistClear",
    "signature": "postOutboundContactlistClear(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundContactlistClearRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postOutboundContactlistClear(contactListId, callback);"
  },
  "postoutboundcontactlistcontacts": {
    "operationId": "postoutboundcontactlistcontacts",
    "functionName": "postOutboundContactlistContacts",
    "signature": "postOutboundContactlistContacts(contactListId, body, priority, clearSystemData, doNotQueue)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "priority",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "clearSystemData",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "doNotQueue",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "[DialerContact]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundContactlistContactsRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet body = [{}]; // Object | Contact\nlet opts = { \n  'priority': true, // Boolean | Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue.\n  'clearSystemData': true, // Boolean | Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won't.\n  'doNotQueue': true // Boolean | Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the 'priority' parameter.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundContactlistContacts(contactListId, body, opts, callback);"
  },
  "postoutboundcontactlistcontactsbulk": {
    "operationId": "postoutboundcontactlistcontactsbulk",
    "functionName": "postOutboundContactlistContactsBulk",
    "signature": "postOutboundContactlistContactsBulk(contactListId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[DialerContact]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundContactlistContactsBulkRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet body = [{}]; // Object | ContactIds to get.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundContactlistContactsBulk(contactListId, body, callback);"
  },
  "postoutboundcontactlistexport": {
    "operationId": "postoutboundcontactlistexport",
    "functionName": "postOutboundContactlistExport",
    "signature": "postOutboundContactlistExport(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEntityRef",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundContactlistExportRequest();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundContactlistExport(contactListId, callback);"
  },
  "postoutboundcontactlistfilters": {
    "operationId": "postoutboundcontactlistfilters",
    "functionName": "postOutboundContactlistfilters",
    "signature": "postOutboundContactlistfilters(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundContactlistfiltersRequest();\n\nlet body = {}; // Object | ContactListFilter\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundContactlistfilters(body, callback);"
  },
  "postoutboundcontactlistfilterspreview": {
    "operationId": "postoutboundcontactlistfilterspreview",
    "functionName": "postOutboundContactlistfiltersPreview",
    "signature": "postOutboundContactlistfiltersPreview(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "FilterPreviewResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundContactlistfiltersPreviewRequest();\n\nlet body = {}; // Object | ContactListFilter\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundContactlistfiltersPreview(body, callback);"
  },
  "postoutboundcontactlists": {
    "operationId": "postoutboundcontactlists",
    "functionName": "postOutboundContactlists",
    "signature": "postOutboundContactlists(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundContactlistsRequest();\n\nlet body = {}; // Object | ContactList\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundContactlists(body, callback);"
  },
  "postoutboundconversationdnc": {
    "operationId": "postoutboundconversationdnc",
    "functionName": "postOutboundConversationDnc",
    "signature": "postOutboundConversationDnc(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundConversationDncRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postOutboundConversationDnc(conversationId, callback);"
  },
  "postoutbounddnclistexport": {
    "operationId": "postoutbounddnclistexport",
    "functionName": "postOutboundDnclistExport",
    "signature": "postOutboundDnclistExport(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEntityRef",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundDnclistExportRequest();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundDnclistExport(dncListId, callback);"
  },
  "postoutbounddnclistphonenumbers": {
    "operationId": "postoutbounddnclistphonenumbers",
    "functionName": "postOutboundDnclistPhonenumbers",
    "signature": "postOutboundDnclistPhonenumbers(dncListId, body, expirationDateTime)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expirationDateTime",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundDnclistPhonenumbersRequest();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = [{}]; // Object | DNC Phone Numbers\nlet opts = { \n  'expirationDateTime': \"expirationDateTime_example\" // String | Expiration date for DNC phone numbers in yyyy-MM-ddTHH:mmZ format\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postOutboundDnclistPhonenumbers(dncListId, body, opts, callback);"
  },
  "postoutbounddnclists": {
    "operationId": "postoutbounddnclists",
    "functionName": "postOutboundDnclists",
    "signature": "postOutboundDnclists(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DncList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundDnclistsRequest();\n\nlet body = {}; // Object | DncList\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundDnclists(body, callback);"
  },
  "postoutboundmessagingcampaigns": {
    "operationId": "postoutboundmessagingcampaigns",
    "functionName": "postOutboundMessagingcampaigns",
    "signature": "postOutboundMessagingcampaigns(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundMessagingcampaignsRequest();\n\nlet body = {}; // Object | Messaging Campaign\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundMessagingcampaigns(body, callback);"
  },
  "postoutboundmessagingcampaignsprogress": {
    "operationId": "postoutboundmessagingcampaignsprogress",
    "functionName": "postOutboundMessagingcampaignsProgress",
    "signature": "postOutboundMessagingcampaignsProgress(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[CampaignProgress]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundMessagingcampaignsProgressRequest();\n\nlet body = [{}]; // Object | Messaging Campaign IDs\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundMessagingcampaignsProgress(body, callback);"
  },
  "postoutboundrulesets": {
    "operationId": "postoutboundrulesets",
    "functionName": "postOutboundRulesets",
    "signature": "postOutboundRulesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundRulesetsRequest();\n\nlet body = {}; // Object | RuleSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundRulesets(body, callback);"
  },
  "postoutboundsequences": {
    "operationId": "postoutboundsequences",
    "functionName": "postOutboundSequences",
    "signature": "postOutboundSequences(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostOutboundSequencesRequest();\n\nlet body = {}; // Object | Organization\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postOutboundSequences(body, callback);"
  },
  "putoutboundattemptlimit": {
    "operationId": "putoutboundattemptlimit",
    "functionName": "putOutboundAttemptlimit",
    "signature": "putOutboundAttemptlimit(attemptLimitsId, body)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundAttemptlimitRequest();\n\nlet attemptLimitsId = \"attemptLimitsId_example\"; // String | Attempt limits ID\nlet body = {}; // Object | AttemptLimits\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundAttemptlimit(attemptLimitsId, body, callback);"
  },
  "putoutboundcallabletimeset": {
    "operationId": "putoutboundcallabletimeset",
    "functionName": "putOutboundCallabletimeset",
    "signature": "putOutboundCallabletimeset(callableTimeSetId, body)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundCallabletimesetRequest();\n\nlet callableTimeSetId = \"callableTimeSetId_example\"; // String | Callable Time Set ID\nlet body = {}; // Object | DialerCallableTimeSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundCallabletimeset(callableTimeSetId, body, callback);"
  },
  "putoutboundcallanalysisresponseset": {
    "operationId": "putoutboundcallanalysisresponseset",
    "functionName": "putOutboundCallanalysisresponseset",
    "signature": "putOutboundCallanalysisresponseset(callAnalysisSetId, body)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundCallanalysisresponsesetRequest();\n\nlet callAnalysisSetId = \"callAnalysisSetId_example\"; // String | Call Analysis Response Set ID\nlet body = {}; // Object | ResponseSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundCallanalysisresponseset(callAnalysisSetId, body, callback);"
  },
  "putoutboundcampaign": {
    "operationId": "putoutboundcampaign",
    "functionName": "putOutboundCampaign",
    "signature": "putOutboundCampaign(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundCampaignRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet body = {}; // Object | Campaign\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundCampaign(campaignId, body, callback);"
  },
  "putoutboundcampaignagent": {
    "operationId": "putoutboundcampaignagent",
    "functionName": "putOutboundCampaignAgent",
    "signature": "putOutboundCampaignAgent(campaignId, userId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundCampaignAgentRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet userId = \"userId_example\"; // String | Agent's user ID\nlet body = {}; // Object | agent\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundCampaignAgent(campaignId, userId, body, callback);"
  },
  "putoutboundcampaignrule": {
    "operationId": "putoutboundcampaignrule",
    "functionName": "putOutboundCampaignrule",
    "signature": "putOutboundCampaignrule(campaignRuleId, body)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundCampaignruleRequest();\n\nlet campaignRuleId = \"campaignRuleId_example\"; // String | Campaign Rule ID\nlet body = {}; // Object | CampaignRule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundCampaignrule(campaignRuleId, body, callback);"
  },
  "putoutboundcontactlist": {
    "operationId": "putoutboundcontactlist",
    "functionName": "putOutboundContactlist",
    "signature": "putOutboundContactlist(contactListId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundContactlistRequest();\n\nlet contactListId = \"contactListId_example\"; // String | ContactList ID\nlet body = {}; // Object | ContactList\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundContactlist(contactListId, body, callback);"
  },
  "putoutboundcontactlistcontact": {
    "operationId": "putoutboundcontactlistcontact",
    "functionName": "putOutboundContactlistContact",
    "signature": "putOutboundContactlistContact(contactListId, contactId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DialerContact",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundContactlistContactRequest();\n\nlet contactListId = \"contactListId_example\"; // String | Contact List ID\nlet contactId = \"contactId_example\"; // String | Contact ID\nlet body = {}; // Object | Contact\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundContactlistContact(contactListId, contactId, body, callback);"
  },
  "putoutboundcontactlistfilter": {
    "operationId": "putoutboundcontactlistfilter",
    "functionName": "putOutboundContactlistfilter",
    "signature": "putOutboundContactlistfilter(contactListFilterId, body)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundContactlistfilterRequest();\n\nlet contactListFilterId = \"contactListFilterId_example\"; // String | Contact List Filter ID\nlet body = {}; // Object | ContactListFilter\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundContactlistfilter(contactListFilterId, body, callback);"
  },
  "putoutbounddnclist": {
    "operationId": "putoutbounddnclist",
    "functionName": "putOutboundDnclist",
    "signature": "putOutboundDnclist(dncListId, body)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DncList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundDnclistRequest();\n\nlet dncListId = \"dncListId_example\"; // String | DncList ID\nlet body = {}; // Object | DncList\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundDnclist(dncListId, body, callback);"
  },
  "putoutboundmessagingcampaign": {
    "operationId": "putoutboundmessagingcampaign",
    "functionName": "putOutboundMessagingcampaign",
    "signature": "putOutboundMessagingcampaign(messagingCampaignId, body)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundMessagingcampaignRequest();\n\nlet messagingCampaignId = \"messagingCampaignId_example\"; // String | The Messaging Campaign ID\nlet body = {}; // Object | MessagingCampaign\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundMessagingcampaign(messagingCampaignId, body, callback);"
  },
  "putoutboundruleset": {
    "operationId": "putoutboundruleset",
    "functionName": "putOutboundRuleset",
    "signature": "putOutboundRuleset(ruleSetId, body)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundRulesetRequest();\n\nlet ruleSetId = \"ruleSetId_example\"; // String | Rule Set ID\nlet body = {}; // Object | RuleSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundRuleset(ruleSetId, body, callback);"
  },
  "putoutboundschedulescampaign": {
    "operationId": "putoutboundschedulescampaign",
    "functionName": "putOutboundSchedulesCampaign",
    "signature": "putOutboundSchedulesCampaign(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundSchedulesCampaignRequest();\n\nlet campaignId = \"campaignId_example\"; // String | Campaign ID\nlet body = {}; // Object | CampaignSchedule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundSchedulesCampaign(campaignId, body, callback);"
  },
  "putoutboundschedulessequence": {
    "operationId": "putoutboundschedulessequence",
    "functionName": "putOutboundSchedulesSequence",
    "signature": "putOutboundSchedulesSequence(sequenceId, body)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SequenceSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundSchedulesSequenceRequest();\n\nlet sequenceId = \"sequenceId_example\"; // String | Sequence ID\nlet body = {}; // Object | SequenceSchedule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundSchedulesSequence(sequenceId, body, callback);"
  },
  "putoutboundsequence": {
    "operationId": "putoutboundsequence",
    "functionName": "putOutboundSequence",
    "signature": "putOutboundSequence(sequenceId, body)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundSequenceRequest();\n\nlet sequenceId = \"sequenceId_example\"; // String | Campaign Sequence ID\nlet body = {}; // Object | Organization\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundSequence(sequenceId, body, callback);"
  },
  "putoutboundwrapupcodemappings": {
    "operationId": "putoutboundwrapupcodemappings",
    "functionName": "putOutboundWrapupcodemappings",
    "signature": "putOutboundWrapupcodemappings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WrapUpCodeMapping",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOutboundWrapupcodemappingsRequest();\n\nlet body = {}; // Object | wrapUpCodeMapping\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOutboundWrapupcodemappings(body, callback);"
  },
  "deletepresencedefinition": {
    "operationId": "deletepresencedefinition",
    "functionName": "deletePresencedefinition",
    "signature": "deletePresencedefinition(presenceId)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeletePresencedefinitionRequest();\n\nlet presenceId = \"presenceId_example\"; // String | Organization Presence ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deletePresencedefinition(presenceId, callback);"
  },
  "getpresencedefinition": {
    "operationId": "getpresencedefinition",
    "functionName": "getPresencedefinition",
    "signature": "getPresencedefinition(presenceId, localeCode)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "localeCode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrganizationPresence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetPresencedefinitionRequest();\n\nlet presenceId = \"presenceId_example\"; // String | Organization Presence ID\nlet opts = { \n  'localeCode': \"localeCode_example\" // String | The locale code to fetch for the presence definition. Use ALL to fetch everything.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getPresencedefinition(presenceId, opts, callback);"
  },
  "getpresencedefinitions": {
    "operationId": "getpresencedefinitions",
    "functionName": "getPresencedefinitions",
    "signature": "getPresencedefinitions(pageNumber, pageSize, deleted, localeCode)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      },
      {
        "name": "localeCode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrganizationPresenceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetPresencedefinitionsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'deleted': \"false\", // String | Deleted query can be TRUE, FALSE or ALL\n  'localeCode': \"localeCode_example\" // String | The locale code to fetch for each presence definition. Use ALL to fetch everything.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getPresencedefinitions(opts, callback);"
  },
  "getsystempresences": {
    "operationId": "getsystempresences",
    "functionName": "getSystempresences",
    "signature": "getSystempresences()",
    "return": "[SystemPresence]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSystempresencesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSystempresences(callback);"
  },
  "getuserpresence": {
    "operationId": "getuserpresence",
    "functionName": "getUserPresence",
    "signature": "getUserPresence(userId, sourceId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserPresenceRequest();\n\nlet userId = \"userId_example\"; // String | user Id\nlet sourceId = \"sourceId_example\"; // String | Presence source ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserPresence(userId, sourceId, callback);"
  },
  "getuserpresencesmicrosoftteams": {
    "operationId": "getuserpresencesmicrosoftteams",
    "functionName": "getUserPresencesMicrosoftteams",
    "signature": "getUserPresencesMicrosoftteams(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PresenceExpand",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserPresencesMicrosoftteamsRequest();\n\nlet userId = \"userId_example\"; // String | user Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserPresencesMicrosoftteams(userId, callback);"
  },
  "getuserpresencespurecloud": {
    "operationId": "getuserpresencespurecloud",
    "functionName": "getUserPresencesPurecloud",
    "signature": "getUserPresencesPurecloud(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserPresencesPurecloudRequest();\n\nlet userId = \"userId_example\"; // String | user Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserPresencesPurecloud(userId, callback);"
  },
  "getuserpresenceszoomphone": {
    "operationId": "getuserpresenceszoomphone",
    "functionName": "getUserPresencesZoomphone",
    "signature": "getUserPresencesZoomphone(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PresenceExpand",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserPresencesZoomphoneRequest();\n\nlet userId = \"userId_example\"; // String | user Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserPresencesZoomphone(userId, callback);"
  },
  "patchuserpresence": {
    "operationId": "patchuserpresence",
    "functionName": "patchUserPresence",
    "signature": "patchUserPresence(userId, sourceId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserPresenceRequest();\n\nlet userId = \"userId_example\"; // String | user Id\nlet sourceId = \"sourceId_example\"; // String | Presence source ID\nlet body = {}; // Object | User presence\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserPresence(userId, sourceId, body, callback);"
  },
  "patchuserpresencespurecloud": {
    "operationId": "patchuserpresencespurecloud",
    "functionName": "patchUserPresencesPurecloud",
    "signature": "patchUserPresencesPurecloud(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserPresencesPurecloudRequest();\n\nlet userId = \"userId_example\"; // String | user Id\nlet body = {}; // Object | User presence\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserPresencesPurecloud(userId, body, callback);"
  },
  "postpresencedefinitions": {
    "operationId": "postpresencedefinitions",
    "functionName": "postPresencedefinitions",
    "signature": "postPresencedefinitions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationPresence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostPresencedefinitionsRequest();\n\nlet body = {}; // Object | The Presence Definition to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postPresencedefinitions(body, callback);"
  },
  "putpresencedefinition": {
    "operationId": "putpresencedefinition",
    "functionName": "putPresencedefinition",
    "signature": "putPresencedefinition(presenceId, body)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OrganizationPresence",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutPresencedefinitionRequest();\n\nlet presenceId = \"presenceId_example\"; // String | Organization Presence ID\nlet body = {}; // Object | The OrganizationPresence to update\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putPresencedefinition(presenceId, body, callback);"
  },
  "putuserspresencesbulk": {
    "operationId": "putuserspresencesbulk",
    "functionName": "putUsersPresencesBulk",
    "signature": "putUsersPresencesBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[UserPresence]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUsersPresencesBulkRequest();\n\nlet body = [{}]; // Object | List of User presences\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUsersPresencesBulk(body, callback);"
  },
  "deletequalitycalibration": {
    "operationId": "deletequalitycalibration",
    "functionName": "deleteQualityCalibration",
    "signature": "deleteQualityCalibration(calibrationId, calibratorId)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "calibratorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Calibration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteQualityCalibrationRequest();\n\nlet calibrationId = \"calibrationId_example\"; // String | Calibration ID\nlet calibratorId = \"calibratorId_example\"; // String | calibratorId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteQualityCalibration(calibrationId, calibratorId, callback);"
  },
  "deletequalityconversationevaluation": {
    "operationId": "deletequalityconversationevaluation",
    "functionName": "deleteQualityConversationEvaluation",
    "signature": "deleteQualityConversationEvaluation(conversationId, evaluationId, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteQualityConversationEvaluationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet evaluationId = \"evaluationId_example\"; // String | evaluationId\nlet opts = { \n  'expand': \"expand_example\" // String | evaluatorId, evaluationForm\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteQualityConversationEvaluation(conversationId, evaluationId, opts, callback);"
  },
  "deletequalityform": {
    "operationId": "deletequalityform",
    "functionName": "deleteQualityForm",
    "signature": "deleteQualityForm(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteQualityFormRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteQualityForm(formId, callback);"
  },
  "deletequalityformsevaluation": {
    "operationId": "deletequalityformsevaluation",
    "functionName": "deleteQualityFormsEvaluation",
    "signature": "deleteQualityFormsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteQualityFormsEvaluationRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteQualityFormsEvaluation(formId, callback);"
  },
  "deletequalityformssurvey": {
    "operationId": "deletequalityformssurvey",
    "functionName": "deleteQualityFormsSurvey",
    "signature": "deleteQualityFormsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteQualityFormsSurveyRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteQualityFormsSurvey(formId, callback);"
  },
  "getqualityagentsactivity": {
    "operationId": "getqualityagentsactivity",
    "functionName": "getQualityAgentsActivity",
    "signature": "getQualityAgentsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, agentUserId, evaluatorUserId, name, group)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "agentUserId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "evaluatorUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "group",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AgentActivityEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityAgentsActivityRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'startTime': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Start time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  'endTime': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | End time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  'agentUserId': [\"agentUserId_example\"], // [String] | user id of agent requested\n  'evaluatorUserId': \"evaluatorUserId_example\", // String | user id of the evaluator\n  'name': \"name_example\", // String | name\n  'group': \"group_example\" // String | group id\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityAgentsActivity(opts, callback);"
  },
  "getqualitycalibration": {
    "operationId": "getqualitycalibration",
    "functionName": "getQualityCalibration",
    "signature": "getQualityCalibration(calibrationId, calibratorId, conversationId)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "calibratorId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Calibration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityCalibrationRequest();\n\nlet calibrationId = \"calibrationId_example\"; // String | Calibration ID\nlet opts = { \n  'calibratorId': \"calibratorId_example\", // String | calibratorId\n  'conversationId': \"conversationId_example\" // String | conversationId\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityCalibration(calibrationId, opts, callback);"
  },
  "getqualitycalibrations": {
    "operationId": "getqualitycalibrations",
    "functionName": "getQualityCalibrations",
    "signature": "getQualityCalibrations(calibratorId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, startTime, endTime)",
    "parameters": [
      {
        "name": "calibratorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "CalibrationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityCalibrationsRequest();\n\nlet calibratorId = \"calibratorId_example\"; // String | user id of calibrator\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'conversationId': \"conversationId_example\", // String | conversation id\n  'startTime': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  'endTime': new Date(\"2013-10-20T19:20:30+01:00\") // Date | end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityCalibrations(calibratorId, opts, callback);"
  },
  "getqualityconversationevaluation": {
    "operationId": "getqualityconversationevaluation",
    "functionName": "getQualityConversationEvaluation",
    "signature": "getQualityConversationEvaluation(conversationId, evaluationId, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityConversationEvaluationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet evaluationId = \"evaluationId_example\"; // String | evaluationId\nlet opts = { \n  'expand': \"expand_example\" // String | agent, evaluator, evaluationForm\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityConversationEvaluation(conversationId, evaluationId, opts, callback);"
  },
  "getqualityconversationsurveys": {
    "operationId": "getqualityconversationsurveys",
    "functionName": "getQualityConversationSurveys",
    "signature": "getQualityConversationSurveys(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[Survey]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityConversationSurveysRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityConversationSurveys(conversationId, callback);"
  },
  "getqualityconversationsauditsquerytransactionid": {
    "operationId": "getqualityconversationsauditsquerytransactionid",
    "functionName": "getQualityConversationsAuditsQueryTransactionId",
    "signature": "getQualityConversationsAuditsQueryTransactionId(transactionId)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "QualityAuditQueryExecutionStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityConversationsAuditsQueryTransactionIdRequest();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityConversationsAuditsQueryTransactionId(transactionId, callback);"
  },
  "getqualityconversationsauditsquerytransactionidresults": {
    "operationId": "getqualityconversationsauditsquerytransactionidresults",
    "functionName": "getQualityConversationsAuditsQueryTransactionIdResults",
    "signature": "getQualityConversationsAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QualityAuditQueryExecutionResultsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityConversationsAuditsQueryTransactionIdResultsRequest();\n\nlet transactionId = \"transactionId_example\"; // String | Transaction ID\nlet opts = { \n  'cursor': \"cursor_example\", // String | Indicates where to resume query results (not required for first page)\n  'pageSize': 25, // Number | Page size\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityConversationsAuditsQueryTransactionIdResults(transactionId, opts, callback);"
  },
  "getqualityevaluationsquery": {
    "operationId": "getqualityevaluationsquery",
    "functionName": "getQualityEvaluationsQuery",
    "signature": "getQualityEvaluationsQuery(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, agentUserId, evaluatorUserId, queueId, startTime, endTime, evaluationState, isReleased, agentHasRead, expandAnswerTotalScores, maximum, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "agentUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "evaluatorUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "String",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "String",
        "required": "false"
      },
      {
        "name": "evaluationState",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "isReleased",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "agentHasRead",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "expandAnswerTotalScores",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "maximum",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityEvaluationsQueryRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'conversationId': \"conversationId_example\", // String | conversationId specified\n  'agentUserId': \"agentUserId_example\", // String | user id of the agent\n  'evaluatorUserId': \"evaluatorUserId_example\", // String | evaluator user id\n  'queueId': \"queueId_example\", // String | queue id\n  'startTime': \"startTime_example\", // String | start time of the evaluation query\n  'endTime': \"endTime_example\", // String | end time of the evaluation query\n  'evaluationState': [\"evaluationState_example\"], // [String] | \n  'isReleased': true, // Boolean | the evaluation has been released\n  'agentHasRead': true, // Boolean | agent has the evaluation\n  'expandAnswerTotalScores': true, // Boolean | get the total scores for evaluations\n  'maximum': 56, // Number | maximum\n  'sortOrder': \"sortOrder_example\" // String | sort order options for agentUserId or evaluatorUserId query. Valid options are 'a', 'asc', 'ascending', 'd', 'desc', 'descending'\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityEvaluationsQuery(opts, callback);"
  },
  "getqualityevaluatorsactivity": {
    "operationId": "getqualityevaluatorsactivity",
    "functionName": "getQualityEvaluatorsActivity",
    "signature": "getQualityEvaluatorsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, name, permission, group)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "permission",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "group",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluatorActivityEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityEvaluatorsActivityRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'startTime': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  'endTime': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n  'name': \"name_example\", // String | Evaluator name\n  'permission': [\"permission_example\"], // [String] | permission strings\n  'group': \"group_example\" // String | group id\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityEvaluatorsActivity(opts, callback);"
  },
  "getqualityform": {
    "operationId": "getqualityform",
    "functionName": "getQualityForm",
    "signature": "getQualityForm(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityForm(formId, callback);"
  },
  "getqualityformversions": {
    "operationId": "getqualityformversions",
    "functionName": "getQualityFormVersions",
    "signature": "getQualityFormVersions(formId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormVersionsRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormVersions(formId, opts, callback);"
  },
  "getqualityforms": {
    "operationId": "getqualityforms",
    "functionName": "getQualityForms",
    "signature": "getQualityForms(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'expand': \"expand_example\", // String | Expand\n  'name': \"name_example\", // String | Name\n  'sortOrder': \"sortOrder_example\" // String | Order to sort results, either asc or desc\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityForms(opts, callback);"
  },
  "getqualityformsevaluation": {
    "operationId": "getqualityformsevaluation",
    "functionName": "getQualityFormsEvaluation",
    "signature": "getQualityFormsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsEvaluationRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsEvaluation(formId, callback);"
  },
  "getqualityformsevaluationversions": {
    "operationId": "getqualityformsevaluationversions",
    "functionName": "getQualityFormsEvaluationVersions",
    "signature": "getQualityFormsEvaluationVersions(formId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsEvaluationVersionsRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"asc\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsEvaluationVersions(formId, opts, callback);"
  },
  "getqualityformsevaluations": {
    "operationId": "getqualityformsevaluations",
    "functionName": "getQualityFormsEvaluations",
    "signature": "getQualityFormsEvaluations(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsEvaluationsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'expand': \"expand_example\", // String | Expand\n  'name': \"name_example\", // String | Name\n  'sortOrder': \"sortOrder_example\" // String | Order to sort results, either asc or desc\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsEvaluations(opts, callback);"
  },
  "getqualityformsevaluationsbulkcontexts": {
    "operationId": "getqualityformsevaluationsbulkcontexts",
    "functionName": "getQualityFormsEvaluationsBulkContexts",
    "signature": "getQualityFormsEvaluationsBulkContexts(contextId)",
    "parameters": [
      {
        "name": "contextId",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[EvaluationForm]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsEvaluationsBulkContextsRequest();\n\nlet contextId = [\"contextId_example\"]; // [String] | A comma-delimited list of valid evaluation form context ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsEvaluationsBulkContexts(contextId, callback);"
  },
  "getqualityformssurvey": {
    "operationId": "getqualityformssurvey",
    "functionName": "getQualityFormsSurvey",
    "signature": "getQualityFormsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsSurveyRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsSurvey(formId, callback);"
  },
  "getqualityformssurveyversions": {
    "operationId": "getqualityformssurveyversions",
    "functionName": "getQualityFormsSurveyVersions",
    "signature": "getQualityFormsSurveyVersions(formId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsSurveyVersionsRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsSurveyVersions(formId, opts, callback);"
  },
  "getqualityformssurveys": {
    "operationId": "getqualityformssurveys",
    "functionName": "getQualityFormsSurveys",
    "signature": "getQualityFormsSurveys(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsSurveysRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'expand': \"expand_example\", // String | Expand\n  'name': \"name_example\", // String | Name\n  'sortOrder': \"sortOrder_example\" // String | Order to sort results, either asc or desc\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsSurveys(opts, callback);"
  },
  "getqualityformssurveysbulk": {
    "operationId": "getqualityformssurveysbulk",
    "functionName": "getQualityFormsSurveysBulk",
    "signature": "getQualityFormsSurveysBulk(id)",
    "parameters": [
      {
        "name": "id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsSurveysBulkRequest();\n\nlet id = [\"id_example\"]; // [String] | A comma-delimited list of valid survey form ids\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsSurveysBulk(id, callback);"
  },
  "getqualityformssurveysbulkcontexts": {
    "operationId": "getqualityformssurveysbulkcontexts",
    "functionName": "getQualityFormsSurveysBulkContexts",
    "signature": "getQualityFormsSurveysBulkContexts(contextId, published)",
    "parameters": [
      {
        "name": "contextId",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "published",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "[SurveyForm]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityFormsSurveysBulkContextsRequest();\n\nlet contextId = [\"contextId_example\"]; // [String] | A comma-delimited list of valid survey form context ids\nlet opts = { \n  'published': true // Boolean | If true, the latest published version will be included. If false, only the unpublished version will be included.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityFormsSurveysBulkContexts(contextId, opts, callback);"
  },
  "getqualitypublishedform": {
    "operationId": "getqualitypublishedform",
    "functionName": "getQualityPublishedform",
    "signature": "getQualityPublishedform(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityPublishedformRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityPublishedform(formId, callback);"
  },
  "getqualitypublishedforms": {
    "operationId": "getqualitypublishedforms",
    "functionName": "getQualityPublishedforms",
    "signature": "getQualityPublishedforms(pageSize, pageNumber, name, onlyLatestPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestPerContext",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityPublishedformsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'onlyLatestPerContext': false // Boolean | onlyLatestPerContext\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityPublishedforms(opts, callback);"
  },
  "getqualitypublishedformsevaluation": {
    "operationId": "getqualitypublishedformsevaluation",
    "functionName": "getQualityPublishedformsEvaluation",
    "signature": "getQualityPublishedformsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityPublishedformsEvaluationRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityPublishedformsEvaluation(formId, callback);"
  },
  "getqualitypublishedformsevaluations": {
    "operationId": "getqualitypublishedformsevaluations",
    "functionName": "getQualityPublishedformsEvaluations",
    "signature": "getQualityPublishedformsEvaluations(pageSize, pageNumber, name, onlyLatestPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestPerContext",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityPublishedformsEvaluationsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'onlyLatestPerContext': false // Boolean | onlyLatestPerContext\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityPublishedformsEvaluations(opts, callback);"
  },
  "getqualitypublishedformssurvey": {
    "operationId": "getqualitypublishedformssurvey",
    "functionName": "getQualityPublishedformsSurvey",
    "signature": "getQualityPublishedformsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityPublishedformsSurveyRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityPublishedformsSurvey(formId, callback);"
  },
  "getqualitypublishedformssurveys": {
    "operationId": "getqualitypublishedformssurveys",
    "functionName": "getQualityPublishedformsSurveys",
    "signature": "getQualityPublishedformsSurveys(pageSize, pageNumber, name, onlyLatestEnabledPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestEnabledPerContext",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualityPublishedformsSurveysRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'onlyLatestEnabledPerContext': false // Boolean | onlyLatestEnabledPerContext\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualityPublishedformsSurveys(opts, callback);"
  },
  "getqualitysurvey": {
    "operationId": "getqualitysurvey",
    "functionName": "getQualitySurvey",
    "signature": "getQualitySurvey(surveyId)",
    "parameters": [
      {
        "name": "surveyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Survey",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetQualitySurveyRequest();\n\nlet surveyId = \"surveyId_example\"; // String | surveyId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualitySurvey(surveyId, callback);"
  },
  "getqualitysurveysscorable": {
    "operationId": "getqualitysurveysscorable",
    "functionName": "getQualitySurveysScorable",
    "signature": "getQualitySurveysScorable(customerSurveyUrl)",
    "parameters": [
      {
        "name": "customerSurveyUrl",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScorableSurvey",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .GetQualitySurveysScorableRequest();\n\nlet customerSurveyUrl = \"customerSurveyUrl_example\"; // String | customerSurveyUrl\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getQualitySurveysScorable(customerSurveyUrl, callback);"
  },
  "patchqualityformssurvey": {
    "operationId": "patchqualityformssurvey",
    "functionName": "patchQualityFormsSurvey",
    "signature": "patchQualityFormsSurvey(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchQualityFormsSurveyRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Survey form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchQualityFormsSurvey(formId, body, callback);"
  },
  "postqualitycalibrations": {
    "operationId": "postqualitycalibrations",
    "functionName": "postQualityCalibrations",
    "signature": "postQualityCalibrations(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Calibration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityCalibrationsRequest();\n\nlet body = {}; // Object | calibration\nlet opts = { \n  'expand': \"expand_example\" // String | calibratorId\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityCalibrations(body, opts, callback);"
  },
  "postqualityconversationevaluations": {
    "operationId": "postqualityconversationevaluations",
    "functionName": "postQualityConversationEvaluations",
    "signature": "postQualityConversationEvaluations(conversationId, body, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityConversationEvaluationsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet body = {}; // Object | evaluation\nlet opts = { \n  'expand': \"expand_example\" // String | evaluatorId\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityConversationEvaluations(conversationId, body, opts, callback);"
  },
  "postqualityconversationsauditsquery": {
    "operationId": "postqualityconversationsauditsquery",
    "functionName": "postQualityConversationsAuditsQuery",
    "signature": "postQualityConversationsAuditsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QualityAuditQueryExecutionStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityConversationsAuditsQueryRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityConversationsAuditsQuery(body, callback);"
  },
  "postqualityevaluationsaggregatesqueryme": {
    "operationId": "postqualityevaluationsaggregatesqueryme",
    "functionName": "postQualityEvaluationsAggregatesQueryMe",
    "signature": "postQualityEvaluationsAggregatesQueryMe(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationAggregateQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityEvaluationsAggregatesQueryMeRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityEvaluationsAggregatesQueryMe(body, callback);"
  },
  "postqualityevaluationsscoring": {
    "operationId": "postqualityevaluationsscoring",
    "functionName": "postQualityEvaluationsScoring",
    "signature": "postQualityEvaluationsScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationScoringSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityEvaluationsScoringRequest();\n\nlet body = {}; // Object | evaluationAndScoringSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityEvaluationsScoring(body, callback);"
  },
  "postqualityforms": {
    "operationId": "postqualityforms",
    "functionName": "postQualityForms",
    "signature": "postQualityForms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityFormsRequest();\n\nlet body = {}; // Object | Evaluation form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityForms(body, callback);"
  },
  "postqualityformsevaluations": {
    "operationId": "postqualityformsevaluations",
    "functionName": "postQualityFormsEvaluations",
    "signature": "postQualityFormsEvaluations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityFormsEvaluationsRequest();\n\nlet body = {}; // Object | Evaluation form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityFormsEvaluations(body, callback);"
  },
  "postqualityformssurveys": {
    "operationId": "postqualityformssurveys",
    "functionName": "postQualityFormsSurveys",
    "signature": "postQualityFormsSurveys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityFormsSurveysRequest();\n\nlet body = {}; // Object | Survey form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityFormsSurveys(body, callback);"
  },
  "postqualitypublishedforms": {
    "operationId": "postqualitypublishedforms",
    "functionName": "postQualityPublishedforms",
    "signature": "postQualityPublishedforms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityPublishedformsRequest();\n\nlet body = {}; // Object | Publish request containing id of form to publish\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityPublishedforms(body, callback);"
  },
  "postqualitypublishedformsevaluations": {
    "operationId": "postqualitypublishedformsevaluations",
    "functionName": "postQualityPublishedformsEvaluations",
    "signature": "postQualityPublishedformsEvaluations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityPublishedformsEvaluationsRequest();\n\nlet body = {}; // Object | Publish request containing id of form to publish\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityPublishedformsEvaluations(body, callback);"
  },
  "postqualitypublishedformssurveys": {
    "operationId": "postqualitypublishedformssurveys",
    "functionName": "postQualityPublishedformsSurveys",
    "signature": "postQualityPublishedformsSurveys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualityPublishedformsSurveysRequest();\n\nlet body = {}; // Object | Survey form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualityPublishedformsSurveys(body, callback);"
  },
  "postqualitysurveysscoring": {
    "operationId": "postqualitysurveysscoring",
    "functionName": "postQualitySurveysScoring",
    "signature": "postQualitySurveysScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyScoringSet",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostQualitySurveysScoringRequest();\n\nlet body = {}; // Object | surveyAndScoringSet\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postQualitySurveysScoring(body, callback);"
  },
  "putqualitycalibration": {
    "operationId": "putqualitycalibration",
    "functionName": "putQualityCalibration",
    "signature": "putQualityCalibration(calibrationId, body)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Calibration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutQualityCalibrationRequest();\n\nlet calibrationId = \"calibrationId_example\"; // String | Calibration ID\nlet body = {}; // Object | Calibration\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putQualityCalibration(calibrationId, body, callback);"
  },
  "putqualityconversationevaluation": {
    "operationId": "putqualityconversationevaluation",
    "functionName": "putQualityConversationEvaluation",
    "signature": "putQualityConversationEvaluation(conversationId, evaluationId, body, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutQualityConversationEvaluationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet evaluationId = \"evaluationId_example\"; // String | evaluationId\nlet body = {}; // Object | evaluation\nlet opts = { \n  'expand': \"expand_example\" // String | evaluatorId, evaluationForm\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putQualityConversationEvaluation(conversationId, evaluationId, body, opts, callback);"
  },
  "putqualityform": {
    "operationId": "putqualityform",
    "functionName": "putQualityForm",
    "signature": "putQualityForm(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutQualityFormRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Evaluation form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putQualityForm(formId, body, callback);"
  },
  "putqualityformsevaluation": {
    "operationId": "putqualityformsevaluation",
    "functionName": "putQualityFormsEvaluation",
    "signature": "putQualityFormsEvaluation(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutQualityFormsEvaluationRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Evaluation form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putQualityFormsEvaluation(formId, body, callback);"
  },
  "putqualityformssurvey": {
    "operationId": "putqualityformssurvey",
    "functionName": "putQualityFormsSurvey",
    "signature": "putQualityFormsSurvey(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutQualityFormsSurveyRequest();\n\nlet formId = \"formId_example\"; // String | Form ID\nlet body = {}; // Object | Survey form\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putQualityFormsSurvey(formId, body, callback);"
  },
  "putqualitysurveysscorable": {
    "operationId": "putqualitysurveysscorable",
    "functionName": "putQualitySurveysScorable",
    "signature": "putQualitySurveysScorable(body, customerSurveyUrl)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "customerSurveyUrl",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScorableSurvey",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .PutQualitySurveysScorableRequest();\n\nlet body = {}; // Object | survey\nlet customerSurveyUrl = \"customerSurveyUrl_example\"; // String | customerSurveyUrl\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putQualitySurveysScorable(body, customerSurveyUrl, callback);"
  },
  "deleteconversationrecordingannotation": {
    "operationId": "deleteconversationrecordingannotation",
    "functionName": "deleteConversationRecordingAnnotation",
    "signature": "deleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteConversationRecordingAnnotationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet annotationId = \"annotationId_example\"; // String | Annotation ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteConversationRecordingAnnotation(conversationId, recordingId, annotationId, callback);"
  },
  "deleteorphanrecording": {
    "operationId": "deleteorphanrecording",
    "functionName": "deleteOrphanrecording",
    "signature": "deleteOrphanrecording(orphanId)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OrphanRecording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteOrphanrecordingRequest();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteOrphanrecording(orphanId, callback);"
  },
  "deleterecordingcrossplatformmediaretentionpolicies": {
    "operationId": "deleterecordingcrossplatformmediaretentionpolicies",
    "functionName": "deleteRecordingCrossplatformMediaretentionpolicies",
    "signature": "deleteRecordingCrossplatformMediaretentionpolicies(ids)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRecordingCrossplatformMediaretentionpoliciesRequest();\n\nlet ids = \"ids_example\"; // String | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRecordingCrossplatformMediaretentionpolicies(ids, callback);"
  },
  "deleterecordingcrossplatformmediaretentionpolicy": {
    "operationId": "deleterecordingcrossplatformmediaretentionpolicy",
    "functionName": "deleteRecordingCrossplatformMediaretentionpolicy",
    "signature": "deleteRecordingCrossplatformMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRecordingCrossplatformMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRecordingCrossplatformMediaretentionpolicy(policyId, callback);"
  },
  "deleterecordingjob": {
    "operationId": "deleterecordingjob",
    "functionName": "deleteRecordingJob",
    "signature": "deleteRecordingJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRecordingJobRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRecordingJob(jobId, callback);"
  },
  "deleterecordingmediaretentionpolicies": {
    "operationId": "deleterecordingmediaretentionpolicies",
    "functionName": "deleteRecordingMediaretentionpolicies",
    "signature": "deleteRecordingMediaretentionpolicies(ids)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRecordingMediaretentionpoliciesRequest();\n\nlet ids = \"ids_example\"; // String | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRecordingMediaretentionpolicies(ids, callback);"
  },
  "deleterecordingmediaretentionpolicy": {
    "operationId": "deleterecordingmediaretentionpolicy",
    "functionName": "deleteRecordingMediaretentionpolicy",
    "signature": "deleteRecordingMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRecordingMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRecordingMediaretentionpolicy(policyId, callback);"
  },
  "getconversationrecording": {
    "operationId": "getconversationrecording",
    "functionName": "getConversationRecording",
    "signature": "getConversationRecording(conversationId, recordingId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "emailFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "chatFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messageFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "download",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationRecordingRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet opts = { \n  'formatId': \"WEBM\", // String | The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE\n  'emailFormatId': \"EML\", // String | The desired media format when downloading an email recording. Valid values:EML,NONE\n  'chatFormatId': \"ZIP\", // String | The desired media format when downloading a chat recording. Valid values:ZIP,NONE \n  'messageFormatId': \"ZIP\", // String | The desired media format when downloading a message recording. Valid values:ZIP,NONE\n  'download': false, // Boolean | requesting a download format of the recording. Valid values:true,false\n  'fileName': \"fileName_example\", // String | the name of the downloaded fileName\n  'locale': \"locale_example\", // String | The locale for the requested file when downloading, as an ISO 639-1 code\n  'mediaFormats': [\"mediaFormats_example\"] // [String] | All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationRecording(conversationId, recordingId, opts, callback);"
  },
  "getconversationrecordingannotation": {
    "operationId": "getconversationrecordingannotation",
    "functionName": "getConversationRecordingAnnotation",
    "signature": "getConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationRecordingAnnotationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet annotationId = \"annotationId_example\"; // String | Annotation ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationRecordingAnnotation(conversationId, recordingId, annotationId, callback);"
  },
  "getconversationrecordingannotations": {
    "operationId": "getconversationrecordingannotations",
    "functionName": "getConversationRecordingAnnotations",
    "signature": "getConversationRecordingAnnotations(conversationId, recordingId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[Annotation]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationRecordingAnnotationsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationRecordingAnnotations(conversationId, recordingId, callback);"
  },
  "getconversationrecordingmetadata": {
    "operationId": "getconversationrecordingmetadata",
    "functionName": "getConversationRecordingmetadata",
    "signature": "getConversationRecordingmetadata(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[RecordingMetadata]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationRecordingmetadataRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationRecordingmetadata(conversationId, callback);"
  },
  "getconversationrecordingmetadatarecordingid": {
    "operationId": "getconversationrecordingmetadatarecordingid",
    "functionName": "getConversationRecordingmetadataRecordingId",
    "signature": "getConversationRecordingmetadataRecordingId(conversationId, recordingId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingMetadata",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationRecordingmetadataRecordingIdRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationRecordingmetadataRecordingId(conversationId, recordingId, callback);"
  },
  "getconversationrecordings": {
    "operationId": "getconversationrecordings",
    "functionName": "getConversationRecordings",
    "signature": "getConversationRecordings(conversationId, maxWaitMs, formatId, mediaFormats)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "maxWaitMs",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[Recording]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConversationRecordingsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet opts = { \n  'maxWaitMs': 5000, // Number | The maximum number of milliseconds to wait for the recording to be ready. Must be a positive value.\n  'formatId': \"WEBM\", // String | The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE.\n  'mediaFormats': [\"mediaFormats_example\"] // [String] | All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConversationRecordings(conversationId, opts, callback);"
  },
  "getorphanrecording": {
    "operationId": "getorphanrecording",
    "functionName": "getOrphanrecording",
    "signature": "getOrphanrecording(orphanId)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OrphanRecording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrphanrecordingRequest();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrphanrecording(orphanId, callback);"
  },
  "getorphanrecordingmedia": {
    "operationId": "getorphanrecordingmedia",
    "functionName": "getOrphanrecordingMedia",
    "signature": "getOrphanrecordingMedia(orphanId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "emailFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "chatFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messageFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "download",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrphanrecordingMediaRequest();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\nlet opts = { \n  'formatId': \"WEBM\", // String | The desired media format.\n  'emailFormatId': \"EML\", // String | The desired media format when downloading an email recording.\n  'chatFormatId': \"ZIP\", // String | The desired media format when downloading a chat recording.\n  'messageFormatId': \"ZIP\", // String | The desired media format when downloading a message recording.\n  'download': false, // Boolean | requesting a download format of the recording\n  'fileName': \"fileName_example\", // String | the name of the downloaded fileName\n  'locale': \"locale_example\", // String | The locale for the requested file when downloading, as an ISO 639-1 code\n  'mediaFormats': [\"mediaFormats_example\"] // [String] | All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrphanrecordingMedia(orphanId, opts, callback);"
  },
  "getorphanrecordings": {
    "operationId": "getorphanrecordings",
    "functionName": "getOrphanrecordings",
    "signature": "getOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, hasConversation, media)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "hasConversation",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "media",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrphanRecordingListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetOrphanrecordingsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'hasConversation': false, // Boolean | Filter resulting orphans by whether the conversation is known. False returns all orphans for the organization.\n  'media': \"media_example\" // String | Filter resulting orphans based on their media type\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getOrphanrecordings(opts, callback);"
  },
  "getrecordingbatchrequest": {
    "operationId": "getrecordingbatchrequest",
    "functionName": "getRecordingBatchrequest",
    "signature": "getRecordingBatchrequest(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BatchDownloadJobStatusResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingBatchrequestRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingBatchrequest(jobId, callback);"
  },
  "getrecordingcrossplatformmediaretentionpolicies": {
    "operationId": "getrecordingcrossplatformmediaretentionpolicies",
    "functionName": "getRecordingCrossplatformMediaretentionpolicies",
    "signature": "getRecordingCrossplatformMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "enabled",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "summary",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "hasErrors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "PolicyEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingCrossplatformMediaretentionpoliciesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'name': \"name_example\", // String | the policy name - used for filtering results in searches.\n  'enabled': true, // Boolean | checks to see if policy is enabled - use enabled = true or enabled = false\n  'summary': false, // Boolean | provides a less verbose response of policy lists.\n  'hasErrors': true // Boolean | provides a way to fetch all policies with errors or policies that do not have errors\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingCrossplatformMediaretentionpolicies(opts, callback);"
  },
  "getrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "getrecordingcrossplatformmediaretentionpolicy",
    "functionName": "getRecordingCrossplatformMediaretentionpolicy",
    "signature": "getRecordingCrossplatformMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingCrossplatformMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingCrossplatformMediaretentionpolicy(policyId, callback);"
  },
  "getrecordingjob": {
    "operationId": "getrecordingjob",
    "functionName": "getRecordingJob",
    "signature": "getRecordingJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingJobRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingJob(jobId, callback);"
  },
  "getrecordingjobfailedrecordings": {
    "operationId": "getrecordingjobfailedrecordings",
    "functionName": "getRecordingJobFailedrecordings",
    "signature": "getRecordingJobFailedrecordings(jobId, pageSize, pageNumber, includeTotal, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "includeTotal",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FailedRecordingEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingJobFailedrecordingsRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet opts = { \n  'pageSize': 25, // Number | Page size. Maximum is 100.\n  'pageNumber': 1, // Number | Page number\n  'includeTotal': true, // Boolean | If false, cursor will be used to locate the page instead of pageNumber.\n  'cursor': \"cursor_example\" // String | Indicates where to resume query results (not required for first page)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingJobFailedrecordings(jobId, opts, callback);"
  },
  "getrecordingjobs": {
    "operationId": "getrecordingjobs",
    "functionName": "getRecordingJobs",
    "signature": "getRecordingJobs(pageSize, pageNumber, sortBy, state, showOnlyMyJobs, jobType, includeTotal, cursor)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "showOnlyMyJobs",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "jobType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeTotal",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RecordingJobEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingJobsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"userId\", // String | Sort by\n  'state': \"state_example\", // String | Filter by state\n  'showOnlyMyJobs': true, // Boolean | Show only my jobs\n  'jobType': \"jobType_example\", // String | Job Type (Can be left empty for both)\n  'includeTotal': true, // Boolean | If false, cursor will be used to locate the page instead of pageNumber.\n  'cursor': \"cursor_example\" // String | Indicates where to resume query results (not required for first page)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingJobs(opts, callback);"
  },
  "getrecordinglocalkeyssetting": {
    "operationId": "getrecordinglocalkeyssetting",
    "functionName": "getRecordingLocalkeysSetting",
    "signature": "getRecordingLocalkeysSetting(settingsId)",
    "parameters": [
      {
        "name": "settingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LocalEncryptionConfiguration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingLocalkeysSettingRequest();\n\nlet settingsId = \"settingsId_example\"; // String | Settings Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingLocalkeysSetting(settingsId, callback);"
  },
  "getrecordinglocalkeyssettings": {
    "operationId": "getrecordinglocalkeyssettings",
    "functionName": "getRecordingLocalkeysSettings",
    "signature": "getRecordingLocalkeysSettings()",
    "return": "LocalEncryptionConfigurationListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingLocalkeysSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingLocalkeysSettings(callback);"
  },
  "getrecordingmediaretentionpolicies": {
    "operationId": "getrecordingmediaretentionpolicies",
    "functionName": "getRecordingMediaretentionpolicies",
    "signature": "getRecordingMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "enabled",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "summary",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "hasErrors",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "PolicyEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingMediaretentionpoliciesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | The total page size requested\n  'pageNumber': 1, // Number | The page number requested\n  'sortBy': \"sortBy_example\", // String | variable name requested to sort by\n  'expand': [\"expand_example\"], // [String] | variable name requested by expand list\n  'nextPage': \"nextPage_example\", // String | next page token\n  'previousPage': \"previousPage_example\", // String | Previous page token\n  'name': \"name_example\", // String | the policy name - used for filtering results in searches.\n  'enabled': true, // Boolean | checks to see if policy is enabled - use enabled = true or enabled = false\n  'summary': false, // Boolean | provides a less verbose response of policy lists.\n  'hasErrors': true // Boolean | provides a way to fetch all policies with errors or policies that do not have errors\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingMediaretentionpolicies(opts, callback);"
  },
  "getrecordingmediaretentionpolicy": {
    "operationId": "getrecordingmediaretentionpolicy",
    "functionName": "getRecordingMediaretentionpolicy",
    "signature": "getRecordingMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingMediaretentionpolicy(policyId, callback);"
  },
  "getrecordingrecordingkeys": {
    "operationId": "getrecordingrecordingkeys",
    "functionName": "getRecordingRecordingkeys",
    "signature": "getRecordingRecordingkeys(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "EncryptionKeyEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingRecordingkeysRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingRecordingkeys(opts, callback);"
  },
  "getrecordingrecordingkeysrotationschedule": {
    "operationId": "getrecordingrecordingkeysrotationschedule",
    "functionName": "getRecordingRecordingkeysRotationschedule",
    "signature": "getRecordingRecordingkeysRotationschedule()",
    "return": "KeyRotationSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingRecordingkeysRotationscheduleRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingRecordingkeysRotationschedule(callback);"
  },
  "getrecordingsettings": {
    "operationId": "getrecordingsettings",
    "functionName": "getRecordingSettings",
    "signature": "getRecordingSettings(createDefault)",
    "parameters": [
      {
        "name": "createDefault",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "RecordingSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingSettingsRequest();\n\nlet opts = { \n  'createDefault': false // Boolean | If no settings are found, a new one is created with default values\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingSettings(opts, callback);"
  },
  "getrecordingsscreensessions": {
    "operationId": "getrecordingsscreensessions",
    "functionName": "getRecordingsScreensessions",
    "signature": "getRecordingsScreensessions(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ScreenRecordingSessionListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRecordingsScreensessionsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRecordingsScreensessions(opts, callback);"
  },
  "patchrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "patchrecordingcrossplatformmediaretentionpolicy",
    "functionName": "patchRecordingCrossplatformMediaretentionpolicy",
    "signature": "patchRecordingCrossplatformMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRecordingCrossplatformMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRecordingCrossplatformMediaretentionpolicy(policyId, body, callback);"
  },
  "patchrecordingmediaretentionpolicy": {
    "operationId": "patchrecordingmediaretentionpolicy",
    "functionName": "patchRecordingMediaretentionpolicy",
    "signature": "patchRecordingMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRecordingMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRecordingMediaretentionpolicy(policyId, body, callback);"
  },
  "patchrecordingsscreensession": {
    "operationId": "patchrecordingsscreensession",
    "functionName": "patchRecordingsScreensession",
    "signature": "patchRecordingsScreensession(recordingSessionId, body)",
    "parameters": [
      {
        "name": "recordingSessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRecordingsScreensessionRequest();\n\nlet recordingSessionId = \"recordingSessionId_example\"; // String | Screen recording session ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchRecordingsScreensession(recordingSessionId, opts, callback);"
  },
  "postconversationrecordingannotations": {
    "operationId": "postconversationrecordingannotations",
    "functionName": "postConversationRecordingAnnotations",
    "signature": "postConversationRecordingAnnotations(conversationId, recordingId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostConversationRecordingAnnotationsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet body = {}; // Object | annotation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postConversationRecordingAnnotations(conversationId, recordingId, body, callback);"
  },
  "postrecordingbatchrequests": {
    "operationId": "postrecordingbatchrequests",
    "functionName": "postRecordingBatchrequests",
    "signature": "postRecordingBatchrequests(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BatchDownloadJobSubmissionResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingBatchrequestsRequest();\n\nlet body = {}; // Object | Job submission criteria\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingBatchrequests(body, callback);"
  },
  "postrecordingcrossplatformmediaretentionpolicies": {
    "operationId": "postrecordingcrossplatformmediaretentionpolicies",
    "functionName": "postRecordingCrossplatformMediaretentionpolicies",
    "signature": "postRecordingCrossplatformMediaretentionpolicies(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingCrossplatformMediaretentionpoliciesRequest();\n\nlet body = {}; // Object | Policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingCrossplatformMediaretentionpolicies(body, callback);"
  },
  "postrecordingjobs": {
    "operationId": "postrecordingjobs",
    "functionName": "postRecordingJobs",
    "signature": "postRecordingJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingJobsRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingJobs(body, callback);"
  },
  "postrecordinglocalkeys": {
    "operationId": "postrecordinglocalkeys",
    "functionName": "postRecordingLocalkeys",
    "signature": "postRecordingLocalkeys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EncryptionKey",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingLocalkeysRequest();\n\nlet body = {}; // Object | Local Encryption body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingLocalkeys(body, callback);"
  },
  "postrecordinglocalkeyssettings": {
    "operationId": "postrecordinglocalkeyssettings",
    "functionName": "postRecordingLocalkeysSettings",
    "signature": "postRecordingLocalkeysSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocalEncryptionConfiguration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingLocalkeysSettingsRequest();\n\nlet body = {}; // Object | Local Encryption Configuration\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingLocalkeysSettings(body, callback);"
  },
  "postrecordingmediaretentionpolicies": {
    "operationId": "postrecordingmediaretentionpolicies",
    "functionName": "postRecordingMediaretentionpolicies",
    "signature": "postRecordingMediaretentionpolicies(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingMediaretentionpoliciesRequest();\n\nlet body = {}; // Object | Policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingMediaretentionpolicies(body, callback);"
  },
  "postrecordingrecordingkeys": {
    "operationId": "postrecordingrecordingkeys",
    "functionName": "postRecordingRecordingkeys",
    "signature": "postRecordingRecordingkeys()",
    "return": "EncryptionKey",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingRecordingkeysRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingRecordingkeys(callback);"
  },
  "postrecordingsdeletionprotection": {
    "operationId": "postrecordingsdeletionprotection",
    "functionName": "postRecordingsDeletionprotection",
    "signature": "postRecordingsDeletionprotection(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[AddressableEntityRef]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingsDeletionprotectionRequest();\n\nlet body = {}; // Object | conversationIds\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRecordingsDeletionprotection(body, callback);"
  },
  "postrecordingsscreensessionsacknowledge": {
    "operationId": "postrecordingsscreensessionsacknowledge",
    "functionName": "postRecordingsScreensessionsAcknowledge",
    "signature": "postRecordingsScreensessionsAcknowledge(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingsScreensessionsAcknowledgeRequest();\n\nlet body = {}; // Object | AcknowledgeScreenRecordingRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postRecordingsScreensessionsAcknowledge(body, callback);"
  },
  "postrecordingsscreensessionsmetadata": {
    "operationId": "postrecordingsscreensessionsmetadata",
    "functionName": "postRecordingsScreensessionsMetadata",
    "signature": "postRecordingsScreensessionsMetadata(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRecordingsScreensessionsMetadataRequest();\n\nlet body = {}; // Object | ScreenRecordingMetaDataRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postRecordingsScreensessionsMetadata(body, callback);"
  },
  "putconversationrecording": {
    "operationId": "putconversationrecording",
    "functionName": "putConversationRecording",
    "signature": "putConversationRecording(conversationId, recordingId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Recording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationRecordingRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet body = {}; // Object | recording\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationRecording(conversationId, recordingId, body, callback);"
  },
  "putconversationrecordingannotation": {
    "operationId": "putconversationrecordingannotation",
    "functionName": "putConversationRecordingAnnotation",
    "signature": "putConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutConversationRecordingAnnotationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet recordingId = \"recordingId_example\"; // String | Recording ID\nlet annotationId = \"annotationId_example\"; // String | Annotation ID\nlet body = {}; // Object | annotation\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putConversationRecordingAnnotation(conversationId, recordingId, annotationId, body, callback);"
  },
  "putorphanrecording": {
    "operationId": "putorphanrecording",
    "functionName": "putOrphanrecording",
    "signature": "putOrphanrecording(orphanId, body)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutOrphanrecordingRequest();\n\nlet orphanId = \"orphanId_example\"; // String | Orphan ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putOrphanrecording(orphanId, opts, callback);"
  },
  "putrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "putrecordingcrossplatformmediaretentionpolicy",
    "functionName": "putRecordingCrossplatformMediaretentionpolicy",
    "signature": "putRecordingCrossplatformMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRecordingCrossplatformMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRecordingCrossplatformMediaretentionpolicy(policyId, body, callback);"
  },
  "putrecordingjob": {
    "operationId": "putrecordingjob",
    "functionName": "putRecordingJob",
    "signature": "putRecordingJob(jobId, body)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRecordingJobRequest();\n\nlet jobId = \"jobId_example\"; // String | jobId\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRecordingJob(jobId, body, callback);"
  },
  "putrecordinglocalkeyssetting": {
    "operationId": "putrecordinglocalkeyssetting",
    "functionName": "putRecordingLocalkeysSetting",
    "signature": "putRecordingLocalkeysSetting(settingsId, body)",
    "parameters": [
      {
        "name": "settingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "LocalEncryptionConfiguration",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRecordingLocalkeysSettingRequest();\n\nlet settingsId = \"settingsId_example\"; // String | Settings Id\nlet body = {}; // Object | Local Encryption metadata\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRecordingLocalkeysSetting(settingsId, body, callback);"
  },
  "putrecordingmediaretentionpolicy": {
    "operationId": "putrecordingmediaretentionpolicy",
    "functionName": "putRecordingMediaretentionpolicy",
    "signature": "putRecordingMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRecordingMediaretentionpolicyRequest();\n\nlet policyId = \"policyId_example\"; // String | Policy ID\nlet body = {}; // Object | Policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRecordingMediaretentionpolicy(policyId, body, callback);"
  },
  "putrecordingrecordingkeysrotationschedule": {
    "operationId": "putrecordingrecordingkeysrotationschedule",
    "functionName": "putRecordingRecordingkeysRotationschedule",
    "signature": "putRecordingRecordingkeysRotationschedule(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "KeyRotationSchedule",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRecordingRecordingkeysRotationscheduleRequest();\n\nlet body = {}; // Object | KeyRotationSchedule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRecordingRecordingkeysRotationschedule(body, callback);"
  },
  "putrecordingsettings": {
    "operationId": "putrecordingsettings",
    "functionName": "putRecordingSettings",
    "signature": "putRecordingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RecordingSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRecordingSettingsRequest();\n\nlet body = {}; // Object | Recording settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRecordingSettings(body, callback);"
  },
  "putrecordingsdeletionprotection": {
    "operationId": "putrecordingsdeletionprotection",
    "functionName": "putRecordingsDeletionprotection",
    "signature": "putRecordingsDeletionprotection(protect, body)",
    "parameters": [
      {
        "name": "protect",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRecordingsDeletionprotectionRequest();\n\nlet opts = { \n  'protect': true, // Boolean | Check for apply, uncheck for revoke (each action requires the respective permission)\n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.putRecordingsDeletionprotection(opts, callback);"
  },
  "deleteresponsemanagementlibrary": {
    "operationId": "deleteresponsemanagementlibrary",
    "functionName": "deleteResponsemanagementLibrary",
    "signature": "deleteResponsemanagementLibrary(libraryId)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteResponsemanagementLibraryRequest();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteResponsemanagementLibrary(libraryId, callback);"
  },
  "deleteresponsemanagementresponse": {
    "operationId": "deleteresponsemanagementresponse",
    "functionName": "deleteResponsemanagementResponse",
    "signature": "deleteResponsemanagementResponse(responseId)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteResponsemanagementResponseRequest();\n\nlet responseId = \"responseId_example\"; // String | Response ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteResponsemanagementResponse(responseId, callback);"
  },
  "deleteresponsemanagementresponseasset": {
    "operationId": "deleteresponsemanagementresponseasset",
    "functionName": "deleteResponsemanagementResponseasset",
    "signature": "deleteResponsemanagementResponseasset(responseAssetId)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteResponsemanagementResponseassetRequest();\n\nlet responseAssetId = \"responseAssetId_example\"; // String | Asset Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteResponsemanagementResponseasset(responseAssetId, callback);"
  },
  "getresponsemanagementlibraries": {
    "operationId": "getresponsemanagementlibraries",
    "functionName": "getResponsemanagementLibraries",
    "signature": "getResponsemanagementLibraries(pageNumber, pageSize, messagingTemplateFilter)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "messagingTemplateFilter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LibraryEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetResponsemanagementLibrariesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'messagingTemplateFilter': \"messagingTemplateFilter_example\" // String | Returns a list of libraries that contain responses with at least one messaging template defined for a specific message channel\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getResponsemanagementLibraries(opts, callback);"
  },
  "getresponsemanagementlibrary": {
    "operationId": "getresponsemanagementlibrary",
    "functionName": "getResponsemanagementLibrary",
    "signature": "getResponsemanagementLibrary(libraryId)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetResponsemanagementLibraryRequest();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getResponsemanagementLibrary(libraryId, callback);"
  },
  "getresponsemanagementresponse": {
    "operationId": "getresponsemanagementresponse",
    "functionName": "getResponsemanagementResponse",
    "signature": "getResponsemanagementResponse(responseId, expand)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Response",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetResponsemanagementResponseRequest();\n\nlet responseId = \"responseId_example\"; // String | Response ID\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getResponsemanagementResponse(responseId, opts, callback);"
  },
  "getresponsemanagementresponseasset": {
    "operationId": "getresponsemanagementresponseasset",
    "functionName": "getResponsemanagementResponseasset",
    "signature": "getResponsemanagementResponseasset(responseAssetId)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetResponsemanagementResponseassetRequest();\n\nlet responseAssetId = \"responseAssetId_example\"; // String | Asset Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getResponsemanagementResponseasset(responseAssetId, callback);"
  },
  "getresponsemanagementresponseassetsstatusstatusid": {
    "operationId": "getresponsemanagementresponseassetsstatusstatusid",
    "functionName": "getResponsemanagementResponseassetsStatusStatusId",
    "signature": "getResponsemanagementResponseassetsStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseAssetStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetResponsemanagementResponseassetsStatusStatusIdRequest();\n\nlet statusId = \"statusId_example\"; // String | Status Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getResponsemanagementResponseassetsStatusStatusId(statusId, callback);"
  },
  "getresponsemanagementresponses": {
    "operationId": "getresponsemanagementresponses",
    "functionName": "getResponsemanagementResponses",
    "signature": "getResponsemanagementResponses(libraryId, pageNumber, pageSize, expand)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ResponseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetResponsemanagementResponsesRequest();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getResponsemanagementResponses(libraryId, opts, callback);"
  },
  "postresponsemanagementlibraries": {
    "operationId": "postresponsemanagementlibraries",
    "functionName": "postResponsemanagementLibraries",
    "signature": "postResponsemanagementLibraries(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostResponsemanagementLibrariesRequest();\n\nlet body = {}; // Object | Library\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postResponsemanagementLibraries(body, callback);"
  },
  "postresponsemanagementresponseassetssearch": {
    "operationId": "postresponsemanagementresponseassetssearch",
    "functionName": "postResponsemanagementResponseassetsSearch",
    "signature": "postResponsemanagementResponseassetsSearch(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ResponseAssetSearchResults",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostResponsemanagementResponseassetsSearchRequest();\n\nlet body = {}; // Object | request\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postResponsemanagementResponseassetsSearch(body, opts, callback);"
  },
  "postresponsemanagementresponseassetsuploads": {
    "operationId": "postresponsemanagementresponseassetsuploads",
    "functionName": "postResponsemanagementResponseassetsUploads",
    "signature": "postResponsemanagementResponseassetsUploads(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateResponseAssetResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostResponsemanagementResponseassetsUploadsRequest();\n\nlet body = {}; // Object | request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postResponsemanagementResponseassetsUploads(body, callback);"
  },
  "postresponsemanagementresponses": {
    "operationId": "postresponsemanagementresponses",
    "functionName": "postResponsemanagementResponses",
    "signature": "postResponsemanagementResponses(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Response",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostResponsemanagementResponsesRequest();\n\nlet body = {}; // Object | Response\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postResponsemanagementResponses(body, opts, callback);"
  },
  "postresponsemanagementresponsesquery": {
    "operationId": "postresponsemanagementresponsesquery",
    "functionName": "postResponsemanagementResponsesQuery",
    "signature": "postResponsemanagementResponsesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseQueryResults",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostResponsemanagementResponsesQueryRequest();\n\nlet body = {}; // Object | Response\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postResponsemanagementResponsesQuery(body, callback);"
  },
  "putresponsemanagementlibrary": {
    "operationId": "putresponsemanagementlibrary",
    "functionName": "putResponsemanagementLibrary",
    "signature": "putResponsemanagementLibrary(libraryId, body)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutResponsemanagementLibraryRequest();\n\nlet libraryId = \"libraryId_example\"; // String | Library ID\nlet body = {}; // Object | Library\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putResponsemanagementLibrary(libraryId, body, callback);"
  },
  "putresponsemanagementresponse": {
    "operationId": "putresponsemanagementresponse",
    "functionName": "putResponsemanagementResponse",
    "signature": "putResponsemanagementResponse(responseId, body, expand)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Response",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutResponsemanagementResponseRequest();\n\nlet responseId = \"responseId_example\"; // String | Response ID\nlet body = {}; // Object | Response\nlet opts = { \n  'expand': \"expand_example\" // String | Expand instructions for the return value.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putResponsemanagementResponse(responseId, body, opts, callback);"
  },
  "putresponsemanagementresponseasset": {
    "operationId": "putresponsemanagementresponseasset",
    "functionName": "putResponsemanagementResponseasset",
    "signature": "putResponsemanagementResponseasset(responseAssetId, body)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ResponseAsset",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutResponsemanagementResponseassetRequest();\n\nlet responseAssetId = \"responseAssetId_example\"; // String | Asset Id\nlet body = {}; // Object | request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putResponsemanagementResponseasset(responseAssetId, body, callback);"
  },
  "deleteroutingassessment": {
    "operationId": "deleteroutingassessment",
    "functionName": "deleteRoutingAssessment",
    "signature": "deleteRoutingAssessment(assessmentId)",
    "parameters": [
      {
        "name": "assessmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingAssessmentRequest();\n\nlet assessmentId = \"assessmentId_example\"; // String | Benefit Assessment ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingAssessment(assessmentId, callback);"
  },
  "deleteroutingemaildomain": {
    "operationId": "deleteroutingemaildomain",
    "functionName": "deleteRoutingEmailDomain",
    "signature": "deleteRoutingEmailDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingEmailDomainRequest();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingEmailDomain(domainId, callback);"
  },
  "deleteroutingemaildomainroute": {
    "operationId": "deleteroutingemaildomainroute",
    "functionName": "deleteRoutingEmailDomainRoute",
    "signature": "deleteRoutingEmailDomainRoute(domainName, routeId)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingEmailDomainRouteRequest();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet routeId = \"routeId_example\"; // String | route ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingEmailDomainRoute(domainName, routeId, callback);"
  },
  "deleteroutingpredictor": {
    "operationId": "deleteroutingpredictor",
    "functionName": "deleteRoutingPredictor",
    "signature": "deleteRoutingPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingPredictorRequest();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingPredictor(predictorId, callback);"
  },
  "deleteroutingqueue": {
    "operationId": "deleteroutingqueue",
    "functionName": "deleteRoutingQueue",
    "signature": "deleteRoutingQueue(queueId, forceDelete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDelete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingQueueRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  'forceDelete': true // Boolean | forceDelete\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingQueue(queueId, opts, callback);"
  },
  "deleteroutingqueuemember": {
    "operationId": "deleteroutingqueuemember",
    "functionName": "deleteRoutingQueueMember",
    "signature": "deleteRoutingQueueMember(queueId, memberId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingQueueMemberRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingQueueMember(queueId, memberId, callback);"
  },
  "deleteroutingqueueuser": {
    "operationId": "deleteroutingqueueuser",
    "functionName": "deleteRoutingQueueUser",
    "signature": "deleteRoutingQueueUser(queueId, memberId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingQueueUserRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingQueueUser(queueId, memberId, callback);"
  },
  "deleteroutingqueuewrapupcode": {
    "operationId": "deleteroutingqueuewrapupcode",
    "functionName": "deleteRoutingQueueWrapupcode",
    "signature": "deleteRoutingQueueWrapupcode(queueId, codeId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingQueueWrapupcodeRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet codeId = \"codeId_example\"; // String | Code ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingQueueWrapupcode(queueId, codeId, callback);"
  },
  "deleteroutingsettings": {
    "operationId": "deleteroutingsettings",
    "functionName": "deleteRoutingSettings",
    "signature": "deleteRoutingSettings()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingSettings(callback);"
  },
  "deleteroutingskill": {
    "operationId": "deleteroutingskill",
    "functionName": "deleteRoutingSkill",
    "signature": "deleteRoutingSkill(skillId)",
    "parameters": [
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingSkillRequest();\n\nlet skillId = \"skillId_example\"; // String | Skill ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingSkill(skillId, callback);"
  },
  "deleteroutingsmsaddress": {
    "operationId": "deleteroutingsmsaddress",
    "functionName": "deleteRoutingSmsAddress",
    "signature": "deleteRoutingSmsAddress(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingSmsAddressRequest();\n\nlet addressId = \"addressId_example\"; // String | Address ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingSmsAddress(addressId, callback);"
  },
  "deleteroutingsmsphonenumber": {
    "operationId": "deleteroutingsmsphonenumber",
    "functionName": "deleteRoutingSmsPhonenumber",
    "signature": "deleteRoutingSmsPhonenumber(addressId, async)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "async",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingSmsPhonenumberRequest();\n\nlet addressId = \"addressId_example\"; // String | Address ID\nlet opts = { \n  'async': false // Boolean | Delete a phone number for SMS in an asynchronous manner. If the async parameter value is true, this initiates the deletion of a provisioned phone number. \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingSmsPhonenumber(addressId, opts, callback);"
  },
  "deleteroutinguserutilization": {
    "operationId": "deleteroutinguserutilization",
    "functionName": "deleteRoutingUserUtilization",
    "signature": "deleteRoutingUserUtilization(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingUserUtilizationRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingUserUtilization(userId, callback);"
  },
  "deleteroutingutilization": {
    "operationId": "deleteroutingutilization",
    "functionName": "deleteRoutingUtilization",
    "signature": "deleteRoutingUtilization()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingUtilizationRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingUtilization(callback);"
  },
  "deleteroutingwrapupcode": {
    "operationId": "deleteroutingwrapupcode",
    "functionName": "deleteRoutingWrapupcode",
    "signature": "deleteRoutingWrapupcode(codeId)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteRoutingWrapupcodeRequest();\n\nlet codeId = \"codeId_example\"; // String | Wrapup Code ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteRoutingWrapupcode(codeId, callback);"
  },
  "deleteuserroutinglanguage": {
    "operationId": "deleteuserroutinglanguage",
    "functionName": "deleteUserRoutinglanguage",
    "signature": "deleteUserRoutinglanguage(userId, languageId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteUserRoutinglanguageRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet languageId = \"languageId_example\"; // String | languageId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteUserRoutinglanguage(userId, languageId, callback);"
  },
  "deleteuserroutingskill": {
    "operationId": "deleteuserroutingskill",
    "functionName": "deleteUserRoutingskill",
    "signature": "deleteUserRoutingskill(userId, skillId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteUserRoutingskillRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet skillId = \"skillId_example\"; // String | skillId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteUserRoutingskill(userId, skillId, callback);"
  },
  "getroutingassessment": {
    "operationId": "getroutingassessment",
    "functionName": "getRoutingAssessment",
    "signature": "getRoutingAssessment(assessmentId)",
    "parameters": [
      {
        "name": "assessmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BenefitAssessment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingAssessmentRequest();\n\nlet assessmentId = \"assessmentId_example\"; // String | Benefit Assessment ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingAssessment(assessmentId, callback);"
  },
  "getroutingassessments": {
    "operationId": "getroutingassessments",
    "functionName": "getRoutingAssessments",
    "signature": "getRoutingAssessments(before, after, limit, pageSize, queueId)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AssessmentListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingAssessmentsRequest();\n\nlet opts = { \n  'before': \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  'after': \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  'limit': \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\n  'pageSize': \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  'queueId': [\"queueId_example\"] // [String] | Queue ID(s) to filter assessments by.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingAssessments(opts, callback);"
  },
  "getroutingassessmentsjob": {
    "operationId": "getroutingassessmentsjob",
    "functionName": "getRoutingAssessmentsJob",
    "signature": "getRoutingAssessmentsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BenefitAssessmentJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingAssessmentsJobRequest();\n\nlet jobId = \"jobId_example\"; // String | Benefit Assessment Job ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingAssessmentsJob(jobId, callback);"
  },
  "getroutingassessmentsjobs": {
    "operationId": "getroutingassessmentsjobs",
    "functionName": "getRoutingAssessmentsJobs",
    "signature": "getRoutingAssessmentsJobs(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AssessmentJobListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingAssessmentsJobsRequest();\n\nlet opts = { \n  'divisionId': [\"divisionId_example\"] // [String] | Division ID(s) to filter assessment jobs by.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingAssessmentsJobs(opts, callback);"
  },
  "getroutingemaildomain": {
    "operationId": "getroutingemaildomain",
    "functionName": "getRoutingEmailDomain",
    "signature": "getRoutingEmailDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingEmailDomainRequest();\n\nlet domainId = \"domainId_example\"; // String | domain ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingEmailDomain(domainId, callback);"
  },
  "getroutingemaildomainroute": {
    "operationId": "getroutingemaildomainroute",
    "functionName": "getRoutingEmailDomainRoute",
    "signature": "getRoutingEmailDomainRoute(domainName, routeId)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingEmailDomainRouteRequest();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet routeId = \"routeId_example\"; // String | route ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingEmailDomainRoute(domainName, routeId, callback);"
  },
  "getroutingemaildomainroutes": {
    "operationId": "getroutingemaildomainroutes",
    "functionName": "getRoutingEmailDomainRoutes",
    "signature": "getRoutingEmailDomainRoutes(domainName, pageSize, pageNumber, pattern)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pattern",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InboundRouteEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingEmailDomainRoutesRequest();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'pattern': \"pattern_example\" // String | Filter routes by the route's pattern property\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingEmailDomainRoutes(domainName, opts, callback);"
  },
  "getroutingemaildomains": {
    "operationId": "getroutingemaildomains",
    "functionName": "getRoutingEmailDomains",
    "signature": "getRoutingEmailDomains()",
    "return": "InboundDomainEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingEmailDomainsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingEmailDomains(callback);"
  },
  "getroutingemailsetup": {
    "operationId": "getroutingemailsetup",
    "functionName": "getRoutingEmailSetup",
    "signature": "getRoutingEmailSetup()",
    "return": "EmailSetup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingEmailSetupRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingEmailSetup(callback);"
  },
  "getroutinglanguages": {
    "operationId": "getroutinglanguages",
    "functionName": "getRoutingLanguages",
    "signature": "getRoutingLanguages(pageSize, pageNumber, sortOrder, name, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LanguageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingLanguagesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ASC\", // String | Ascending or descending sort order\n  'name': \"name_example\", // String | Name\n  'id': [\"id_example\"] // [String] | id\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingLanguages(opts, callback);"
  },
  "getroutingmessagerecipient": {
    "operationId": "getroutingmessagerecipient",
    "functionName": "getRoutingMessageRecipient",
    "signature": "getRoutingMessageRecipient(recipientId)",
    "parameters": [
      {
        "name": "recipientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Recipient",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingMessageRecipientRequest();\n\nlet recipientId = \"recipientId_example\"; // String | Recipient ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingMessageRecipient(recipientId, callback);"
  },
  "getroutingmessagerecipients": {
    "operationId": "getroutingmessagerecipients",
    "functionName": "getRoutingMessageRecipients",
    "signature": "getRoutingMessageRecipients(messengerType, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "messengerType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "RecipientListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingMessageRecipientsRequest();\n\nlet opts = { \n  'messengerType': \"messengerType_example\", // String | Messenger Type\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingMessageRecipients(opts, callback);"
  },
  "getroutingpredictor": {
    "operationId": "getroutingpredictor",
    "functionName": "getRoutingPredictor",
    "signature": "getRoutingPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Predictor",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingPredictorRequest();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingPredictor(predictorId, callback);"
  },
  "getroutingpredictors": {
    "operationId": "getroutingpredictors",
    "functionName": "getRoutingPredictors",
    "signature": "getRoutingPredictors(before, after, limit, pageSize, queueId)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "PredictorListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingPredictorsRequest();\n\nlet opts = { \n  'before': \"before_example\", // String | The cursor that points to the start of the set of entities that has been returned.\n  'after': \"after_example\", // String | The cursor that points to the end of the set of entities that has been returned.\n  'limit': \"limit_example\", // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\n  'pageSize': \"pageSize_example\", // String | Number of entities to return. Maximum of 200.\n  'queueId': [\"queueId_example\"] // [String] | Comma-separated list of queue Ids to filter by.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingPredictors(opts, callback);"
  },
  "getroutingpredictorskeyperformanceindicators": {
    "operationId": "getroutingpredictorskeyperformanceindicators",
    "functionName": "getRoutingPredictorsKeyperformanceindicators",
    "signature": "getRoutingPredictorsKeyperformanceindicators()",
    "return": "[KeyPerformanceIndicator]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingPredictorsKeyperformanceindicatorsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingPredictorsKeyperformanceindicators(callback);"
  },
  "getroutingqueue": {
    "operationId": "getroutingqueue",
    "functionName": "getRoutingQueue",
    "signature": "getRoutingQueue(queueId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueue(queueId, callback);"
  },
  "getroutingqueuecomparisonperiod": {
    "operationId": "getroutingqueuecomparisonperiod",
    "functionName": "getRoutingQueueComparisonperiod",
    "signature": "getRoutingQueueComparisonperiod(queueId, comparisonPeriodId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparisonPeriodId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ComparisonPeriod",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueComparisonperiodRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue id\nlet comparisonPeriodId = \"comparisonPeriodId_example\"; // String | ComparisonPeriod id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueueComparisonperiod(queueId, comparisonPeriodId, callback);"
  },
  "getroutingqueuecomparisonperiods": {
    "operationId": "getroutingqueuecomparisonperiods",
    "functionName": "getRoutingQueueComparisonperiods",
    "signature": "getRoutingQueueComparisonperiods(queueId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ComparisonPeriodListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueComparisonperiodsRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueueComparisonperiods(queueId, callback);"
  },
  "getroutingqueueestimatedwaittime": {
    "operationId": "getroutingqueueestimatedwaittime",
    "functionName": "getRoutingQueueEstimatedwaittime",
    "signature": "getRoutingQueueEstimatedwaittime(queueId, conversationId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EstimatedWaitTimePredictions",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueEstimatedwaittimeRequest();\n\nlet queueId = \"queueId_example\"; // String | queueId\nlet opts = { \n  'conversationId': \"conversationId_example\" // String | conversationId\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueueEstimatedwaittime(queueId, opts, callback);"
  },
  "getroutingqueuemediatypeestimatedwaittime": {
    "operationId": "getroutingqueuemediatypeestimatedwaittime",
    "functionName": "getRoutingQueueMediatypeEstimatedwaittime",
    "signature": "getRoutingQueueMediatypeEstimatedwaittime(queueId, mediaType)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EstimatedWaitTimePredictions",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueMediatypeEstimatedwaittimeRequest();\n\nlet queueId = \"queueId_example\"; // String | queueId\nlet mediaType = \"mediaType_example\"; // String | mediaType\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueueMediatypeEstimatedwaittime(queueId, mediaType, callback);"
  },
  "getroutingqueuemembers": {
    "operationId": "getroutingqueuemembers",
    "functionName": "getRoutingQueueMembers",
    "signature": "getRoutingQueueMembers(queueId, pageNumber, pageSize, sortOrder, expand, name, profileSkills, skills, languages, routingStatus, presence, memberBy, joined)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "profileSkills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "skills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "languages",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "routingStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "presence",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "memberBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "QueueMemberEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueMembersRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  'pageNumber': 1, // Number | \n  'pageSize': 25, // Number | Max value is 100\n  'sortOrder': \"asc\", // String | Note: results are sorted by name.\n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  'name': \"name_example\", // String | Filter by queue member name\n  'profileSkills': [\"profileSkills_example\"], // [String] | Filter by profile skill\n  'skills': [\"skills_example\"], // [String] | Filter by skill\n  'languages': [\"languages_example\"], // [String] | Filter by language\n  'routingStatus': [\"routingStatus_example\"], // [String] | Filter by routing status\n  'presence': [\"presence_example\"], // [String] | Filter by presence\n  'memberBy': \"memberBy_example\", // String | Filter by member type\n  'joined': true // Boolean | Filter by joined status\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueueMembers(queueId, opts, callback);"
  },
  "getroutingqueueusers": {
    "operationId": "getroutingqueueusers",
    "functionName": "getRoutingQueueUsers",
    "signature": "getRoutingQueueUsers(queueId, pageNumber, pageSize, sortOrder, expand, joined, name, profileSkills, skills, languages, routingStatus, presence)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "profileSkills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "skills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "languages",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "routingStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "presence",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueMemberEntityListingV1",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueUsersRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  'pageNumber': 1, // Number | \n  'pageSize': 25, // Number | Max value is 100\n  'sortOrder': \"asc\", // String | Note: results are sorted by name.\n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  'joined': true, // Boolean | Filter by joined status\n  'name': \"name_example\", // String | Filter by queue member name\n  'profileSkills': [\"profileSkills_example\"], // [String] | Filter by profile skill\n  'skills': [\"skills_example\"], // [String] | Filter by skill\n  'languages': [\"languages_example\"], // [String] | Filter by language\n  'routingStatus': [\"routingStatus_example\"], // [String] | Filter by routing status\n  'presence': [\"presence_example\"] // [String] | Filter by presence\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueueUsers(queueId, opts, callback);"
  },
  "getroutingqueuewrapupcodes": {
    "operationId": "getroutingqueuewrapupcodes",
    "functionName": "getRoutingQueueWrapupcodes",
    "signature": "getRoutingQueueWrapupcodes(queueId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WrapupCodeEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueueWrapupcodesRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueueWrapupcodes(queueId, opts, callback);"
  },
  "getroutingqueues": {
    "operationId": "getroutingqueues",
    "functionName": "getRoutingQueues",
    "signature": "getRoutingQueues(pageNumber, pageSize, sortOrder, name, id, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueuesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortOrder': \"asc\", // String | Note: results are sorted by name.\n  'name': \"name_example\", // String | Filter by queue name\n  'id': [\"id_example\"], // [String] | Filter by queue ID(s)\n  'divisionId': [\"divisionId_example\"] // [String] | Filter by queue division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueues(opts, callback);"
  },
  "getroutingqueuesdivisionviews": {
    "operationId": "getroutingqueuesdivisionviews",
    "functionName": "getRoutingQueuesDivisionviews",
    "signature": "getRoutingQueuesDivisionviews(pageSize, pageNumber, sortBy, sortOrder, name, id, divisionId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueuesDivisionviewsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size [max value is 100]\n  'pageNumber': 1, // Number | Page number [max value is 5]\n  'sortBy': \"name\", // String | Sort by\n  'sortOrder': \"asc\", // String | Sort order\n  'name': \"name_example\", // String | Name\n  'id': [\"id_example\"], // [String] | Queue ID(s)\n  'divisionId': [\"divisionId_example\"] // [String] | Division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueuesDivisionviews(opts, callback);"
  },
  "getroutingqueuesdivisionviewsall": {
    "operationId": "getroutingqueuesdivisionviewsall",
    "functionName": "getRoutingQueuesDivisionviewsAll",
    "signature": "getRoutingQueuesDivisionviewsAll(pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueuesDivisionviewsAllRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size [max value is 500]\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"asc\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueuesDivisionviewsAll(opts, callback);"
  },
  "getroutingqueuesme": {
    "operationId": "getroutingqueuesme",
    "functionName": "getRoutingQueuesMe",
    "signature": "getRoutingQueuesMe(pageNumber, pageSize, joined, sortOrder)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingQueuesMeRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'joined': true, // Boolean | Filter by joined status.\n  'sortOrder': \"asc\" // String | Note: results are sorted by name.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingQueuesMe(opts, callback);"
  },
  "getroutingsettings": {
    "operationId": "getroutingsettings",
    "functionName": "getRoutingSettings",
    "signature": "getRoutingSettings()",
    "return": "RoutingSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSettings(callback);"
  },
  "getroutingsettingscontactcenter": {
    "operationId": "getroutingsettingscontactcenter",
    "functionName": "getRoutingSettingsContactcenter",
    "signature": "getRoutingSettingsContactcenter()",
    "return": "ContactCenterSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSettingsContactcenterRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSettingsContactcenter(callback);"
  },
  "getroutingsettingstranscription": {
    "operationId": "getroutingsettingstranscription",
    "functionName": "getRoutingSettingsTranscription",
    "signature": "getRoutingSettingsTranscription()",
    "return": "TranscriptionSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSettingsTranscriptionRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSettingsTranscription(callback);"
  },
  "getroutingskill": {
    "operationId": "getroutingskill",
    "functionName": "getRoutingSkill",
    "signature": "getRoutingSkill(skillId)",
    "parameters": [
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RoutingSkill",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSkillRequest();\n\nlet skillId = \"skillId_example\"; // String | Skill ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSkill(skillId, callback);"
  },
  "getroutingskills": {
    "operationId": "getroutingskills",
    "functionName": "getRoutingSkills",
    "signature": "getRoutingSkills(pageSize, pageNumber, name, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "SkillEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSkillsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Filter for results that start with this value\n  'id': [\"id_example\"] // [String] | id\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSkills(opts, callback);"
  },
  "getroutingsmsaddress": {
    "operationId": "getroutingsmsaddress",
    "functionName": "getRoutingSmsAddress",
    "signature": "getRoutingSmsAddress(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SmsAddress",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSmsAddressRequest();\n\nlet addressId = \"addressId_example\"; // String | Address ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSmsAddress(addressId, callback);"
  },
  "getroutingsmsaddresses": {
    "operationId": "getroutingsmsaddresses",
    "functionName": "getRoutingSmsAddresses",
    "signature": "getRoutingSmsAddresses(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SmsAddressEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSmsAddressesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSmsAddresses(opts, callback);"
  },
  "getroutingsmsavailablephonenumbers": {
    "operationId": "getroutingsmsavailablephonenumbers",
    "functionName": "getRoutingSmsAvailablephonenumbers",
    "signature": "getRoutingSmsAvailablephonenumbers(countryCode, phoneNumberType, region, city, areaCode, pattern, addressRequirement)",
    "parameters": [
      {
        "name": "countryCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "phoneNumberType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "region",
        "type": "String",
        "required": "false"
      },
      {
        "name": "city",
        "type": "String",
        "required": "false"
      },
      {
        "name": "areaCode",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pattern",
        "type": "String",
        "required": "false"
      },
      {
        "name": "addressRequirement",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SMSAvailablePhoneNumberEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSmsAvailablephonenumbersRequest();\n\nlet countryCode = \"countryCode_example\"; // String | The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned\nlet phoneNumberType = \"phoneNumberType_example\"; // String | Type of available phone numbers searched\nlet opts = { \n  'region': \"region_example\", // String | Region/province/state that can be used to restrict the numbers returned\n  'city': \"city_example\", // String | City that can be used to restrict the numbers returned\n  'areaCode': \"areaCode_example\", // String | Area code that can be used to restrict the numbers returned\n  'pattern': \"pattern_example\", // String | A pattern to match phone numbers. Valid characters are '*' and [0-9a-zA-Z]. The '*' character will match any single digit.\n  'addressRequirement': \"addressRequirement_example\" // String | This indicates whether the phone number requires to have an Address registered.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSmsAvailablephonenumbers(countryCode, phoneNumberType, opts, callback);"
  },
  "getroutingsmsphonenumber": {
    "operationId": "getroutingsmsphonenumber",
    "functionName": "getRoutingSmsPhonenumber",
    "signature": "getRoutingSmsPhonenumber(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSmsPhonenumberRequest();\n\nlet addressId = \"addressId_example\"; // String | Address ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSmsPhonenumber(addressId, callback);"
  },
  "getroutingsmsphonenumbers": {
    "operationId": "getroutingsmsphonenumbers",
    "functionName": "getRoutingSmsPhonenumbers",
    "signature": "getRoutingSmsPhonenumbers(phoneNumber, phoneNumberType, phoneNumberStatus, countryCode, pageSize, pageNumber, sortBy, sortOrder, language)",
    "parameters": [
      {
        "name": "phoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneNumberType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "phoneNumberStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "countryCode",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumberEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingSmsPhonenumbersRequest();\n\nlet opts = { \n  'phoneNumber': \"phoneNumber_example\", // String | Filter on phone number address. Allowable characters are the digits '0-9' and the wild card character '\\\\*'. If just digits are present, a contains search is done on the address pattern. For example, '317' could be matched anywhere in the address. An '\\\\*' will match multiple digits. For example, to match a specific area code within the US a pattern like '1317*' could be used.\n  'phoneNumberType': [\"phoneNumberType_example\"], // [String] | Filter on phone number type\n  'phoneNumberStatus': [\"phoneNumberStatus_example\"], // [String] | Filter on phone number status\n  'countryCode': [\"countryCode_example\"], // [String] | Filter on country code\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"sortBy_example\", // String | Optional field to sort results\n  'sortOrder': \"sortOrder_example\", // String | Sort order\n  'language': \"en-US\" // String | A language tag (which is sometimes referred to as a \\\"locale identifier\\\") to use to localize country field and sort operations\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingSmsPhonenumbers(opts, callback);"
  },
  "getroutinguserutilization": {
    "operationId": "getroutinguserutilization",
    "functionName": "getRoutingUserUtilization",
    "signature": "getRoutingUserUtilization(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentMaxUtilization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingUserUtilizationRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingUserUtilization(userId, callback);"
  },
  "getroutingutilization": {
    "operationId": "getroutingutilization",
    "functionName": "getRoutingUtilization",
    "signature": "getRoutingUtilization()",
    "return": "Utilization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingUtilizationRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingUtilization(callback);"
  },
  "getroutingwrapupcode": {
    "operationId": "getroutingwrapupcode",
    "functionName": "getRoutingWrapupcode",
    "signature": "getRoutingWrapupcode(codeId)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingWrapupcodeRequest();\n\nlet codeId = \"codeId_example\"; // String | Wrapup Code ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingWrapupcode(codeId, callback);"
  },
  "getroutingwrapupcodes": {
    "operationId": "getroutingwrapupcodes",
    "functionName": "getRoutingWrapupcodes",
    "signature": "getRoutingWrapupcodes(pageSize, pageNumber, sortBy, sortOrder, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WrapupCodeEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetRoutingWrapupcodesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"name\", // String | Sort by\n  'sortOrder': \"ascending\", // String | Sort order\n  'name': \"name_example\" // String | Wrapup code's name ('Sort by' param is ignored unless this field is provided)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getRoutingWrapupcodes(opts, callback);"
  },
  "getuserqueues": {
    "operationId": "getuserqueues",
    "functionName": "getUserQueues",
    "signature": "getUserQueues(userId, pageSize, pageNumber, joined, divisionId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserQueuesRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'joined': true, // Boolean | Is joined to the queue\n  'divisionId': [\"divisionId_example\"] // [String] | Division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserQueues(userId, opts, callback);"
  },
  "getuserroutinglanguages": {
    "operationId": "getuserroutinglanguages",
    "functionName": "getUserRoutinglanguages",
    "signature": "getUserRoutinglanguages(userId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserLanguageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserRoutinglanguagesRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ASC\" // String | Ascending or descending sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserRoutinglanguages(userId, opts, callback);"
  },
  "getuserroutingskills": {
    "operationId": "getuserroutingskills",
    "functionName": "getUserRoutingskills",
    "signature": "getUserRoutingskills(userId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserRoutingskillsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ASC\" // String | Ascending or descending sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserRoutingskills(userId, opts, callback);"
  },
  "patchroutingconversation": {
    "operationId": "patchroutingconversation",
    "functionName": "patchRoutingConversation",
    "signature": "patchRoutingConversation(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingConversationAttributesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingConversationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet body = {}; // Object | Conversation Attributes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRoutingConversation(conversationId, body, callback);"
  },
  "patchroutingemaildomain": {
    "operationId": "patchroutingemaildomain",
    "functionName": "patchRoutingEmailDomain",
    "signature": "patchRoutingEmailDomain(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingEmailDomainRequest();\n\nlet domainId = \"domainId_example\"; // String | domain ID\nlet body = {}; // Object | Domain settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRoutingEmailDomain(domainId, body, callback);"
  },
  "patchroutingemaildomainvalidate": {
    "operationId": "patchroutingemaildomainvalidate",
    "functionName": "patchRoutingEmailDomainValidate",
    "signature": "patchRoutingEmailDomainValidate(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingEmailDomainValidateRequest();\n\nlet domainId = \"domainId_example\"; // String | domain ID\nlet body = {}; // Object | Domain settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRoutingEmailDomainValidate(domainId, body, callback);"
  },
  "patchroutingpredictor": {
    "operationId": "patchroutingpredictor",
    "functionName": "patchRoutingPredictor",
    "signature": "patchRoutingPredictor(predictorId, body)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Predictor",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingPredictorRequest();\n\nlet predictorId = \"predictorId_example\"; // String | Predictor ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRoutingPredictor(predictorId, opts, callback);"
  },
  "patchroutingqueuemember": {
    "operationId": "patchroutingqueuemember",
    "functionName": "patchRoutingQueueMember",
    "signature": "patchRoutingQueueMember(queueId, memberId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingQueueMemberRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet body = {}; // Object | Queue Member\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchRoutingQueueMember(queueId, memberId, body, callback);"
  },
  "patchroutingqueuemembers": {
    "operationId": "patchroutingqueuemembers",
    "functionName": "patchRoutingQueueMembers",
    "signature": "patchRoutingQueueMembers(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueueMemberEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingQueueMembersRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRoutingQueueMembers(queueId, body, callback);"
  },
  "patchroutingqueueuser": {
    "operationId": "patchroutingqueueuser",
    "functionName": "patchRoutingQueueUser",
    "signature": "patchRoutingQueueUser(queueId, memberId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingQueueUserRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet memberId = \"memberId_example\"; // String | Member ID\nlet body = {}; // Object | Queue Member\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchRoutingQueueUser(queueId, memberId, body, callback);"
  },
  "patchroutingqueueusers": {
    "operationId": "patchroutingqueueusers",
    "functionName": "patchRoutingQueueUsers",
    "signature": "patchRoutingQueueUsers(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "QueueMemberEntityListingV1",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingQueueUsersRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchRoutingQueueUsers(queueId, body, callback);"
  },
  "patchroutingsettingscontactcenter": {
    "operationId": "patchroutingsettingscontactcenter",
    "functionName": "patchRoutingSettingsContactcenter",
    "signature": "patchRoutingSettingsContactcenter(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchRoutingSettingsContactcenterRequest();\n\nlet body = {}; // Object | Contact Center Settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchRoutingSettingsContactcenter(body, callback);"
  },
  "patchuserqueue": {
    "operationId": "patchuserqueue",
    "functionName": "patchUserQueue",
    "signature": "patchUserQueue(queueId, userId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserQueue",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserQueueRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Queue Member\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserQueue(queueId, userId, body, callback);"
  },
  "patchuserqueues": {
    "operationId": "patchuserqueues",
    "functionName": "patchUserQueues",
    "signature": "patchUserQueues(userId, body, divisionId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserQueuesRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | User Queues\nlet opts = { \n  'divisionId': [\"divisionId_example\"] // [String] | Division ID(s)\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserQueues(userId, body, opts, callback);"
  },
  "patchuserroutinglanguage": {
    "operationId": "patchuserroutinglanguage",
    "functionName": "patchUserRoutinglanguage",
    "signature": "patchUserRoutinglanguage(userId, languageId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingLanguage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserRoutinglanguageRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet languageId = \"languageId_example\"; // String | languageId\nlet body = {}; // Object | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserRoutinglanguage(userId, languageId, body, callback);"
  },
  "patchuserroutinglanguagesbulk": {
    "operationId": "patchuserroutinglanguagesbulk",
    "functionName": "patchUserRoutinglanguagesBulk",
    "signature": "patchUserRoutinglanguagesBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserLanguageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserRoutinglanguagesBulkRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserRoutinglanguagesBulk(userId, body, callback);"
  },
  "patchuserroutingskillsbulk": {
    "operationId": "patchuserroutingskillsbulk",
    "functionName": "patchUserRoutingskillsBulk",
    "signature": "patchUserRoutingskillsBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserRoutingskillsBulkRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | Skill\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserRoutingskillsBulk(userId, body, callback);"
  },
  "postroutingassessments": {
    "operationId": "postroutingassessments",
    "functionName": "postRoutingAssessments",
    "signature": "postRoutingAssessments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BenefitAssessment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingAssessmentsRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingAssessments(opts, callback);"
  },
  "postroutingassessmentsjobs": {
    "operationId": "postroutingassessmentsjobs",
    "functionName": "postRoutingAssessmentsJobs",
    "signature": "postRoutingAssessmentsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BenefitAssessmentJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingAssessmentsJobsRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingAssessmentsJobs(opts, callback);"
  },
  "postroutingemaildomainroutes": {
    "operationId": "postroutingemaildomainroutes",
    "functionName": "postRoutingEmailDomainRoutes",
    "signature": "postRoutingEmailDomainRoutes(domainName, body)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingEmailDomainRoutesRequest();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet body = {}; // Object | Route\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingEmailDomainRoutes(domainName, body, callback);"
  },
  "postroutingemaildomaintestconnection": {
    "operationId": "postroutingemaildomaintestconnection",
    "functionName": "postRoutingEmailDomainTestconnection",
    "signature": "postRoutingEmailDomainTestconnection(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TestMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingEmailDomainTestconnectionRequest();\n\nlet domainId = \"domainId_example\"; // String | domain ID\nlet opts = { \n  'body': {} // Object | TestMessage\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingEmailDomainTestconnection(domainId, opts, callback);"
  },
  "postroutingemaildomains": {
    "operationId": "postroutingemaildomains",
    "functionName": "postRoutingEmailDomains",
    "signature": "postRoutingEmailDomains(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingEmailDomainsRequest();\n\nlet body = {}; // Object | Domain\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingEmailDomains(body, callback);"
  },
  "postroutinglanguages": {
    "operationId": "postroutinglanguages",
    "functionName": "postRoutingLanguages",
    "signature": "postRoutingLanguages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingLanguagesRequest();\n\nlet body = {}; // Object | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingLanguages(body, callback);"
  },
  "postroutingpredictors": {
    "operationId": "postroutingpredictors",
    "functionName": "postRoutingPredictors",
    "signature": "postRoutingPredictors(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "Predictor",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingPredictorsRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingPredictors(opts, callback);"
  },
  "postroutingqueuemembers": {
    "operationId": "postroutingqueuemembers",
    "functionName": "postRoutingQueueMembers",
    "signature": "postRoutingQueueMembers(queueId, body, _delete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "_delete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingQueueMembersRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\nlet opts = { \n  '_delete': false // Boolean | True to delete queue members\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postRoutingQueueMembers(queueId, body, opts, callback);"
  },
  "postroutingqueueusers": {
    "operationId": "postroutingqueueusers",
    "functionName": "postRoutingQueueUsers",
    "signature": "postRoutingQueueUsers(queueId, body, _delete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "_delete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingQueueUsersRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | Queue Members\nlet opts = { \n  '_delete': false // Boolean | True to delete queue members\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postRoutingQueueUsers(queueId, body, opts, callback);"
  },
  "postroutingqueuewrapupcodes": {
    "operationId": "postroutingqueuewrapupcodes",
    "functionName": "postRoutingQueueWrapupcodes",
    "signature": "postRoutingQueueWrapupcodes(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingQueueWrapupcodesRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = [{}]; // Object | List of wrapup codes\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingQueueWrapupcodes(queueId, body, callback);"
  },
  "postroutingqueues": {
    "operationId": "postroutingqueues",
    "functionName": "postRoutingQueues",
    "signature": "postRoutingQueues(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingQueuesRequest();\n\nlet body = {}; // Object | Queue\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingQueues(body, callback);"
  },
  "postroutingskills": {
    "operationId": "postroutingskills",
    "functionName": "postRoutingSkills",
    "signature": "postRoutingSkills(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingSkill",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingSkillsRequest();\n\nlet body = {}; // Object | Skill\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingSkills(body, callback);"
  },
  "postroutingsmsaddresses": {
    "operationId": "postroutingsmsaddresses",
    "functionName": "postRoutingSmsAddresses",
    "signature": "postRoutingSmsAddresses(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SmsAddress",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingSmsAddressesRequest();\n\nlet body = {}; // Object | SmsAddress\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingSmsAddresses(body, callback);"
  },
  "postroutingsmsphonenumbers": {
    "operationId": "postroutingsmsphonenumbers",
    "functionName": "postRoutingSmsPhonenumbers",
    "signature": "postRoutingSmsPhonenumbers(body, async)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "async",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingSmsPhonenumbersRequest();\n\nlet body = {}; // Object | SmsPhoneNumber\nlet opts = { \n  'async': false // Boolean | Provision a new phone number for SMS in an asynchronous manner. If the async parameter value is true, this initiates the provisioning of a new phone number. Check the phoneNumber's provisioningStatus for completion of this request.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingSmsPhonenumbers(body, opts, callback);"
  },
  "postroutingwrapupcodes": {
    "operationId": "postroutingwrapupcodes",
    "functionName": "postRoutingWrapupcodes",
    "signature": "postRoutingWrapupcodes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostRoutingWrapupcodesRequest();\n\nlet body = {}; // Object | WrapupCode\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postRoutingWrapupcodes(body, callback);"
  },
  "postuserroutinglanguages": {
    "operationId": "postuserroutinglanguages",
    "functionName": "postUserRoutinglanguages",
    "signature": "postUserRoutinglanguages(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingLanguage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUserRoutinglanguagesRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Language\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUserRoutinglanguages(userId, body, callback);"
  },
  "postuserroutingskills": {
    "operationId": "postuserroutingskills",
    "functionName": "postUserRoutingskills",
    "signature": "postUserRoutingskills(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingSkill",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUserRoutingskillsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Skill\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUserRoutingskills(userId, body, callback);"
  },
  "putroutingemaildomainroute": {
    "operationId": "putroutingemaildomainroute",
    "functionName": "putRoutingEmailDomainRoute",
    "signature": "putRoutingEmailDomainRoute(domainName, routeId, body)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingEmailDomainRouteRequest();\n\nlet domainName = \"domainName_example\"; // String | email domain\nlet routeId = \"routeId_example\"; // String | route ID\nlet body = {}; // Object | Route\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingEmailDomainRoute(domainName, routeId, body, callback);"
  },
  "putroutingmessagerecipient": {
    "operationId": "putroutingmessagerecipient",
    "functionName": "putRoutingMessageRecipient",
    "signature": "putRoutingMessageRecipient(recipientId, body)",
    "parameters": [
      {
        "name": "recipientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Recipient",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingMessageRecipientRequest();\n\nlet recipientId = \"recipientId_example\"; // String | Recipient ID\nlet body = {}; // Object | Recipient\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingMessageRecipient(recipientId, body, callback);"
  },
  "putroutingqueue": {
    "operationId": "putroutingqueue",
    "functionName": "putRoutingQueue",
    "signature": "putRoutingQueue(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingQueueRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet body = {}; // Object | Queue\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingQueue(queueId, body, callback);"
  },
  "putroutingsettings": {
    "operationId": "putroutingsettings",
    "functionName": "putRoutingSettings",
    "signature": "putRoutingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingSettingsRequest();\n\nlet body = {}; // Object | Organization Settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingSettings(body, callback);"
  },
  "putroutingsettingstranscription": {
    "operationId": "putroutingsettingstranscription",
    "functionName": "putRoutingSettingsTranscription",
    "signature": "putRoutingSettingsTranscription(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TranscriptionSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingSettingsTranscriptionRequest();\n\nlet body = {}; // Object | Organization Settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingSettingsTranscription(body, callback);"
  },
  "putroutingsmsphonenumber": {
    "operationId": "putroutingsmsphonenumber",
    "functionName": "putRoutingSmsPhonenumber",
    "signature": "putRoutingSmsPhonenumber(addressId, body, async)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "async",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingSmsPhonenumberRequest();\n\nlet addressId = \"addressId_example\"; // String | Address ID\nlet body = {}; // Object | SmsPhoneNumber\nlet opts = { \n  'async': false // Boolean | Update an existing phone number for SMS in an asynchronous manner. If the async parameter value is true, this initiates the update of a provisioned phone number. Check the phoneNumber's provisioningStatus for the progress of this request.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingSmsPhonenumber(addressId, body, opts, callback);"
  },
  "putroutinguserutilization": {
    "operationId": "putroutinguserutilization",
    "functionName": "putRoutingUserUtilization",
    "signature": "putRoutingUserUtilization(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "AgentMaxUtilization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingUserUtilizationRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | utilization\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingUserUtilization(userId, body, callback);"
  },
  "putroutingutilization": {
    "operationId": "putroutingutilization",
    "functionName": "putRoutingUtilization",
    "signature": "putRoutingUtilization(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Utilization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingUtilizationRequest();\n\nlet body = {}; // Object | utilization\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingUtilization(body, callback);"
  },
  "putroutingwrapupcode": {
    "operationId": "putroutingwrapupcode",
    "functionName": "putRoutingWrapupcode",
    "signature": "putRoutingWrapupcode(codeId, body)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutRoutingWrapupcodeRequest();\n\nlet codeId = \"codeId_example\"; // String | Wrapup Code ID\nlet body = {}; // Object | WrapupCode\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putRoutingWrapupcode(codeId, body, callback);"
  },
  "putuserroutingskill": {
    "operationId": "putuserroutingskill",
    "functionName": "putUserRoutingskill",
    "signature": "putUserRoutingskill(userId, skillId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserRoutingSkill",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserRoutingskillRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet skillId = \"skillId_example\"; // String | skillId\nlet body = {}; // Object | Skill\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserRoutingskill(userId, skillId, body, callback);"
  },
  "putuserroutingskillsbulk": {
    "operationId": "putuserroutingskillsbulk",
    "functionName": "putUserRoutingskillsBulk",
    "signature": "putUserRoutingskillsBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserRoutingskillsBulkRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | Skill\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserRoutingskillsBulk(userId, body, callback);"
  },
  "deletescimuser": {
    "operationId": "deletescimuser",
    "functionName": "deleteScimUser",
    "signature": "deleteScimUser(userId, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteScimUserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteScimUser(userId, opts, callback);"
  },
  "deletescimv2user": {
    "operationId": "deletescimv2user",
    "functionName": "deleteScimV2User",
    "signature": "deleteScimV2User(userId, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteScimV2UserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteScimV2User(userId, opts, callback);"
  },
  "getscimgroup": {
    "operationId": "getscimgroup",
    "functionName": "getScimGroup",
    "signature": "getScimGroup(groupId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimGroupRequest();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/groups.\nlet opts = { \n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n  'ifNoneMatch': \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimGroup(groupId, opts, callback);"
  },
  "getscimgroups": {
    "operationId": "getscimgroups",
    "functionName": "getScimGroups",
    "signature": "getScimGroups(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimGroupListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimGroupsRequest();\n\nlet opts = { \n  'startIndex': 1, // Number | The 1-based index of the first query result.\n  'count': 25, // Number | The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n  'filter': \"displayName eq groupName\" // String | Filters results. If nothing is specified, returns all groups. Examples of valid values: \\\"id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3\\\", \\\"displayname eq Sales\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimGroups(opts, callback);"
  },
  "getscimresourcetype": {
    "operationId": "getscimresourcetype",
    "functionName": "getScimResourcetype",
    "signature": "getScimResourcetype(resourceType)",
    "parameters": [
      {
        "name": "resourceType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimConfigResourceType",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimResourcetypeRequest();\n\nlet resourceType = \"resourceType_example\"; // String | The type of resource. Returned with GET /api/v2/scim/resourcetypes.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimResourcetype(resourceType, callback);"
  },
  "getscimresourcetypes": {
    "operationId": "getscimresourcetypes",
    "functionName": "getScimResourcetypes",
    "signature": "getScimResourcetypes()",
    "return": "ScimConfigResourceTypesListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimResourcetypesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimResourcetypes(callback);"
  },
  "getscimschema": {
    "operationId": "getscimschema",
    "functionName": "getScimSchema",
    "signature": "getScimSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimV2SchemaDefinition",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimSchemaRequest();\n\nlet schemaId = \"schemaId_example\"; // String | The ID of a schema. Returned with GET /api/v2/scim/schemas.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimSchema(schemaId, callback);"
  },
  "getscimschemas": {
    "operationId": "getscimschemas",
    "functionName": "getScimSchemas",
    "signature": "getScimSchemas(filter)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2SchemaListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimSchemasRequest();\n\nlet opts = { \n  'filter': \"displayName eq groupName\" // String | Filtered results are invalid and return 403 Unauthorized.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimSchemas(opts, callback);"
  },
  "getscimserviceproviderconfig": {
    "operationId": "getscimserviceproviderconfig",
    "functionName": "getScimServiceproviderconfig",
    "signature": "getScimServiceproviderconfig(ifNoneMatch)",
    "parameters": [
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimServiceProviderConfig",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimServiceproviderconfigRequest();\n\nlet opts = { \n  'ifNoneMatch': \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/serviceproviderconfig. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimServiceproviderconfig(opts, callback);"
  },
  "getscimuser": {
    "operationId": "getscimuser",
    "functionName": "getScimUser",
    "signature": "getScimUser(userId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimUserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet opts = { \n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n  'ifNoneMatch': \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimUser(userId, opts, callback);"
  },
  "getscimusers": {
    "operationId": "getscimusers",
    "functionName": "getScimUsers",
    "signature": "getScimUsers(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimUserListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimUsersRequest();\n\nlet opts = { \n  'startIndex': 1, // Number | The 1-based index of the first query result.\n  'count': 25, // Number | The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n  'filter': \"filter_example\" // String | Filters results. If nothing is specified, returns all active users. Examples of valid values: \\\"id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9\\\", \\\"userName eq search@sample.org\\\", \\\"manager eq 16e10e2f-1136-43fe-bb84-eac073168a49\\\", \\\"email eq search@sample.org\\\", \\\"division eq divisionName\\\", \\\"externalId eq 167844\\\", \\\"active eq false\\\", \\\"employeeNumber eq 9876543210\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimUsers(opts, callback);"
  },
  "getscimv2group": {
    "operationId": "getscimv2group",
    "functionName": "getScimV2Group",
    "signature": "getScimV2Group(groupId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2GroupRequest();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet opts = { \n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n  'ifNoneMatch': \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Group(groupId, opts, callback);"
  },
  "getscimv2groups": {
    "operationId": "getscimv2groups",
    "functionName": "getScimV2Groups",
    "signature": "getScimV2Groups(filter, startIndex, count, attributes, excludedAttributes)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScimGroupListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2GroupsRequest();\n\nlet filter = \"displayName eq groupName\"; // String | Filters results. If nothing is specified, returns all groups. Examples of valid values: \\\"id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3\\\", \\\"displayname eq Sales\\\".\nlet opts = { \n  'startIndex': 1, // Number | The 1-based index of the first query result.\n  'count': 25, // Number | The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"] // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Groups(filter, opts, callback);"
  },
  "getscimv2resourcetype": {
    "operationId": "getscimv2resourcetype",
    "functionName": "getScimV2Resourcetype",
    "signature": "getScimV2Resourcetype(resourceType)",
    "parameters": [
      {
        "name": "resourceType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimConfigResourceType",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2ResourcetypeRequest();\n\nlet resourceType = \"resourceType_example\"; // String | The type of resource. Returned with GET /api/v2/scim/v2/resourcetypes.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Resourcetype(resourceType, callback);"
  },
  "getscimv2resourcetypes": {
    "operationId": "getscimv2resourcetypes",
    "functionName": "getScimV2Resourcetypes",
    "signature": "getScimV2Resourcetypes()",
    "return": "ScimConfigResourceTypesListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2ResourcetypesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Resourcetypes(callback);"
  },
  "getscimv2schema": {
    "operationId": "getscimv2schema",
    "functionName": "getScimV2Schema",
    "signature": "getScimV2Schema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimV2SchemaDefinition",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2SchemaRequest();\n\nlet schemaId = \"schemaId_example\"; // String | The ID of a schema. Returned with GET /api/v2/scim/v2/schemas.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Schema(schemaId, callback);"
  },
  "getscimv2schemas": {
    "operationId": "getscimv2schemas",
    "functionName": "getScimV2Schemas",
    "signature": "getScimV2Schemas(filter)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2SchemaListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2SchemasRequest();\n\nlet opts = { \n  'filter': \"displayName eq groupName\" // String | Filtered results are invalid and return 403 Unauthorized.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Schemas(opts, callback);"
  },
  "getscimv2serviceproviderconfig": {
    "operationId": "getscimv2serviceproviderconfig",
    "functionName": "getScimV2Serviceproviderconfig",
    "signature": "getScimV2Serviceproviderconfig(ifNoneMatch)",
    "parameters": [
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimServiceProviderConfig",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2ServiceproviderconfigRequest();\n\nlet opts = { \n  'ifNoneMatch': \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/serviceproviderconfig. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Serviceproviderconfig(opts, callback);"
  },
  "getscimv2user": {
    "operationId": "getscimv2user",
    "functionName": "getScimV2User",
    "signature": "getScimV2User(userId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2UserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet opts = { \n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n  'ifNoneMatch': \"ifNoneMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2User(userId, opts, callback);"
  },
  "getscimv2users": {
    "operationId": "getscimv2users",
    "functionName": "getScimV2Users",
    "signature": "getScimV2Users(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimUserListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScimV2UsersRequest();\n\nlet opts = { \n  'startIndex': 1, // Number | The 1-based index of the first query result.\n  'count': 25, // Number | The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\n  'attributes': [\"attributes_example\"], // [String] | Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\n  'excludedAttributes': [\"excludedAttributes_example\"], // [String] | Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n  'filter': \"filter_example\" // String | Filters results. If nothing is specified, returns all active users. Examples of valid values: \\\"id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9\\\", \\\"userName eq search@sample.org\\\", \\\"manager eq 16e10e2f-1136-43fe-bb84-eac073168a49\\\", \\\"email eq search@sample.org\\\", \\\"division eq divisionName\\\", \\\"externalId eq 167844\\\", \\\"active eq false\\\", \\\"employeeNumber eq 9876543210\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScimV2Users(opts, callback);"
  },
  "patchscimgroup": {
    "operationId": "patchscimgroup",
    "functionName": "patchScimGroup",
    "signature": "patchScimGroup(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchScimGroupRequest();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/groups.\nlet body = {}; // Object | The information used to modify a group.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchScimGroup(groupId, body, opts, callback);"
  },
  "patchscimuser": {
    "operationId": "patchscimuser",
    "functionName": "patchScimUser",
    "signature": "patchScimUser(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchScimUserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet body = {}; // Object | The information used to modify a user.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchScimUser(userId, body, opts, callback);"
  },
  "patchscimv2group": {
    "operationId": "patchscimv2group",
    "functionName": "patchScimV2Group",
    "signature": "patchScimV2Group(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchScimV2GroupRequest();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet body = {}; // Object | The information used to modify a group.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchScimV2Group(groupId, body, opts, callback);"
  },
  "patchscimv2user": {
    "operationId": "patchscimv2user",
    "functionName": "patchScimV2User",
    "signature": "patchScimV2User(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchScimV2UserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet body = {}; // Object | The information used to modify a user.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchScimV2User(userId, body, opts, callback);"
  },
  "postscimusers": {
    "operationId": "postscimusers",
    "functionName": "postScimUsers",
    "signature": "postScimUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostScimUsersRequest();\n\nlet body = {}; // Object | The information used to create a user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postScimUsers(body, callback);"
  },
  "postscimv2users": {
    "operationId": "postscimv2users",
    "functionName": "postScimV2Users",
    "signature": "postScimV2Users(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostScimV2UsersRequest();\n\nlet body = {}; // Object | The information used to create a user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postScimV2Users(body, callback);"
  },
  "putscimgroup": {
    "operationId": "putscimgroup",
    "functionName": "putScimGroup",
    "signature": "putScimGroup(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutScimGroupRequest();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/groups.\nlet body = {}; // Object | The information used to replace a group.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putScimGroup(groupId, body, opts, callback);"
  },
  "putscimuser": {
    "operationId": "putscimuser",
    "functionName": "putScimUser",
    "signature": "putScimUser(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutScimUserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/users.\nlet body = {}; // Object | The information used to replace a user.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putScimUser(userId, body, opts, callback);"
  },
  "putscimv2group": {
    "operationId": "putscimv2group",
    "functionName": "putScimV2Group",
    "signature": "putScimV2Group(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutScimV2GroupRequest();\n\nlet groupId = \"groupId_example\"; // String | The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet body = {}; // Object | The information used to replace a group.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putScimV2Group(groupId, body, opts, callback);"
  },
  "putscimv2user": {
    "operationId": "putscimv2user",
    "functionName": "putScimV2User",
    "signature": "putScimV2User(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutScimV2UserRequest();\n\nlet userId = \"userId_example\"; // String | The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet body = {}; // Object | The information used to replace a user.\nlet opts = { \n  'ifMatch': \"ifMatch_example\" // String | The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putScimV2User(userId, body, opts, callback);"
  },
  "getscript": {
    "operationId": "getscript",
    "functionName": "getScript",
    "signature": "getScript(scriptId)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Script",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScript(scriptId, callback);"
  },
  "getscriptpage": {
    "operationId": "getscriptpage",
    "functionName": "getScriptPage",
    "signature": "getScriptPage(scriptId, pageId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Page",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptPageRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet pageId = \"pageId_example\"; // String | Page ID\nlet opts = { \n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptPage(scriptId, pageId, opts, callback);"
  },
  "getscriptpages": {
    "operationId": "getscriptpages",
    "functionName": "getScriptPages",
    "signature": "getScriptPages(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[Page]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptPagesRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptPages(scriptId, opts, callback);"
  },
  "getscripts": {
    "operationId": "getscripts",
    "functionName": "getScripts",
    "signature": "getScripts(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder, scriptDataVersion)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand\n  'name': \"name_example\", // String | Name filter\n  'feature': \"feature_example\", // String | Feature filter\n  'flowId': \"flowId_example\", // String | Secure flow id filter\n  'sortBy': \"sortBy_example\", // String | SortBy\n  'sortOrder': \"sortOrder_example\", // String | SortOrder\n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScripts(opts, callback);"
  },
  "getscriptspublished": {
    "operationId": "getscriptspublished",
    "functionName": "getScriptsPublished",
    "signature": "getScriptsPublished(pageSize, pageNumber, expand, name, feature, flowId, scriptDataVersion)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptsPublishedRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': \"expand_example\", // String | Expand\n  'name': \"name_example\", // String | Name filter\n  'feature': \"feature_example\", // String | Feature filter\n  'flowId': \"flowId_example\", // String | Secure flow id filter\n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptsPublished(opts, callback);"
  },
  "getscriptspublishedscriptid": {
    "operationId": "getscriptspublishedscriptid",
    "functionName": "getScriptsPublishedScriptId",
    "signature": "getScriptsPublishedScriptId(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Script",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptsPublishedScriptIdRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptsPublishedScriptId(scriptId, opts, callback);"
  },
  "getscriptspublishedscriptidpage": {
    "operationId": "getscriptspublishedscriptidpage",
    "functionName": "getScriptsPublishedScriptIdPage",
    "signature": "getScriptsPublishedScriptIdPage(scriptId, pageId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Page",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptsPublishedScriptIdPageRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet pageId = \"pageId_example\"; // String | Page ID\nlet opts = { \n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptsPublishedScriptIdPage(scriptId, pageId, opts, callback);"
  },
  "getscriptspublishedscriptidpages": {
    "operationId": "getscriptspublishedscriptidpages",
    "functionName": "getScriptsPublishedScriptIdPages",
    "signature": "getScriptsPublishedScriptIdPages(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[Page]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptsPublishedScriptIdPagesRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptsPublishedScriptIdPages(scriptId, opts, callback);"
  },
  "getscriptspublishedscriptidvariables": {
    "operationId": "getscriptspublishedscriptidvariables",
    "functionName": "getScriptsPublishedScriptIdVariables",
    "signature": "getScriptsPublishedScriptIdVariables(scriptId, input, output, type, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "input",
        "type": "String",
        "required": "false"
      },
      {
        "name": "output",
        "type": "String",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Object",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptsPublishedScriptIdVariablesRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  'input': \"input_example\", // String | input\n  'output': \"output_example\", // String | output\n  'type': \"type_example\", // String | type\n  'scriptDataVersion': \"scriptDataVersion_example\" // String | Advanced usage - controls the data version of the script\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptsPublishedScriptIdVariables(scriptId, opts, callback);"
  },
  "getscriptsuploadstatus": {
    "operationId": "getscriptsuploadstatus",
    "functionName": "getScriptsUploadStatus",
    "signature": "getScriptsUploadStatus(uploadId, longPoll)",
    "parameters": [
      {
        "name": "uploadId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "longPoll",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "ImportScriptStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetScriptsUploadStatusRequest();\n\nlet uploadId = \"uploadId_example\"; // String | Upload ID\nlet opts = { \n  'longPoll': false // Boolean | Enable longPolling endpoint\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getScriptsUploadStatus(uploadId, opts, callback);"
  },
  "postscriptexport": {
    "operationId": "postscriptexport",
    "functionName": "postScriptExport",
    "signature": "postScriptExport(scriptId, body)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ExportScriptResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostScriptExportRequest();\n\nlet scriptId = \"scriptId_example\"; // String | Script ID\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postScriptExport(scriptId, opts, callback);"
  },
  "getdocumentationgknsearch": {
    "operationId": "getdocumentationgknsearch",
    "functionName": "getDocumentationGknSearch",
    "signature": "getDocumentationGknSearch(q64)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GKNDocumentationSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .GetDocumentationGknSearchRequest();\n\nlet q64 = \"q64_example\"; // String | q64\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getDocumentationGknSearch(q64, callback);"
  },
  "getdocumentationsearch": {
    "operationId": "getdocumentationsearch",
    "functionName": "getDocumentationSearch",
    "signature": "getDocumentationSearch(q64)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DocumentationSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .GetDocumentationSearchRequest();\n\nlet q64 = \"q64_example\"; // String | q64\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getDocumentationSearch(q64, callback);"
  },
  "getsearch": {
    "operationId": "getsearch",
    "functionName": "getSearch",
    "signature": "getSearch(q64, expand, profile)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSearchRequest();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand\n  'profile': true // Boolean | profile\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSearch(q64, opts, callback);"
  },
  "getsearchsuggest": {
    "operationId": "getsearchsuggest",
    "functionName": "getSearchSuggest",
    "signature": "getSearchSuggest(q64, expand, profile)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSearchSuggestRequest();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand\n  'profile': true // Boolean | profile\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSearchSuggest(q64, opts, callback);"
  },
  "getuserssearch": {
    "operationId": "getuserssearch",
    "functionName": "getUsersSearch",
    "signature": "getUsersSearch(q64, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUsersSearchRequest();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | expand\n  'integrationPresenceSource': \"integrationPresenceSource_example\" // String | integrationPresenceSource\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUsersSearch(q64, opts, callback);"
  },
  "getvoicemailsearch": {
    "operationId": "getvoicemailsearch",
    "functionName": "getVoicemailSearch",
    "signature": "getVoicemailSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailsSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailSearchRequest();\n\nlet q64 = \"q64_example\"; // String | q64\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailSearch(q64, opts, callback);"
  },
  "postdocumentationgknsearch": {
    "operationId": "postdocumentationgknsearch",
    "functionName": "postDocumentationGknSearch",
    "signature": "postDocumentationGknSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GKNDocumentationSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .PostDocumentationGknSearchRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postDocumentationGknSearch(body, callback);"
  },
  "postdocumentationsearch": {
    "operationId": "postdocumentationsearch",
    "functionName": "postDocumentationSearch",
    "signature": "postDocumentationSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DocumentationSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .PostDocumentationSearchRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postDocumentationSearch(body, callback);"
  },
  "postsearch": {
    "operationId": "postsearch",
    "functionName": "postSearch",
    "signature": "postSearch(body, profile)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSearchRequest();\n\nlet body = {}; // Object | Search request options\nlet opts = { \n  'profile': true // Boolean | profile\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSearch(body, opts, callback);"
  },
  "postsearchsuggest": {
    "operationId": "postsearchsuggest",
    "functionName": "postSearchSuggest",
    "signature": "postSearchSuggest(body, profile)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "profile",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSearchSuggestRequest();\n\nlet body = {}; // Object | Search request options\nlet opts = { \n  'profile': true // Boolean | profile\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSearchSuggest(body, opts, callback);"
  },
  "postspeechandtextanalyticstranscriptssearch": {
    "operationId": "postspeechandtextanalyticstranscriptssearch",
    "functionName": "postSpeechandtextanalyticsTranscriptsSearch",
    "signature": "postSpeechandtextanalyticsTranscriptsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "JsonSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSpeechandtextanalyticsTranscriptsSearchRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSpeechandtextanalyticsTranscriptsSearch(body, callback);"
  },
  "postuserssearch": {
    "operationId": "postuserssearch",
    "functionName": "postUsersSearch",
    "signature": "postUsersSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUsersSearchRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUsersSearch(body, callback);"
  },
  "postvoicemailsearch": {
    "operationId": "postvoicemailsearch",
    "functionName": "postVoicemailSearch",
    "signature": "postVoicemailSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailsSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostVoicemailSearchRequest();\n\nlet body = {}; // Object | Search request options\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postVoicemailSearch(body, callback);"
  },
  "deletespeechandtextanalyticsprogram": {
    "operationId": "deletespeechandtextanalyticsprogram",
    "functionName": "deleteSpeechandtextanalyticsProgram",
    "signature": "deleteSpeechandtextanalyticsProgram(programId, forceDelete)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDelete",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteSpeechandtextanalyticsProgramRequest();\n\nlet programId = \"programId_example\"; // String | The id of the program\nlet opts = { \n  'forceDelete': false // Boolean | Indicates whether the program is forced to be deleted or not. Required when the program to delete is the default program.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteSpeechandtextanalyticsProgram(programId, opts, callback);"
  },
  "deletespeechandtextanalyticssentimentfeedback": {
    "operationId": "deletespeechandtextanalyticssentimentfeedback",
    "functionName": "deleteSpeechandtextanalyticsSentimentfeedback",
    "signature": "deleteSpeechandtextanalyticsSentimentfeedback()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteSpeechandtextanalyticsSentimentfeedbackRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteSpeechandtextanalyticsSentimentfeedback(callback);"
  },
  "deletespeechandtextanalyticssentimentfeedbacksentimentfeedbackid": {
    "operationId": "deletespeechandtextanalyticssentimentfeedbacksentimentfeedbackid",
    "functionName": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId",
    "signature": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId)",
    "parameters": [
      {
        "name": "sentimentFeedbackId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdRequest();\n\nlet sentimentFeedbackId = \"sentimentFeedbackId_example\"; // String | The Id of the SentimentFeedback\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId, callback);"
  },
  "deletespeechandtextanalyticstopic": {
    "operationId": "deletespeechandtextanalyticstopic",
    "functionName": "deleteSpeechandtextanalyticsTopic",
    "signature": "deleteSpeechandtextanalyticsTopic(topicId)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteSpeechandtextanalyticsTopicRequest();\n\nlet topicId = \"topicId_example\"; // String | The id of the topic\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteSpeechandtextanalyticsTopic(topicId, callback);"
  },
  "getspeechandtextanalyticsconversation": {
    "operationId": "getspeechandtextanalyticsconversation",
    "functionName": "getSpeechandtextanalyticsConversation",
    "signature": "getSpeechandtextanalyticsConversation(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ConversationMetrics",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsConversationRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsConversation(conversationId, callback);"
  },
  "getspeechandtextanalyticsconversationcommunicationtranscripturl": {
    "operationId": "getspeechandtextanalyticsconversationcommunicationtranscripturl",
    "functionName": "getSpeechandtextanalyticsConversationCommunicationTranscripturl",
    "signature": "getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TranscriptUrl",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsConversationCommunicationTranscripturlRequest();\n\nlet conversationId = \"conversationId_example\"; // String | Conversation ID\nlet communicationId = \"communicationId_example\"; // String | Communication ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId, communicationId, callback);"
  },
  "getspeechandtextanalyticsprogram": {
    "operationId": "getspeechandtextanalyticsprogram",
    "functionName": "getSpeechandtextanalyticsProgram",
    "signature": "getSpeechandtextanalyticsProgram(programId)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsProgramRequest();\n\nlet programId = \"programId_example\"; // String | The id of the program\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsProgram(programId, callback);"
  },
  "getspeechandtextanalyticsprogrammappings": {
    "operationId": "getspeechandtextanalyticsprogrammappings",
    "functionName": "getSpeechandtextanalyticsProgramMappings",
    "signature": "getSpeechandtextanalyticsProgramMappings(programId)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ProgramMappings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsProgramMappingsRequest();\n\nlet programId = \"programId_example\"; // String | The id of the program\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsProgramMappings(programId, callback);"
  },
  "getspeechandtextanalyticsprograms": {
    "operationId": "getspeechandtextanalyticsprograms",
    "functionName": "getSpeechandtextanalyticsPrograms",
    "signature": "getSpeechandtextanalyticsPrograms(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ProgramsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsProgramsRequest();\n\nlet opts = { \n  'nextPage': \"nextPage_example\", // String | The key for listing the next page\n  'pageSize': 20 // Number | The page size for the listing\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsPrograms(opts, callback);"
  },
  "getspeechandtextanalyticsprogramsgeneraljob": {
    "operationId": "getspeechandtextanalyticsprogramsgeneraljob",
    "functionName": "getSpeechandtextanalyticsProgramsGeneralJob",
    "signature": "getSpeechandtextanalyticsProgramsGeneralJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GeneralProgramJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsProgramsGeneralJobRequest();\n\nlet jobId = \"jobId_example\"; // String | The id of the publish programs job\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsProgramsGeneralJob(jobId, callback);"
  },
  "getspeechandtextanalyticsprogramsmappings": {
    "operationId": "getspeechandtextanalyticsprogramsmappings",
    "functionName": "getSpeechandtextanalyticsProgramsMappings",
    "signature": "getSpeechandtextanalyticsProgramsMappings(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "ProgramsMappingsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsProgramsMappingsRequest();\n\nlet opts = { \n  'nextPage': \"nextPage_example\", // String | The key for listing the next page\n  'pageSize': 20 // Number | The page size for the listing\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsProgramsMappings(opts, callback);"
  },
  "getspeechandtextanalyticsprogramspublishjob": {
    "operationId": "getspeechandtextanalyticsprogramspublishjob",
    "functionName": "getSpeechandtextanalyticsProgramsPublishjob",
    "signature": "getSpeechandtextanalyticsProgramsPublishjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ProgramJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsProgramsPublishjobRequest();\n\nlet jobId = \"jobId_example\"; // String | The id of the publish programs job\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsProgramsPublishjob(jobId, callback);"
  },
  "getspeechandtextanalyticsprogramsunpublished": {
    "operationId": "getspeechandtextanalyticsprogramsunpublished",
    "functionName": "getSpeechandtextanalyticsProgramsUnpublished",
    "signature": "getSpeechandtextanalyticsProgramsUnpublished(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "UnpublishedProgramsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsProgramsUnpublishedRequest();\n\nlet opts = { \n  'nextPage': \"nextPage_example\", // String | The key for listing the next page\n  'pageSize': 20 // Number | The page size for the listing\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsProgramsUnpublished(opts, callback);"
  },
  "getspeechandtextanalyticssentimentdialects": {
    "operationId": "getspeechandtextanalyticssentimentdialects",
    "functionName": "getSpeechandtextanalyticsSentimentDialects",
    "signature": "getSpeechandtextanalyticsSentimentDialects()",
    "return": "EntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsSentimentDialectsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsSentimentDialects(callback);"
  },
  "getspeechandtextanalyticssentimentfeedback": {
    "operationId": "getspeechandtextanalyticssentimentfeedback",
    "functionName": "getSpeechandtextanalyticsSentimentfeedback",
    "signature": "getSpeechandtextanalyticsSentimentfeedback(dialect)",
    "parameters": [
      {
        "name": "dialect",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SentimentFeedbackEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsSentimentfeedbackRequest();\n\nlet opts = { \n  'dialect': \"en-US\" // String | The key for filter the listing by dialect, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsSentimentfeedback(opts, callback);"
  },
  "getspeechandtextanalyticssettings": {
    "operationId": "getspeechandtextanalyticssettings",
    "functionName": "getSpeechandtextanalyticsSettings",
    "signature": "getSpeechandtextanalyticsSettings()",
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsSettings(callback);"
  },
  "getspeechandtextanalyticstopic": {
    "operationId": "getspeechandtextanalyticstopic",
    "functionName": "getSpeechandtextanalyticsTopic",
    "signature": "getSpeechandtextanalyticsTopic(topicId)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsTopicRequest();\n\nlet topicId = \"topicId_example\"; // String | The id of the topic\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsTopic(topicId, callback);"
  },
  "getspeechandtextanalyticstopics": {
    "operationId": "getspeechandtextanalyticstopics",
    "functionName": "getSpeechandtextanalyticsTopics",
    "signature": "getSpeechandtextanalyticsTopics(nextPage, pageSize, state, name, ids, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ids",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TopicsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsTopicsRequest();\n\nlet opts = { \n  'nextPage': \"nextPage_example\", // String | The key for listing the next page\n  'pageSize': 20, // Number | The page size for the listing\n  'state': \"state_example\", // String | Topic state. Defaults to latest\n  'name': \"name_example\", // String | Case insensitive partial name to filter by\n  'ids': [\"ids_example\"], // [String] | Comma separated Topic IDs to filter by. Cannot be used with other filters. Maximum of 50 IDs allowed.\n  'sortBy': \"sortBy_example\", // String | Sort results by. Defaults to name\n  'sortOrder': \"sortOrder_example\" // String | Sort order. Defaults to asc\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsTopics(opts, callback);"
  },
  "getspeechandtextanalyticstopicsdialects": {
    "operationId": "getspeechandtextanalyticstopicsdialects",
    "functionName": "getSpeechandtextanalyticsTopicsDialects",
    "signature": "getSpeechandtextanalyticsTopicsDialects()",
    "return": "EntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsTopicsDialectsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsTopicsDialects(callback);"
  },
  "getspeechandtextanalyticstopicsgeneral": {
    "operationId": "getspeechandtextanalyticstopicsgeneral",
    "functionName": "getSpeechandtextanalyticsTopicsGeneral",
    "signature": "getSpeechandtextanalyticsTopicsGeneral(dialect)",
    "parameters": [
      {
        "name": "dialect",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GeneralTopicsEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsTopicsGeneralRequest();\n\nlet opts = { \n  'dialect': \"dialect_example\" // String | The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsTopicsGeneral(opts, callback);"
  },
  "getspeechandtextanalyticstopicspublishjob": {
    "operationId": "getspeechandtextanalyticstopicspublishjob",
    "functionName": "getSpeechandtextanalyticsTopicsPublishjob",
    "signature": "getSpeechandtextanalyticsTopicsPublishjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TopicJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetSpeechandtextanalyticsTopicsPublishjobRequest();\n\nlet jobId = \"jobId_example\"; // String | The id of the publish topics job\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getSpeechandtextanalyticsTopicsPublishjob(jobId, callback);"
  },
  "patchspeechandtextanalyticssettings": {
    "operationId": "patchspeechandtextanalyticssettings",
    "functionName": "patchSpeechandtextanalyticsSettings",
    "signature": "patchSpeechandtextanalyticsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchSpeechandtextanalyticsSettingsRequest();\n\nlet body = {}; // Object | Speech And Text Analytics Settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchSpeechandtextanalyticsSettings(body, callback);"
  },
  "postspeechandtextanalyticsprograms": {
    "operationId": "postspeechandtextanalyticsprograms",
    "functionName": "postSpeechandtextanalyticsPrograms",
    "signature": "postSpeechandtextanalyticsPrograms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSpeechandtextanalyticsProgramsRequest();\n\nlet body = {}; // Object | The program to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSpeechandtextanalyticsPrograms(body, callback);"
  },
  "postspeechandtextanalyticsprogramsgeneraljobs": {
    "operationId": "postspeechandtextanalyticsprogramsgeneraljobs",
    "functionName": "postSpeechandtextanalyticsProgramsGeneralJobs",
    "signature": "postSpeechandtextanalyticsProgramsGeneralJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "GeneralProgramJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSpeechandtextanalyticsProgramsGeneralJobsRequest();\n\nlet body = {}; // Object | The general programs job to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSpeechandtextanalyticsProgramsGeneralJobs(body, callback);"
  },
  "postspeechandtextanalyticsprogramspublishjobs": {
    "operationId": "postspeechandtextanalyticsprogramspublishjobs",
    "functionName": "postSpeechandtextanalyticsProgramsPublishjobs",
    "signature": "postSpeechandtextanalyticsProgramsPublishjobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ProgramJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSpeechandtextanalyticsProgramsPublishjobsRequest();\n\nlet body = {}; // Object | The publish programs job to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSpeechandtextanalyticsProgramsPublishjobs(body, callback);"
  },
  "postspeechandtextanalyticssentimentfeedback": {
    "operationId": "postspeechandtextanalyticssentimentfeedback",
    "functionName": "postSpeechandtextanalyticsSentimentfeedback",
    "signature": "postSpeechandtextanalyticsSentimentfeedback(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SentimentFeedback",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSpeechandtextanalyticsSentimentfeedbackRequest();\n\nlet body = {}; // Object | The SentimentFeedback to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSpeechandtextanalyticsSentimentfeedback(body, callback);"
  },
  "postspeechandtextanalyticstopics": {
    "operationId": "postspeechandtextanalyticstopics",
    "functionName": "postSpeechandtextanalyticsTopics",
    "signature": "postSpeechandtextanalyticsTopics(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSpeechandtextanalyticsTopicsRequest();\n\nlet body = {}; // Object | The topic to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSpeechandtextanalyticsTopics(body, callback);"
  },
  "postspeechandtextanalyticstopicspublishjobs": {
    "operationId": "postspeechandtextanalyticstopicspublishjobs",
    "functionName": "postSpeechandtextanalyticsTopicsPublishjobs",
    "signature": "postSpeechandtextanalyticsTopicsPublishjobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TopicJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostSpeechandtextanalyticsTopicsPublishjobsRequest();\n\nlet body = {}; // Object | The publish topics job to create\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postSpeechandtextanalyticsTopicsPublishjobs(body, callback);"
  },
  "putspeechandtextanalyticsprogram": {
    "operationId": "putspeechandtextanalyticsprogram",
    "functionName": "putSpeechandtextanalyticsProgram",
    "signature": "putSpeechandtextanalyticsProgram(programId, body)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutSpeechandtextanalyticsProgramRequest();\n\nlet programId = \"programId_example\"; // String | The id of the program\nlet body = {}; // Object | The program to update\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putSpeechandtextanalyticsProgram(programId, body, callback);"
  },
  "putspeechandtextanalyticsprogrammappings": {
    "operationId": "putspeechandtextanalyticsprogrammappings",
    "functionName": "putSpeechandtextanalyticsProgramMappings",
    "signature": "putSpeechandtextanalyticsProgramMappings(programId, body)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ProgramMappings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutSpeechandtextanalyticsProgramMappingsRequest();\n\nlet programId = \"programId_example\"; // String | The id of the program\nlet body = {}; // Object | The program to set mappings for\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putSpeechandtextanalyticsProgramMappings(programId, body, callback);"
  },
  "putspeechandtextanalyticssettings": {
    "operationId": "putspeechandtextanalyticssettings",
    "functionName": "putSpeechandtextanalyticsSettings",
    "signature": "putSpeechandtextanalyticsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutSpeechandtextanalyticsSettingsRequest();\n\nlet body = {}; // Object | Speech And Text Analytics Settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putSpeechandtextanalyticsSettings(body, callback);"
  },
  "putspeechandtextanalyticstopic": {
    "operationId": "putspeechandtextanalyticstopic",
    "functionName": "putSpeechandtextanalyticsTopic",
    "signature": "putSpeechandtextanalyticsTopic(topicId, body)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutSpeechandtextanalyticsTopicRequest();\n\nlet topicId = \"topicId_example\"; // String | The id of the topic\nlet body = {}; // Object | The topic to update\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putSpeechandtextanalyticsTopic(topicId, body, callback);"
  },
  "deletestationassociateduser": {
    "operationId": "deletestationassociateduser",
    "functionName": "deleteStationAssociateduser",
    "signature": "deleteStationAssociateduser(stationId)",
    "parameters": [
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteStationAssociateduserRequest();\n\nlet stationId = \"stationId_example\"; // String | Station ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteStationAssociateduser(stationId, callback);"
  },
  "getstation": {
    "operationId": "getstation",
    "functionName": "getStation",
    "signature": "getStation(stationId)",
    "parameters": [
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Station",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetStationRequest();\n\nlet stationId = \"stationId_example\"; // String | Station ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getStation(stationId, callback);"
  },
  "getstations": {
    "operationId": "getstations",
    "functionName": "getStations",
    "signature": "getStations(pageSize, pageNumber, sortBy, name, userSelectable, webRtcUserId, id, lineAppearanceId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userSelectable",
        "type": "String",
        "required": "false"
      },
      {
        "name": "webRtcUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lineAppearanceId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "StationEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetStationsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"name\", // String | Sort by\n  'name': \"name_example\", // String | Name\n  'userSelectable': \"userSelectable_example\", // String | True for stations that the user can select otherwise false\n  'webRtcUserId': \"webRtcUserId_example\", // String | Filter for the webRtc station of the webRtcUserId\n  'id': \"id_example\", // String | Comma separated list of stationIds\n  'lineAppearanceId': \"lineAppearanceId_example\" // String | lineAppearanceId\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getStations(opts, callback);"
  },
  "getstationssettings": {
    "operationId": "getstationssettings",
    "functionName": "getStationsSettings",
    "signature": "getStationsSettings()",
    "return": "StationSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetStationsSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getStationsSettings(callback);"
  },
  "patchstationssettings": {
    "operationId": "patchstationssettings",
    "functionName": "patchStationsSettings",
    "signature": "patchStationsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "StationSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchStationsSettingsRequest();\n\nlet body = {}; // Object | Station settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchStationsSettings(body, callback);"
  },
  "gettelephonysiptraces": {
    "operationId": "gettelephonysiptraces",
    "functionName": "getTelephonySiptraces",
    "signature": "getTelephonySiptraces(dateStart, dateEnd, callId, toUser, fromUser, conversationId)",
    "parameters": [
      {
        "name": "dateStart",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "dateEnd",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "callId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "toUser",
        "type": "String",
        "required": "false"
      },
      {
        "name": "fromUser",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SipSearchResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonySiptracesRequest();\n\nlet dateStart = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet dateEnd = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet opts = { \n  'callId': \"callId_example\", // String | unique identification of the placed call\n  'toUser': \"toUser_example\", // String | User to who the call was placed\n  'fromUser': \"fromUser_example\", // String | user who placed the call\n  'conversationId': \"conversationId_example\" // String | Unique identification of the conversation\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonySiptraces(dateStart, dateEnd, opts, callback);"
  },
  "gettelephonysiptracesdownloaddownloadid": {
    "operationId": "gettelephonysiptracesdownloaddownloadid",
    "functionName": "getTelephonySiptracesDownloadDownloadId",
    "signature": "getTelephonySiptracesDownloadDownloadId(downloadId)",
    "parameters": [
      {
        "name": "downloadId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SignedUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonySiptracesDownloadDownloadIdRequest();\n\nlet downloadId = \"downloadId_example\"; // String | unique id for the downloaded file in S3\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonySiptracesDownloadDownloadId(downloadId, callback);"
  },
  "posttelephonysiptracesdownload": {
    "operationId": "posttelephonysiptracesdownload",
    "functionName": "postTelephonySiptracesDownload",
    "signature": "postTelephonySiptracesDownload(sIPSearchPublicRequest)",
    "parameters": [
      {
        "name": "sIPSearchPublicRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SipDownloadResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonySiptracesDownloadRequest();\n\nlet sIPSearchPublicRequest = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonySiptracesDownload(sIPSearchPublicRequest, callback);"
  },
  "deletetelephonyprovidersedge": {
    "operationId": "deletetelephonyprovidersedge",
    "functionName": "deleteTelephonyProvidersEdge",
    "signature": "deleteTelephonyProvidersEdge(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgeRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdge(edgeId, callback);"
  },
  "deletetelephonyprovidersedgelogicalinterface": {
    "operationId": "deletetelephonyprovidersedgelogicalinterface",
    "functionName": "deleteTelephonyProvidersEdgeLogicalinterface",
    "signature": "deleteTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgeLogicalinterfaceRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, callback);"
  },
  "deletetelephonyprovidersedgesoftwareupdate": {
    "operationId": "deletetelephonyprovidersedgesoftwareupdate",
    "functionName": "deleteTelephonyProvidersEdgeSoftwareupdate",
    "signature": "deleteTelephonyProvidersEdgeSoftwareupdate(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgeSoftwareupdateRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgeSoftwareupdate(edgeId, callback);"
  },
  "deletetelephonyprovidersedgescertificateauthority": {
    "operationId": "deletetelephonyprovidersedgescertificateauthority",
    "functionName": "deleteTelephonyProvidersEdgesCertificateauthority",
    "signature": "deleteTelephonyProvidersEdgesCertificateauthority(certificateId)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesCertificateauthorityRequest();\n\nlet certificateId = \"certificateId_example\"; // String | Certificate ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesCertificateauthority(certificateId, callback);"
  },
  "deletetelephonyprovidersedgesdidpool": {
    "operationId": "deletetelephonyprovidersedgesdidpool",
    "functionName": "deleteTelephonyProvidersEdgesDidpool",
    "signature": "deleteTelephonyProvidersEdgesDidpool(didPoolId)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesDidpoolRequest();\n\nlet didPoolId = \"didPoolId_example\"; // String | DID pool ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesDidpool(didPoolId, callback);"
  },
  "deletetelephonyprovidersedgesedgegroup": {
    "operationId": "deletetelephonyprovidersedgesedgegroup",
    "functionName": "deleteTelephonyProvidersEdgesEdgegroup",
    "signature": "deleteTelephonyProvidersEdgesEdgegroup(edgeGroupId)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesEdgegroupRequest();\n\nlet edgeGroupId = \"edgeGroupId_example\"; // String | Edge group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesEdgegroup(edgeGroupId, callback);"
  },
  "deletetelephonyprovidersedgesextensionpool": {
    "operationId": "deletetelephonyprovidersedgesextensionpool",
    "functionName": "deleteTelephonyProvidersEdgesExtensionpool",
    "signature": "deleteTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesExtensionpoolRequest();\n\nlet extensionPoolId = \"extensionPoolId_example\"; // String | Extension pool ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesExtensionpool(extensionPoolId, callback);"
  },
  "deletetelephonyprovidersedgesoutboundroute": {
    "operationId": "deletetelephonyprovidersedgesoutboundroute",
    "functionName": "deleteTelephonyProvidersEdgesOutboundroute",
    "signature": "deleteTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
    "parameters": [
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesOutboundrouteRequest();\n\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesOutboundroute(outboundRouteId, callback);"
  },
  "deletetelephonyprovidersedgesphone": {
    "operationId": "deletetelephonyprovidersedgesphone",
    "functionName": "deleteTelephonyProvidersEdgesPhone",
    "signature": "deleteTelephonyProvidersEdgesPhone(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesPhoneRequest();\n\nlet phoneId = \"phoneId_example\"; // String | Phone ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesPhone(phoneId, callback);"
  },
  "deletetelephonyprovidersedgesphonebasesetting": {
    "operationId": "deletetelephonyprovidersedgesphonebasesetting",
    "functionName": "deleteTelephonyProvidersEdgesPhonebasesetting",
    "signature": "deleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesPhonebasesettingRequest();\n\nlet phoneBaseId = \"phoneBaseId_example\"; // String | Phone base ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, callback);"
  },
  "deletetelephonyprovidersedgessite": {
    "operationId": "deletetelephonyprovidersedgessite",
    "functionName": "deleteTelephonyProvidersEdgesSite",
    "signature": "deleteTelephonyProvidersEdgesSite(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesSiteRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesSite(siteId, callback);"
  },
  "deletetelephonyprovidersedgessiteoutboundroute": {
    "operationId": "deletetelephonyprovidersedgessiteoutboundroute",
    "functionName": "deleteTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "deleteTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesSiteOutboundrouteRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, callback);"
  },
  "deletetelephonyprovidersedgestrunkbasesetting": {
    "operationId": "deletetelephonyprovidersedgestrunkbasesetting",
    "functionName": "deleteTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "deleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTelephonyProvidersEdgesTrunkbasesettingRequest();\n\nlet trunkBaseSettingsId = \"trunkBaseSettingsId_example\"; // String | Trunk Base ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, callback);"
  },
  "getconfigurationschemasedgesvnext": {
    "operationId": "getconfigurationschemasedgesvnext",
    "functionName": "getConfigurationSchemasEdgesVnext",
    "signature": "getConfigurationSchemasEdgesVnext(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SchemaCategoryEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConfigurationSchemasEdgesVnextRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConfigurationSchemasEdgesVnext(opts, callback);"
  },
  "getconfigurationschemasedgesvnextschemacategory": {
    "operationId": "getconfigurationschemasedgesvnextschemacategory",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategory",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategory(schemaCategory, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SchemaReferenceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConfigurationSchemasEdgesVnextSchemaCategoryRequest();\n\nlet schemaCategory = \"schemaCategory_example\"; // String | Schema category\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConfigurationSchemasEdgesVnextSchemaCategory(schemaCategory, opts, callback);"
  },
  "getconfigurationschemasedgesvnextschemacategoryschematype": {
    "operationId": "getconfigurationschemasedgesvnextschemacategoryschematype",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaType",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaType(schemaCategory, schemaType, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "SchemaReferenceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeRequest();\n\nlet schemaCategory = \"schemaCategory_example\"; // String | Schema category\nlet schemaType = \"schemaType_example\"; // String | Schema type\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConfigurationSchemasEdgesVnextSchemaCategorySchemaType(schemaCategory, schemaType, opts, callback);"
  },
  "getconfigurationschemasedgesvnextschemacategoryschematypeschemaid": {
    "operationId": "getconfigurationschemasedgesvnextschemacategoryschematypeschemaid",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId(schemaCategory, schemaType, schemaId)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Organization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdRequest();\n\nlet schemaCategory = \"schemaCategory_example\"; // String | Schema category\nlet schemaType = \"schemaType_example\"; // String | Schema type\nlet schemaId = \"schemaId_example\"; // String | Schema ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId(schemaCategory, schemaType, schemaId, callback);"
  },
  "getconfigurationschemasedgesvnextschemacategoryschematypeschemaidextensiontypemetadataid": {
    "operationId": "getconfigurationschemasedgesvnextschemacategoryschematypeschemaidextensiontypemetadataid",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId(schemaCategory, schemaType, schemaId, extensionType, metadataId, type)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "extensionType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metadataId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Organization",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataIdRequest();\n\nlet schemaCategory = \"schemaCategory_example\"; // String | Schema category\nlet schemaType = \"schemaType_example\"; // String | Schema type\nlet schemaId = \"schemaId_example\"; // String | Schema ID\nlet extensionType = \"extensionType_example\"; // String | extension\nlet metadataId = \"metadataId_example\"; // String | Metadata ID\nlet opts = { \n  'type': \"type_example\" // String | Type\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId(schemaCategory, schemaType, schemaId, extensionType, metadataId, opts, callback);"
  },
  "gettelephonyprovidersedge": {
    "operationId": "gettelephonyprovidersedge",
    "functionName": "getTelephonyProvidersEdge",
    "signature": "getTelephonyProvidersEdge(edgeId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Edge",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Fields to expand in the response, comma-separated\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdge(edgeId, opts, callback);"
  },
  "gettelephonyprovidersedgediagnosticnslookup": {
    "operationId": "gettelephonyprovidersedgediagnosticnslookup",
    "functionName": "getTelephonyProvidersEdgeDiagnosticNslookup",
    "signature": "getTelephonyProvidersEdgeDiagnosticNslookup(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeDiagnosticNslookupRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeDiagnosticNslookup(edgeId, callback);"
  },
  "gettelephonyprovidersedgediagnosticping": {
    "operationId": "gettelephonyprovidersedgediagnosticping",
    "functionName": "getTelephonyProvidersEdgeDiagnosticPing",
    "signature": "getTelephonyProvidersEdgeDiagnosticPing(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeDiagnosticPingRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeDiagnosticPing(edgeId, callback);"
  },
  "gettelephonyprovidersedgediagnosticroute": {
    "operationId": "gettelephonyprovidersedgediagnosticroute",
    "functionName": "getTelephonyProvidersEdgeDiagnosticRoute",
    "signature": "getTelephonyProvidersEdgeDiagnosticRoute(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeDiagnosticRouteRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeDiagnosticRoute(edgeId, callback);"
  },
  "gettelephonyprovidersedgediagnostictracepath": {
    "operationId": "gettelephonyprovidersedgediagnostictracepath",
    "functionName": "getTelephonyProvidersEdgeDiagnosticTracepath",
    "signature": "getTelephonyProvidersEdgeDiagnosticTracepath(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeDiagnosticTracepathRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeDiagnosticTracepath(edgeId, callback);"
  },
  "gettelephonyprovidersedgeline": {
    "operationId": "gettelephonyprovidersedgeline",
    "functionName": "getTelephonyProvidersEdgeLine",
    "signature": "getTelephonyProvidersEdgeLine(edgeId, lineId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "lineId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeLine",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeLineRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet lineId = \"lineId_example\"; // String | Line ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeLine(edgeId, lineId, callback);"
  },
  "gettelephonyprovidersedgelines": {
    "operationId": "gettelephonyprovidersedgelines",
    "functionName": "getTelephonyProvidersEdgeLines",
    "signature": "getTelephonyProvidersEdgeLines(edgeId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "EdgeLineEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeLinesRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeLines(edgeId, opts, callback);"
  },
  "gettelephonyprovidersedgelogicalinterface": {
    "operationId": "gettelephonyprovidersedgelogicalinterface",
    "functionName": "getTelephonyProvidersEdgeLogicalinterface",
    "signature": "getTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeLogicalinterfaceRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Field to expand in the response\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, opts, callback);"
  },
  "gettelephonyprovidersedgelogicalinterfaces": {
    "operationId": "gettelephonyprovidersedgelogicalinterfaces",
    "functionName": "getTelephonyProvidersEdgeLogicalinterfaces",
    "signature": "getTelephonyProvidersEdgeLogicalinterfaces(edgeId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LogicalInterfaceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeLogicalinterfacesRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Field to expand in the response\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeLogicalinterfaces(edgeId, opts, callback);"
  },
  "gettelephonyprovidersedgelogsjob": {
    "operationId": "gettelephonyprovidersedgelogsjob",
    "functionName": "getTelephonyProvidersEdgeLogsJob",
    "signature": "getTelephonyProvidersEdgeLogsJob(edgeId, jobId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeLogsJob",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeLogsJobRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet jobId = \"jobId_example\"; // String | Job ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeLogsJob(edgeId, jobId, callback);"
  },
  "gettelephonyprovidersedgemetrics": {
    "operationId": "gettelephonyprovidersedgemetrics",
    "functionName": "getTelephonyProvidersEdgeMetrics",
    "signature": "getTelephonyProvidersEdgeMetrics(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeMetrics",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeMetricsRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeMetrics(edgeId, callback);"
  },
  "gettelephonyprovidersedgephysicalinterface": {
    "operationId": "gettelephonyprovidersedgephysicalinterface",
    "functionName": "getTelephonyProvidersEdgePhysicalinterface",
    "signature": "getTelephonyProvidersEdgePhysicalinterface(edgeId, interfaceId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainPhysicalInterface",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgePhysicalinterfaceRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgePhysicalinterface(edgeId, interfaceId, callback);"
  },
  "gettelephonyprovidersedgephysicalinterfaces": {
    "operationId": "gettelephonyprovidersedgephysicalinterfaces",
    "functionName": "getTelephonyProvidersEdgePhysicalinterfaces",
    "signature": "getTelephonyProvidersEdgePhysicalinterfaces(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhysicalInterfaceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgePhysicalinterfacesRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgePhysicalinterfaces(edgeId, callback);"
  },
  "gettelephonyprovidersedgesetuppackage": {
    "operationId": "gettelephonyprovidersedgesetuppackage",
    "functionName": "getTelephonyProvidersEdgeSetuppackage",
    "signature": "getTelephonyProvidersEdgeSetuppackage(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VmPairingInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeSetuppackageRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeSetuppackage(edgeId, callback);"
  },
  "gettelephonyprovidersedgesoftwareupdate": {
    "operationId": "gettelephonyprovidersedgesoftwareupdate",
    "functionName": "getTelephonyProvidersEdgeSoftwareupdate",
    "signature": "getTelephonyProvidersEdgeSoftwareupdate(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareUpdateDto",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeSoftwareupdateRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeSoftwareupdate(edgeId, callback);"
  },
  "gettelephonyprovidersedgesoftwareversions": {
    "operationId": "gettelephonyprovidersedgesoftwareversions",
    "functionName": "getTelephonyProvidersEdgeSoftwareversions",
    "signature": "getTelephonyProvidersEdgeSoftwareversions(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareVersionDtoEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeSoftwareversionsRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeSoftwareversions(edgeId, callback);"
  },
  "gettelephonyprovidersedgetrunks": {
    "operationId": "gettelephonyprovidersedgetrunks",
    "functionName": "getTelephonyProvidersEdgeTrunks",
    "signature": "getTelephonyProvidersEdgeTrunks(edgeId, pageNumber, pageSize, sortBy, sortOrder, trunkBaseId, trunkType)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkBaseId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgeTrunksRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Value by which to sort\n  'sortOrder': \"ASC\", // String | Sort order\n  'trunkBaseId': \"trunkBaseId_example\", // String | Filter by Trunk Base Ids\n  'trunkType': \"trunkType_example\" // String | Filter by a Trunk type\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgeTrunks(edgeId, opts, callback);"
  },
  "gettelephonyprovidersedges": {
    "operationId": "gettelephonyprovidersedges",
    "functionName": "getTelephonyProvidersEdges",
    "signature": "getTelephonyProvidersEdges(pageSize, pageNumber, name, siteId, edgeGroupId, sortBy, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EdgeEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'siteId': \"siteId_example\", // String | Filter by site.id\n  'edgeGroupId': \"edgeGroupId_example\", // String | Filter by edgeGroup.id\n  'sortBy': \"name\", // String | Sort by\n  'managed': true // Boolean | Filter by managed\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdges(opts, callback);"
  },
  "gettelephonyprovidersedgesavailablelanguages": {
    "operationId": "gettelephonyprovidersedgesavailablelanguages",
    "functionName": "getTelephonyProvidersEdgesAvailablelanguages",
    "signature": "getTelephonyProvidersEdgesAvailablelanguages()",
    "return": "AvailableLanguageList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesAvailablelanguagesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesAvailablelanguages(callback);"
  },
  "gettelephonyprovidersedgescertificateauthorities": {
    "operationId": "gettelephonyprovidersedgescertificateauthorities",
    "functionName": "getTelephonyProvidersEdgesCertificateauthorities",
    "signature": "getTelephonyProvidersEdgesCertificateauthorities()",
    "return": "CertificateAuthorityEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesCertificateauthoritiesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesCertificateauthorities(callback);"
  },
  "gettelephonyprovidersedgescertificateauthority": {
    "operationId": "gettelephonyprovidersedgescertificateauthority",
    "functionName": "getTelephonyProvidersEdgesCertificateauthority",
    "signature": "getTelephonyProvidersEdgesCertificateauthority(certificateId)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesCertificateauthorityRequest();\n\nlet certificateId = \"certificateId_example\"; // String | Certificate ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesCertificateauthority(certificateId, callback);"
  },
  "gettelephonyprovidersedgesdid": {
    "operationId": "gettelephonyprovidersedgesdid",
    "functionName": "getTelephonyProvidersEdgesDid",
    "signature": "getTelephonyProvidersEdgesDid(didId)",
    "parameters": [
      {
        "name": "didId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DID",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesDidRequest();\n\nlet didId = \"didId_example\"; // String | DID ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesDid(didId, callback);"
  },
  "gettelephonyprovidersedgesdidpool": {
    "operationId": "gettelephonyprovidersedgesdidpool",
    "functionName": "getTelephonyProvidersEdgesDidpool",
    "signature": "getTelephonyProvidersEdgesDidpool(didPoolId)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesDidpoolRequest();\n\nlet didPoolId = \"didPoolId_example\"; // String | DID pool ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesDidpool(didPoolId, callback);"
  },
  "gettelephonyprovidersedgesdidpools": {
    "operationId": "gettelephonyprovidersedgesdidpools",
    "functionName": "getTelephonyProvidersEdgesDidpools",
    "signature": "getTelephonyProvidersEdgesDidpools(pageSize, pageNumber, sortBy, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DIDPoolEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesDidpoolsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"number\", // String | Sort by\n  'id': [\"id_example\"] // [String] | Filter by a specific list of ID's\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesDidpools(opts, callback);"
  },
  "gettelephonyprovidersedgesdidpoolsdids": {
    "operationId": "gettelephonyprovidersedgesdidpoolsdids",
    "functionName": "getTelephonyProvidersEdgesDidpoolsDids",
    "signature": "getTelephonyProvidersEdgesDidpoolsDids(type, id, numberMatch, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "true"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "numberMatch",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DIDNumberEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesDidpoolsDidsRequest();\n\nlet type = \"type_example\"; // String | The type of numbers to return.\nlet opts = { \n  'id': [\"id_example\"], // [String] | Filter by a specific list of DID Pools.  If this is not provided, numbers from all DID Pools will be returned.\n  'numberMatch': \"numberMatch_example\", // String | A number to filter the results by.\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ascending\" // String | Sort order\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesDidpoolsDids(type, opts, callback);"
  },
  "gettelephonyprovidersedgesdids": {
    "operationId": "gettelephonyprovidersedgesdids",
    "functionName": "getTelephonyProvidersEdgesDids",
    "signature": "getTelephonyProvidersEdgesDids(pageSize, pageNumber, sortBy, sortOrder, phoneNumber, ownerId, didPoolId, id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ownerId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "didPoolId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DIDEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesDidsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"number\", // String | Sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  'phoneNumber': \"phoneNumber_example\", // String | Filter by phoneNumber\n  'ownerId': \"ownerId_example\", // String | Filter by the owner of a phone number\n  'didPoolId': \"didPoolId_example\", // String | Filter by the DID Pool assignment\n  'id': [\"id_example\"] // [String] | Filter by a specific list of ID's\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesDids(opts, callback);"
  },
  "gettelephonyprovidersedgesedgegroup": {
    "operationId": "gettelephonyprovidersedgesedgegroup",
    "functionName": "getTelephonyProvidersEdgesEdgegroup",
    "signature": "getTelephonyProvidersEdgesEdgegroup(edgeGroupId, expand)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "EdgeGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesEdgegroupRequest();\n\nlet edgeGroupId = \"edgeGroupId_example\"; // String | Edge group ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Fields to expand in the response\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesEdgegroup(edgeGroupId, opts, callback);"
  },
  "gettelephonyprovidersedgesedgegroupedgetrunkbase": {
    "operationId": "gettelephonyprovidersedgesedgegroupedgetrunkbase",
    "functionName": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
    "signature": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId)",
    "parameters": [
      {
        "name": "edgegroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "edgetrunkbaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeTrunkBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseRequest();\n\nlet edgegroupId = \"edgegroupId_example\"; // String | Edge Group ID\nlet edgetrunkbaseId = \"edgetrunkbaseId_example\"; // String | Edge Trunk Base ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, callback);"
  },
  "gettelephonyprovidersedgesedgegroups": {
    "operationId": "gettelephonyprovidersedgesedgegroups",
    "functionName": "getTelephonyProvidersEdgesEdgegroups",
    "signature": "getTelephonyProvidersEdgesEdgegroups(pageSize, pageNumber, name, sortBy, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "EdgeGroupEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesEdgegroupsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'sortBy': \"name\", // String | Sort by\n  'managed': true // Boolean | Filter by managed\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesEdgegroups(opts, callback);"
  },
  "gettelephonyprovidersedgesedgeversionreport": {
    "operationId": "gettelephonyprovidersedgesedgeversionreport",
    "functionName": "getTelephonyProvidersEdgesEdgeversionreport",
    "signature": "getTelephonyProvidersEdgesEdgeversionreport()",
    "return": "EdgeVersionReport",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesEdgeversionreportRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesEdgeversionreport(callback);"
  },
  "gettelephonyprovidersedgesexpired": {
    "operationId": "gettelephonyprovidersedgesexpired",
    "functionName": "getTelephonyProvidersEdgesExpired",
    "signature": "getTelephonyProvidersEdgesExpired()",
    "return": "ExpiredEdgeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesExpiredRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesExpired(callback);"
  },
  "gettelephonyprovidersedgesextension": {
    "operationId": "gettelephonyprovidersedgesextension",
    "functionName": "getTelephonyProvidersEdgesExtension",
    "signature": "getTelephonyProvidersEdgesExtension(extensionId)",
    "parameters": [
      {
        "name": "extensionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Extension",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesExtensionRequest();\n\nlet extensionId = \"extensionId_example\"; // String | Extension ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesExtension(extensionId, callback);"
  },
  "gettelephonyprovidersedgesextensionpool": {
    "operationId": "gettelephonyprovidersedgesextensionpool",
    "functionName": "getTelephonyProvidersEdgesExtensionpool",
    "signature": "getTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesExtensionpoolRequest();\n\nlet extensionPoolId = \"extensionPoolId_example\"; // String | Extension pool ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesExtensionpool(extensionPoolId, callback);"
  },
  "gettelephonyprovidersedgesextensionpools": {
    "operationId": "gettelephonyprovidersedgesextensionpools",
    "functionName": "getTelephonyProvidersEdgesExtensionpools",
    "signature": "getTelephonyProvidersEdgesExtensionpools(pageSize, pageNumber, sortBy, _number)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_number",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExtensionPoolEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesExtensionpoolsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"sortBy_example\", // String | Sort by\n  '_number': \"_number_example\" // String | Number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesExtensionpools(opts, callback);"
  },
  "gettelephonyprovidersedgesextensions": {
    "operationId": "gettelephonyprovidersedgesextensions",
    "functionName": "getTelephonyProvidersEdgesExtensions",
    "signature": "getTelephonyProvidersEdgesExtensions(pageSize, pageNumber, sortBy, sortOrder, _number)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_number",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExtensionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesExtensionsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"number\", // String | Sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  '_number': \"_number_example\" // String | Filter by number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesExtensions(opts, callback);"
  },
  "gettelephonyprovidersedgesline": {
    "operationId": "gettelephonyprovidersedgesline",
    "functionName": "getTelephonyProvidersEdgesLine",
    "signature": "getTelephonyProvidersEdgesLine(lineId)",
    "parameters": [
      {
        "name": "lineId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Line",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesLineRequest();\n\nlet lineId = \"lineId_example\"; // String | Line ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesLine(lineId, callback);"
  },
  "gettelephonyprovidersedgeslinebasesetting": {
    "operationId": "gettelephonyprovidersedgeslinebasesetting",
    "functionName": "getTelephonyProvidersEdgesLinebasesetting",
    "signature": "getTelephonyProvidersEdgesLinebasesetting(lineBaseId)",
    "parameters": [
      {
        "name": "lineBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LineBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesLinebasesettingRequest();\n\nlet lineBaseId = \"lineBaseId_example\"; // String | Line base ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesLinebasesetting(lineBaseId, callback);"
  },
  "gettelephonyprovidersedgeslinebasesettings": {
    "operationId": "gettelephonyprovidersedgeslinebasesettings",
    "functionName": "getTelephonyProvidersEdgesLinebasesettings",
    "signature": "getTelephonyProvidersEdgesLinebasesettings(pageNumber, pageSize, sortBy, sortOrder, expand)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LineBaseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesLinebasesettingsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Value by which to sort\n  'sortOrder': \"ASC\", // String | Sort order\n  'expand': [\"expand_example\"] // [String] | Fields to expand in the response, comma-separated\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesLinebasesettings(opts, callback);"
  },
  "gettelephonyprovidersedgeslines": {
    "operationId": "gettelephonyprovidersedgeslines",
    "functionName": "getTelephonyProvidersEdgesLines",
    "signature": "getTelephonyProvidersEdgesLines(pageSize, pageNumber, name, sortBy, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LineEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesLinesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'sortBy': \"name\", // String | Value by which to sort\n  'expand': [\"expand_example\"] // [String] | Fields to expand in the response, comma-separated\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesLines(opts, callback);"
  },
  "gettelephonyprovidersedgeslinestemplate": {
    "operationId": "gettelephonyprovidersedgeslinestemplate",
    "functionName": "getTelephonyProvidersEdgesLinesTemplate",
    "signature": "getTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId)",
    "parameters": [
      {
        "name": "lineBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Line",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesLinesTemplateRequest();\n\nlet lineBaseSettingsId = \"lineBaseSettingsId_example\"; // String | The id of a Line Base Settings object upon which to base this Line\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId, callback);"
  },
  "gettelephonyprovidersedgeslogicalinterfaces": {
    "operationId": "gettelephonyprovidersedgeslogicalinterfaces",
    "functionName": "getTelephonyProvidersEdgesLogicalinterfaces",
    "signature": "getTelephonyProvidersEdgesLogicalinterfaces(edgeIds, expand)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LogicalInterfaceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesLogicalinterfacesRequest();\n\nlet edgeIds = \"edgeIds_example\"; // String | Comma separated list of Edge Id's\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Field to expand in the response\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesLogicalinterfaces(edgeIds, opts, callback);"
  },
  "gettelephonyprovidersedgesmetrics": {
    "operationId": "gettelephonyprovidersedgesmetrics",
    "functionName": "getTelephonyProvidersEdgesMetrics",
    "signature": "getTelephonyProvidersEdgesMetrics(edgeIds)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[EdgeMetrics]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesMetricsRequest();\n\nlet edgeIds = \"edgeIds_example\"; // String | Comma separated list of Edge Id's\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesMetrics(edgeIds, callback);"
  },
  "gettelephonyprovidersedgesoutboundroute": {
    "operationId": "gettelephonyprovidersedgesoutboundroute",
    "functionName": "getTelephonyProvidersEdgesOutboundroute",
    "signature": "getTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
    "parameters": [
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundRoute",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesOutboundrouteRequest();\n\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesOutboundroute(outboundRouteId, callback);"
  },
  "gettelephonyprovidersedgesoutboundroutes": {
    "operationId": "gettelephonyprovidersedgesoutboundroutes",
    "functionName": "getTelephonyProvidersEdgesOutboundroutes",
    "signature": "getTelephonyProvidersEdgesOutboundroutes(pageSize, pageNumber, name, siteId, externalTrunkBasesIds, sortBy)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "externalTrunkBasesIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutboundRouteEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesOutboundroutesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'siteId': \"siteId_example\", // String | Filter by site.id\n  'externalTrunkBasesIds': \"externalTrunkBasesIds_example\", // String | Filter by externalTrunkBases.ids\n  'sortBy': \"name\" // String | Sort by\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesOutboundroutes(opts, callback);"
  },
  "gettelephonyprovidersedgesphone": {
    "operationId": "gettelephonyprovidersedgesphone",
    "functionName": "getTelephonyProvidersEdgesPhone",
    "signature": "getTelephonyProvidersEdgesPhone(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhoneRequest();\n\nlet phoneId = \"phoneId_example\"; // String | Phone ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhone(phoneId, callback);"
  },
  "gettelephonyprovidersedgesphonebasesetting": {
    "operationId": "gettelephonyprovidersedgesphonebasesetting",
    "functionName": "getTelephonyProvidersEdgesPhonebasesetting",
    "signature": "getTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhonebasesettingRequest();\n\nlet phoneBaseId = \"phoneBaseId_example\"; // String | Phone base ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, callback);"
  },
  "gettelephonyprovidersedgesphonebasesettings": {
    "operationId": "gettelephonyprovidersedgesphonebasesettings",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettings",
    "signature": "getTelephonyProvidersEdgesPhonebasesettings(pageSize, pageNumber, sortBy, sortOrder, expand, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PhoneBaseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhonebasesettingsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"name\", // String | Value by which to sort\n  'sortOrder': \"ASC\", // String | Sort order\n  'expand': [\"expand_example\"], // [String] | Fields to expand in the response, comma-separated\n  'name': \"name_example\" // String | Name\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhonebasesettings(opts, callback);"
  },
  "gettelephonyprovidersedgesphonebasesettingsavailablemetabases": {
    "operationId": "gettelephonyprovidersedgesphonebasesettingsavailablemetabases",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases",
    "signature": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "PhoneMetaBaseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(opts, callback);"
  },
  "gettelephonyprovidersedgesphonebasesettingstemplate": {
    "operationId": "gettelephonyprovidersedgesphonebasesettingstemplate",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettingsTemplate",
    "signature": "getTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId)",
    "parameters": [
      {
        "name": "phoneMetabaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhonebasesettingsTemplateRequest();\n\nlet phoneMetabaseId = \"phoneMetabaseId_example\"; // String | The id of a metabase object upon which to base this Phone Base Settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId, callback);"
  },
  "gettelephonyprovidersedgesphones": {
    "operationId": "gettelephonyprovidersedgesphones",
    "functionName": "getTelephonyProvidersEdgesPhones",
    "signature": "getTelephonyProvidersEdgesPhones(pageNumber, pageSize, sortBy, sortOrder, siteId, webRtcUserId, phoneBaseSettingsId, linesLoggedInUserId, linesDefaultForUserId, phoneHardwareId, linesId, linesName, name, statusOperationalStatus, secondaryStatusOperationalStatus, expand, fields)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "webRtcUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneBaseSettingsId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesLoggedInUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesDefaultForUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneHardwareId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "statusOperationalStatus",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secondaryStatusOperationalStatus",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "PhoneEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhonesRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | The field to sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  'siteId': \"siteId_example\", // String | Filter by site.id\n  'webRtcUserId': \"webRtcUserId_example\", // String | Filter by webRtcUser.id\n  'phoneBaseSettingsId': \"phoneBaseSettingsId_example\", // String | Filter by phoneBaseSettings.id\n  'linesLoggedInUserId': \"linesLoggedInUserId_example\", // String | Filter by lines.loggedInUser.id\n  'linesDefaultForUserId': \"linesDefaultForUserId_example\", // String | Filter by lines.defaultForUser.id\n  'phoneHardwareId': \"phoneHardwareId_example\", // String | Filter by phone_hardwareId\n  'linesId': \"linesId_example\", // String | Filter by lines.id\n  'linesName': \"linesName_example\", // String | Filter by lines.name\n  'name': \"name_example\", // String | Name of the Phone to filter by\n  'statusOperationalStatus': \"statusOperationalStatus_example\", // String | The primary status to filter by\n  'secondaryStatusOperationalStatus': \"secondaryStatusOperationalStatus_example\", // String | The secondary status to filter by\n  'expand': [\"expand_example\"], // [String] | Fields to expand in the response, comma-separated\n  'fields': [\"fields_example\"] // [String] | Fields and properties to get, comma-separated\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhones(opts, callback);"
  },
  "gettelephonyprovidersedgesphonestemplate": {
    "operationId": "gettelephonyprovidersedgesphonestemplate",
    "functionName": "getTelephonyProvidersEdgesPhonesTemplate",
    "signature": "getTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId)",
    "parameters": [
      {
        "name": "phoneBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhonesTemplateRequest();\n\nlet phoneBaseSettingsId = \"phoneBaseSettingsId_example\"; // String | The id of a Phone Base Settings object upon which to base this Phone\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId, callback);"
  },
  "gettelephonyprovidersedgesphysicalinterfaces": {
    "operationId": "gettelephonyprovidersedgesphysicalinterfaces",
    "functionName": "getTelephonyProvidersEdgesPhysicalinterfaces",
    "signature": "getTelephonyProvidersEdgesPhysicalinterfaces(edgeIds)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhysicalInterfaceEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesPhysicalinterfacesRequest();\n\nlet edgeIds = \"edgeIds_example\"; // String | Comma separated list of Edge Id's\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesPhysicalinterfaces(edgeIds, callback);"
  },
  "gettelephonyprovidersedgessite": {
    "operationId": "gettelephonyprovidersedgessite",
    "functionName": "getTelephonyProvidersEdgesSite",
    "signature": "getTelephonyProvidersEdgesSite(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesSiteRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesSite(siteId, callback);"
  },
  "gettelephonyprovidersedgessitenumberplan": {
    "operationId": "gettelephonyprovidersedgessitenumberplan",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplan",
    "signature": "getTelephonyProvidersEdgesSiteNumberplan(siteId, numberPlanId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "numberPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NumberPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesSiteNumberplanRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet numberPlanId = \"numberPlanId_example\"; // String | Number Plan ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesSiteNumberplan(siteId, numberPlanId, callback);"
  },
  "gettelephonyprovidersedgessitenumberplans": {
    "operationId": "gettelephonyprovidersedgessitenumberplans",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplans",
    "signature": "getTelephonyProvidersEdgesSiteNumberplans(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[NumberPlan]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesSiteNumberplansRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesSiteNumberplans(siteId, callback);"
  },
  "gettelephonyprovidersedgessitenumberplansclassifications": {
    "operationId": "gettelephonyprovidersedgessitenumberplansclassifications",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplansClassifications",
    "signature": "getTelephonyProvidersEdgesSiteNumberplansClassifications(siteId, classification)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "classification",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesSiteNumberplansClassificationsRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet opts = { \n  'classification': \"classification_example\" // String | Classification\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesSiteNumberplansClassifications(siteId, opts, callback);"
  },
  "gettelephonyprovidersedgessiteoutboundroute": {
    "operationId": "gettelephonyprovidersedgessiteoutboundroute",
    "functionName": "getTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "getTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesSiteOutboundrouteRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, callback);"
  },
  "gettelephonyprovidersedgessiteoutboundroutes": {
    "operationId": "gettelephonyprovidersedgessiteoutboundroutes",
    "functionName": "getTelephonyProvidersEdgesSiteOutboundroutes",
    "signature": "getTelephonyProvidersEdgesSiteOutboundroutes(siteId, pageSize, pageNumber, name, externalTrunkBasesIds, sortBy)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "externalTrunkBasesIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutboundRouteBaseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesSiteOutboundroutesRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'name': \"name_example\", // String | Name\n  'externalTrunkBasesIds': \"externalTrunkBasesIds_example\", // String | externalTrunkBases.ids\n  'sortBy': \"name\" // String | Sort by\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesSiteOutboundroutes(siteId, opts, callback);"
  },
  "gettelephonyprovidersedgessites": {
    "operationId": "gettelephonyprovidersedgessites",
    "functionName": "getTelephonyProvidersEdgesSites",
    "signature": "getTelephonyProvidersEdgesSites(pageSize, pageNumber, sortBy, sortOrder, name, locationId, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "SiteEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesSitesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortBy': \"name\", // String | Sort by\n  'sortOrder': \"ASC\", // String | Sort order\n  'name': \"name_example\", // String | Name\n  'locationId': \"locationId_example\", // String | Location Id\n  'managed': true // Boolean | Filter by managed\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesSites(opts, callback);"
  },
  "gettelephonyprovidersedgestimezones": {
    "operationId": "gettelephonyprovidersedgestimezones",
    "functionName": "getTelephonyProvidersEdgesTimezones",
    "signature": "getTelephonyProvidersEdgesTimezones(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TimeZoneEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTimezonesRequest();\n\nlet opts = { \n  'pageSize': 1000, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTimezones(opts, callback);"
  },
  "gettelephonyprovidersedgestrunk": {
    "operationId": "gettelephonyprovidersedgestrunk",
    "functionName": "getTelephonyProvidersEdgesTrunk",
    "signature": "getTelephonyProvidersEdgesTrunk(trunkId)",
    "parameters": [
      {
        "name": "trunkId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trunk",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunkRequest();\n\nlet trunkId = \"trunkId_example\"; // String | Trunk ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunk(trunkId, callback);"
  },
  "gettelephonyprovidersedgestrunkmetrics": {
    "operationId": "gettelephonyprovidersedgestrunkmetrics",
    "functionName": "getTelephonyProvidersEdgesTrunkMetrics",
    "signature": "getTelephonyProvidersEdgesTrunkMetrics(trunkId)",
    "parameters": [
      {
        "name": "trunkId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrunkMetrics",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunkMetricsRequest();\n\nlet trunkId = \"trunkId_example\"; // String | Trunk Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunkMetrics(trunkId, callback);"
  },
  "gettelephonyprovidersedgestrunkbasesetting": {
    "operationId": "gettelephonyprovidersedgestrunkbasesetting",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "getTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, ignoreHidden)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ignoreHidden",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TrunkBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunkbasesettingRequest();\n\nlet trunkBaseSettingsId = \"trunkBaseSettingsId_example\"; // String | Trunk Base ID\nlet opts = { \n  'ignoreHidden': true // Boolean | Set this to true to not receive trunk properties that are meant to be hidden or for internal system usage only.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, opts, callback);"
  },
  "gettelephonyprovidersedgestrunkbasesettings": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettings",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettings",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettings(pageNumber, pageSize, sortBy, sortOrder, recordingEnabled, ignoreHidden, managed, expand, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "recordingEnabled",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "ignoreHidden",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkBaseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunkbasesettingsRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Value by which to sort\n  'sortOrder': \"ASC\", // String | Sort order\n  'recordingEnabled': true, // Boolean | Filter trunks by recording enabled\n  'ignoreHidden': true, // Boolean | Set this to true to not receive trunk properties that are meant to be hidden or for internal system usage only.\n  'managed': true, // Boolean | Filter by managed\n  'expand': [\"expand_example\"], // [String] | Fields to expand in the response, comma-separated\n  'name': \"name_example\" // String | Name of the TrunkBase to filter by\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunkbasesettings(opts, callback);"
  },
  "gettelephonyprovidersedgestrunkbasesettingsavailablemetabases": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettingsavailablemetabases",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(type, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrunkMetabaseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesRequest();\n\nlet opts = { \n  'type': \"type_example\", // String | \n  'pageSize': 25, // Number | \n  'pageNumber': 1 // Number | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(opts, callback);"
  },
  "gettelephonyprovidersedgestrunkbasesettingstemplate": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettingstemplate",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId)",
    "parameters": [
      {
        "name": "trunkMetabaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunkbasesettingsTemplateRequest();\n\nlet trunkMetabaseId = \"trunkMetabaseId_example\"; // String | The id of a metabase object upon which to base this Trunk Base Settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId, callback);"
  },
  "gettelephonyprovidersedgestrunks": {
    "operationId": "gettelephonyprovidersedgestrunks",
    "functionName": "getTelephonyProvidersEdgesTrunks",
    "signature": "getTelephonyProvidersEdgesTrunks(pageNumber, pageSize, sortBy, sortOrder, edgeId, trunkBaseId, trunkType)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkBaseId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunksRequest();\n\nlet opts = { \n  'pageNumber': 1, // Number | Page number\n  'pageSize': 25, // Number | Page size\n  'sortBy': \"name\", // String | Value by which to sort\n  'sortOrder': \"ASC\", // String | Sort order\n  'edgeId': \"edgeId_example\", // String | Filter by Edge Ids\n  'trunkBaseId': \"trunkBaseId_example\", // String | Filter by Trunk Base Ids\n  'trunkType': \"trunkType_example\" // String | Filter by a Trunk type\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunks(opts, callback);"
  },
  "gettelephonyprovidersedgestrunksmetrics": {
    "operationId": "gettelephonyprovidersedgestrunksmetrics",
    "functionName": "getTelephonyProvidersEdgesTrunksMetrics",
    "signature": "getTelephonyProvidersEdgesTrunksMetrics(trunkIds)",
    "parameters": [
      {
        "name": "trunkIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[TrunkMetrics]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunksMetricsRequest();\n\nlet trunkIds = \"trunkIds_example\"; // String | Comma separated list of Trunk Id's\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunksMetrics(trunkIds, callback);"
  },
  "gettelephonyprovidersedgestrunkswithrecording": {
    "operationId": "gettelephonyprovidersedgestrunkswithrecording",
    "functionName": "getTelephonyProvidersEdgesTrunkswithrecording",
    "signature": "getTelephonyProvidersEdgesTrunkswithrecording(trunkType)",
    "parameters": [
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkRecordingEnabledCount",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTelephonyProvidersEdgesTrunkswithrecordingRequest();\n\nlet opts = { \n  'trunkType': \"trunkType_example\" // String | The type of this trunk base.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTelephonyProvidersEdgesTrunkswithrecording(opts, callback);"
  },
  "posttelephonyprovidersedgediagnosticnslookup": {
    "operationId": "posttelephonyprovidersedgediagnosticnslookup",
    "functionName": "postTelephonyProvidersEdgeDiagnosticNslookup",
    "signature": "postTelephonyProvidersEdgeDiagnosticNslookup(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeDiagnosticNslookupRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeDiagnosticNslookup(edgeId, body, callback);"
  },
  "posttelephonyprovidersedgediagnosticping": {
    "operationId": "posttelephonyprovidersedgediagnosticping",
    "functionName": "postTelephonyProvidersEdgeDiagnosticPing",
    "signature": "postTelephonyProvidersEdgeDiagnosticPing(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeDiagnosticPingRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeDiagnosticPing(edgeId, body, callback);"
  },
  "posttelephonyprovidersedgediagnosticroute": {
    "operationId": "posttelephonyprovidersedgediagnosticroute",
    "functionName": "postTelephonyProvidersEdgeDiagnosticRoute",
    "signature": "postTelephonyProvidersEdgeDiagnosticRoute(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeDiagnosticRouteRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeDiagnosticRoute(edgeId, body, callback);"
  },
  "posttelephonyprovidersedgediagnostictracepath": {
    "operationId": "posttelephonyprovidersedgediagnostictracepath",
    "functionName": "postTelephonyProvidersEdgeDiagnosticTracepath",
    "signature": "postTelephonyProvidersEdgeDiagnosticTracepath(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeDiagnosticTracepathRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\nlet body = {}; // Object | request payload to get network diagnostic\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeDiagnosticTracepath(edgeId, body, callback);"
  },
  "posttelephonyprovidersedgelogicalinterfaces": {
    "operationId": "posttelephonyprovidersedgelogicalinterfaces",
    "functionName": "postTelephonyProvidersEdgeLogicalinterfaces",
    "signature": "postTelephonyProvidersEdgeLogicalinterfaces(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeLogicalinterfacesRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | Logical interface\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeLogicalinterfaces(edgeId, body, callback);"
  },
  "posttelephonyprovidersedgelogsjobupload": {
    "operationId": "posttelephonyprovidersedgelogsjobupload",
    "functionName": "postTelephonyProvidersEdgeLogsJobUpload",
    "signature": "postTelephonyProvidersEdgeLogsJobUpload(edgeId, jobId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeLogsJobUploadRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet jobId = \"jobId_example\"; // String | Job ID\nlet body = {}; // Object | Log upload request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postTelephonyProvidersEdgeLogsJobUpload(edgeId, jobId, body, callback);"
  },
  "posttelephonyprovidersedgelogsjobs": {
    "operationId": "posttelephonyprovidersedgelogsjobs",
    "functionName": "postTelephonyProvidersEdgeLogsJobs",
    "signature": "postTelephonyProvidersEdgeLogsJobs(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeLogsJobResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeLogsJobsRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | EdgeLogsJobRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeLogsJobs(edgeId, body, callback);"
  },
  "posttelephonyprovidersedgereboot": {
    "operationId": "posttelephonyprovidersedgereboot",
    "functionName": "postTelephonyProvidersEdgeReboot",
    "signature": "postTelephonyProvidersEdgeReboot(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeRebootRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  'body': {} // Object | Parameters for the edge reboot\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeReboot(edgeId, opts, callback);"
  },
  "posttelephonyprovidersedgesoftwareupdate": {
    "operationId": "posttelephonyprovidersedgesoftwareupdate",
    "functionName": "postTelephonyProvidersEdgeSoftwareupdate",
    "signature": "postTelephonyProvidersEdgeSoftwareupdate(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareUpdateDto",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeSoftwareupdateRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | Software update request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeSoftwareupdate(edgeId, body, callback);"
  },
  "posttelephonyprovidersedgestatuscode": {
    "operationId": "posttelephonyprovidersedgestatuscode",
    "functionName": "postTelephonyProvidersEdgeStatuscode",
    "signature": "postTelephonyProvidersEdgeStatuscode(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeStatuscodeRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet opts = { \n  'body': {} // Object | Edge Service State\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeStatuscode(edgeId, opts, callback);"
  },
  "posttelephonyprovidersedgeunpair": {
    "operationId": "posttelephonyprovidersedgeunpair",
    "functionName": "postTelephonyProvidersEdgeUnpair",
    "signature": "postTelephonyProvidersEdgeUnpair(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgeUnpairRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgeUnpair(edgeId, callback);"
  },
  "posttelephonyprovidersedges": {
    "operationId": "posttelephonyprovidersedges",
    "functionName": "postTelephonyProvidersEdges",
    "signature": "postTelephonyProvidersEdges(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Edge",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesRequest();\n\nlet body = {}; // Object | Edge\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdges(body, callback);"
  },
  "posttelephonyprovidersedgesaddressvalidation": {
    "operationId": "posttelephonyprovidersedgesaddressvalidation",
    "functionName": "postTelephonyProvidersEdgesAddressvalidation",
    "signature": "postTelephonyProvidersEdgesAddressvalidation(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ValidateAddressResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesAddressvalidationRequest();\n\nlet body = {}; // Object | Address\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesAddressvalidation(body, callback);"
  },
  "posttelephonyprovidersedgescertificateauthorities": {
    "operationId": "posttelephonyprovidersedgescertificateauthorities",
    "functionName": "postTelephonyProvidersEdgesCertificateauthorities",
    "signature": "postTelephonyProvidersEdgesCertificateauthorities(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesCertificateauthoritiesRequest();\n\nlet body = {}; // Object | CertificateAuthority\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesCertificateauthorities(body, callback);"
  },
  "posttelephonyprovidersedgesdidpools": {
    "operationId": "posttelephonyprovidersedgesdidpools",
    "functionName": "postTelephonyProvidersEdgesDidpools",
    "signature": "postTelephonyProvidersEdgesDidpools(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesDidpoolsRequest();\n\nlet body = {}; // Object | DID pool\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesDidpools(body, callback);"
  },
  "posttelephonyprovidersedgesedgegroups": {
    "operationId": "posttelephonyprovidersedgesedgegroups",
    "functionName": "postTelephonyProvidersEdgesEdgegroups",
    "signature": "postTelephonyProvidersEdgesEdgegroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesEdgegroupsRequest();\n\nlet body = {}; // Object | EdgeGroup\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesEdgegroups(body, callback);"
  },
  "posttelephonyprovidersedgesextensionpools": {
    "operationId": "posttelephonyprovidersedgesextensionpools",
    "functionName": "postTelephonyProvidersEdgesExtensionpools",
    "signature": "postTelephonyProvidersEdgesExtensionpools(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesExtensionpoolsRequest();\n\nlet body = {}; // Object | ExtensionPool\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesExtensionpools(body, callback);"
  },
  "posttelephonyprovidersedgesoutboundroutes": {
    "operationId": "posttelephonyprovidersedgesoutboundroutes",
    "functionName": "postTelephonyProvidersEdgesOutboundroutes",
    "signature": "postTelephonyProvidersEdgesOutboundroutes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutboundRoute",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesOutboundroutesRequest();\n\nlet body = {}; // Object | OutboundRoute\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesOutboundroutes(body, callback);"
  },
  "posttelephonyprovidersedgesphonereboot": {
    "operationId": "posttelephonyprovidersedgesphonereboot",
    "functionName": "postTelephonyProvidersEdgesPhoneReboot",
    "signature": "postTelephonyProvidersEdgesPhoneReboot(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesPhoneRebootRequest();\n\nlet phoneId = \"phoneId_example\"; // String | Phone Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postTelephonyProvidersEdgesPhoneReboot(phoneId, callback);"
  },
  "posttelephonyprovidersedgesphonebasesettings": {
    "operationId": "posttelephonyprovidersedgesphonebasesettings",
    "functionName": "postTelephonyProvidersEdgesPhonebasesettings",
    "signature": "postTelephonyProvidersEdgesPhonebasesettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesPhonebasesettingsRequest();\n\nlet body = {}; // Object | Phone base settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesPhonebasesettings(body, callback);"
  },
  "posttelephonyprovidersedgesphones": {
    "operationId": "posttelephonyprovidersedgesphones",
    "functionName": "postTelephonyProvidersEdgesPhones",
    "signature": "postTelephonyProvidersEdgesPhones(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesPhonesRequest();\n\nlet body = {}; // Object | Phone\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesPhones(body, callback);"
  },
  "posttelephonyprovidersedgesphonesreboot": {
    "operationId": "posttelephonyprovidersedgesphonesreboot",
    "functionName": "postTelephonyProvidersEdgesPhonesReboot",
    "signature": "postTelephonyProvidersEdgesPhonesReboot(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesPhonesRebootRequest();\n\nlet body = {}; // Object | Phones\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postTelephonyProvidersEdgesPhonesReboot(body, callback);"
  },
  "posttelephonyprovidersedgessiteoutboundroutes": {
    "operationId": "posttelephonyprovidersedgessiteoutboundroutes",
    "functionName": "postTelephonyProvidersEdgesSiteOutboundroutes",
    "signature": "postTelephonyProvidersEdgesSiteOutboundroutes(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesSiteOutboundroutesRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet body = {}; // Object | OutboundRoute\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesSiteOutboundroutes(siteId, body, callback);"
  },
  "posttelephonyprovidersedgessiterebalance": {
    "operationId": "posttelephonyprovidersedgessiterebalance",
    "functionName": "postTelephonyProvidersEdgesSiteRebalance",
    "signature": "postTelephonyProvidersEdgesSiteRebalance(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesSiteRebalanceRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postTelephonyProvidersEdgesSiteRebalance(siteId, callback);"
  },
  "posttelephonyprovidersedgessites": {
    "operationId": "posttelephonyprovidersedgessites",
    "functionName": "postTelephonyProvidersEdgesSites",
    "signature": "postTelephonyProvidersEdgesSites(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesSitesRequest();\n\nlet body = {}; // Object | Site\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesSites(body, callback);"
  },
  "posttelephonyprovidersedgestrunkbasesettings": {
    "operationId": "posttelephonyprovidersedgestrunkbasesettings",
    "functionName": "postTelephonyProvidersEdgesTrunkbasesettings",
    "signature": "postTelephonyProvidersEdgesTrunkbasesettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTelephonyProvidersEdgesTrunkbasesettingsRequest();\n\nlet body = {}; // Object | Trunk base settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTelephonyProvidersEdgesTrunkbasesettings(body, callback);"
  },
  "puttelephonyprovidersedge": {
    "operationId": "puttelephonyprovidersedge",
    "functionName": "putTelephonyProvidersEdge",
    "signature": "putTelephonyProvidersEdge(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Edge",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgeRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet body = {}; // Object | Edge\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdge(edgeId, body, callback);"
  },
  "puttelephonyprovidersedgeline": {
    "operationId": "puttelephonyprovidersedgeline",
    "functionName": "putTelephonyProvidersEdgeLine",
    "signature": "putTelephonyProvidersEdgeLine(edgeId, lineId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "lineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeLine",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgeLineRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet lineId = \"lineId_example\"; // String | Line ID\nlet body = {}; // Object | Line\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgeLine(edgeId, lineId, body, callback);"
  },
  "puttelephonyprovidersedgelogicalinterface": {
    "operationId": "puttelephonyprovidersedgelogicalinterface",
    "functionName": "putTelephonyProvidersEdgeLogicalinterface",
    "signature": "putTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgeLogicalinterfaceRequest();\n\nlet edgeId = \"edgeId_example\"; // String | Edge ID\nlet interfaceId = \"interfaceId_example\"; // String | Interface ID\nlet body = {}; // Object | Logical interface\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, body, callback);"
  },
  "puttelephonyprovidersedgescertificateauthority": {
    "operationId": "puttelephonyprovidersedgescertificateauthority",
    "functionName": "putTelephonyProvidersEdgesCertificateauthority",
    "signature": "putTelephonyProvidersEdgesCertificateauthority(certificateId, body)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesCertificateauthorityRequest();\n\nlet certificateId = \"certificateId_example\"; // String | Certificate ID\nlet body = {}; // Object | Certificate authority\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesCertificateauthority(certificateId, body, callback);"
  },
  "puttelephonyprovidersedgesdid": {
    "operationId": "puttelephonyprovidersedgesdid",
    "functionName": "putTelephonyProvidersEdgesDid",
    "signature": "putTelephonyProvidersEdgesDid(didId, body)",
    "parameters": [
      {
        "name": "didId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DID",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesDidRequest();\n\nlet didId = \"didId_example\"; // String | DID ID\nlet body = {}; // Object | DID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesDid(didId, body, callback);"
  },
  "puttelephonyprovidersedgesdidpool": {
    "operationId": "puttelephonyprovidersedgesdidpool",
    "functionName": "putTelephonyProvidersEdgesDidpool",
    "signature": "putTelephonyProvidersEdgesDidpool(didPoolId, body)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesDidpoolRequest();\n\nlet didPoolId = \"didPoolId_example\"; // String | DID pool ID\nlet body = {}; // Object | DID pool\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesDidpool(didPoolId, body, callback);"
  },
  "puttelephonyprovidersedgesedgegroup": {
    "operationId": "puttelephonyprovidersedgesedgegroup",
    "functionName": "putTelephonyProvidersEdgesEdgegroup",
    "signature": "putTelephonyProvidersEdgesEdgegroup(edgeGroupId, body)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesEdgegroupRequest();\n\nlet edgeGroupId = \"edgeGroupId_example\"; // String | Edge group ID\nlet body = {}; // Object | EdgeGroup\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesEdgegroup(edgeGroupId, body, callback);"
  },
  "puttelephonyprovidersedgesedgegroupedgetrunkbase": {
    "operationId": "puttelephonyprovidersedgesedgegroupedgetrunkbase",
    "functionName": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
    "signature": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, body)",
    "parameters": [
      {
        "name": "edgegroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "edgetrunkbaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "EdgeTrunkBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseRequest();\n\nlet edgegroupId = \"edgegroupId_example\"; // String | Edge Group ID\nlet edgetrunkbaseId = \"edgetrunkbaseId_example\"; // String | Edge Trunk Base ID\nlet body = {}; // Object | EdgeTrunkBase\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, body, callback);"
  },
  "puttelephonyprovidersedgesextension": {
    "operationId": "puttelephonyprovidersedgesextension",
    "functionName": "putTelephonyProvidersEdgesExtension",
    "signature": "putTelephonyProvidersEdgesExtension(extensionId, body)",
    "parameters": [
      {
        "name": "extensionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Extension",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesExtensionRequest();\n\nlet extensionId = \"extensionId_example\"; // String | Extension ID\nlet body = {}; // Object | Extension\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesExtension(extensionId, body, callback);"
  },
  "puttelephonyprovidersedgesextensionpool": {
    "operationId": "puttelephonyprovidersedgesextensionpool",
    "functionName": "putTelephonyProvidersEdgesExtensionpool",
    "signature": "putTelephonyProvidersEdgesExtensionpool(extensionPoolId, body)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesExtensionpoolRequest();\n\nlet extensionPoolId = \"extensionPoolId_example\"; // String | Extension pool ID\nlet body = {}; // Object | ExtensionPool\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesExtensionpool(extensionPoolId, body, callback);"
  },
  "puttelephonyprovidersedgesoutboundroute": {
    "operationId": "puttelephonyprovidersedgesoutboundroute",
    "functionName": "putTelephonyProvidersEdgesOutboundroute",
    "signature": "putTelephonyProvidersEdgesOutboundroute(outboundRouteId, body)",
    "parameters": [
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutboundRoute",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesOutboundrouteRequest();\n\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\nlet body = {}; // Object | OutboundRoute\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesOutboundroute(outboundRouteId, body, callback);"
  },
  "puttelephonyprovidersedgesphone": {
    "operationId": "puttelephonyprovidersedgesphone",
    "functionName": "putTelephonyProvidersEdgesPhone",
    "signature": "putTelephonyProvidersEdgesPhone(phoneId, body)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesPhoneRequest();\n\nlet phoneId = \"phoneId_example\"; // String | Phone ID\nlet body = {}; // Object | Phone\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesPhone(phoneId, body, callback);"
  },
  "puttelephonyprovidersedgesphonebasesetting": {
    "operationId": "puttelephonyprovidersedgesphonebasesetting",
    "functionName": "putTelephonyProvidersEdgesPhonebasesetting",
    "signature": "putTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, body)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesPhonebasesettingRequest();\n\nlet phoneBaseId = \"phoneBaseId_example\"; // String | Phone base ID\nlet body = {}; // Object | Phone base settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, body, callback);"
  },
  "puttelephonyprovidersedgessite": {
    "operationId": "puttelephonyprovidersedgessite",
    "functionName": "putTelephonyProvidersEdgesSite",
    "signature": "putTelephonyProvidersEdgesSite(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesSiteRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet body = {}; // Object | Site\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesSite(siteId, body, callback);"
  },
  "puttelephonyprovidersedgessitenumberplans": {
    "operationId": "puttelephonyprovidersedgessitenumberplans",
    "functionName": "putTelephonyProvidersEdgesSiteNumberplans",
    "signature": "putTelephonyProvidersEdgesSiteNumberplans(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "[NumberPlan]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesSiteNumberplansRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet body = [{}]; // Object | List of number plans\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesSiteNumberplans(siteId, body, callback);"
  },
  "puttelephonyprovidersedgessiteoutboundroute": {
    "operationId": "puttelephonyprovidersedgessiteoutboundroute",
    "functionName": "putTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "putTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesSiteOutboundrouteRequest();\n\nlet siteId = \"siteId_example\"; // String | Site ID\nlet outboundRouteId = \"outboundRouteId_example\"; // String | Outbound route ID\nlet body = {}; // Object | OutboundRoute\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, body, callback);"
  },
  "puttelephonyprovidersedgestrunkbasesetting": {
    "operationId": "puttelephonyprovidersedgestrunkbasesetting",
    "functionName": "putTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "putTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutTelephonyProvidersEdgesTrunkbasesettingRequest();\n\nlet trunkBaseSettingsId = \"trunkBaseSettingsId_example\"; // String | Trunk Base ID\nlet body = {}; // Object | Trunk base settings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body, callback);"
  },
  "gettextbotsbotssearch": {
    "operationId": "gettextbotsbotssearch",
    "functionName": "getTextbotsBotsSearch",
    "signature": "getTextbotsBotsSearch(botType, botName, botId, pageSize)",
    "parameters": [
      {
        "name": "botType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "botName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "botId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "BotSearchResponseEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTextbotsBotsSearchRequest();\n\nlet opts = { \n  'botType': [\"botType_example\"], // [String] | Bot types\n  'botName': \"botName_example\", // String | Bot name\n  'botId': [\"botId_example\"], // [String] | Bot IDs\n  'pageSize': 25 // Number | The maximum results to return\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTextbotsBotsSearch(opts, callback);"
  },
  "posttextbotsbotflowssessionturns": {
    "operationId": "posttextbotsbotflowssessionturns",
    "functionName": "postTextbotsBotflowsSessionTurns",
    "signature": "postTextbotsBotflowsSessionTurns(sessionId, turnRequest)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "turnRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TextBotFlowTurnResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTextbotsBotflowsSessionTurnsRequest();\n\nlet sessionId = \"sessionId_example\"; // String | The bot flow session ID, typically obtained from 'POST /api/v2/textbots/botflows/sessions'\nlet turnRequest = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTextbotsBotflowsSessionTurns(sessionId, turnRequest, callback);"
  },
  "posttextbotsbotflowssessions": {
    "operationId": "posttextbotsbotflowssessions",
    "functionName": "postTextbotsBotflowsSessions",
    "signature": "postTextbotsBotflowsSessions(launchRequest)",
    "parameters": [
      {
        "name": "launchRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "TextBotFlowLaunchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTextbotsBotflowsSessionsRequest();\n\nlet launchRequest = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTextbotsBotflowsSessions(launchRequest, callback);"
  },
  "posttextbotsbotsexecute": {
    "operationId": "posttextbotsbotsexecute",
    "functionName": "postTextbotsBotsExecute",
    "signature": "postTextbotsBotsExecute(postTextRequest)",
    "parameters": [
      {
        "name": "postTextRequest",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "PostTextResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostTextbotsBotsExecuteRequest();\n\nlet postTextRequest = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postTextbotsBotsExecute(postTextRequest, callback);"
  },
  "deletetoken": {
    "operationId": "deletetoken",
    "functionName": "deleteToken",
    "signature": "deleteToken(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTokenRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteToken(userId, callback);"
  },
  "deletetokensme": {
    "operationId": "deletetokensme",
    "functionName": "deleteTokensMe",
    "signature": "deleteTokensMe()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteTokensMeRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteTokensMe(callback);"
  },
  "gettokensme": {
    "operationId": "gettokensme",
    "functionName": "getTokensMe",
    "signature": "getTokensMe()",
    "return": "TokenInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTokensMeRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTokensMe(callback);"
  },
  "headtokensme": {
    "operationId": "headtokensme",
    "functionName": "headTokensMe",
    "signature": "headTokensMe()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .HeadTokensMeRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.headTokensMe(callback);"
  },
  "postlanguageunderstandingmineruploads": {
    "operationId": "postlanguageunderstandingmineruploads",
    "functionName": "postLanguageunderstandingMinerUploads",
    "signature": "postLanguageunderstandingMinerUploads(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostLanguageunderstandingMinerUploadsRequest();\n\nlet minerId = \"minerId_example\"; // String | Miner ID\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postLanguageunderstandingMinerUploads(minerId, body, callback);"
  },
  "postuploadspublicassetsimages": {
    "operationId": "postuploadspublicassetsimages",
    "functionName": "postUploadsPublicassetsImages",
    "signature": "postUploadsPublicassetsImages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUploadsPublicassetsImagesRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUploadsPublicassetsImages(body, callback);"
  },
  "postuploadsrecordings": {
    "operationId": "postuploadsrecordings",
    "functionName": "postUploadsRecordings",
    "signature": "postUploadsRecordings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUploadsRecordingsRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUploadsRecordings(body, callback);"
  },
  "postuploadsworkforcemanagementhistoricaldatacsv": {
    "operationId": "postuploadsworkforcemanagementhistoricaldatacsv",
    "functionName": "postUploadsWorkforcemanagementHistoricaldataCsv",
    "signature": "postUploadsWorkforcemanagementHistoricaldataCsv(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUploadsWorkforcemanagementHistoricaldataCsvRequest();\n\nlet body = {}; // Object | query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUploadsWorkforcemanagementHistoricaldataCsv(body, callback);"
  },
  "getusagequeryexecutionidresults": {
    "operationId": "getusagequeryexecutionidresults",
    "functionName": "getUsageQueryExecutionIdResults",
    "signature": "getUsageQueryExecutionIdResults(executionId)",
    "parameters": [
      {
        "name": "executionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ApiUsageQueryResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUsageQueryExecutionIdResultsRequest();\n\nlet executionId = \"executionId_example\"; // String | ID of the query execution\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUsageQueryExecutionIdResults(executionId, callback);"
  },
  "postusagequery": {
    "operationId": "postusagequery",
    "functionName": "postUsageQuery",
    "signature": "postUsageQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUsageQueryRequest();\n\nlet body = {}; // Object | Query\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUsageQuery(body, callback);"
  },
  "deleteuserrecording": {
    "operationId": "deleteuserrecording",
    "functionName": "deleteUserrecording",
    "signature": "deleteUserrecording(recordingId)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteUserrecordingRequest();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteUserrecording(recordingId, callback);"
  },
  "getuserrecording": {
    "operationId": "getuserrecording",
    "functionName": "getUserrecording",
    "signature": "getUserrecording(recordingId, expand)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserrecordingRequest();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserrecording(recordingId, opts, callback);"
  },
  "getuserrecordingmedia": {
    "operationId": "getuserrecordingmedia",
    "functionName": "getUserrecordingMedia",
    "signature": "getUserrecordingMedia(recordingId, formatId)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DownloadResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserrecordingMediaRequest();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\nlet opts = { \n  'formatId': \"WEBM\" // String | The desired media format.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserrecordingMedia(recordingId, opts, callback);"
  },
  "getuserrecordings": {
    "operationId": "getuserrecordings",
    "functionName": "getUserrecordings",
    "signature": "getUserrecordings(pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecordingEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserrecordingsRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserrecordings(opts, callback);"
  },
  "getuserrecordingssummary": {
    "operationId": "getuserrecordingssummary",
    "functionName": "getUserrecordingsSummary",
    "signature": "getUserrecordingsSummary()",
    "return": "FaxSummary",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserrecordingsSummaryRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserrecordingsSummary(callback);"
  },
  "putuserrecording": {
    "operationId": "putuserrecording",
    "functionName": "putUserrecording",
    "signature": "putUserrecording(recordingId, body, expand)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecording",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserrecordingRequest();\n\nlet recordingId = \"recordingId_example\"; // String | User Recording ID\nlet body = {}; // Object | UserRecording\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserrecording(recordingId, body, opts, callback);"
  },
  "deleteuser": {
    "operationId": "deleteuser",
    "functionName": "deleteUser",
    "signature": "deleteUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Empty",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteUserRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteUser(userId, callback);"
  },
  "deleteuserstationassociatedstation": {
    "operationId": "deleteuserstationassociatedstation",
    "functionName": "deleteUserStationAssociatedstation",
    "signature": "deleteUserStationAssociatedstation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteUserStationAssociatedstationRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteUserStationAssociatedstation(userId, callback);"
  },
  "deleteuserstationdefaultstation": {
    "operationId": "deleteuserstationdefaultstation",
    "functionName": "deleteUserStationDefaultstation",
    "signature": "deleteUserStationDefaultstation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteUserStationDefaultstationRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteUserStationDefaultstation(userId, callback);"
  },
  "getprofilesusers": {
    "operationId": "getprofilesusers",
    "functionName": "getProfilesUsers",
    "signature": "getProfilesUsers(pageSize, pageNumber, id, jid, sortOrder, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jid",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserProfileEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetProfilesUsersRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'id': [\"id_example\"], // [String] | id\n  'jid': [\"jid_example\"], // [String] | jid\n  'sortOrder': \"ASC\", // String | Ascending or descending sort order\n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand\n  'integrationPresenceSource': \"integrationPresenceSource_example\" // String | Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \\\"expand\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getProfilesUsers(opts, callback);"
  },
  "getuser": {
    "operationId": "getuser",
    "functionName": "getUser",
    "signature": "getUser(userId, expand, integrationPresenceSource, state)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand\n  'integrationPresenceSource': \"integrationPresenceSource_example\", // String | Gets an integration presence for a user instead of their default.\n  'state': \"active\" // String | Search for a user with this state\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUser(userId, opts, callback);"
  },
  "getuseradjacents": {
    "operationId": "getuseradjacents",
    "functionName": "getUserAdjacents",
    "signature": "getUserAdjacents(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Adjacents",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserAdjacentsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserAdjacents(userId, opts, callback);"
  },
  "getusercallforwarding": {
    "operationId": "getusercallforwarding",
    "functionName": "getUserCallforwarding",
    "signature": "getUserCallforwarding(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserCallforwardingRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserCallforwarding(userId, callback);"
  },
  "getuserdirectreports": {
    "operationId": "getuserdirectreports",
    "functionName": "getUserDirectreports",
    "signature": "getUserDirectreports(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[User]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserDirectreportsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserDirectreports(userId, opts, callback);"
  },
  "getuserfavorites": {
    "operationId": "getuserfavorites",
    "functionName": "getUserFavorites",
    "signature": "getUserFavorites(userId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserFavoritesRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"ASC\", // String | Sort order\n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserFavorites(userId, opts, callback);"
  },
  "getuseroutofoffice": {
    "operationId": "getuseroutofoffice",
    "functionName": "getUserOutofoffice",
    "signature": "getUserOutofoffice(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutOfOffice",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserOutofofficeRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserOutofoffice(userId, callback);"
  },
  "getuserprofile": {
    "operationId": "getuserprofile",
    "functionName": "getUserProfile",
    "signature": "getUserProfile(userId, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserProfile",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserProfileRequest();\n\nlet userId = \"userId_example\"; // String | userId\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand\n  'integrationPresenceSource': \"integrationPresenceSource_example\" // String | Gets an integration presence for a user instead of their default.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserProfile(userId, opts, callback);"
  },
  "getuserprofileskills": {
    "operationId": "getuserprofileskills",
    "functionName": "getUserProfileskills",
    "signature": "getUserProfileskills(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserProfileskillsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserProfileskills(userId, callback);"
  },
  "getuserroutingstatus": {
    "operationId": "getuserroutingstatus",
    "functionName": "getUserRoutingstatus",
    "signature": "getUserRoutingstatus(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RoutingStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserRoutingstatusRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserRoutingstatus(userId, callback);"
  },
  "getuserstate": {
    "operationId": "getuserstate",
    "functionName": "getUserState",
    "signature": "getUserState(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserState",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserStateRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserState(userId, callback);"
  },
  "getuserstation": {
    "operationId": "getuserstation",
    "functionName": "getUserStation",
    "signature": "getUserStation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserStations",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserStationRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserStation(userId, callback);"
  },
  "getusersuperiors": {
    "operationId": "getusersuperiors",
    "functionName": "getUserSuperiors",
    "signature": "getUserSuperiors(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[User]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserSuperiorsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | Which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserSuperiors(userId, opts, callback);"
  },
  "getusertrustors": {
    "operationId": "getusertrustors",
    "functionName": "getUserTrustors",
    "signature": "getUserTrustors(userId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TrustorEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUserTrustorsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUserTrustors(userId, opts, callback);"
  },
  "getusers": {
    "operationId": "getusers",
    "functionName": "getUsers",
    "signature": "getUsers(pageSize, pageNumber, id, jabberId, sortOrder, expand, integrationPresenceSource, state)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jabberId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUsersRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'id': [\"id_example\"], // [String] | A list of user IDs to fetch by bulk\n  'jabberId': [\"jabberId_example\"], // [String] | A list of jabberIds to fetch by bulk (cannot be used with the \\\"id\\\" parameter)\n  'sortOrder': \"ASC\", // String | Ascending or descending sort order\n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand\n  'integrationPresenceSource': \"integrationPresenceSource_example\", // String | Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \\\"expand\\\". When using this parameter the maximum number of users that can be returned is 100.\n  'state': \"active\" // String | Only list users of this state\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUsers(opts, callback);"
  },
  "getusersdevelopmentactivities": {
    "operationId": "getusersdevelopmentactivities",
    "functionName": "getUsersDevelopmentActivities",
    "signature": "getUsersDevelopmentActivities(userId, moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
    "parameters": [
      {
        "name": "userId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "relationship",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DevelopmentActivityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUsersDevelopmentActivitiesRequest();\n\nlet opts = { \n  'userId': [\"userId_example\"], // [String] | Specifies the list of user IDs to be queried, up to 100 user IDs. It searches for any relationship for the userId.\n  'moduleId': \"moduleId_example\", // String | Specifies the ID of the learning module.\n  'interval': \"interval_example\", // String | Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'completionInterval': \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'overdue': \"Any\", // String | Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"Desc\", // String | Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)\n  'types': [\"types_example\"], // [String] | Specifies the activity types.\n  'statuses': [\"statuses_example\"], // [String] | Specifies the activity statuses to filter by\n  'relationship': [\"relationship_example\"] // [String] | Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUsersDevelopmentActivities(opts, callback);"
  },
  "getusersdevelopmentactivitiesme": {
    "operationId": "getusersdevelopmentactivitiesme",
    "functionName": "getUsersDevelopmentActivitiesMe",
    "signature": "getUsersDevelopmentActivitiesMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "relationship",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DevelopmentActivityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUsersDevelopmentActivitiesMeRequest();\n\nlet opts = { \n  'moduleId': \"moduleId_example\", // String | Specifies the ID of the learning module.\n  'interval': \"interval_example\", // String | Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'completionInterval': \"completionInterval_example\", // String | Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\n  'overdue': \"Any\", // String | Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned\n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1, // Number | Page number\n  'sortOrder': \"Desc\", // String | Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)\n  'types': [\"types_example\"], // [String] | Specifies the activity types.\n  'statuses': [\"statuses_example\"], // [String] | Specifies the activity statuses to filter by\n  'relationship': [\"relationship_example\"] // [String] | Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUsersDevelopmentActivitiesMe(opts, callback);"
  },
  "getusersdevelopmentactivity": {
    "operationId": "getusersdevelopmentactivity",
    "functionName": "getUsersDevelopmentActivity",
    "signature": "getUsersDevelopmentActivity(activityId, type)",
    "parameters": [
      {
        "name": "activityId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "type",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DevelopmentActivity",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUsersDevelopmentActivityRequest();\n\nlet activityId = \"activityId_example\"; // String | Specifies the activity ID, maps to either assignment or appointment ID\nlet type = \"type_example\"; // String | Specifies the activity type.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUsersDevelopmentActivity(activityId, type, callback);"
  },
  "getusersme": {
    "operationId": "getusersme",
    "functionName": "getUsersMe",
    "signature": "getUsersMe(expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserMe",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetUsersMeRequest();\n\nlet opts = { \n  'expand': [\"expand_example\"], // [String] | Which fields, if any, to expand.\n  'integrationPresenceSource': \"integrationPresenceSource_example\" // String | Get your presence for a given integration. This parameter will only be used when presence is provided as an \\\"expand\\\".\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getUsersMe(opts, callback);"
  },
  "patchuser": {
    "operationId": "patchuser",
    "functionName": "patchUser",
    "signature": "patchUser(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | User\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUser(userId, body, callback);"
  },
  "patchusercallforwarding": {
    "operationId": "patchusercallforwarding",
    "functionName": "patchUserCallforwarding",
    "signature": "patchUserCallforwarding(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUserCallforwardingRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Call forwarding\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUserCallforwarding(userId, body, callback);"
  },
  "patchusersbulk": {
    "operationId": "patchusersbulk",
    "functionName": "patchUsersBulk",
    "signature": "patchUsersBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchUsersBulkRequest();\n\nlet body = [{}]; // Object | Users\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchUsersBulk(body, callback);"
  },
  "postuserinvite": {
    "operationId": "postuserinvite",
    "functionName": "postUserInvite",
    "signature": "postUserInvite(userId, force)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUserInviteRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet opts = { \n  'force': false // Boolean | Resend the invitation even if one is already outstanding\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postUserInvite(userId, opts, callback);"
  },
  "postuserpassword": {
    "operationId": "postuserpassword",
    "functionName": "postUserPassword",
    "signature": "postUserPassword(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUserPasswordRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Password\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postUserPassword(userId, body, callback);"
  },
  "postusers": {
    "operationId": "postusers",
    "functionName": "postUsers",
    "signature": "postUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "User",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUsersRequest();\n\nlet body = {}; // Object | User\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUsers(body, callback);"
  },
  "postusersdevelopmentactivitiesaggregatesquery": {
    "operationId": "postusersdevelopmentactivitiesaggregatesquery",
    "functionName": "postUsersDevelopmentActivitiesAggregatesQuery",
    "signature": "postUsersDevelopmentActivitiesAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "DevelopmentActivityAggregateResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUsersDevelopmentActivitiesAggregatesQueryRequest();\n\nlet body = {}; // Object | Aggregate Request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postUsersDevelopmentActivitiesAggregatesQuery(body, callback);"
  },
  "postusersmepassword": {
    "operationId": "postusersmepassword",
    "functionName": "postUsersMePassword",
    "signature": "postUsersMePassword(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostUsersMePasswordRequest();\n\nlet body = {}; // Object | Password\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postUsersMePassword(body, callback);"
  },
  "putusercallforwarding": {
    "operationId": "putusercallforwarding",
    "functionName": "putUserCallforwarding",
    "signature": "putUserCallforwarding(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserCallforwardingRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Call forwarding\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserCallforwarding(userId, body, callback);"
  },
  "putuseroutofoffice": {
    "operationId": "putuseroutofoffice",
    "functionName": "putUserOutofoffice",
    "signature": "putUserOutofoffice(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "OutOfOffice",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserOutofofficeRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The updated OutOffOffice\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserOutofoffice(userId, body, callback);"
  },
  "putuserprofileskills": {
    "operationId": "putuserprofileskills",
    "functionName": "putUserProfileskills",
    "signature": "putUserProfileskills(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "['String']",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserProfileskillsRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = [{}]; // Object | Skills\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserProfileskills(userId, body, callback);"
  },
  "putuserroutingstatus": {
    "operationId": "putuserroutingstatus",
    "functionName": "putUserRoutingstatus",
    "signature": "putUserRoutingstatus(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "RoutingStatus",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserRoutingstatusRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | Routing Status\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserRoutingstatus(userId, body, callback);"
  },
  "putuserstate": {
    "operationId": "putuserstate",
    "functionName": "putUserState",
    "signature": "putUserState(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UserState",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserStateRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | User\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putUserState(userId, body, callback);"
  },
  "putuserstationassociatedstationstationid": {
    "operationId": "putuserstationassociatedstationstationid",
    "functionName": "putUserStationAssociatedstationStationId",
    "signature": "putUserStationAssociatedstationStationId(userId, stationId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserStationAssociatedstationStationIdRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet stationId = \"stationId_example\"; // String | stationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.putUserStationAssociatedstationStationId(userId, stationId, callback);"
  },
  "putuserstationdefaultstationstationid": {
    "operationId": "putuserstationdefaultstationstationid",
    "functionName": "putUserStationDefaultstationStationId",
    "signature": "putUserStationDefaultstationStationId(userId, stationId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutUserStationDefaultstationStationIdRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet stationId = \"stationId_example\"; // String | stationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.putUserStationDefaultstationStationId(userId, stationId, callback);"
  },
  "getdate": {
    "operationId": "getdate",
    "functionName": "getDate",
    "signature": "getDate()",
    "return": "ServerDate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetDateRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getDate(callback);"
  },
  "getipranges": {
    "operationId": "getipranges",
    "functionName": "getIpranges",
    "signature": "getIpranges()",
    "return": "IpAddressRangeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetIprangesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getIpranges(callback);"
  },
  "gettimezones": {
    "operationId": "gettimezones",
    "functionName": "getTimezones",
    "signature": "getTimezones(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "TimeZoneEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetTimezonesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getTimezones(opts, callback);"
  },
  "postcertificatedetails": {
    "operationId": "postcertificatedetails",
    "functionName": "postCertificateDetails",
    "signature": "postCertificateDetails(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ParsedCertificate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostCertificateDetailsRequest();\n\nlet body = {}; // Object | Certificate\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postCertificateDetails(body, callback);"
  },
  "deletevoicemailmessage": {
    "operationId": "deletevoicemailmessage",
    "functionName": "deleteVoicemailMessage",
    "signature": "deleteVoicemailMessage(messageId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteVoicemailMessageRequest();\n\nlet messageId = \"messageId_example\"; // String | Message ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteVoicemailMessage(messageId, callback);"
  },
  "deletevoicemailmessages": {
    "operationId": "deletevoicemailmessages",
    "functionName": "deleteVoicemailMessages",
    "signature": "deleteVoicemailMessages()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteVoicemailMessagesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteVoicemailMessages(callback);"
  },
  "getvoicemailgroupmailbox": {
    "operationId": "getvoicemailgroupmailbox",
    "functionName": "getVoicemailGroupMailbox",
    "signature": "getVoicemailGroupMailbox(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailMailboxInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailGroupMailboxRequest();\n\nlet groupId = \"groupId_example\"; // String | groupId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailGroupMailbox(groupId, callback);"
  },
  "getvoicemailgroupmessages": {
    "operationId": "getvoicemailgroupmessages",
    "functionName": "getVoicemailGroupMessages",
    "signature": "getVoicemailGroupMessages(groupId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailGroupMessagesRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailGroupMessages(groupId, opts, callback);"
  },
  "getvoicemailgrouppolicy": {
    "operationId": "getvoicemailgrouppolicy",
    "functionName": "getVoicemailGroupPolicy",
    "signature": "getVoicemailGroupPolicy(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailGroupPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailGroupPolicyRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailGroupPolicy(groupId, callback);"
  },
  "getvoicemailmailbox": {
    "operationId": "getvoicemailmailbox",
    "functionName": "getVoicemailMailbox",
    "signature": "getVoicemailMailbox()",
    "return": "VoicemailMailboxInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailMailboxRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailMailbox(callback);"
  },
  "getvoicemailmemailbox": {
    "operationId": "getvoicemailmemailbox",
    "functionName": "getVoicemailMeMailbox",
    "signature": "getVoicemailMeMailbox()",
    "return": "VoicemailMailboxInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailMeMailboxRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailMeMailbox(callback);"
  },
  "getvoicemailmemessages": {
    "operationId": "getvoicemailmemessages",
    "functionName": "getVoicemailMeMessages",
    "signature": "getVoicemailMeMessages(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailMeMessagesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailMeMessages(opts, callback);"
  },
  "getvoicemailmepolicy": {
    "operationId": "getvoicemailmepolicy",
    "functionName": "getVoicemailMePolicy",
    "signature": "getVoicemailMePolicy()",
    "return": "VoicemailUserPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailMePolicyRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailMePolicy(callback);"
  },
  "getvoicemailmessage": {
    "operationId": "getvoicemailmessage",
    "functionName": "getVoicemailMessage",
    "signature": "getVoicemailMessage(messageId, expand)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailMessageRequest();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | If the caller is a known user, which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailMessage(messageId, opts, callback);"
  },
  "getvoicemailmessagemedia": {
    "operationId": "getvoicemailmessagemedia",
    "functionName": "getVoicemailMessageMedia",
    "signature": "getVoicemailMessageMedia(messageId, formatId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "VoicemailMediaInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailMessageMediaRequest();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet opts = { \n  'formatId': \"WEBM\" // String | The desired media format.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailMessageMedia(messageId, opts, callback);"
  },
  "getvoicemailmessages": {
    "operationId": "getvoicemailmessages",
    "functionName": "getVoicemailMessages",
    "signature": "getVoicemailMessages(ids, expand)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailMessagesRequest();\n\nlet opts = { \n  'ids': \"ids_example\", // String | An optional comma separated list of VoicemailMessage ids\n  'expand': [\"expand_example\"] // [String] | If the caller is a known user, which fields, if any, to expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailMessages(opts, callback);"
  },
  "getvoicemailpolicy": {
    "operationId": "getvoicemailpolicy",
    "functionName": "getVoicemailPolicy",
    "signature": "getVoicemailPolicy()",
    "return": "VoicemailOrganizationPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailPolicyRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailPolicy(callback);"
  },
  "getvoicemailqueuemessages": {
    "operationId": "getvoicemailqueuemessages",
    "functionName": "getVoicemailQueueMessages",
    "signature": "getVoicemailQueueMessages(queueId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailQueueMessagesRequest();\n\nlet queueId = \"queueId_example\"; // String | Queue ID\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailQueueMessages(queueId, opts, callback);"
  },
  "getvoicemailuserpolicy": {
    "operationId": "getvoicemailuserpolicy",
    "functionName": "getVoicemailUserpolicy",
    "signature": "getVoicemailUserpolicy(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetVoicemailUserpolicyRequest();\n\nlet userId = \"userId_example\"; // String | User ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getVoicemailUserpolicy(userId, callback);"
  },
  "patchvoicemailgrouppolicy": {
    "operationId": "patchvoicemailgrouppolicy",
    "functionName": "patchVoicemailGroupPolicy",
    "signature": "patchVoicemailGroupPolicy(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailGroupPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchVoicemailGroupPolicyRequest();\n\nlet groupId = \"groupId_example\"; // String | Group ID\nlet body = {}; // Object | The group's voicemail policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchVoicemailGroupPolicy(groupId, body, callback);"
  },
  "patchvoicemailmepolicy": {
    "operationId": "patchvoicemailmepolicy",
    "functionName": "patchVoicemailMePolicy",
    "signature": "patchVoicemailMePolicy(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchVoicemailMePolicyRequest();\n\nlet body = {}; // Object | The user's voicemail policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchVoicemailMePolicy(body, callback);"
  },
  "patchvoicemailmessage": {
    "operationId": "patchvoicemailmessage",
    "functionName": "patchVoicemailMessage",
    "signature": "patchVoicemailMessage(messageId, body)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchVoicemailMessageRequest();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet body = {}; // Object | VoicemailMessage\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchVoicemailMessage(messageId, body, callback);"
  },
  "patchvoicemailuserpolicy": {
    "operationId": "patchvoicemailuserpolicy",
    "functionName": "patchVoicemailUserpolicy",
    "signature": "patchVoicemailUserpolicy(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchVoicemailUserpolicyRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The user's voicemail policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchVoicemailUserpolicy(userId, body, callback);"
  },
  "postvoicemailmessages": {
    "operationId": "postvoicemailmessages",
    "functionName": "postVoicemailMessages",
    "signature": "postVoicemailMessages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "VoicemailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostVoicemailMessagesRequest();\n\nlet opts = { \n  'body': {} // Object | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postVoicemailMessages(opts, callback);"
  },
  "putvoicemailmessage": {
    "operationId": "putvoicemailmessage",
    "functionName": "putVoicemailMessage",
    "signature": "putVoicemailMessage(messageId, body)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutVoicemailMessageRequest();\n\nlet messageId = \"messageId_example\"; // String | Message ID\nlet body = {}; // Object | VoicemailMessage\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putVoicemailMessage(messageId, body, callback);"
  },
  "putvoicemailpolicy": {
    "operationId": "putvoicemailpolicy",
    "functionName": "putVoicemailPolicy",
    "signature": "putVoicemailPolicy(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailOrganizationPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutVoicemailPolicyRequest();\n\nlet body = {}; // Object | Policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putVoicemailPolicy(body, callback);"
  },
  "putvoicemailuserpolicy": {
    "operationId": "putvoicemailuserpolicy",
    "functionName": "putVoicemailUserpolicy",
    "signature": "putVoicemailUserpolicy(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutVoicemailUserpolicyRequest();\n\nlet userId = \"userId_example\"; // String | User ID\nlet body = {}; // Object | The user's voicemail policy\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putVoicemailUserpolicy(userId, body, callback);"
  },
  "deletewebchatdeployment": {
    "operationId": "deletewebchatdeployment",
    "functionName": "deleteWebchatDeployment",
    "signature": "deleteWebchatDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWebchatDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | Deployment Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWebchatDeployment(deploymentId, callback);"
  },
  "deletewebchatguestconversationmember": {
    "operationId": "deletewebchatguestconversationmember",
    "functionName": "deleteWebchatGuestConversationMember",
    "signature": "deleteWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .DeleteWebchatGuestConversationMemberRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWebchatGuestConversationMember(conversationId, memberId, callback);"
  },
  "deletewebchatsettings": {
    "operationId": "deletewebchatsettings",
    "functionName": "deleteWebchatSettings",
    "signature": "deleteWebchatSettings()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWebchatSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWebchatSettings(callback);"
  },
  "getwebchatdeployment": {
    "operationId": "getwebchatdeployment",
    "functionName": "getWebchatDeployment",
    "signature": "getWebchatDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebchatDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | Deployment Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatDeployment(deploymentId, callback);"
  },
  "getwebchatdeployments": {
    "operationId": "getwebchatdeployments",
    "functionName": "getWebchatDeployments",
    "signature": "getWebchatDeployments()",
    "return": "WebChatDeploymentEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebchatDeploymentsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatDeployments(callback);"
  },
  "getwebchatguestconversationmediarequest": {
    "operationId": "getwebchatguestconversationmediarequest",
    "functionName": "getWebchatGuestConversationMediarequest",
    "signature": "getWebchatGuestConversationMediarequest(conversationId, mediaRequestId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .GetWebchatGuestConversationMediarequestRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet mediaRequestId = \"mediaRequestId_example\"; // String | mediaRequestId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMediarequest(conversationId, mediaRequestId, callback);"
  },
  "getwebchatguestconversationmediarequests": {
    "operationId": "getwebchatguestconversationmediarequests",
    "functionName": "getWebchatGuestConversationMediarequests",
    "signature": "getWebchatGuestConversationMediarequests(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequestEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .GetWebchatGuestConversationMediarequestsRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMediarequests(conversationId, callback);"
  },
  "getwebchatguestconversationmember": {
    "operationId": "getwebchatguestconversationmember",
    "functionName": "getWebchatGuestConversationMember",
    "signature": "getWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMemberInfo",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .GetWebchatGuestConversationMemberRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMember(conversationId, memberId, callback);"
  },
  "getwebchatguestconversationmembers": {
    "operationId": "getwebchatguestconversationmembers",
    "functionName": "getWebchatGuestConversationMembers",
    "signature": "getWebchatGuestConversationMembers(conversationId, pageSize, pageNumber, excludeDisconnectedMembers)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "excludeDisconnectedMembers",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WebChatMemberInfoEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .GetWebchatGuestConversationMembersRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  'pageSize': 25, // Number | The number of entries to return per page, or omitted for the default.\n  'pageNumber': 1, // Number | The page number to return, or omitted for the first page.\n  'excludeDisconnectedMembers': false // Boolean | If true, the results will not contain members who have a DISCONNECTED state.\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMembers(conversationId, opts, callback);"
  },
  "getwebchatguestconversationmessage": {
    "operationId": "getwebchatguestconversationmessage",
    "functionName": "getWebchatGuestConversationMessage",
    "signature": "getWebchatGuestConversationMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .GetWebchatGuestConversationMessageRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet messageId = \"messageId_example\"; // String | messageId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMessage(conversationId, messageId, callback);"
  },
  "getwebchatguestconversationmessages": {
    "operationId": "getwebchatguestconversationmessages",
    "functionName": "getWebchatGuestConversationMessages",
    "signature": "getWebchatGuestConversationMessages(conversationId, after, before, sortOrder, maxResults)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "maxResults",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WebChatMessageEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .GetWebchatGuestConversationMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet opts = { \n  'after': \"after_example\", // String | If available, get the messages chronologically after the id of this message\n  'before': \"before_example\", // String | If available, get the messages chronologically before the id of this message\n  'sortOrder': \"ascending\", // String | Sort order\n  'maxResults': 100 // Number | Limit the returned number of messages, up to a maximum of 100\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatGuestConversationMessages(conversationId, opts, callback);"
  },
  "getwebchatsettings": {
    "operationId": "getwebchatsettings",
    "functionName": "getWebchatSettings",
    "signature": "getWebchatSettings()",
    "return": "WebChatSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebchatSettingsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebchatSettings(callback);"
  },
  "patchwebchatguestconversationmediarequest": {
    "operationId": "patchwebchatguestconversationmediarequest",
    "functionName": "patchWebchatGuestConversationMediarequest",
    "signature": "patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .PatchWebchatGuestConversationMediarequestRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet mediaRequestId = \"mediaRequestId_example\"; // String | mediaRequestId\nlet body = {}; // Object | Request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body, callback);"
  },
  "postwebchatdeployments": {
    "operationId": "postwebchatdeployments",
    "functionName": "postWebchatDeployments",
    "signature": "postWebchatDeployments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWebchatDeploymentsRequest();\n\nlet body = {}; // Object | Deployment\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebchatDeployments(body, callback);"
  },
  "postwebchatguestconversationmembermessages": {
    "operationId": "postwebchatguestconversationmembermessages",
    "functionName": "postWebchatGuestConversationMemberMessages",
    "signature": "postWebchatGuestConversationMemberMessages(conversationId, memberId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .PostWebchatGuestConversationMemberMessagesRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\nlet body = {}; // Object | Message\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebchatGuestConversationMemberMessages(conversationId, memberId, body, callback);"
  },
  "postwebchatguestconversationmembertyping": {
    "operationId": "postwebchatguestconversationmembertyping",
    "functionName": "postWebchatGuestConversationMemberTyping",
    "signature": "postWebchatGuestConversationMemberTyping(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatTyping",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Configure API key authorization: Guest Chat JWT\nlet Guest Chat JWT = .ApiClient.instance.authentications['Guest Chat JWT'];\nGuest Chat JWT.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to void)\n//Guest Chat JWT.apiKeyPrefix = 'Token';\n\nlet apiInstance = new .PostWebchatGuestConversationMemberTypingRequest();\n\nlet conversationId = \"conversationId_example\"; // String | conversationId\nlet memberId = \"memberId_example\"; // String | memberId\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebchatGuestConversationMemberTyping(conversationId, memberId, callback);"
  },
  "postwebchatguestconversations": {
    "operationId": "postwebchatguestconversations",
    "functionName": "postWebchatGuestConversations",
    "signature": "postWebchatGuestConversations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "CreateWebChatConversationResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .PostWebchatGuestConversationsRequest();\n\nlet body = {}; // Object | CreateConversationRequest\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebchatGuestConversations(body, callback);"
  },
  "putwebchatdeployment": {
    "operationId": "putwebchatdeployment",
    "functionName": "putWebchatDeployment",
    "signature": "putWebchatDeployment(deploymentId, body)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutWebchatDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | Deployment Id\nlet body = {}; // Object | Deployment\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putWebchatDeployment(deploymentId, body, callback);"
  },
  "putwebchatsettings": {
    "operationId": "putwebchatsettings",
    "functionName": "putWebchatSettings",
    "signature": "putWebchatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebChatSettings",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutWebchatSettingsRequest();\n\nlet body = {}; // Object | webChatSettings\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putWebchatSettings(body, callback);"
  },
  "deletewebdeploymentsconfiguration": {
    "operationId": "deletewebdeploymentsconfiguration",
    "functionName": "deleteWebdeploymentsConfiguration",
    "signature": "deleteWebdeploymentsConfiguration(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWebdeploymentsConfigurationRequest();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWebdeploymentsConfiguration(configurationId, callback);"
  },
  "deletewebdeploymentsdeployment": {
    "operationId": "deletewebdeploymentsdeployment",
    "functionName": "deleteWebdeploymentsDeployment",
    "signature": "deleteWebdeploymentsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWebdeploymentsDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | The deployment ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWebdeploymentsDeployment(deploymentId, callback);"
  },
  "getwebdeploymentsconfigurationversion": {
    "operationId": "getwebdeploymentsconfigurationversion",
    "functionName": "getWebdeploymentsConfigurationVersion",
    "signature": "getWebdeploymentsConfigurationVersion(configurationId, versionId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebdeploymentsConfigurationVersionRequest();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\nlet versionId = \"versionId_example\"; // String | The version of the configuration to get\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebdeploymentsConfigurationVersion(configurationId, versionId, callback);"
  },
  "getwebdeploymentsconfigurationversions": {
    "operationId": "getwebdeploymentsconfigurationversions",
    "functionName": "getWebdeploymentsConfigurationVersions",
    "signature": "getWebdeploymentsConfigurationVersions(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebdeploymentsConfigurationVersionsRequest();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebdeploymentsConfigurationVersions(configurationId, callback);"
  },
  "getwebdeploymentsconfigurationversionsdraft": {
    "operationId": "getwebdeploymentsconfigurationversionsdraft",
    "functionName": "getWebdeploymentsConfigurationVersionsDraft",
    "signature": "getWebdeploymentsConfigurationVersionsDraft(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebdeploymentsConfigurationVersionsDraftRequest();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebdeploymentsConfigurationVersionsDraft(configurationId, callback);"
  },
  "getwebdeploymentsconfigurations": {
    "operationId": "getwebdeploymentsconfigurations",
    "functionName": "getWebdeploymentsConfigurations",
    "signature": "getWebdeploymentsConfigurations(showOnlyPublished)",
    "parameters": [
      {
        "name": "showOnlyPublished",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WebDeploymentConfigurationVersionEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebdeploymentsConfigurationsRequest();\n\nlet opts = { \n  'showOnlyPublished': false // Boolean | Get only configuration drafts with published versions\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebdeploymentsConfigurations(opts, callback);"
  },
  "getwebdeploymentsdeployment": {
    "operationId": "getwebdeploymentsdeployment",
    "functionName": "getWebdeploymentsDeployment",
    "signature": "getWebdeploymentsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebdeploymentsDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | The deployment ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebdeploymentsDeployment(deploymentId, callback);"
  },
  "getwebdeploymentsdeployments": {
    "operationId": "getwebdeploymentsdeployments",
    "functionName": "getWebdeploymentsDeployments",
    "signature": "getWebdeploymentsDeployments()",
    "return": "WebDeploymentEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWebdeploymentsDeploymentsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebdeploymentsDeployments(callback);"
  },
  "postwebdeploymentsconfigurationversionsdraftpublish": {
    "operationId": "postwebdeploymentsconfigurationversionsdraftpublish",
    "functionName": "postWebdeploymentsConfigurationVersionsDraftPublish",
    "signature": "postWebdeploymentsConfigurationVersionsDraftPublish(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWebdeploymentsConfigurationVersionsDraftPublishRequest();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebdeploymentsConfigurationVersionsDraftPublish(configurationId, callback);"
  },
  "postwebdeploymentsconfigurations": {
    "operationId": "postwebdeploymentsconfigurations",
    "functionName": "postWebdeploymentsConfigurations",
    "signature": "postWebdeploymentsConfigurations(configurationVersion)",
    "parameters": [
      {
        "name": "configurationVersion",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWebdeploymentsConfigurationsRequest();\n\nlet configurationVersion = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebdeploymentsConfigurations(configurationVersion, callback);"
  },
  "postwebdeploymentsdeployments": {
    "operationId": "postwebdeploymentsdeployments",
    "functionName": "postWebdeploymentsDeployments",
    "signature": "postWebdeploymentsDeployments(deployment)",
    "parameters": [
      {
        "name": "deployment",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWebdeploymentsDeploymentsRequest();\n\nlet deployment = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWebdeploymentsDeployments(deployment, callback);"
  },
  "putwebdeploymentsconfigurationversionsdraft": {
    "operationId": "putwebdeploymentsconfigurationversionsdraft",
    "functionName": "putWebdeploymentsConfigurationVersionsDraft",
    "signature": "putWebdeploymentsConfigurationVersionsDraft(configurationId, configurationVersion)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "configurationVersion",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutWebdeploymentsConfigurationVersionsDraftRequest();\n\nlet configurationId = \"configurationId_example\"; // String | The configuration version ID\nlet configurationVersion = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putWebdeploymentsConfigurationVersionsDraft(configurationId, configurationVersion, callback);"
  },
  "putwebdeploymentsdeployment": {
    "operationId": "putwebdeploymentsdeployment",
    "functionName": "putWebdeploymentsDeployment",
    "signature": "putWebdeploymentsDeployment(deploymentId, deployment)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deployment",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutWebdeploymentsDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | The deployment ID\nlet deployment = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putWebdeploymentsDeployment(deploymentId, deployment, callback);"
  },
  "getwebmessagingmessages": {
    "operationId": "getwebmessagingmessages",
    "functionName": "getWebmessagingMessages",
    "signature": "getWebmessagingMessages(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      }
    ],
    "return": "WebMessagingMessageEntityList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .GetWebmessagingMessagesRequest();\n\nlet opts = { \n  'pageSize': 25, // Number | Page size\n  'pageNumber': 1 // Number | Page number\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWebmessagingMessages(opts, callback);"
  },
  "deletewidgetsdeployment": {
    "operationId": "deletewidgetsdeployment",
    "functionName": "deleteWidgetsDeployment",
    "signature": "deleteWidgetsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWidgetsDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | Widget Config Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWidgetsDeployment(deploymentId, callback);"
  },
  "getwidgetsdeployment": {
    "operationId": "getwidgetsdeployment",
    "functionName": "getWidgetsDeployment",
    "signature": "getWidgetsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWidgetsDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | Widget Config Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWidgetsDeployment(deploymentId, callback);"
  },
  "getwidgetsdeployments": {
    "operationId": "getwidgetsdeployments",
    "functionName": "getWidgetsDeployments",
    "signature": "getWidgetsDeployments()",
    "return": "WidgetDeploymentEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWidgetsDeploymentsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWidgetsDeployments(callback);"
  },
  "postwidgetsdeployments": {
    "operationId": "postwidgetsdeployments",
    "functionName": "postWidgetsDeployments",
    "signature": "postWidgetsDeployments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWidgetsDeploymentsRequest();\n\nlet body = {}; // Object | Deployment\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWidgetsDeployments(body, callback);"
  },
  "putwidgetsdeployment": {
    "operationId": "putwidgetsdeployment",
    "functionName": "putWidgetsDeployment",
    "signature": "putWidgetsDeployment(deploymentId, body)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutWidgetsDeploymentRequest();\n\nlet deploymentId = \"deploymentId_example\"; // String | Widget Config Id\nlet body = {}; // Object | Deployment\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putWidgetsDeployment(deploymentId, body, callback);"
  },
  "deleteworkforcemanagementbusinessunit": {
    "operationId": "deleteworkforcemanagementbusinessunit",
    "functionName": "deleteWorkforcemanagementBusinessunit",
    "signature": "deleteWorkforcemanagementBusinessunit(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementBusinessunitRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementBusinessunit(businessUnitId, callback);"
  },
  "deleteworkforcemanagementbusinessunitactivitycode": {
    "operationId": "deleteworkforcemanagementbusinessunitactivitycode",
    "functionName": "deleteWorkforcemanagementBusinessunitActivitycode",
    "signature": "deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementBusinessunitActivitycodeRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId = \"activityCodeId_example\"; // String | The ID of the activity code to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, callback);"
  },
  "deleteworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "deleteworkforcemanagementbusinessunitplanninggroup",
    "functionName": "deleteWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementBusinessunitPlanninggroupRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet planningGroupId = \"planningGroupId_example\"; // String | The ID of a planning group to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, callback);"
  },
  "deleteworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "deleteworkforcemanagementbusinessunitschedulingrun",
    "functionName": "deleteWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementBusinessunitSchedulingRunRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, callback);"
  },
  "deleteworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "deleteworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "deleteWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementBusinessunitServicegoaltemplateRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet serviceGoalTemplateId = \"serviceGoalTemplateId_example\"; // String | The ID of the service goal template to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, callback);"
  },
  "deleteworkforcemanagementbusinessunitweekschedule": {
    "operationId": "deleteworkforcemanagementbusinessunitweekschedule",
    "functionName": "deleteWorkforcemanagementBusinessunitWeekSchedule",
    "signature": "deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementBusinessunitWeekScheduleRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, callback);"
  },
  "deleteworkforcemanagementbusinessunitweekshorttermforecast": {
    "operationId": "deleteworkforcemanagementbusinessunitweekshorttermforecast",
    "functionName": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast",
    "signature": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementBusinessunitWeekShorttermforecastRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, callback);"
  },
  "deleteworkforcemanagementcalendarurlics": {
    "operationId": "deleteworkforcemanagementcalendarurlics",
    "functionName": "deleteWorkforcemanagementCalendarUrlIcs",
    "signature": "deleteWorkforcemanagementCalendarUrlIcs()",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementCalendarUrlIcsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementCalendarUrlIcs(callback);"
  },
  "deleteworkforcemanagementmanagementunit": {
    "operationId": "deleteworkforcemanagementmanagementunit",
    "functionName": "deleteWorkforcemanagementManagementunit",
    "signature": "deleteWorkforcemanagementManagementunit(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementManagementunitRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementManagementunit(managementUnitId, callback);"
  },
  "deleteworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "deleteworkforcemanagementmanagementunittimeofflimit",
    "functionName": "deleteWorkforcemanagementManagementunitTimeofflimit",
    "signature": "deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementManagementunitTimeofflimitRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The ID of the time off limit object to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, callback);"
  },
  "deleteworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "deleteworkforcemanagementmanagementunittimeoffplan",
    "functionName": "deleteWorkforcemanagementManagementunitTimeoffplan",
    "signature": "deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementManagementunitTimeoffplanRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID.\nlet timeOffPlanId = \"timeOffPlanId_example\"; // String | The ID of the time off plan to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, callback);"
  },
  "deleteworkforcemanagementmanagementunitworkplan": {
    "operationId": "deleteworkforcemanagementmanagementunitworkplan",
    "functionName": "deleteWorkforcemanagementManagementunitWorkplan",
    "signature": "deleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementManagementunitWorkplanRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to delete\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, callback);"
  },
  "deleteworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "deleteworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "deleteWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .DeleteWorkforcemanagementManagementunitWorkplanrotationRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to be deleted\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, callback);"
  },
  "getworkforcemanagementadherence": {
    "operationId": "getworkforcemanagementadherence",
    "functionName": "getWorkforcemanagementAdherence",
    "signature": "getWorkforcemanagementAdherence(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[UserScheduleAdherence]",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementAdherenceRequest();\n\nlet userId = [\"userId_example\"]; // [String] | User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementAdherence(userId, callback);"
  },
  "getworkforcemanagementadhocmodelingjob": {
    "operationId": "getworkforcemanagementadhocmodelingjob",
    "functionName": "getWorkforcemanagementAdhocmodelingjob",
    "signature": "getWorkforcemanagementAdhocmodelingjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ModelingStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementAdhocmodelingjobRequest();\n\nlet jobId = \"jobId_example\"; // String | The id of the modeling job\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementAdhocmodelingjob(jobId, callback);"
  },
  "getworkforcemanagementagentmanagementunit": {
    "operationId": "getworkforcemanagementagentmanagementunit",
    "functionName": "getWorkforcemanagementAgentManagementunit",
    "signature": "getWorkforcemanagementAgentManagementunit(agentId)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentManagementUnitReference",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementAgentManagementunitRequest();\n\nlet agentId = \"agentId_example\"; // String | The ID of the agent to look up\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementAgentManagementunit(agentId, callback);"
  },
  "getworkforcemanagementagentsmemanagementunit": {
    "operationId": "getworkforcemanagementagentsmemanagementunit",
    "functionName": "getWorkforcemanagementAgentsMeManagementunit",
    "signature": "getWorkforcemanagementAgentsMeManagementunit()",
    "return": "AgentManagementUnitReference",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementAgentsMeManagementunitRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementAgentsMeManagementunit(callback);"
  },
  "getworkforcemanagementbusinessunit": {
    "operationId": "getworkforcemanagementbusinessunit",
    "functionName": "getWorkforcemanagementBusinessunit",
    "signature": "getWorkforcemanagementBusinessunit(businessUnitId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BusinessUnit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunit(businessUnitId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitactivitycode": {
    "operationId": "getworkforcemanagementbusinessunitactivitycode",
    "functionName": "getWorkforcemanagementBusinessunitActivitycode",
    "signature": "getWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitActivitycodeRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId = \"activityCodeId_example\"; // String | The ID of the activity code to fetch\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, callback);"
  },
  "getworkforcemanagementbusinessunitactivitycodes": {
    "operationId": "getworkforcemanagementbusinessunitactivitycodes",
    "functionName": "getWorkforcemanagementBusinessunitActivitycodes",
    "signature": "getWorkforcemanagementBusinessunitActivitycodes(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BusinessUnitActivityCodeListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitActivitycodesRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitActivitycodes(businessUnitId, callback);"
  },
  "getworkforcemanagementbusinessunitintradayplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitintradayplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitIntradayPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, _date)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "_date",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmIntradayPlanningGroupListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitIntradayPlanninggroupsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit\nlet _date = \"2013-10-20\"; // String | yyyy-MM-dd date string interpreted in the configured business unit time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, _date, callback);"
  },
  "getworkforcemanagementbusinessunitmanagementunits": {
    "operationId": "getworkforcemanagementbusinessunitmanagementunits",
    "functionName": "getWorkforcemanagementBusinessunitManagementunits",
    "signature": "getWorkforcemanagementBusinessunitManagementunits(businessUnitId, feature, divisionId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitManagementunitsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  'feature': \"feature_example\", // String | \n  'divisionId': \"divisionId_example\" // String | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitManagementunits(businessUnitId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "getworkforcemanagementbusinessunitplanninggroup",
    "functionName": "getWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PlanningGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitPlanninggroupRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet planningGroupId = \"planningGroupId_example\"; // String | The ID of a planning group to fetch\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, callback);"
  },
  "getworkforcemanagementbusinessunitplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PlanningGroupList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitPlanninggroupsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, callback);"
  },
  "getworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "getworkforcemanagementbusinessunitschedulingrun",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuScheduleRun",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitSchedulingRunRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, callback);"
  },
  "getworkforcemanagementbusinessunitschedulingrunresult": {
    "operationId": "getworkforcemanagementbusinessunitschedulingrunresult",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRunResult",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, managementUnitIds, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "managementUnitIds",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "BuRescheduleResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitSchedulingRunResultRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\nlet managementUnitIds = [\"managementUnitIds_example\"]; // [String] | The IDs of the management units for which to fetch the reschedule results\nlet expand = [\"expand_example\"]; // [String] | The fields to expand. Omitting will return an empty response\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, managementUnitIds, expand, callback);"
  },
  "getworkforcemanagementbusinessunitschedulingruns": {
    "operationId": "getworkforcemanagementbusinessunitschedulingruns",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRuns",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuScheduleRunListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitSchedulingRunsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId, callback);"
  },
  "getworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "getworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitServicegoaltemplateRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet serviceGoalTemplateId = \"serviceGoalTemplateId_example\"; // String | The ID of a service goal template to fetch\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, callback);"
  },
  "getworkforcemanagementbusinessunitservicegoaltemplates": {
    "operationId": "getworkforcemanagementbusinessunitservicegoaltemplates",
    "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplates",
    "signature": "getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ServiceGoalTemplateList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitServicegoaltemplatesRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, callback);"
  },
  "getworkforcemanagementbusinessunitweekschedule": {
    "operationId": "getworkforcemanagementbusinessunitweekschedule",
    "functionName": "getWorkforcemanagementBusinessunitWeekSchedule",
    "signature": "getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BuScheduleMetadata",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekScheduleRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet opts = { \n  'expand': \"expand_example\" // String | expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitweekschedulegenerationresults": {
    "operationId": "getworkforcemanagementbusinessunitweekschedulegenerationresults",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScheduleGenerationResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId, callback);"
  },
  "getworkforcemanagementbusinessunitweekscheduleheadcountforecast": {
    "operationId": "getworkforcemanagementbusinessunitweekscheduleheadcountforecast",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, forceDownload)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownload",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuHeadcountForecastResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet opts = { \n  'forceDownload': true // Boolean | Whether to force the result to come via download url.  For testing purposes only\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitweekschedulehistoryagent": {
    "operationId": "getworkforcemanagementbusinessunitweekschedulehistoryagent",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuAgentScheduleHistoryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet agentId = \"agentId_example\"; // String | THe ID of the agent\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId, callback);"
  },
  "getworkforcemanagementbusinessunitweekschedules": {
    "operationId": "getworkforcemanagementbusinessunitweekschedules",
    "functionName": "getWorkforcemanagementBusinessunitWeekSchedules",
    "signature": "getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, includeOnlyPublished, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnlyPublished",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BuScheduleListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekSchedulesRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format, or 'recent' (without quotes) to get recent schedules\nlet opts = { \n  'includeOnlyPublished': true, // Boolean | includeOnlyPublished\n  'expand': \"expand_example\" // String | expand\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecast": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecast",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecast",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BuShortTermForecast",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekShorttermforecastRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastdata": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastdata",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastData",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, weekNumber, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuForecastResultResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekShorttermforecastDataRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\nlet opts = { \n  'weekNumber': 56, // Number | The week number to fetch (for multi-week forecasts)\n  'forceDownloadService': true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastgenerationresults": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastgenerationresults",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuForecastGenerationResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId, callback);"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastlongtermforecastdata": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastlongtermforecastdata",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "LongTermForecastResultResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\nlet opts = { \n  'forceDownloadService': true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, opts, callback);"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ForecastPlanningGroupsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId, callback);"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecasts": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecasts",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecasts",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuShortTermForecastListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitWeekShorttermforecastsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"weekDateId_example\"; // String | The week start date of the forecast in yyyy-MM-dd format or 'recent' (without quotes) to fetch recent forecasts\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId, callback);"
  },
  "getworkforcemanagementbusinessunits": {
    "operationId": "getworkforcemanagementbusinessunits",
    "functionName": "getWorkforcemanagementBusinessunits",
    "signature": "getWorkforcemanagementBusinessunits(feature, divisionId)",
    "parameters": [
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BusinessUnitListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitsRequest();\n\nlet opts = { \n  'feature': \"feature_example\", // String | \n  'divisionId': \"divisionId_example\" // String | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunits(opts, callback);"
  },
  "getworkforcemanagementbusinessunitsdivisionviews": {
    "operationId": "getworkforcemanagementbusinessunitsdivisionviews",
    "functionName": "getWorkforcemanagementBusinessunitsDivisionviews",
    "signature": "getWorkforcemanagementBusinessunitsDivisionviews(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BusinessUnitListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementBusinessunitsDivisionviewsRequest();\n\nlet opts = { \n  'divisionId': [\"divisionId_example\"] // [String] | The divisionIds to filter by. If omitted, will return business units in all divisions\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementBusinessunitsDivisionviews(opts, callback);"
  },
  "getworkforcemanagementcalendardataics": {
    "operationId": "getworkforcemanagementcalendardataics",
    "functionName": "getWorkforcemanagementCalendarDataIcs",
    "signature": "getWorkforcemanagementCalendarDataIcs(calendarId)",
    "parameters": [
      {
        "name": "calendarId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "'String'",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\nlet apiInstance = new .GetWorkforcemanagementCalendarDataIcsRequest();\n\nlet calendarId = \"calendarId_example\"; // String | The id of the ics-formatted calendar\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementCalendarDataIcs(calendarId, callback);"
  },
  "getworkforcemanagementcalendarurlics": {
    "operationId": "getworkforcemanagementcalendarurlics",
    "functionName": "getWorkforcemanagementCalendarUrlIcs",
    "signature": "getWorkforcemanagementCalendarUrlIcs()",
    "return": "CalendarUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementCalendarUrlIcsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementCalendarUrlIcs(callback);"
  },
  "getworkforcemanagementhistoricaldatadeletejob": {
    "operationId": "getworkforcemanagementhistoricaldatadeletejob",
    "functionName": "getWorkforcemanagementHistoricaldataDeletejob",
    "signature": "getWorkforcemanagementHistoricaldataDeletejob()",
    "return": "HistoricalImportDeleteJobResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementHistoricaldataDeletejobRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementHistoricaldataDeletejob(callback);"
  },
  "getworkforcemanagementhistoricaldataimportstatus": {
    "operationId": "getworkforcemanagementhistoricaldataimportstatus",
    "functionName": "getWorkforcemanagementHistoricaldataImportstatus",
    "signature": "getWorkforcemanagementHistoricaldataImportstatus()",
    "return": "HistoricalImportStatusListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementHistoricaldataImportstatusRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementHistoricaldataImportstatus(callback);"
  },
  "getworkforcemanagementmanagementunit": {
    "operationId": "getworkforcemanagementmanagementunit",
    "functionName": "getWorkforcemanagementManagementunit",
    "signature": "getWorkforcemanagementManagementunit(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunit(managementUnitId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitactivitycodes": {
    "operationId": "getworkforcemanagementmanagementunitactivitycodes",
    "functionName": "getWorkforcemanagementManagementunitActivitycodes",
    "signature": "getWorkforcemanagementManagementunitActivitycodes(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActivityCodeContainer",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitActivitycodesRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitActivitycodes(managementUnitId, callback);"
  },
  "getworkforcemanagementmanagementunitadherence": {
    "operationId": "getworkforcemanagementmanagementunitadherence",
    "functionName": "getWorkforcemanagementManagementunitAdherence",
    "signature": "getWorkforcemanagementManagementunitAdherence(managementUnitId, forceDownloadService)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "UserScheduleAdherenceListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitAdherenceRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet opts = { \n  'forceDownloadService': true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitAdherence(managementUnitId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitagent": {
    "operationId": "getworkforcemanagementmanagementunitagent",
    "functionName": "getWorkforcemanagementManagementunitAgent",
    "signature": "getWorkforcemanagementManagementunitAgent(managementUnitId, agentId, excludeCapabilities)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "excludeCapabilities",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WfmAgent",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitAgentRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The id of the management unit, or 'mine' for the management unit of the logged-in user.\nlet agentId = \"agentId_example\"; // String | The agent id\nlet opts = { \n  'excludeCapabilities': true // Boolean | Excludes all capabilities of the agent such as queues, languages, and skills\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitAgent(managementUnitId, agentId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitagentshifttrades": {
    "operationId": "getworkforcemanagementmanagementunitagentshifttrades",
    "functionName": "getWorkforcemanagementManagementunitAgentShifttrades",
    "signature": "getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ShiftTradeListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitAgentShifttradesRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The id of the management unit, or 'mine' for the management unit of the logged-in user.\nlet agentId = \"agentId_example\"; // String | The agent id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId, callback);"
  },
  "getworkforcemanagementmanagementunitshifttradesmatched": {
    "operationId": "getworkforcemanagementmanagementunitshifttradesmatched",
    "functionName": "getWorkforcemanagementManagementunitShifttradesMatched",
    "signature": "getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ShiftTradeMatchesSummaryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitShifttradesMatchedRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId, callback);"
  },
  "getworkforcemanagementmanagementunitshifttradesusers": {
    "operationId": "getworkforcemanagementmanagementunitshifttradesusers",
    "functionName": "getWorkforcemanagementManagementunitShifttradesUsers",
    "signature": "getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmUserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitShifttradesUsersRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId, callback);"
  },
  "getworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "getworkforcemanagementmanagementunittimeofflimit",
    "functionName": "getWorkforcemanagementManagementunitTimeofflimit",
    "signature": "getWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffLimit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitTimeofflimitRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The ID of the time off limit to fetch\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, callback);"
  },
  "getworkforcemanagementmanagementunittimeofflimits": {
    "operationId": "getworkforcemanagementmanagementunittimeofflimits",
    "functionName": "getWorkforcemanagementManagementunitTimeofflimits",
    "signature": "getWorkforcemanagementManagementunitTimeofflimits(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffLimitListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitTimeofflimitsRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitTimeofflimits(managementUnitId, callback);"
  },
  "getworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "getworkforcemanagementmanagementunittimeoffplan",
    "functionName": "getWorkforcemanagementManagementunitTimeoffplan",
    "signature": "getWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitTimeoffplanRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID.\nlet timeOffPlanId = \"timeOffPlanId_example\"; // String | The ID of the time off plan to fetch\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, callback);"
  },
  "getworkforcemanagementmanagementunittimeoffplans": {
    "operationId": "getworkforcemanagementmanagementunittimeoffplans",
    "functionName": "getWorkforcemanagementManagementunitTimeoffplans",
    "signature": "getWorkforcemanagementManagementunitTimeoffplans(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffPlanListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitTimeoffplansRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitTimeoffplans(managementUnitId, callback);"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequest": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequest",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequest",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitUserTimeoffrequestRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The muId of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId = \"userId_example\"; // String | The userId to whom the Time Off Request applies.\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | Time Off Request Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, callback);"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequesttimeofflimits": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequesttimeofflimits",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "QueryTimeOffLimitValuesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet userId = \"userId_example\"; // String | The userId to whom the time off request applies.\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The ID of the time off request, which dates and activityCodeId determine limit values to retrieve\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId, callback);"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequests": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequests",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequests",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId, recentlyReviewed)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recentlyReviewed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitUserTimeoffrequestsRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The muId of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId = \"userId_example\"; // String | The userId to whom the Time Off Request applies.\nlet opts = { \n  'recentlyReviewed': false // Boolean | Limit results to requests that have been reviewed within the preceding 30 days\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitusers": {
    "operationId": "getworkforcemanagementmanagementunitusers",
    "functionName": "getWorkforcemanagementManagementunitUsers",
    "signature": "getWorkforcemanagementManagementunitUsers(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmUserEntityListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitUsersRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitUsers(managementUnitId, callback);"
  },
  "getworkforcemanagementmanagementunitweekschedule": {
    "operationId": "getworkforcemanagementmanagementunitweekschedule",
    "functionName": "getWorkforcemanagementManagementunitWeekSchedule",
    "signature": "getWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, expand, forceDownloadService)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WeekScheduleResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitWeekScheduleRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format.\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule to fetch\nlet opts = { \n  'expand': \"expand_example\", // String | Which fields, if any, to expand\n  'forceDownloadService': true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitweekschedules": {
    "operationId": "getworkforcemanagementmanagementunitweekschedules",
    "functionName": "getWorkforcemanagementManagementunitWeekSchedules",
    "signature": "getWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, includeOnlyPublished, earliestWeekDate, latestWeekDate)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnlyPublished",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "earliestWeekDate",
        "type": "String",
        "required": "false"
      },
      {
        "name": "latestWeekDate",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WeekScheduleListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitWeekSchedulesRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekId = \"weekId_example\"; // String | First day of schedule week in yyyy-MM-dd format.\nlet opts = { \n  'includeOnlyPublished': true, // Boolean | Return only published schedules\n  'earliestWeekDate': \"earliestWeekDate_example\", // String | The start date of the earliest week to query in yyyy-MM-dd format\n  'latestWeekDate': \"latestWeekDate_example\" // String | The start date of the latest week to query in yyyy-MM-dd format\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitweekshifttrades": {
    "operationId": "getworkforcemanagementmanagementunitweekshifttrades",
    "functionName": "getWorkforcemanagementManagementunitWeekShifttrades",
    "signature": "getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, evaluateMatches)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluateMatches",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "WeekShiftTradeListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitWeekShifttradesRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"2013-10-20\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet opts = { \n  'evaluateMatches': true // Boolean | Whether to evaluate the matches for violations\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitworkplan": {
    "operationId": "getworkforcemanagementmanagementunitworkplan",
    "functionName": "getWorkforcemanagementManagementunitWorkplan",
    "signature": "getWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, includeOnly)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnly",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitWorkplanRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to fetch\nlet opts = { \n  'includeOnly': [\"includeOnly_example\"] // [String] | limit response to the specified fields\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "getworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "getWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitWorkplanrotationRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to fetch\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, callback);"
  },
  "getworkforcemanagementmanagementunitworkplanrotations": {
    "operationId": "getworkforcemanagementmanagementunitworkplanrotations",
    "functionName": "getWorkforcemanagementManagementunitWorkplanrotations",
    "signature": "getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitWorkplanrotationsRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, opts, callback);"
  },
  "getworkforcemanagementmanagementunitworkplans": {
    "operationId": "getworkforcemanagementmanagementunitworkplans",
    "functionName": "getWorkforcemanagementManagementunitWorkplans",
    "signature": "getWorkforcemanagementManagementunitWorkplans(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlanListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitWorkplansRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'expand': [\"expand_example\"] // [String] | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitWorkplans(managementUnitId, opts, callback);"
  },
  "getworkforcemanagementmanagementunits": {
    "operationId": "getworkforcemanagementmanagementunits",
    "functionName": "getWorkforcemanagementManagementunits",
    "signature": "getWorkforcemanagementManagementunits(pageSize, pageNumber, expand, feature, divisionId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Number",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitsRequest();\n\nlet opts = { \n  'pageSize': 56, // Number | Deprecated, paging is not supported\n  'pageNumber': 56, // Number | Deprecated, paging is not supported\n  'expand': \"expand_example\", // String | Deprecated, expand settings on the single MU route\n  'feature': \"feature_example\", // String | \n  'divisionId': \"divisionId_example\" // String | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunits(opts, callback);"
  },
  "getworkforcemanagementmanagementunitsdivisionviews": {
    "operationId": "getworkforcemanagementmanagementunitsdivisionviews",
    "functionName": "getWorkforcemanagementManagementunitsDivisionviews",
    "signature": "getWorkforcemanagementManagementunitsDivisionviews(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementManagementunitsDivisionviewsRequest();\n\nlet opts = { \n  'divisionId': [\"divisionId_example\"] // [String] | The divisionIds to filter by. If omitted, will return all divisions\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementManagementunitsDivisionviews(opts, callback);"
  },
  "getworkforcemanagementnotifications": {
    "operationId": "getworkforcemanagementnotifications",
    "functionName": "getWorkforcemanagementNotifications",
    "signature": "getWorkforcemanagementNotifications()",
    "return": "NotificationsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementNotificationsRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementNotifications(callback);"
  },
  "getworkforcemanagementschedulingjob": {
    "operationId": "getworkforcemanagementschedulingjob",
    "functionName": "getWorkforcemanagementSchedulingjob",
    "signature": "getWorkforcemanagementSchedulingjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SchedulingStatusResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementSchedulingjobRequest();\n\nlet jobId = \"jobId_example\"; // String | The id of the scheduling job\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementSchedulingjob(jobId, callback);"
  },
  "getworkforcemanagementshifttrades": {
    "operationId": "getworkforcemanagementshifttrades",
    "functionName": "getWorkforcemanagementShifttrades",
    "signature": "getWorkforcemanagementShifttrades()",
    "return": "ShiftTradeListResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementShifttradesRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementShifttrades(callback);"
  },
  "getworkforcemanagementtimeoffrequest": {
    "operationId": "getworkforcemanagementtimeoffrequest",
    "functionName": "getWorkforcemanagementTimeoffrequest",
    "signature": "getWorkforcemanagementTimeoffrequest(timeOffRequestId)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementTimeoffrequestRequest();\n\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | Time Off Request Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementTimeoffrequest(timeOffRequestId, callback);"
  },
  "getworkforcemanagementtimeoffrequestwaitlistpositions": {
    "operationId": "getworkforcemanagementtimeoffrequestwaitlistpositions",
    "functionName": "getWorkforcemanagementTimeoffrequestWaitlistpositions",
    "signature": "getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WaitlistPositionListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementTimeoffrequestWaitlistpositionsRequest();\n\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | Time Off Request Id\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId, callback);"
  },
  "getworkforcemanagementtimeoffrequests": {
    "operationId": "getworkforcemanagementtimeoffrequests",
    "functionName": "getWorkforcemanagementTimeoffrequests",
    "signature": "getWorkforcemanagementTimeoffrequests(recentlyReviewed)",
    "parameters": [
      {
        "name": "recentlyReviewed",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .GetWorkforcemanagementTimeoffrequestsRequest();\n\nlet opts = { \n  'recentlyReviewed': false // Boolean | Limit results to requests that have been reviewed within the preceding 30 days\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.getWorkforcemanagementTimeoffrequests(opts, callback);"
  },
  "patchworkforcemanagementbusinessunit": {
    "operationId": "patchworkforcemanagementbusinessunit",
    "functionName": "patchWorkforcemanagementBusinessunit",
    "signature": "patchWorkforcemanagementBusinessunit(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementBusinessunitRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementBusinessunit(businessUnitId, opts, callback);"
  },
  "patchworkforcemanagementbusinessunitactivitycode": {
    "operationId": "patchworkforcemanagementbusinessunitactivitycode",
    "functionName": "patchWorkforcemanagementBusinessunitActivitycode",
    "signature": "patchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementBusinessunitActivitycodeRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId = \"activityCodeId_example\"; // String | The ID of the activity code to update\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, opts, callback);"
  },
  "patchworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "patchworkforcemanagementbusinessunitplanninggroup",
    "functionName": "patchWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "PlanningGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementBusinessunitPlanninggroupRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet planningGroupId = \"planningGroupId_example\"; // String | The ID of a planning group to update\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, opts, callback);"
  },
  "patchworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "patchworkforcemanagementbusinessunitschedulingrun",
    "functionName": "patchWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementBusinessunitSchedulingRunRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet runId = \"runId_example\"; // String | The ID of the schedule run\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, opts, callback);"
  },
  "patchworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "patchworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "patchWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementBusinessunitServicegoaltemplateRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet serviceGoalTemplateId = \"serviceGoalTemplateId_example\"; // String | The ID of a service goal template to update\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, opts, callback);"
  },
  "patchworkforcemanagementmanagementunit": {
    "operationId": "patchworkforcemanagementmanagementunit",
    "functionName": "patchWorkforcemanagementManagementunit",
    "signature": "patchWorkforcemanagementManagementunit(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementManagementunitRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementManagementunit(managementUnitId, opts, callback);"
  },
  "patchworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "patchworkforcemanagementmanagementunittimeofflimit",
    "functionName": "patchWorkforcemanagementManagementunitTimeofflimit",
    "signature": "patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementManagementunitTimeofflimitRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The id of time off limit object to update\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, opts, callback);"
  },
  "patchworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "patchworkforcemanagementmanagementunittimeoffplan",
    "functionName": "patchWorkforcemanagementManagementunitTimeoffplan",
    "signature": "patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementManagementunitTimeoffplanRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID.\nlet timeOffPlanId = \"timeOffPlanId_example\"; // String | The ID of the time off plan to update\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, opts, callback);"
  },
  "patchworkforcemanagementmanagementunitusertimeoffrequest": {
    "operationId": "patchworkforcemanagementmanagementunitusertimeoffrequest",
    "functionName": "patchWorkforcemanagementManagementunitUserTimeoffrequest",
    "signature": "patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementManagementunitUserTimeoffrequestRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The muId of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId = \"userId_example\"; // String | The id of the user the requested time off request belongs to\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | The id of the time off request to update\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, opts, callback);"
  },
  "patchworkforcemanagementmanagementunitweekshifttrade": {
    "operationId": "patchworkforcemanagementmanagementunitweekshifttrade",
    "functionName": "patchWorkforcemanagementManagementunitWeekShifttrade",
    "signature": "patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, body, tradeId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "tradeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ShiftTradeResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementManagementunitWeekShifttradeRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"2013-10-20\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\nlet tradeId = \"tradeId_example\"; // String | The ID of the shift trade to update\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, body, tradeId, callback);"
  },
  "patchworkforcemanagementmanagementunitworkplan": {
    "operationId": "patchworkforcemanagementmanagementunitworkplan",
    "functionName": "patchWorkforcemanagementManagementunitWorkplan",
    "signature": "patchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, body, validationMode)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      },
      {
        "name": "validationMode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementManagementunitWorkplanRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to update\nlet opts = { \n  'body': {}, // Object | body\n  'validationMode': \"validationMode_example\" // String | Allows to update work plan even if validation result is invalid\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, opts, callback);"
  },
  "patchworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "patchworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "patchWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementManagementunitWorkplanrotationRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to update\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, opts, callback);"
  },
  "patchworkforcemanagementtimeoffrequest": {
    "operationId": "patchworkforcemanagementtimeoffrequest",
    "functionName": "patchWorkforcemanagementTimeoffrequest",
    "signature": "patchWorkforcemanagementTimeoffrequest(timeOffRequestId, body)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PatchWorkforcemanagementTimeoffrequestRequest();\n\nlet timeOffRequestId = \"timeOffRequestId_example\"; // String | Time Off Request Id\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.patchWorkforcemanagementTimeoffrequest(timeOffRequestId, opts, callback);"
  },
  "postworkforcemanagementadherencehistorical": {
    "operationId": "postworkforcemanagementadherencehistorical",
    "functionName": "postWorkforcemanagementAdherenceHistorical",
    "signature": "postWorkforcemanagementAdherenceHistorical(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementAdherenceHistoricalRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementAdherenceHistorical(opts, callback);"
  },
  "postworkforcemanagementagentschedulesmine": {
    "operationId": "postworkforcemanagementagentschedulesmine",
    "functionName": "postWorkforcemanagementAgentschedulesMine",
    "signature": "postWorkforcemanagementAgentschedulesMine(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BuCurrentAgentScheduleSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementAgentschedulesMineRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementAgentschedulesMine(opts, callback);"
  },
  "postworkforcemanagementbusinessunitactivitycodes": {
    "operationId": "postworkforcemanagementbusinessunitactivitycodes",
    "functionName": "postWorkforcemanagementBusinessunitActivitycodes",
    "signature": "postWorkforcemanagementBusinessunitActivitycodes(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitActivitycodesRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitActivitycodes(businessUnitId, opts, callback);"
  },
  "postworkforcemanagementbusinessunitagentschedulessearch": {
    "operationId": "postworkforcemanagementbusinessunitagentschedulessearch",
    "functionName": "postWorkforcemanagementBusinessunitAgentschedulesSearch",
    "signature": "postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitAgentschedulesSearchRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet opts = { \n  'body': {}, // Object | body\n  'forceAsync': true, // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n  'forceDownloadService': true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, opts, callback);"
  },
  "postworkforcemanagementbusinessunitintraday": {
    "operationId": "postworkforcemanagementbusinessunitintraday",
    "functionName": "postWorkforcemanagementBusinessunitIntraday",
    "signature": "postWorkforcemanagementBusinessunitIntraday(businessUnitId, forceAsync, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "AsyncIntradayResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitIntradayRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit\nlet opts = { \n  'forceAsync': true, // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitIntraday(businessUnitId, opts, callback);"
  },
  "postworkforcemanagementbusinessunitplanninggroups": {
    "operationId": "postworkforcemanagementbusinessunitplanninggroups",
    "functionName": "postWorkforcemanagementBusinessunitPlanninggroups",
    "signature": "postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "PlanningGroup",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitPlanninggroupsRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, opts, callback);"
  },
  "postworkforcemanagementbusinessunitservicegoaltemplates": {
    "operationId": "postworkforcemanagementbusinessunitservicegoaltemplates",
    "functionName": "postWorkforcemanagementBusinessunitServicegoaltemplates",
    "signature": "postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitServicegoaltemplatesRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, opts, callback);"
  },
  "postworkforcemanagementbusinessunitweekscheduleagentschedulesquery": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleagentschedulesquery",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesQueryResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\nlet opts = { \n  'forceAsync': true, // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n  'forceDownloadService': true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, body, opts, callback);"
  },
  "postworkforcemanagementbusinessunitweekschedulecopy": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulecopy",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleCopy",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekScheduleCopyRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule to copy\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekschedulereschedule": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulereschedule",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleReschedule",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleRunResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekScheduleRescheduleRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekscheduleupdate": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleupdate",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleUpdate",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleUpdate(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekScheduleUpdateRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleUpdate(businessUnitId, weekId, scheduleId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekscheduleupdateuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleupdateuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "UpdateScheduleUploadResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId = \"scheduleId_example\"; // String | The ID of the schedule\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(businessUnitId, weekId, scheduleId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekschedules": {
    "operationId": "postworkforcemanagementbusinessunitweekschedules",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedules",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuScheduleMetadata",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekSchedulesRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekschedulesgenerate": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesgenerate",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleRunResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekSchedulesGenerateRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekschedulesimport": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesimport",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesImport",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesImport(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ScheduleUploadProcessingResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekSchedulesImportRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekSchedulesImport(businessUnitId, weekId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekschedulesimportuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesimportuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ImportScheduleUploadResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The ID of the business unit\nlet weekId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(businessUnitId, weekId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastcopy": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastcopy",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, body, forceAsync)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AsyncForecastOperationResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId = \"forecastId_example\"; // String | The ID of the forecast to copy\nlet body = {}; // Object | body\nlet opts = { \n  'forceAsync': true // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, body, opts, callback);"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsgenerate": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsgenerate",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, body, forceAsync)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "AsyncForecastOperationResult",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | \nlet opts = { \n  'forceAsync': true // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, body, opts, callback);"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsimport": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsimport",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImport",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImport(businessUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ImportForecastResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | \n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastsImport(businessUnitId, weekDateId, body, callback);"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsimportuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsimportuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(businessUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ImportForecastUploadResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlRequest();\n\nlet businessUnitId = \"businessUnitId_example\"; // String | The business unit ID of the business unit to which the forecast belongs\nlet weekDateId = \"2013-10-20\"; // String | First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(businessUnitId, weekDateId, body, callback);"
  },
  "postworkforcemanagementbusinessunits": {
    "operationId": "postworkforcemanagementbusinessunits",
    "functionName": "postWorkforcemanagementBusinessunits",
    "signature": "postWorkforcemanagementBusinessunits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "BusinessUnit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementBusinessunitsRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementBusinessunits(opts, callback);"
  },
  "postworkforcemanagementcalendarurlics": {
    "operationId": "postworkforcemanagementcalendarurlics",
    "functionName": "postWorkforcemanagementCalendarUrlIcs",
    "signature": "postWorkforcemanagementCalendarUrlIcs(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CalendarUrlResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementCalendarUrlIcsRequest();\n\nlet opts = { \n  'language': \"en-US\" // String | A language tag (which is sometimes referred to as a \\\"locale identifier\\\") to use to localize default activity code names in the ics-formatted calendar\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementCalendarUrlIcs(opts, callback);"
  },
  "postworkforcemanagementhistoricaldatadeletejob": {
    "operationId": "postworkforcemanagementhistoricaldatadeletejob",
    "functionName": "postWorkforcemanagementHistoricaldataDeletejob",
    "signature": "postWorkforcemanagementHistoricaldataDeletejob()",
    "return": "HistoricalImportDeleteJobResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementHistoricaldataDeletejobRequest();\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementHistoricaldataDeletejob(callback);"
  },
  "postworkforcemanagementhistoricaldatavalidate": {
    "operationId": "postworkforcemanagementhistoricaldatavalidate",
    "functionName": "postWorkforcemanagementHistoricaldataValidate",
    "signature": "postWorkforcemanagementHistoricaldataValidate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementHistoricaldataValidateRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napiInstance.postWorkforcemanagementHistoricaldataValidate(opts, callback);"
  },
  "postworkforcemanagementmanagementunitagentschedulessearch": {
    "operationId": "postworkforcemanagementmanagementunitagentschedulessearch",
    "functionName": "postWorkforcemanagementManagementunitAgentschedulesSearch",
    "signature": "postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesSearchResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitAgentschedulesSearchRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {}, // Object | body\n  'forceAsync': true, // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n  'forceDownloadService': true // Boolean | Force the result of this operation to be sent via download service.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunithistoricaladherencequery": {
    "operationId": "postworkforcemanagementmanagementunithistoricaladherencequery",
    "functionName": "postWorkforcemanagementManagementunitHistoricaladherencequery",
    "signature": "postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitHistoricaladherencequeryRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunitmove": {
    "operationId": "postworkforcemanagementmanagementunitmove",
    "functionName": "postWorkforcemanagementManagementunitMove",
    "signature": "postWorkforcemanagementManagementunitMove(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "MoveManagementUnitResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitMoveRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitMove(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunitschedulessearch": {
    "operationId": "postworkforcemanagementmanagementunitschedulessearch",
    "functionName": "postWorkforcemanagementManagementunitSchedulesSearch",
    "signature": "postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserScheduleContainer",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitSchedulesSearchRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunittimeofflimits": {
    "operationId": "postworkforcemanagementmanagementunittimeofflimits",
    "functionName": "postWorkforcemanagementManagementunitTimeofflimits",
    "signature": "postWorkforcemanagementManagementunitTimeofflimits(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitTimeofflimitsRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitTimeofflimits(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunittimeofflimitsvaluesquery": {
    "operationId": "postworkforcemanagementmanagementunittimeofflimitsvaluesquery",
    "functionName": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery",
    "signature": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "QueryTimeOffLimitValuesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunittimeoffplans": {
    "operationId": "postworkforcemanagementmanagementunittimeoffplans",
    "functionName": "postWorkforcemanagementManagementunitTimeoffplans",
    "signature": "postWorkforcemanagementManagementunitTimeoffplans(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitTimeoffplansRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitTimeoffplans(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunittimeoffrequests": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequests",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequests",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitTimeoffrequestsRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The muId of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunittimeoffrequestsquery": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequestsquery",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsQuery",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitTimeoffrequestsQueryRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The muId of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunittimeoffrequestswaitlistpositionsquery": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequestswaitlistpositionsquery",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WaitlistPositionListing",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunitweekshifttradematch": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradematch",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradeMatch",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, body, tradeId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "tradeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MatchShiftTradeResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWeekShifttradeMatchRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"2013-10-20\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\nlet tradeId = \"tradeId_example\"; // String | The ID of the shift trade to update\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, body, tradeId, callback);"
  },
  "postworkforcemanagementmanagementunitweekshifttrades": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttrades",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttrades",
    "signature": "postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "ShiftTradeResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWeekShifttradesRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"2013-10-20\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body, callback);"
  },
  "postworkforcemanagementmanagementunitweekshifttradessearch": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradessearch",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradesSearch",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      }
    ],
    "return": "SearchShiftTradesResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWeekShifttradesSearchRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"2013-10-20\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, body, callback);"
  },
  "postworkforcemanagementmanagementunitweekshifttradesstatebulk": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradesstatebulk",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, body, forceAsync)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Boolean",
        "required": "false"
      }
    ],
    "return": "BulkUpdateShiftTradeStateResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWeekShifttradesStateBulkRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId = \"2013-10-20\"; // String | The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body = {}; // Object | body\nlet opts = { \n  'forceAsync': true // Boolean | Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, body, opts, callback);"
  },
  "postworkforcemanagementmanagementunitworkplancopy": {
    "operationId": "postworkforcemanagementmanagementunitworkplancopy",
    "functionName": "postWorkforcemanagementManagementunitWorkplanCopy",
    "signature": "postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWorkplanCopyRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to create a copy\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, opts, callback);"
  },
  "postworkforcemanagementmanagementunitworkplanvalidate": {
    "operationId": "postworkforcemanagementmanagementunitworkplanvalidate",
    "functionName": "postWorkforcemanagementManagementunitWorkplanValidate",
    "signature": "postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, body, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ValidateWorkPlanResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWorkplanValidateRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId = \"workPlanId_example\"; // String | The ID of the work plan to validate. For new work plan, use the word 'new' for the ID.\nlet opts = { \n  'body': {}, // Object | body\n  'expand': [\"expand_example\"] // [String] | \n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, opts, callback);"
  },
  "postworkforcemanagementmanagementunitworkplanrotationcopy": {
    "operationId": "postworkforcemanagementmanagementunitworkplanrotationcopy",
    "functionName": "postWorkforcemanagementManagementunitWorkplanrotationCopy",
    "signature": "postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWorkplanrotationCopyRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId = \"workPlanRotationId_example\"; // String | The ID of the work plan rotation to create a copy\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, opts, callback);"
  },
  "postworkforcemanagementmanagementunitworkplanrotations": {
    "operationId": "postworkforcemanagementmanagementunitworkplanrotations",
    "functionName": "postWorkforcemanagementManagementunitWorkplanrotations",
    "signature": "postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWorkplanrotationsRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunitworkplans": {
    "operationId": "postworkforcemanagementmanagementunitworkplans",
    "functionName": "postWorkforcemanagementManagementunitWorkplans",
    "signature": "postWorkforcemanagementManagementunitWorkplans(managementUnitId, body, validationMode)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      },
      {
        "name": "validationMode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitWorkplansRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet opts = { \n  'body': {}, // Object | body\n  'validationMode': \"validationMode_example\" // String | Allows to create work plan even if the validation result is invalid\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunitWorkplans(managementUnitId, opts, callback);"
  },
  "postworkforcemanagementmanagementunits": {
    "operationId": "postworkforcemanagementmanagementunits",
    "functionName": "postWorkforcemanagementManagementunits",
    "signature": "postWorkforcemanagementManagementunits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementManagementunitsRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementManagementunits(opts, callback);"
  },
  "postworkforcemanagementnotificationsupdate": {
    "operationId": "postworkforcemanagementnotificationsupdate",
    "functionName": "postWorkforcemanagementNotificationsUpdate",
    "signature": "postWorkforcemanagementNotificationsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UpdateNotificationsResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementNotificationsUpdateRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementNotificationsUpdate(opts, callback);"
  },
  "postworkforcemanagementschedules": {
    "operationId": "postworkforcemanagementschedules",
    "functionName": "postWorkforcemanagementSchedules",
    "signature": "postWorkforcemanagementSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "UserScheduleContainer",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementSchedulesRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementSchedules(opts, callback);"
  },
  "postworkforcemanagementtimeofflimitsavailablequery": {
    "operationId": "postworkforcemanagementtimeofflimitsavailablequery",
    "functionName": "postWorkforcemanagementTimeofflimitsAvailableQuery",
    "signature": "postWorkforcemanagementTimeofflimitsAvailableQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "AvailableTimeOffResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementTimeofflimitsAvailableQueryRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementTimeofflimitsAvailableQuery(opts, callback);"
  },
  "postworkforcemanagementtimeoffrequests": {
    "operationId": "postworkforcemanagementtimeoffrequests",
    "functionName": "postWorkforcemanagementTimeoffrequests",
    "signature": "postWorkforcemanagementTimeoffrequests(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PostWorkforcemanagementTimeoffrequestsRequest();\n\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.postWorkforcemanagementTimeoffrequests(opts, callback);"
  },
  "putworkforcemanagementmanagementunittimeofflimitvalues": {
    "operationId": "putworkforcemanagementmanagementunittimeofflimitvalues",
    "functionName": "putWorkforcemanagementManagementunitTimeofflimitValues",
    "signature": "putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Object",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "// Browser\nconst  = require('');\n// Node\nconst  = require('');\n\n// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)\n.ApiClient.instance.setAccessToken(yourAccessToken);\n\nlet apiInstance = new .PutWorkforcemanagementManagementunitTimeofflimitValuesRequest();\n\nlet managementUnitId = \"managementUnitId_example\"; // String | The management unit ID of the management unit.\nlet timeOffLimitId = \"timeOffLimitId_example\"; // String | The ID of the time off limit object to set values for\nlet opts = { \n  'body': {} // Object | body\n};\n\n\nlet callback = (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napiInstance.putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, opts, callback);"
  }
}