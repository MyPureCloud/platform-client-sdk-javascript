{
  "alerting": {
    "DELETE /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "operationId": "deletealertinginteractionstatsalert",
      "functionName": "deleteAlertingInteractionstatsAlert",
      "signature": "deleteAlertingInteractionstatsAlert(alertId)",
      "parameters": [
        {
          "name": "alertId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "operationId": "deletealertinginteractionstatsrule",
      "functionName": "deleteAlertingInteractionstatsRule",
      "signature": "deleteAlertingInteractionstatsRule(ruleId)",
      "parameters": [
        {
          "name": "ruleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/alerting/alerts/active": {
      "operationId": "getalertingalertsactive",
      "functionName": "getAlertingAlertsActive",
      "signature": "getAlertingAlertsActive()",
      "return": "ActiveAlertCount"
    },
    "GET /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "operationId": "getalertinginteractionstatsalert",
      "functionName": "getAlertingInteractionstatsAlert",
      "signature": "getAlertingInteractionstatsAlert(alertId, expand)",
      "parameters": [
        {
          "name": "alertId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "InteractionStatsAlert"
    },
    "GET /api/v2/alerting/interactionstats/alerts": {
      "operationId": "getalertinginteractionstatsalerts",
      "functionName": "getAlertingInteractionstatsAlerts",
      "signature": "getAlertingInteractionstatsAlerts(expand)",
      "parameters": [
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "InteractionStatsAlertContainer"
    },
    "GET /api/v2/alerting/interactionstats/alerts/unread": {
      "operationId": "getalertinginteractionstatsalertsunread",
      "functionName": "getAlertingInteractionstatsAlertsUnread",
      "signature": "getAlertingInteractionstatsAlertsUnread()",
      "return": "UnreadMetric"
    },
    "GET /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "operationId": "getalertinginteractionstatsrule",
      "functionName": "getAlertingInteractionstatsRule",
      "signature": "getAlertingInteractionstatsRule(ruleId, expand)",
      "parameters": [
        {
          "name": "ruleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "InteractionStatsRule"
    },
    "GET /api/v2/alerting/interactionstats/rules": {
      "operationId": "getalertinginteractionstatsrules",
      "functionName": "getAlertingInteractionstatsRules",
      "signature": "getAlertingInteractionstatsRules(expand)",
      "parameters": [
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "InteractionStatsRuleContainer"
    },
    "POST /api/v2/alerting/interactionstats/rules": {
      "operationId": "postalertinginteractionstatsrules",
      "functionName": "postAlertingInteractionstatsRules",
      "signature": "postAlertingInteractionstatsRules(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "InteractionStatsRule"
    },
    "PUT /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "operationId": "putalertinginteractionstatsalert",
      "functionName": "putAlertingInteractionstatsAlert",
      "signature": "putAlertingInteractionstatsAlert(alertId, body, expand)",
      "parameters": [
        {
          "name": "alertId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UnreadStatus"
    },
    "PUT /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "operationId": "putalertinginteractionstatsrule",
      "functionName": "putAlertingInteractionstatsRule",
      "signature": "putAlertingInteractionstatsRule(ruleId, body, expand)",
      "parameters": [
        {
          "name": "ruleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "InteractionStatsRule"
    }
  },
  "analytics": {
    "DELETE /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "operationId": "deleteanalyticsconversationsdetailsjob",
      "functionName": "deleteAnalyticsConversationsDetailsJob",
      "signature": "deleteAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "operationId": "deleteanalyticsreportingschedule",
      "functionName": "deleteAnalyticsReportingSchedule",
      "signature": "deleteAnalyticsReportingSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/analytics/users/details/jobs/{jobId}": {
      "operationId": "deleteanalyticsusersdetailsjob",
      "functionName": "deleteAnalyticsUsersDetailsJob",
      "signature": "deleteAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/analytics/botflows/{botFlowId}/reportingturns": {
      "operationId": "getanalyticsbotflowreportingturns",
      "functionName": "getAnalyticsBotflowReportingturns",
      "signature": "getAnalyticsBotflowReportingturns(botFlowId, after, pageSize, actionId, sessionId)",
      "parameters": [
        {
          "name": "botFlowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "String",
          "required": "false"
        },
        {
          "name": "actionId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sessionId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ReportingTurnsResponse"
    },
    "GET /api/v2/analytics/conversations/{conversationId}/details": {
      "operationId": "getanalyticsconversationdetails",
      "functionName": "getAnalyticsConversationDetails",
      "signature": "getAnalyticsConversationDetails(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributes"
    },
    "GET /api/v2/analytics/conversations/details": {
      "operationId": "getanalyticsconversationsdetails",
      "functionName": "getAnalyticsConversationsDetails",
      "signature": "getAnalyticsConversationsDetails(id)",
      "parameters": [
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "operationId": "getanalyticsconversationsdetailsjob",
      "functionName": "getAnalyticsConversationsDetailsJob",
      "signature": "getAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}/results": {
      "operationId": "getanalyticsconversationsdetailsjobresults",
      "functionName": "getAnalyticsConversationsDetailsJobResults",
      "signature": "getAnalyticsConversationsDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "AnalyticsConversationAsyncQueryResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/availability": {
      "operationId": "getanalyticsconversationsdetailsjobsavailability",
      "functionName": "getAnalyticsConversationsDetailsJobsAvailability",
      "signature": "getAnalyticsConversationsDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/analytics/reporting/exports": {
      "operationId": "getanalyticsreportingexports",
      "functionName": "getAnalyticsReportingExports",
      "signature": "getAnalyticsReportingExports(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ReportingExportJobListing"
    },
    "GET /api/v2/analytics/reporting/exports/metadata": {
      "operationId": "getanalyticsreportingexportsmetadata",
      "functionName": "getAnalyticsReportingExportsMetadata",
      "signature": "getAnalyticsReportingExportsMetadata()",
      "return": "ReportingExportMetadataJobListing"
    },
    "GET /api/v2/analytics/reporting/metadata": {
      "operationId": "getanalyticsreportingmetadata",
      "functionName": "getAnalyticsReportingMetadata",
      "signature": "getAnalyticsReportingMetadata(pageNumber, pageSize, locale)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "locale",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ReportMetaDataEntityListing"
    },
    "GET /api/v2/analytics/reporting/{reportId}/metadata": {
      "operationId": "getanalyticsreportingreportidmetadata",
      "functionName": "getAnalyticsReportingReportIdMetadata",
      "signature": "getAnalyticsReportingReportIdMetadata(reportId, locale)",
      "parameters": [
        {
          "name": "reportId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "locale",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ReportMetaData"
    },
    "GET /api/v2/analytics/reporting/reportformats": {
      "operationId": "getanalyticsreportingreportformats",
      "functionName": "getAnalyticsReportingReportformats",
      "signature": "getAnalyticsReportingReportformats()",
      "return": "['String']"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "operationId": "getanalyticsreportingschedule",
      "functionName": "getAnalyticsReportingSchedule",
      "signature": "getAnalyticsReportingSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ReportSchedule"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history": {
      "operationId": "getanalyticsreportingschedulehistory",
      "functionName": "getAnalyticsReportingScheduleHistory",
      "signature": "getAnalyticsReportingScheduleHistory(scheduleId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ReportRunEntryEntityDomainListing"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/latest": {
      "operationId": "getanalyticsreportingschedulehistorylatest",
      "functionName": "getAnalyticsReportingScheduleHistoryLatest",
      "signature": "getAnalyticsReportingScheduleHistoryLatest(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ReportRunEntry"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}": {
      "operationId": "getanalyticsreportingschedulehistoryrunid",
      "functionName": "getAnalyticsReportingScheduleHistoryRunId",
      "signature": "getAnalyticsReportingScheduleHistoryRunId(runId, scheduleId)",
      "parameters": [
        {
          "name": "runId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ReportRunEntry"
    },
    "GET /api/v2/analytics/reporting/schedules": {
      "operationId": "getanalyticsreportingschedules",
      "functionName": "getAnalyticsReportingSchedules",
      "signature": "getAnalyticsReportingSchedules(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ReportScheduleEntityListing"
    },
    "GET /api/v2/analytics/reporting/settings": {
      "operationId": "getanalyticsreportingsettings",
      "functionName": "getAnalyticsReportingSettings",
      "signature": "getAnalyticsReportingSettings()",
      "return": "AnalyticsReportingSettings"
    },
    "GET /api/v2/analytics/reporting/timeperiods": {
      "operationId": "getanalyticsreportingtimeperiods",
      "functionName": "getAnalyticsReportingTimeperiods",
      "signature": "getAnalyticsReportingTimeperiods()",
      "return": "['String']"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}": {
      "operationId": "getanalyticsusersdetailsjob",
      "functionName": "getAnalyticsUsersDetailsJob",
      "signature": "getAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}/results": {
      "operationId": "getanalyticsusersdetailsjobresults",
      "functionName": "getAnalyticsUsersDetailsJobResults",
      "signature": "getAnalyticsUsersDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "AnalyticsUserDetailsAsyncQueryResponse"
    },
    "GET /api/v2/analytics/users/details/jobs/availability": {
      "operationId": "getanalyticsusersdetailsjobsavailability",
      "functionName": "getAnalyticsUsersDetailsJobsAvailability",
      "signature": "getAnalyticsUsersDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "PATCH /api/v2/analytics/reporting/settings": {
      "operationId": "patchanalyticsreportingsettings",
      "functionName": "patchAnalyticsReportingSettings",
      "signature": "patchAnalyticsReportingSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AnalyticsReportingSettings"
    },
    "POST /api/v2/analytics/bots/aggregates/query": {
      "operationId": "postanalyticsbotsaggregatesquery",
      "functionName": "postAnalyticsBotsAggregatesQuery",
      "signature": "postAnalyticsBotsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BotAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/{conversationId}/details/properties": {
      "operationId": "postanalyticsconversationdetailsproperties",
      "functionName": "postAnalyticsConversationDetailsProperties",
      "signature": "postAnalyticsConversationDetailsProperties(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "PropertyIndexRequest"
    },
    "POST /api/v2/analytics/conversations/aggregates/query": {
      "operationId": "postanalyticsconversationsaggregatesquery",
      "functionName": "postAnalyticsConversationsAggregatesQuery",
      "signature": "postAnalyticsConversationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ConversationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/jobs": {
      "operationId": "postanalyticsconversationsdetailsjobs",
      "functionName": "postAnalyticsConversationsDetailsJobs",
      "signature": "postAnalyticsConversationsDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/query": {
      "operationId": "postanalyticsconversationsdetailsquery",
      "functionName": "postAnalyticsConversationsDetailsQuery",
      "signature": "postAnalyticsConversationsDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AnalyticsConversationQueryResponse"
    },
    "POST /api/v2/analytics/conversations/transcripts/query": {
      "operationId": "postanalyticsconversationstranscriptsquery",
      "functionName": "postAnalyticsConversationsTranscriptsQuery",
      "signature": "postAnalyticsConversationsTranscriptsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "POST /api/v2/analytics/evaluations/aggregates/query": {
      "operationId": "postanalyticsevaluationsaggregatesquery",
      "functionName": "postAnalyticsEvaluationsAggregatesQuery",
      "signature": "postAnalyticsEvaluationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/aggregates/query": {
      "operationId": "postanalyticsflowsaggregatesquery",
      "functionName": "postAnalyticsFlowsAggregatesQuery",
      "signature": "postAnalyticsFlowsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FlowAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/observations/query": {
      "operationId": "postanalyticsflowsobservationsquery",
      "functionName": "postAnalyticsFlowsObservationsQuery",
      "signature": "postAnalyticsFlowsObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FlowObservationQueryResponse"
    },
    "POST /api/v2/analytics/journeys/aggregates/query": {
      "operationId": "postanalyticsjourneysaggregatesquery",
      "functionName": "postAnalyticsJourneysAggregatesQuery",
      "signature": "postAnalyticsJourneysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "JourneyAggregateQueryResponse"
    },
    "POST /api/v2/analytics/queues/observations/query": {
      "operationId": "postanalyticsqueuesobservationsquery",
      "functionName": "postAnalyticsQueuesObservationsQuery",
      "signature": "postAnalyticsQueuesObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "QueueObservationQueryResponse"
    },
    "POST /api/v2/analytics/reporting/exports": {
      "operationId": "postanalyticsreportingexports",
      "functionName": "postAnalyticsReportingExports",
      "signature": "postAnalyticsReportingExports(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ReportingExportJobResponse"
    },
    "POST /api/v2/analytics/reporting/schedules/{scheduleId}/runreport": {
      "operationId": "postanalyticsreportingschedulerunreport",
      "functionName": "postAnalyticsReportingScheduleRunreport",
      "signature": "postAnalyticsReportingScheduleRunreport(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "RunNowResponse"
    },
    "POST /api/v2/analytics/reporting/schedules": {
      "operationId": "postanalyticsreportingschedules",
      "functionName": "postAnalyticsReportingSchedules",
      "signature": "postAnalyticsReportingSchedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ReportSchedule"
    },
    "POST /api/v2/analytics/surveys/aggregates/query": {
      "operationId": "postanalyticssurveysaggregatesquery",
      "functionName": "postAnalyticsSurveysAggregatesQuery",
      "signature": "postAnalyticsSurveysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SurveyAggregateQueryResponse"
    },
    "POST /api/v2/analytics/transcripts/aggregates/query": {
      "operationId": "postanalyticstranscriptsaggregatesquery",
      "functionName": "postAnalyticsTranscriptsAggregatesQuery",
      "signature": "postAnalyticsTranscriptsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TranscriptAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/aggregates/query": {
      "operationId": "postanalyticsusersaggregatesquery",
      "functionName": "postAnalyticsUsersAggregatesQuery",
      "signature": "postAnalyticsUsersAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/details/jobs": {
      "operationId": "postanalyticsusersdetailsjobs",
      "functionName": "postAnalyticsUsersDetailsJobs",
      "signature": "postAnalyticsUsersDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/users/details/query": {
      "operationId": "postanalyticsusersdetailsquery",
      "functionName": "postAnalyticsUsersDetailsQuery",
      "signature": "postAnalyticsUsersDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AnalyticsUserDetailsQueryResponse"
    },
    "POST /api/v2/analytics/users/observations/query": {
      "operationId": "postanalyticsusersobservationsquery",
      "functionName": "postAnalyticsUsersObservationsQuery",
      "signature": "postAnalyticsUsersObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserObservationQueryResponse"
    },
    "PUT /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "operationId": "putanalyticsreportingschedule",
      "functionName": "putAnalyticsReportingSchedule",
      "signature": "putAnalyticsReportingSchedule(scheduleId, body)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ReportSchedule"
    }
  },
  "architect": {
    "DELETE /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "operationId": "deletearchitectemergencygroup",
      "functionName": "deleteArchitectEmergencygroup",
      "signature": "deleteArchitectEmergencygroup(emergencyGroupId)",
      "parameters": [
        {
          "name": "emergencyGroupId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/architect/ivrs/{ivrId}": {
      "operationId": "deletearchitectivr",
      "functionName": "deleteArchitectIvr",
      "signature": "deleteArchitectIvr(ivrId)",
      "parameters": [
        {
          "name": "ivrId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}": {
      "operationId": "deletearchitectprompt",
      "functionName": "deleteArchitectPrompt",
      "signature": "deleteArchitectPrompt(promptId, allResources)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "allResources",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "operationId": "deletearchitectpromptresource",
      "functionName": "deleteArchitectPromptResource",
      "signature": "deleteArchitectPromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}/resources/{languageCode}/audio": {
      "operationId": "deletearchitectpromptresourceaudio",
      "functionName": "deleteArchitectPromptResourceAudio",
      "signature": "deleteArchitectPromptResourceAudio(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts": {
      "operationId": "deletearchitectprompts",
      "functionName": "deleteArchitectPrompts",
      "signature": "deleteArchitectPrompts(id)",
      "parameters": [
        {
          "name": "id",
          "type": "[String]",
          "required": "true"
        }
      ],
      "return": "Operation"
    },
    "DELETE /api/v2/architect/schedules/{scheduleId}": {
      "operationId": "deletearchitectschedule",
      "functionName": "deleteArchitectSchedule",
      "signature": "deleteArchitectSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "operationId": "deletearchitectschedulegroup",
      "functionName": "deleteArchitectSchedulegroup",
      "signature": "deleteArchitectSchedulegroup(scheduleGroupId)",
      "parameters": [
        {
          "name": "scheduleGroupId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "operationId": "deletearchitectsystempromptresource",
      "functionName": "deleteArchitectSystempromptResource",
      "signature": "deleteArchitectSystempromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/flows/{flowId}": {
      "operationId": "deleteflow",
      "functionName": "deleteFlow",
      "signature": "deleteFlow(flowId)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/flows": {
      "operationId": "deleteflows",
      "functionName": "deleteFlows",
      "signature": "deleteFlows(id)",
      "parameters": [
        {
          "name": "id",
          "type": "[String]",
          "required": "true"
        }
      ],
      "return": "Operation"
    },
    "DELETE /api/v2/flows/datatables/{datatableId}": {
      "operationId": "deleteflowsdatatable",
      "functionName": "deleteFlowsDatatable",
      "signature": "deleteFlowsDatatable(datatableId, force)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "force",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "operationId": "deleteflowsdatatablerow",
      "functionName": "deleteFlowsDatatableRow",
      "signature": "deleteFlowsDatatableRow(datatableId, rowId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "rowId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/flows/milestones/{milestoneId}": {
      "operationId": "deleteflowsmilestone",
      "functionName": "deleteFlowsMilestone",
      "signature": "deleteFlowsMilestone(milestoneId)",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/architect/dependencytracking": {
      "operationId": "getarchitectdependencytracking",
      "functionName": "getArchitectDependencytracking",
      "signature": "getArchitectDependencytracking(name, pageNumber, pageSize, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType)",
      "parameters": [
        {
          "name": "name",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "objectType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "consumedResources",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "consumingResources",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "consumedResourceType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "consumingResourceType",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/build": {
      "operationId": "getarchitectdependencytrackingbuild",
      "functionName": "getArchitectDependencytrackingBuild",
      "signature": "getArchitectDependencytrackingBuild()",
      "return": "DependencyStatus"
    },
    "GET /api/v2/architect/dependencytracking/consumedresources": {
      "operationId": "getarchitectdependencytrackingconsumedresources",
      "functionName": "getArchitectDependencytrackingConsumedresources",
      "signature": "getArchitectDependencytrackingConsumedresources(id, version, objectType, resourceType, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "id",
          "type": "String",
          "required": "true"
        },
        {
          "name": "version",
          "type": "String",
          "required": "true"
        },
        {
          "name": "objectType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "resourceType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ConsumedResourcesEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/consumingresources": {
      "operationId": "getarchitectdependencytrackingconsumingresources",
      "functionName": "getArchitectDependencytrackingConsumingresources",
      "signature": "getArchitectDependencytrackingConsumingresources(id, objectType, resourceType, version, pageNumber, pageSize, flowFilter)",
      "parameters": [
        {
          "name": "id",
          "type": "String",
          "required": "true"
        },
        {
          "name": "objectType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "resourceType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "version",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "flowFilter",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ConsumingResourcesEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/deletedresourceconsumers": {
      "operationId": "getarchitectdependencytrackingdeletedresourceconsumers",
      "functionName": "getArchitectDependencytrackingDeletedresourceconsumers",
      "signature": "getArchitectDependencytrackingDeletedresourceconsumers(name, objectType, flowFilter, consumedResources, consumedResourceType, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "objectType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "flowFilter",
          "type": "String",
          "required": "false"
        },
        {
          "name": "consumedResources",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "consumedResourceType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/object": {
      "operationId": "getarchitectdependencytrackingobject",
      "functionName": "getArchitectDependencytrackingObject",
      "signature": "getArchitectDependencytrackingObject(id, version, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType, consumedResourceRequest)",
      "parameters": [
        {
          "name": "id",
          "type": "String",
          "required": "true"
        },
        {
          "name": "version",
          "type": "String",
          "required": "false"
        },
        {
          "name": "objectType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "consumedResources",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "consumingResources",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "consumedResourceType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "consumingResourceType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "consumedResourceRequest",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "DependencyObject"
    },
    "GET /api/v2/architect/dependencytracking/types/{typeId}": {
      "operationId": "getarchitectdependencytrackingtype",
      "functionName": "getArchitectDependencytrackingType",
      "signature": "getArchitectDependencytrackingType(typeId)",
      "parameters": [
        {
          "name": "typeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DependencyType"
    },
    "GET /api/v2/architect/dependencytracking/types": {
      "operationId": "getarchitectdependencytrackingtypes",
      "functionName": "getArchitectDependencytrackingTypes",
      "signature": "getArchitectDependencytrackingTypes(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DependencyTypeEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/updatedresourceconsumers": {
      "operationId": "getarchitectdependencytrackingupdatedresourceconsumers",
      "functionName": "getArchitectDependencytrackingUpdatedresourceconsumers",
      "signature": "getArchitectDependencytrackingUpdatedresourceconsumers(name, objectType, consumedResources, consumedResourceType, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "objectType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "consumedResources",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "consumedResourceType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "operationId": "getarchitectemergencygroup",
      "functionName": "getArchitectEmergencygroup",
      "signature": "getArchitectEmergencygroup(emergencyGroupId)",
      "parameters": [
        {
          "name": "emergencyGroupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EmergencyGroup"
    },
    "GET /api/v2/architect/emergencygroups": {
      "operationId": "getarchitectemergencygroups",
      "functionName": "getArchitectEmergencygroups",
      "signature": "getArchitectEmergencygroups(pageNumber, pageSize, sortBy, sortOrder, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "EmergencyGroupListing"
    },
    "GET /api/v2/architect/ivrs/{ivrId}": {
      "operationId": "getarchitectivr",
      "functionName": "getArchitectIvr",
      "signature": "getArchitectIvr(ivrId)",
      "parameters": [
        {
          "name": "ivrId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "IVR"
    },
    "GET /api/v2/architect/ivrs": {
      "operationId": "getarchitectivrs",
      "functionName": "getArchitectIvrs",
      "signature": "getArchitectIvrs(pageNumber, pageSize, sortBy, sortOrder, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "IVREntityListing"
    },
    "GET /api/v2/architect/prompts/{promptId}": {
      "operationId": "getarchitectprompt",
      "functionName": "getArchitectPrompt",
      "signature": "getArchitectPrompt(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Prompt"
    },
    "GET /api/v2/architect/prompts/{promptId}/history/{historyId}": {
      "operationId": "getarchitectprompthistoryhistoryid",
      "functionName": "getArchitectPromptHistoryHistoryId",
      "signature": "getArchitectPromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "historyId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "action",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "operationId": "getarchitectpromptresource",
      "functionName": "getArchitectPromptResource",
      "signature": "getArchitectPromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PromptAsset"
    },
    "GET /api/v2/architect/prompts/{promptId}/resources": {
      "operationId": "getarchitectpromptresources",
      "functionName": "getArchitectPromptResources",
      "signature": "getArchitectPromptResources(promptId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "PromptAssetEntityListing"
    },
    "GET /api/v2/architect/prompts": {
      "operationId": "getarchitectprompts",
      "functionName": "getArchitectPrompts",
      "signature": "getArchitectPrompts(pageNumber, pageSize, name, description, nameOrDescription, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "description",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nameOrDescription",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "PromptEntityListing"
    },
    "GET /api/v2/architect/schedules/{scheduleId}": {
      "operationId": "getarchitectschedule",
      "functionName": "getArchitectSchedule",
      "signature": "getArchitectSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Schedule"
    },
    "GET /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "operationId": "getarchitectschedulegroup",
      "functionName": "getArchitectSchedulegroup",
      "signature": "getArchitectSchedulegroup(scheduleGroupId)",
      "parameters": [
        {
          "name": "scheduleGroupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScheduleGroup"
    },
    "GET /api/v2/architect/schedulegroups": {
      "operationId": "getarchitectschedulegroups",
      "functionName": "getArchitectSchedulegroups",
      "signature": "getArchitectSchedulegroups(pageNumber, pageSize, sortBy, sortOrder, name, scheduleIds, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "scheduleIds",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ScheduleGroupEntityListing"
    },
    "GET /api/v2/architect/schedules": {
      "operationId": "getarchitectschedules",
      "functionName": "getArchitectSchedules",
      "signature": "getArchitectSchedules(pageNumber, pageSize, sortBy, sortOrder, name, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ScheduleEntityListing"
    },
    "GET /api/v2/architect/systemprompts/{promptId}": {
      "operationId": "getarchitectsystemprompt",
      "functionName": "getArchitectSystemprompt",
      "signature": "getArchitectSystemprompt(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SystemPrompt"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/history/{historyId}": {
      "operationId": "getarchitectsystemprompthistoryhistoryid",
      "functionName": "getArchitectSystempromptHistoryHistoryId",
      "signature": "getArchitectSystempromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "historyId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "action",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "operationId": "getarchitectsystempromptresource",
      "functionName": "getArchitectSystempromptResource",
      "signature": "getArchitectSystempromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/resources": {
      "operationId": "getarchitectsystempromptresources",
      "functionName": "getArchitectSystempromptResources",
      "signature": "getArchitectSystempromptResources(promptId, pageNumber, pageSize, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SystemPromptAssetEntityListing"
    },
    "GET /api/v2/architect/systemprompts": {
      "operationId": "getarchitectsystemprompts",
      "functionName": "getArchitectSystemprompts",
      "signature": "getArchitectSystemprompts(pageNumber, pageSize, sortBy, sortOrder, name, description, nameOrDescription)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "description",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nameOrDescription",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SystemPromptEntityListing"
    },
    "GET /api/v2/flows/{flowId}": {
      "operationId": "getflow",
      "functionName": "getFlow",
      "signature": "getFlow(flowId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "deleted",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "Flow"
    },
    "GET /api/v2/flows/{flowId}/history/{historyId}": {
      "operationId": "getflowhistoryhistoryid",
      "functionName": "getFlowHistoryHistoryId",
      "signature": "getFlowHistoryHistoryId(flowId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "historyId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "action",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/flows/{flowId}/latestconfiguration": {
      "operationId": "getflowlatestconfiguration",
      "functionName": "getFlowLatestconfiguration",
      "signature": "getFlowLatestconfiguration(flowId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "deleted",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "Object"
    },
    "GET /api/v2/flows/{flowId}/versions/{versionId}": {
      "operationId": "getflowversion",
      "functionName": "getFlowVersion",
      "signature": "getFlowVersion(flowId, versionId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "versionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "deleted",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "FlowVersion"
    },
    "GET /api/v2/flows/{flowId}/versions/{versionId}/configuration": {
      "operationId": "getflowversionconfiguration",
      "functionName": "getFlowVersionConfiguration",
      "signature": "getFlowVersionConfiguration(flowId, versionId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "versionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "deleted",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Object"
    },
    "GET /api/v2/flows/{flowId}/versions": {
      "operationId": "getflowversions",
      "functionName": "getFlowVersions",
      "signature": "getFlowVersions(flowId, pageNumber, pageSize, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "deleted",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "FlowVersionEntityListing"
    },
    "GET /api/v2/flows": {
      "operationId": "getflows",
      "functionName": "getFlows",
      "signature": "getFlows(type, pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, publishVersionId, editableBy, lockedBy, lockedByClientId, secure, deleted, includeSchemas, publishedAfter, publishedBefore, divisionId)",
      "parameters": [
        {
          "name": "type",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "description",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nameOrDescription",
          "type": "String",
          "required": "false"
        },
        {
          "name": "publishVersionId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "editableBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "lockedBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "lockedByClientId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "secure",
          "type": "String",
          "required": "false"
        },
        {
          "name": "deleted",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSchemas",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "publishedAfter",
          "type": "String",
          "required": "false"
        },
        {
          "name": "publishedBefore",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "FlowEntityListing"
    },
    "GET /api/v2/flows/datatables/{datatableId}": {
      "operationId": "getflowsdatatable",
      "functionName": "getFlowsDatatable",
      "signature": "getFlowsDatatable(datatableId, expand)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DataTable"
    },
    "GET /api/v2/flows/datatables/{datatableId}/export/jobs/{exportJobId}": {
      "operationId": "getflowsdatatableexportjob",
      "functionName": "getFlowsDatatableExportJob",
      "signature": "getFlowsDatatableExportJob(datatableId, exportJobId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "exportJobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataTableExportJob"
    },
    "GET /api/v2/flows/datatables/{datatableId}/import/jobs/{importJobId}": {
      "operationId": "getflowsdatatableimportjob",
      "functionName": "getFlowsDatatableImportJob",
      "signature": "getFlowsDatatableImportJob(datatableId, importJobId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "importJobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataTableImportJob"
    },
    "GET /api/v2/flows/datatables/{datatableId}/import/jobs": {
      "operationId": "getflowsdatatableimportjobs",
      "functionName": "getFlowsDatatableImportJobs",
      "signature": "getFlowsDatatableImportJobs(datatableId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DataTableImportEntityListing"
    },
    "GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "operationId": "getflowsdatatablerow",
      "functionName": "getFlowsDatatableRow",
      "signature": "getFlowsDatatableRow(datatableId, rowId, showbrief)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "rowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "showbrief",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "{'String': Object}"
    },
    "GET /api/v2/flows/datatables/{datatableId}/rows": {
      "operationId": "getflowsdatatablerows",
      "functionName": "getFlowsDatatableRows",
      "signature": "getFlowsDatatableRows(datatableId, pageNumber, pageSize, showbrief)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "showbrief",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "DataTableRowEntityListing"
    },
    "GET /api/v2/flows/datatables": {
      "operationId": "getflowsdatatables",
      "functionName": "getFlowsDatatables",
      "signature": "getFlowsDatatables(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
      "parameters": [
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DataTablesDomainEntityListing"
    },
    "GET /api/v2/flows/datatables/divisionviews/{datatableId}": {
      "operationId": "getflowsdatatablesdivisionview",
      "functionName": "getFlowsDatatablesDivisionview",
      "signature": "getFlowsDatatablesDivisionview(datatableId, expand)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DataTable"
    },
    "GET /api/v2/flows/datatables/divisionviews": {
      "operationId": "getflowsdatatablesdivisionviews",
      "functionName": "getFlowsDatatablesDivisionviews",
      "signature": "getFlowsDatatablesDivisionviews(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
      "parameters": [
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DataTablesDomainEntityListing"
    },
    "GET /api/v2/flows/divisionviews": {
      "operationId": "getflowsdivisionviews",
      "functionName": "getFlowsDivisionviews",
      "signature": "getFlowsDivisionviews(type, pageNumber, pageSize, sortBy, sortOrder, id, name, publishVersionId, publishedAfter, publishedBefore, divisionId, includeSchemas)",
      "parameters": [
        {
          "name": "type",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "publishVersionId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "publishedAfter",
          "type": "String",
          "required": "false"
        },
        {
          "name": "publishedBefore",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "includeSchemas",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "FlowDivisionViewEntityListing"
    },
    "GET /api/v2/flows/executions/{flowExecutionId}": {
      "operationId": "getflowsexecution",
      "functionName": "getFlowsExecution",
      "signature": "getFlowsExecution(flowExecutionId)",
      "parameters": [
        {
          "name": "flowExecutionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "FlowRuntimeExecution"
    },
    "GET /api/v2/flows/milestones/{milestoneId}": {
      "operationId": "getflowsmilestone",
      "functionName": "getFlowsMilestone",
      "signature": "getFlowsMilestone(milestoneId)",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "FlowMilestone"
    },
    "GET /api/v2/flows/milestones": {
      "operationId": "getflowsmilestones",
      "functionName": "getFlowsMilestones",
      "signature": "getFlowsMilestones(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "description",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nameOrDescription",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "FlowMilestoneListing"
    },
    "GET /api/v2/flows/milestones/divisionviews": {
      "operationId": "getflowsmilestonesdivisionviews",
      "functionName": "getFlowsMilestonesDivisionviews",
      "signature": "getFlowsMilestonesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "FlowMilestoneDivisionViewEntityListing"
    },
    "GET /api/v2/flows/outcomes/{flowOutcomeId}": {
      "operationId": "getflowsoutcome",
      "functionName": "getFlowsOutcome",
      "signature": "getFlowsOutcome(flowOutcomeId)",
      "parameters": [
        {
          "name": "flowOutcomeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "FlowOutcome"
    },
    "GET /api/v2/flows/outcomes": {
      "operationId": "getflowsoutcomes",
      "functionName": "getFlowsOutcomes",
      "signature": "getFlowsOutcomes(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "description",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nameOrDescription",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "FlowOutcomeListing"
    },
    "GET /api/v2/flows/outcomes/divisionviews": {
      "operationId": "getflowsoutcomesdivisionviews",
      "functionName": "getFlowsOutcomesDivisionviews",
      "signature": "getFlowsOutcomesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "FlowOutcomeDivisionViewEntityListing"
    },
    "POST /api/v2/architect/dependencytracking/build": {
      "operationId": "postarchitectdependencytrackingbuild",
      "functionName": "postArchitectDependencytrackingBuild",
      "signature": "postArchitectDependencytrackingBuild()"
    },
    "POST /api/v2/architect/emergencygroups": {
      "operationId": "postarchitectemergencygroups",
      "functionName": "postArchitectEmergencygroups",
      "signature": "postArchitectEmergencygroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmergencyGroup"
    },
    "POST /api/v2/architect/ivrs": {
      "operationId": "postarchitectivrs",
      "functionName": "postArchitectIvrs",
      "signature": "postArchitectIvrs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "IVR"
    },
    "POST /api/v2/architect/prompts/{promptId}/history": {
      "operationId": "postarchitectprompthistory",
      "functionName": "postArchitectPromptHistory",
      "signature": "postArchitectPromptHistory(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/architect/prompts/{promptId}/resources": {
      "operationId": "postarchitectpromptresources",
      "functionName": "postArchitectPromptResources",
      "signature": "postArchitectPromptResources(promptId, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "PromptAsset"
    },
    "POST /api/v2/architect/prompts": {
      "operationId": "postarchitectprompts",
      "functionName": "postArchitectPrompts",
      "signature": "postArchitectPrompts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Prompt"
    },
    "POST /api/v2/architect/schedulegroups": {
      "operationId": "postarchitectschedulegroups",
      "functionName": "postArchitectSchedulegroups",
      "signature": "postArchitectSchedulegroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ScheduleGroup"
    },
    "POST /api/v2/architect/schedules": {
      "operationId": "postarchitectschedules",
      "functionName": "postArchitectSchedules",
      "signature": "postArchitectSchedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Schedule"
    },
    "POST /api/v2/architect/systemprompts/{promptId}/history": {
      "operationId": "postarchitectsystemprompthistory",
      "functionName": "postArchitectSystempromptHistory",
      "signature": "postArchitectSystempromptHistory(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/architect/systemprompts/{promptId}/resources": {
      "operationId": "postarchitectsystempromptresources",
      "functionName": "postArchitectSystempromptResources",
      "signature": "postArchitectSystempromptResources(promptId, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "POST /api/v2/flows/{flowId}/history": {
      "operationId": "postflowhistory",
      "functionName": "postFlowHistory",
      "signature": "postFlowHistory(flowId)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/{flowId}/versions": {
      "operationId": "postflowversions",
      "functionName": "postFlowVersions",
      "signature": "postFlowVersions(flowId, body)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FlowVersion"
    },
    "POST /api/v2/flows": {
      "operationId": "postflows",
      "functionName": "postFlows",
      "signature": "postFlows(body, language)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "language",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/checkin": {
      "operationId": "postflowsactionscheckin",
      "functionName": "postFlowsActionsCheckin",
      "signature": "postFlowsActionsCheckin(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/actions/checkout": {
      "operationId": "postflowsactionscheckout",
      "functionName": "postFlowsActionsCheckout",
      "signature": "postFlowsActionsCheckout(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/deactivate": {
      "operationId": "postflowsactionsdeactivate",
      "functionName": "postFlowsActionsDeactivate",
      "signature": "postFlowsActionsDeactivate(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/publish": {
      "operationId": "postflowsactionspublish",
      "functionName": "postFlowsActionsPublish",
      "signature": "postFlowsActionsPublish(flow, version)",
      "parameters": [
        {
          "name": "flow",
          "type": "String",
          "required": "true"
        },
        {
          "name": "version",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/actions/revert": {
      "operationId": "postflowsactionsrevert",
      "functionName": "postFlowsActionsRevert",
      "signature": "postFlowsActionsRevert(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/unlock": {
      "operationId": "postflowsactionsunlock",
      "functionName": "postFlowsActionsUnlock",
      "signature": "postFlowsActionsUnlock(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/datatables/{datatableId}/export/jobs": {
      "operationId": "postflowsdatatableexportjobs",
      "functionName": "postFlowsDatatableExportJobs",
      "signature": "postFlowsDatatableExportJobs(datatableId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataTableExportJob"
    },
    "POST /api/v2/flows/datatables/{datatableId}/import/jobs": {
      "operationId": "postflowsdatatableimportjobs",
      "functionName": "postFlowsDatatableImportJobs",
      "signature": "postFlowsDatatableImportJobs(datatableId, body)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DataTableImportJob"
    },
    "POST /api/v2/flows/datatables/{datatableId}/rows": {
      "operationId": "postflowsdatatablerows",
      "functionName": "postFlowsDatatableRows",
      "signature": "postFlowsDatatableRows(datatableId, dataTableRow)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "dataTableRow",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "{'String': Object}"
    },
    "POST /api/v2/flows/datatables": {
      "operationId": "postflowsdatatables",
      "functionName": "postFlowsDatatables",
      "signature": "postFlowsDatatables(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DataTable"
    },
    "POST /api/v2/flows/executions": {
      "operationId": "postflowsexecutions",
      "functionName": "postFlowsExecutions",
      "signature": "postFlowsExecutions(flowLaunchRequest)",
      "parameters": [
        {
          "name": "flowLaunchRequest",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FlowExecutionLaunchResponse"
    },
    "POST /api/v2/flows/milestones": {
      "operationId": "postflowsmilestones",
      "functionName": "postFlowsMilestones",
      "signature": "postFlowsMilestones(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "FlowMilestone"
    },
    "POST /api/v2/flows/outcomes": {
      "operationId": "postflowsoutcomes",
      "functionName": "postFlowsOutcomes",
      "signature": "postFlowsOutcomes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "FlowOutcome"
    },
    "PUT /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "operationId": "putarchitectemergencygroup",
      "functionName": "putArchitectEmergencygroup",
      "signature": "putArchitectEmergencygroup(emergencyGroupId, body)",
      "parameters": [
        {
          "name": "emergencyGroupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmergencyGroup"
    },
    "PUT /api/v2/architect/ivrs/{ivrId}": {
      "operationId": "putarchitectivr",
      "functionName": "putArchitectIvr",
      "signature": "putArchitectIvr(ivrId, body)",
      "parameters": [
        {
          "name": "ivrId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "IVR"
    },
    "PUT /api/v2/architect/prompts/{promptId}": {
      "operationId": "putarchitectprompt",
      "functionName": "putArchitectPrompt",
      "signature": "putArchitectPrompt(promptId, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Prompt"
    },
    "PUT /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "operationId": "putarchitectpromptresource",
      "functionName": "putArchitectPromptResource",
      "signature": "putArchitectPromptResource(promptId, languageCode, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "PromptAsset"
    },
    "PUT /api/v2/architect/schedules/{scheduleId}": {
      "operationId": "putarchitectschedule",
      "functionName": "putArchitectSchedule",
      "signature": "putArchitectSchedule(scheduleId, body)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Schedule"
    },
    "PUT /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "operationId": "putarchitectschedulegroup",
      "functionName": "putArchitectSchedulegroup",
      "signature": "putArchitectSchedulegroup(scheduleGroupId, body)",
      "parameters": [
        {
          "name": "scheduleGroupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ScheduleGroup"
    },
    "PUT /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "operationId": "putarchitectsystempromptresource",
      "functionName": "putArchitectSystempromptResource",
      "signature": "putArchitectSystempromptResource(promptId, languageCode, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "PUT /api/v2/flows/{flowId}": {
      "operationId": "putflow",
      "functionName": "putFlow",
      "signature": "putFlow(flowId, body)",
      "parameters": [
        {
          "name": "flowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Flow"
    },
    "PUT /api/v2/flows/datatables/{datatableId}": {
      "operationId": "putflowsdatatable",
      "functionName": "putFlowsDatatable",
      "signature": "putFlowsDatatable(datatableId, body, expand)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DataTable"
    },
    "PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "operationId": "putflowsdatatablerow",
      "functionName": "putFlowsDatatableRow",
      "signature": "putFlowsDatatableRow(datatableId, rowId, body)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "rowId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "{'String': Object}"
    },
    "PUT /api/v2/flows/milestones/{milestoneId}": {
      "operationId": "putflowsmilestone",
      "functionName": "putFlowsMilestone",
      "signature": "putFlowsMilestone(milestoneId, body)",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "FlowMilestone"
    },
    "PUT /api/v2/flows/outcomes/{flowOutcomeId}": {
      "operationId": "putflowsoutcome",
      "functionName": "putFlowsOutcome",
      "signature": "putFlowsOutcome(flowOutcomeId, body)",
      "parameters": [
        {
          "name": "flowOutcomeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Operation"
    }
  },
  "audit": {
    "GET /api/v2/audits/query/realtime/servicemapping": {
      "operationId": "getauditsqueryrealtimeservicemapping",
      "functionName": "getAuditsQueryRealtimeServicemapping",
      "signature": "getAuditsQueryRealtimeServicemapping()",
      "return": "AuditQueryServiceMapping"
    },
    "GET /api/v2/audits/query/servicemapping": {
      "operationId": "getauditsqueryservicemapping",
      "functionName": "getAuditsQueryServicemapping",
      "signature": "getAuditsQueryServicemapping()",
      "return": "AuditQueryServiceMapping"
    },
    "GET /api/v2/audits/query/{transactionId}": {
      "operationId": "getauditsquerytransactionid",
      "functionName": "getAuditsQueryTransactionId",
      "signature": "getAuditsQueryTransactionId(transactionId)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AuditQueryExecutionStatusResponse"
    },
    "GET /api/v2/audits/query/{transactionId}/results": {
      "operationId": "getauditsquerytransactionidresults",
      "functionName": "getAuditsQueryTransactionIdResults",
      "signature": "getAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "AuditQueryExecutionResultsResponse"
    },
    "POST /api/v2/audits/query": {
      "operationId": "postauditsquery",
      "functionName": "postAuditsQuery",
      "signature": "postAuditsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AuditQueryExecutionStatusResponse"
    },
    "POST /api/v2/audits/query/realtime": {
      "operationId": "postauditsqueryrealtime",
      "functionName": "postAuditsQueryRealtime",
      "signature": "postAuditsQueryRealtime(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "AuditRealtimeQueryResultsResponse"
    }
  },
  "authorization": {
    "DELETE /api/v2/authorization/divisions/{divisionId}": {
      "operationId": "deleteauthorizationdivision",
      "functionName": "deleteAuthorizationDivision",
      "signature": "deleteAuthorizationDivision(divisionId, force)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "force",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/authorization/roles/{roleId}": {
      "operationId": "deleteauthorizationrole",
      "functionName": "deleteAuthorizationRole",
      "signature": "deleteAuthorizationRole(roleId)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "operationId": "deleteauthorizationsubjectdivisionrole",
      "functionName": "deleteAuthorizationSubjectDivisionRole",
      "signature": "deleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/authorization/divisions/{divisionId}": {
      "operationId": "getauthorizationdivision",
      "functionName": "getAuthorizationDivision",
      "signature": "getAuthorizationDivision(divisionId, objectCount)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "objectCount",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/{divisionId}/grants": {
      "operationId": "getauthorizationdivisiongrants",
      "functionName": "getAuthorizationDivisionGrants",
      "signature": "getAuthorizationDivisionGrants(divisionId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "AuthzDivisionGrantEntityListing"
    },
    "GET /api/v2/authorization/divisions": {
      "operationId": "getauthorizationdivisions",
      "functionName": "getAuthorizationDivisions",
      "signature": "getAuthorizationDivisions(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, objectCount, id, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "objectCount",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "AuthzDivisionEntityListing"
    },
    "GET /api/v2/authorization/divisions/home": {
      "operationId": "getauthorizationdivisionshome",
      "functionName": "getAuthorizationDivisionsHome",
      "signature": "getAuthorizationDivisionsHome()",
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/limit": {
      "operationId": "getauthorizationdivisionslimit",
      "functionName": "getAuthorizationDivisionsLimit",
      "signature": "getAuthorizationDivisionsLimit()",
      "return": "'Number'"
    },
    "GET /api/v2/authorization/divisionspermitted/me": {
      "operationId": "getauthorizationdivisionspermittedme",
      "functionName": "getAuthorizationDivisionspermittedMe",
      "signature": "getAuthorizationDivisionspermittedMe(permission, name)",
      "parameters": [
        {
          "name": "permission",
          "type": "String",
          "required": "true"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "[AuthzDivision]"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/me": {
      "operationId": "getauthorizationdivisionspermittedpagedme",
      "functionName": "getAuthorizationDivisionspermittedPagedMe",
      "signature": "getAuthorizationDivisionspermittedPagedMe(permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "permission",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/{subjectId}": {
      "operationId": "getauthorizationdivisionspermittedpagedsubjectid",
      "functionName": "getAuthorizationDivisionspermittedPagedSubjectId",
      "signature": "getAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "permission",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/permissions": {
      "operationId": "getauthorizationpermissions",
      "functionName": "getAuthorizationPermissions",
      "signature": "getAuthorizationPermissions(pageSize, pageNumber, queryType, query)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "queryType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "query",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "PermissionCollectionEntityListing"
    },
    "GET /api/v2/authorization/products": {
      "operationId": "getauthorizationproducts",
      "functionName": "getAuthorizationProducts",
      "signature": "getAuthorizationProducts()",
      "return": "OrganizationProductEntityListing"
    },
    "GET /api/v2/authorization/roles/{roleId}": {
      "operationId": "getauthorizationrole",
      "functionName": "getAuthorizationRole",
      "signature": "getAuthorizationRole(roleId, expand)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}": {
      "operationId": "getauthorizationrolecomparedefaultrightroleid",
      "functionName": "getAuthorizationRoleComparedefaultRightRoleId",
      "signature": "getAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId)",
      "parameters": [
        {
          "name": "leftRoleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "rightRoleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DomainOrgRoleDifference"
    },
    "GET /api/v2/authorization/roles/{roleId}/subjectgrants": {
      "operationId": "getauthorizationrolesubjectgrants",
      "functionName": "getAuthorizationRoleSubjectgrants",
      "signature": "getAuthorizationRoleSubjectgrants(roleId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SubjectDivisionGrantsEntityListing"
    },
    "GET /api/v2/authorization/roles/{roleId}/users": {
      "operationId": "getauthorizationroleusers",
      "functionName": "getAuthorizationRoleUsers",
      "signature": "getAuthorizationRoleUsers(roleId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/authorization/roles": {
      "operationId": "getauthorizationroles",
      "functionName": "getAuthorizationRoles",
      "signature": "getAuthorizationRoles(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, permission, defaultRoleId, userCount, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "permission",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "defaultRoleId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "userCount",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "GET /api/v2/authorization/subjects/{subjectId}": {
      "operationId": "getauthorizationsubject",
      "functionName": "getAuthorizationSubject",
      "signature": "getAuthorizationSubject(subjectId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/me": {
      "operationId": "getauthorizationsubjectsme",
      "functionName": "getAuthorizationSubjectsMe",
      "signature": "getAuthorizationSubjectsMe()",
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/rolecounts": {
      "operationId": "getauthorizationsubjectsrolecounts",
      "functionName": "getAuthorizationSubjectsRolecounts",
      "signature": "getAuthorizationSubjectsRolecounts(id)",
      "parameters": [
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "{'String': Object}"
    },
    "GET /api/v2/users/{userId}/roles": {
      "operationId": "getuserroles",
      "functionName": "getUserRoles",
      "signature": "getUserRoles(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserAuthorization"
    },
    "PATCH /api/v2/authorization/roles/{roleId}": {
      "operationId": "patchauthorizationrole",
      "functionName": "patchAuthorizationRole",
      "signature": "patchAuthorizationRole(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}": {
      "operationId": "postauthorizationdivisionobject",
      "functionName": "postAuthorizationDivisionObject",
      "signature": "postAuthorizationDivisionObject(divisionId, objectType, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "objectType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/authorization/divisions/{divisionId}/restore": {
      "operationId": "postauthorizationdivisionrestore",
      "functionName": "postAuthorizationDivisionRestore",
      "signature": "postAuthorizationDivisionRestore(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/divisions": {
      "operationId": "postauthorizationdivisions",
      "functionName": "postAuthorizationDivisions",
      "signature": "postAuthorizationDivisions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/roles/{roleId}": {
      "operationId": "postauthorizationrole",
      "functionName": "postAuthorizationRole",
      "signature": "postAuthorizationRole(roleId, body, subjectType)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "subjectType",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}": {
      "operationId": "postauthorizationrolecomparedefaultrightroleid",
      "functionName": "postAuthorizationRoleComparedefaultRightRoleId",
      "signature": "postAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, body)",
      "parameters": [
        {
          "name": "leftRoleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "rightRoleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainOrgRoleDifference"
    },
    "POST /api/v2/authorization/roles": {
      "operationId": "postauthorizationroles",
      "functionName": "postAuthorizationRoles",
      "signature": "postAuthorizationRoles(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "POST /api/v2/authorization/roles/default": {
      "operationId": "postauthorizationrolesdefault",
      "functionName": "postAuthorizationRolesDefault",
      "signature": "postAuthorizationRolesDefault(force)",
      "parameters": [
        {
          "name": "force",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkadd": {
      "operationId": "postauthorizationsubjectbulkadd",
      "functionName": "postAuthorizationSubjectBulkadd",
      "signature": "postAuthorizationSubjectBulkadd(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "subjectType",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkremove": {
      "operationId": "postauthorizationsubjectbulkremove",
      "functionName": "postAuthorizationSubjectBulkremove",
      "signature": "postAuthorizationSubjectBulkremove(subjectId, body)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkreplace": {
      "operationId": "postauthorizationsubjectbulkreplace",
      "functionName": "postAuthorizationSubjectBulkreplace",
      "signature": "postAuthorizationSubjectBulkreplace(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "subjectType",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "operationId": "postauthorizationsubjectdivisionrole",
      "functionName": "postAuthorizationSubjectDivisionRole",
      "signature": "postAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "subjectType",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "PUT /api/v2/authorization/divisions/{divisionId}": {
      "operationId": "putauthorizationdivision",
      "functionName": "putAuthorizationDivision",
      "signature": "putAuthorizationDivision(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AuthzDivision"
    },
    "PUT /api/v2/authorization/roles/{roleId}": {
      "operationId": "putauthorizationrole",
      "functionName": "putAuthorizationRole",
      "signature": "putAuthorizationRole(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "PUT /api/v2/authorization/roles/{roleId}/users/add": {
      "operationId": "putauthorizationroleusersadd",
      "functionName": "putAuthorizationRoleUsersAdd",
      "signature": "putAuthorizationRoleUsersAdd(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "['String']"
    },
    "PUT /api/v2/authorization/roles/{roleId}/users/remove": {
      "operationId": "putauthorizationroleusersremove",
      "functionName": "putAuthorizationRoleUsersRemove",
      "signature": "putAuthorizationRoleUsersRemove(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "['String']"
    },
    "PUT /api/v2/authorization/roles/default": {
      "operationId": "putauthorizationrolesdefault",
      "functionName": "putAuthorizationRolesDefault",
      "signature": "putAuthorizationRolesDefault(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "PUT /api/v2/users/{userId}/roles": {
      "operationId": "putuserroles",
      "functionName": "putUserRoles",
      "signature": "putUserRoles(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserAuthorization"
    }
  },
  "billing": {
    "GET /api/v2/billing/reports/billableusage": {
      "operationId": "getbillingreportsbillableusage",
      "functionName": "getBillingReportsBillableusage",
      "signature": "getBillingReportsBillableusage(startDate, endDate)",
      "parameters": [
        {
          "name": "startDate",
          "type": "Date",
          "required": "true"
        },
        {
          "name": "endDate",
          "type": "Date",
          "required": "true"
        }
      ],
      "return": "BillingUsageReport"
    },
    "GET /api/v2/billing/trusteebillingoverview/{trustorOrgId}": {
      "operationId": "getbillingtrusteebillingoverviewtrustororgid",
      "functionName": "getBillingTrusteebillingoverviewTrustorOrgId",
      "signature": "getBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId, billingPeriodIndex)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "billingPeriodIndex",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TrusteeBillingOverview"
    }
  },
  "chat": {
    "GET /api/v2/chat/settings": {
      "operationId": "getchatsettings",
      "functionName": "getChatSettings",
      "signature": "getChatSettings()",
      "return": "ChatSettings"
    },
    "PATCH /api/v2/chat/settings": {
      "operationId": "patchchatsettings",
      "functionName": "patchChatSettings",
      "signature": "patchChatSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ChatSettings"
    },
    "PUT /api/v2/chat/settings": {
      "operationId": "putchatsettings",
      "functionName": "putChatSettings",
      "signature": "putChatSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ChatSettings"
    }
  },
  "coaching": {
    "DELETE /api/v2/coaching/appointments/{appointmentId}": {
      "operationId": "deletecoachingappointment",
      "functionName": "deleteCoachingAppointment",
      "signature": "deleteCoachingAppointment(appointmentId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CoachingAppointmentReference"
    },
    "DELETE /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "operationId": "deletecoachingappointmentannotation",
      "functionName": "deleteCoachingAppointmentAnnotation",
      "signature": "deleteCoachingAppointmentAnnotation(appointmentId, annotationId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "annotationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/coaching/appointments/{appointmentId}": {
      "operationId": "getcoachingappointment",
      "functionName": "getCoachingAppointment",
      "signature": "getCoachingAppointment(appointmentId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "operationId": "getcoachingappointmentannotation",
      "functionName": "getCoachingAppointmentAnnotation",
      "signature": "getCoachingAppointmentAnnotation(appointmentId, annotationId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "annotationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/annotations": {
      "operationId": "getcoachingappointmentannotations",
      "functionName": "getCoachingAppointmentAnnotations",
      "signature": "getCoachingAppointmentAnnotations(appointmentId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "CoachingAnnotationList"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/statuses": {
      "operationId": "getcoachingappointmentstatuses",
      "functionName": "getCoachingAppointmentStatuses",
      "signature": "getCoachingAppointmentStatuses(appointmentId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "CoachingAppointmentStatusResponseList"
    },
    "GET /api/v2/coaching/appointments": {
      "operationId": "getcoachingappointments",
      "functionName": "getCoachingAppointments",
      "signature": "getCoachingAppointments(userIds, interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
      "parameters": [
        {
          "name": "userIds",
          "type": "[String]",
          "required": "true"
        },
        {
          "name": "interval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "statuses",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "facilitatorIds",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "relationships",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "completionInterval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "overdue",
          "type": "String",
          "required": "false"
        },
        {
          "name": "intervalCondition",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CoachingAppointmentResponseList"
    },
    "GET /api/v2/coaching/appointments/me": {
      "operationId": "getcoachingappointmentsme",
      "functionName": "getCoachingAppointmentsMe",
      "signature": "getCoachingAppointmentsMe(interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
      "parameters": [
        {
          "name": "interval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "statuses",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "facilitatorIds",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "relationships",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "completionInterval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "overdue",
          "type": "String",
          "required": "false"
        },
        {
          "name": "intervalCondition",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CoachingAppointmentResponseList"
    },
    "GET /api/v2/coaching/notifications/{notificationId}": {
      "operationId": "getcoachingnotification",
      "functionName": "getCoachingNotification",
      "signature": "getCoachingNotification(notificationId, expand)",
      "parameters": [
        {
          "name": "notificationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "CoachingNotification"
    },
    "GET /api/v2/coaching/notifications": {
      "operationId": "getcoachingnotifications",
      "functionName": "getCoachingNotifications",
      "signature": "getCoachingNotifications(pageNumber, pageSize, expand)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "CoachingNotificationList"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}": {
      "operationId": "patchcoachingappointment",
      "functionName": "patchCoachingAppointment",
      "signature": "patchCoachingAppointment(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "operationId": "patchcoachingappointmentannotation",
      "functionName": "patchCoachingAppointmentAnnotation",
      "signature": "patchCoachingAppointmentAnnotation(appointmentId, annotationId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "annotationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}/status": {
      "operationId": "patchcoachingappointmentstatus",
      "functionName": "patchCoachingAppointmentStatus",
      "signature": "patchCoachingAppointmentStatus(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingAppointmentStatusResponse"
    },
    "PATCH /api/v2/coaching/notifications/{notificationId}": {
      "operationId": "patchcoachingnotification",
      "functionName": "patchCoachingNotification",
      "signature": "patchCoachingNotification(notificationId, body)",
      "parameters": [
        {
          "name": "notificationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingNotification"
    },
    "POST /api/v2/coaching/appointments/{appointmentId}/annotations": {
      "operationId": "postcoachingappointmentannotations",
      "functionName": "postCoachingAppointmentAnnotations",
      "signature": "postCoachingAppointmentAnnotations(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "POST /api/v2/coaching/appointments/{appointmentId}/conversations": {
      "operationId": "postcoachingappointmentconversations",
      "functionName": "postCoachingAppointmentConversations",
      "signature": "postCoachingAppointmentConversations(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AddConversationResponse"
    },
    "POST /api/v2/coaching/appointments": {
      "operationId": "postcoachingappointments",
      "functionName": "postCoachingAppointments",
      "signature": "postCoachingAppointments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "POST /api/v2/coaching/appointments/aggregates/query": {
      "operationId": "postcoachingappointmentsaggregatesquery",
      "functionName": "postCoachingAppointmentsAggregatesQuery",
      "signature": "postCoachingAppointmentsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingAppointmentAggregateResponse"
    },
    "POST /api/v2/coaching/scheduleslots/query": {
      "operationId": "postcoachingscheduleslotsquery",
      "functionName": "postCoachingScheduleslotsQuery",
      "signature": "postCoachingScheduleslotsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CoachingSlotsResponse"
    }
  },
  "contentmanagement": {
    "DELETE /api/v2/contentmanagement/documents/{documentId}": {
      "operationId": "deletecontentmanagementdocument",
      "functionName": "deleteContentmanagementDocument",
      "signature": "deleteContentmanagementDocument(documentId, override)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "override",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/shares/{shareId}": {
      "operationId": "deletecontentmanagementshare",
      "functionName": "deleteContentmanagementShare",
      "signature": "deleteContentmanagementShare(shareId)",
      "parameters": [
        {
          "name": "shareId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/status/{statusId}": {
      "operationId": "deletecontentmanagementstatusstatusid",
      "functionName": "deleteContentmanagementStatusStatusId",
      "signature": "deleteContentmanagementStatusStatusId(statusId)",
      "parameters": [
        {
          "name": "statusId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "operationId": "deletecontentmanagementworkspace",
      "functionName": "deleteContentmanagementWorkspace",
      "signature": "deleteContentmanagementWorkspace(workspaceId, moveChildrenToWorkspaceId)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "moveChildrenToWorkspaceId",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "operationId": "deletecontentmanagementworkspacemember",
      "functionName": "deleteContentmanagementWorkspaceMember",
      "signature": "deleteContentmanagementWorkspaceMember(workspaceId, memberId)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "operationId": "deletecontentmanagementworkspacetagvalue",
      "functionName": "deleteContentmanagementWorkspaceTagvalue",
      "signature": "deleteContentmanagementWorkspaceTagvalue(workspaceId, tagId)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "tagId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/contentmanagement/documents/{documentId}": {
      "operationId": "getcontentmanagementdocument",
      "functionName": "getContentmanagementDocument",
      "signature": "getContentmanagementDocument(documentId, expand)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Document"
    },
    "GET /api/v2/contentmanagement/documents/{documentId}/audits": {
      "operationId": "getcontentmanagementdocumentaudits",
      "functionName": "getContentmanagementDocumentAudits",
      "signature": "getContentmanagementDocumentAudits(documentId, pageSize, pageNumber, transactionFilter, level, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "transactionFilter",
          "type": "String",
          "required": "false"
        },
        {
          "name": "level",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DocumentAuditEntityListing"
    },
    "GET /api/v2/contentmanagement/documents/{documentId}/content": {
      "operationId": "getcontentmanagementdocumentcontent",
      "functionName": "getContentmanagementDocumentContent",
      "signature": "getContentmanagementDocumentContent(documentId, disposition, contentType)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "disposition",
          "type": "String",
          "required": "false"
        },
        {
          "name": "contentType",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/contentmanagement/documents": {
      "operationId": "getcontentmanagementdocuments",
      "functionName": "getContentmanagementDocuments",
      "signature": "getContentmanagementDocuments(workspaceId, name, expand, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DocumentEntityListing"
    },
    "GET /api/v2/contentmanagement/query": {
      "operationId": "getcontentmanagementquery",
      "functionName": "getContentmanagementQuery",
      "signature": "getContentmanagementQuery(queryPhrase, pageSize, pageNumber, sortBy, sortOrder, expand)",
      "parameters": [
        {
          "name": "queryPhrase",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "QueryResults"
    },
    "GET /api/v2/contentmanagement/securityprofiles/{securityProfileId}": {
      "operationId": "getcontentmanagementsecurityprofile",
      "functionName": "getContentmanagementSecurityprofile",
      "signature": "getContentmanagementSecurityprofile(securityProfileId)",
      "parameters": [
        {
          "name": "securityProfileId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SecurityProfile"
    },
    "GET /api/v2/contentmanagement/securityprofiles": {
      "operationId": "getcontentmanagementsecurityprofiles",
      "functionName": "getContentmanagementSecurityprofiles",
      "signature": "getContentmanagementSecurityprofiles()",
      "return": "SecurityProfileEntityListing"
    },
    "GET /api/v2/contentmanagement/shares/{shareId}": {
      "operationId": "getcontentmanagementshare",
      "functionName": "getContentmanagementShare",
      "signature": "getContentmanagementShare(shareId, expand)",
      "parameters": [
        {
          "name": "shareId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Share"
    },
    "GET /api/v2/contentmanagement/shared/{sharedId}": {
      "operationId": "getcontentmanagementsharedsharedid",
      "functionName": "getContentmanagementSharedSharedId",
      "signature": "getContentmanagementSharedSharedId(sharedId, redirect, disposition, contentType, expand)",
      "parameters": [
        {
          "name": "sharedId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "redirect",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "disposition",
          "type": "String",
          "required": "false"
        },
        {
          "name": "contentType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SharedResponse"
    },
    "GET /api/v2/contentmanagement/shares": {
      "operationId": "getcontentmanagementshares",
      "functionName": "getContentmanagementShares",
      "signature": "getContentmanagementShares(entityId, expand, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "entityId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ShareEntityListing"
    },
    "GET /api/v2/contentmanagement/status": {
      "operationId": "getcontentmanagementstatus",
      "functionName": "getContentmanagementStatus",
      "signature": "getContentmanagementStatus(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "CommandStatusEntityListing"
    },
    "GET /api/v2/contentmanagement/status/{statusId}": {
      "operationId": "getcontentmanagementstatusstatusid",
      "functionName": "getContentmanagementStatusStatusId",
      "signature": "getContentmanagementStatusStatusId(statusId)",
      "parameters": [
        {
          "name": "statusId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CommandStatus"
    },
    "GET /api/v2/contentmanagement/usage": {
      "operationId": "getcontentmanagementusage",
      "functionName": "getContentmanagementUsage",
      "signature": "getContentmanagementUsage()",
      "return": "Usage"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "operationId": "getcontentmanagementworkspace",
      "functionName": "getContentmanagementWorkspace",
      "signature": "getContentmanagementWorkspace(workspaceId, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Workspace"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/documents": {
      "operationId": "getcontentmanagementworkspacedocuments",
      "functionName": "getContentmanagementWorkspaceDocuments",
      "signature": "getContentmanagementWorkspaceDocuments(workspaceId, expand, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DocumentEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "operationId": "getcontentmanagementworkspacemember",
      "functionName": "getContentmanagementWorkspaceMember",
      "signature": "getContentmanagementWorkspaceMember(workspaceId, memberId, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkspaceMember"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/members": {
      "operationId": "getcontentmanagementworkspacemembers",
      "functionName": "getContentmanagementWorkspaceMembers",
      "signature": "getContentmanagementWorkspaceMembers(workspaceId, pageSize, pageNumber, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkspaceMemberEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "operationId": "getcontentmanagementworkspacetagvalue",
      "functionName": "getContentmanagementWorkspaceTagvalue",
      "signature": "getContentmanagementWorkspaceTagvalue(workspaceId, tagId, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "tagId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "TagValue"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues": {
      "operationId": "getcontentmanagementworkspacetagvalues",
      "functionName": "getContentmanagementWorkspaceTagvalues",
      "signature": "getContentmanagementWorkspaceTagvalues(workspaceId, value, pageSize, pageNumber, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "value",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "TagValueEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces": {
      "operationId": "getcontentmanagementworkspaces",
      "functionName": "getContentmanagementWorkspaces",
      "signature": "getContentmanagementWorkspaces(pageSize, pageNumber, access, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "access",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkspaceEntityListing"
    },
    "POST /api/v2/contentmanagement/auditquery": {
      "operationId": "postcontentmanagementauditquery",
      "functionName": "postContentmanagementAuditquery",
      "signature": "postContentmanagementAuditquery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "QueryResults"
    },
    "POST /api/v2/contentmanagement/documents/{documentId}": {
      "operationId": "postcontentmanagementdocument",
      "functionName": "postContentmanagementDocument",
      "signature": "postContentmanagementDocument(documentId, body, expand, override)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "override",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "Document"
    },
    "POST /api/v2/contentmanagement/documents/{documentId}/content": {
      "operationId": "postcontentmanagementdocumentcontent",
      "functionName": "postContentmanagementDocumentContent",
      "signature": "postContentmanagementDocumentContent(documentId, body, override)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "override",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "ReplaceResponse"
    },
    "POST /api/v2/contentmanagement/documents": {
      "operationId": "postcontentmanagementdocuments",
      "functionName": "postContentmanagementDocuments",
      "signature": "postContentmanagementDocuments(body, copySource, moveSource, override)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "copySource",
          "type": "String",
          "required": "false"
        },
        {
          "name": "moveSource",
          "type": "String",
          "required": "false"
        },
        {
          "name": "override",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "Document"
    },
    "POST /api/v2/contentmanagement/query": {
      "operationId": "postcontentmanagementquery",
      "functionName": "postContentmanagementQuery",
      "signature": "postContentmanagementQuery(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "QueryResults"
    },
    "POST /api/v2/contentmanagement/shares": {
      "operationId": "postcontentmanagementshares",
      "functionName": "postContentmanagementShares",
      "signature": "postContentmanagementShares(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CreateShareResponse"
    },
    "POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues": {
      "operationId": "postcontentmanagementworkspacetagvalues",
      "functionName": "postContentmanagementWorkspaceTagvalues",
      "signature": "postContentmanagementWorkspaceTagvalues(workspaceId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TagValue"
    },
    "POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query": {
      "operationId": "postcontentmanagementworkspacetagvaluesquery",
      "functionName": "postContentmanagementWorkspaceTagvaluesQuery",
      "signature": "postContentmanagementWorkspaceTagvaluesQuery(workspaceId, body, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "TagValueEntityListing"
    },
    "POST /api/v2/contentmanagement/workspaces": {
      "operationId": "postcontentmanagementworkspaces",
      "functionName": "postContentmanagementWorkspaces",
      "signature": "postContentmanagementWorkspaces(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Workspace"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "operationId": "putcontentmanagementworkspace",
      "functionName": "putContentmanagementWorkspace",
      "signature": "putContentmanagementWorkspace(workspaceId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Workspace"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "operationId": "putcontentmanagementworkspacemember",
      "functionName": "putContentmanagementWorkspaceMember",
      "signature": "putContentmanagementWorkspaceMember(workspaceId, memberId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WorkspaceMember"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "operationId": "putcontentmanagementworkspacetagvalue",
      "functionName": "putContentmanagementWorkspaceTagvalue",
      "signature": "putContentmanagementWorkspaceTagvalue(workspaceId, tagId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "tagId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TagValue"
    }
  },
  "conversations": {
    "DELETE /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "operationId": "deleteanalyticsconversationsdetailsjob",
      "functionName": "deleteAnalyticsConversationsDetailsJob",
      "signature": "deleteAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}": {
      "operationId": "deleteconversationparticipantcode",
      "functionName": "deleteConversationParticipantCode",
      "signature": "deleteConversationParticipantCode(conversationId, participantId, addCommunicationCode)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "addCommunicationCode",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason": {
      "operationId": "deleteconversationparticipantflaggedreason",
      "functionName": "deleteConversationParticipantFlaggedreason",
      "signature": "deleteConversationParticipantFlaggedreason(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "operationId": "deleteconversationscallparticipantconsult",
      "functionName": "deleteConversationsCallParticipantConsult",
      "signature": "deleteConversationsCallParticipantConsult(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/{attachmentId}": {
      "operationId": "deleteconversationsemailmessagesdraftattachment",
      "functionName": "deleteConversationsEmailMessagesDraftAttachment",
      "signature": "deleteConversationsEmailMessagesDraftAttachment(conversationId, attachmentId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "attachmentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "operationId": "deleteconversationsmessagingintegrationsfacebookintegrationid",
      "functionName": "deleteConversationsMessagingIntegrationsFacebookIntegrationId",
      "signature": "deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "operationId": "deleteconversationsmessagingintegrationslineintegrationid",
      "functionName": "deleteConversationsMessagingIntegrationsLineIntegrationId",
      "signature": "deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "operationId": "deleteconversationsmessagingintegrationsopenintegrationid",
      "functionName": "deleteConversationsMessagingIntegrationsOpenIntegrationId",
      "signature": "deleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "operationId": "deleteconversationsmessagingintegrationstwitterintegrationid",
      "functionName": "deleteConversationsMessagingIntegrationsTwitterIntegrationId",
      "signature": "deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "operationId": "deleteconversationsmessagingintegrationswhatsappintegrationid",
      "functionName": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId",
      "signature": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "operationId": "deleteconversationsmessagingsupportedcontentsupportedcontentid",
      "functionName": "deleteConversationsMessagingSupportedcontentSupportedContentId",
      "signature": "deleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/analytics/conversations/{conversationId}/details": {
      "operationId": "getanalyticsconversationdetails",
      "functionName": "getAnalyticsConversationDetails",
      "signature": "getAnalyticsConversationDetails(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributes"
    },
    "GET /api/v2/analytics/conversations/details": {
      "operationId": "getanalyticsconversationsdetails",
      "functionName": "getAnalyticsConversationsDetails",
      "signature": "getAnalyticsConversationsDetails(id)",
      "parameters": [
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "operationId": "getanalyticsconversationsdetailsjob",
      "functionName": "getAnalyticsConversationsDetailsJob",
      "signature": "getAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}/results": {
      "operationId": "getanalyticsconversationsdetailsjobresults",
      "functionName": "getAnalyticsConversationsDetailsJobResults",
      "signature": "getAnalyticsConversationsDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "AnalyticsConversationAsyncQueryResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/availability": {
      "operationId": "getanalyticsconversationsdetailsjobsavailability",
      "functionName": "getAnalyticsConversationsDetailsJobsAvailability",
      "signature": "getAnalyticsConversationsDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/conversations/{conversationId}": {
      "operationId": "getconversation",
      "functionName": "getConversation",
      "signature": "getConversation(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions/{secureSessionId}": {
      "operationId": "getconversationparticipantsecureivrsession",
      "functionName": "getConversationParticipantSecureivrsession",
      "signature": "getConversationParticipantSecureivrsession(conversationId, participantId, secureSessionId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "secureSessionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SecureSession"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions": {
      "operationId": "getconversationparticipantsecureivrsessions",
      "functionName": "getConversationParticipantSecureivrsessions",
      "signature": "getConversationParticipantSecureivrsessions(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SecureSessionEntityListing"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapup": {
      "operationId": "getconversationparticipantwrapup",
      "functionName": "getConversationParticipantWrapup",
      "signature": "getConversationParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "provisional",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes": {
      "operationId": "getconversationparticipantwrapupcodes",
      "functionName": "getConversationParticipantWrapupcodes",
      "signature": "getConversationParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "GET /api/v2/conversations": {
      "operationId": "getconversations",
      "functionName": "getConversations",
      "signature": "getConversations(communicationType)",
      "parameters": [
        {
          "name": "communicationType",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/{conversationId}": {
      "operationId": "getconversationscall",
      "functionName": "getConversationsCall",
      "signature": "getConversationsCall(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CallConversation"
    },
    "GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapup": {
      "operationId": "getconversationscallparticipantwrapup",
      "functionName": "getConversationsCallParticipantWrapup",
      "signature": "getConversationsCallParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "provisional",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapupcodes": {
      "operationId": "getconversationscallparticipantwrapupcodes",
      "functionName": "getConversationsCallParticipantWrapupcodes",
      "signature": "getConversationsCallParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}": {
      "operationId": "getconversationscallback",
      "functionName": "getConversationsCallback",
      "signature": "getConversationsCallback(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CallbackConversation"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapup": {
      "operationId": "getconversationscallbackparticipantwrapup",
      "functionName": "getConversationsCallbackParticipantWrapup",
      "signature": "getConversationsCallbackParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "provisional",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapupcodes": {
      "operationId": "getconversationscallbackparticipantwrapupcodes",
      "functionName": "getConversationsCallbackParticipantWrapupcodes",
      "signature": "getConversationsCallbackParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "GET /api/v2/conversations/callbacks": {
      "operationId": "getconversationscallbacks",
      "functionName": "getConversationsCallbacks",
      "signature": "getConversationsCallbacks()",
      "return": "CallbackConversationEntityListing"
    },
    "GET /api/v2/conversations/calls": {
      "operationId": "getconversationscalls",
      "functionName": "getConversationsCalls",
      "signature": "getConversationsCalls()",
      "return": "CallConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/history": {
      "operationId": "getconversationscallshistory",
      "functionName": "getConversationsCallsHistory",
      "signature": "getConversationsCallsHistory(pageSize, pageNumber, interval, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "interval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "CallHistoryConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/maximumconferenceparties": {
      "operationId": "getconversationscallsmaximumconferenceparties",
      "functionName": "getConversationsCallsMaximumconferenceparties",
      "signature": "getConversationsCallsMaximumconferenceparties()",
      "return": "MaxParticipants"
    },
    "GET /api/v2/conversations/chats/{conversationId}": {
      "operationId": "getconversationschat",
      "functionName": "getConversationsChat",
      "signature": "getConversationsChat(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ChatConversation"
    },
    "GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}": {
      "operationId": "getconversationschatmessage",
      "functionName": "getConversationsChatMessage",
      "signature": "getConversationsChatMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatMessage"
    },
    "GET /api/v2/conversations/chats/{conversationId}/messages": {
      "operationId": "getconversationschatmessages",
      "functionName": "getConversationsChatMessages",
      "signature": "getConversationsChatMessages(conversationId, after, before, sortOrder, maxResults)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "maxResults",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "WebChatMessageEntityList"
    },
    "GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapup": {
      "operationId": "getconversationschatparticipantwrapup",
      "functionName": "getConversationsChatParticipantWrapup",
      "signature": "getConversationsChatParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "provisional",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapupcodes": {
      "operationId": "getconversationschatparticipantwrapupcodes",
      "functionName": "getConversationsChatParticipantWrapupcodes",
      "signature": "getConversationsChatParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "GET /api/v2/conversations/chats": {
      "operationId": "getconversationschats",
      "functionName": "getConversationsChats",
      "signature": "getConversationsChats()",
      "return": "ChatConversationEntityListing"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}": {
      "operationId": "getconversationscobrowsesession",
      "functionName": "getConversationsCobrowsesession",
      "signature": "getConversationsCobrowsesession(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CobrowseConversation"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapup": {
      "operationId": "getconversationscobrowsesessionparticipantwrapup",
      "functionName": "getConversationsCobrowsesessionParticipantWrapup",
      "signature": "getConversationsCobrowsesessionParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "provisional",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapupcodes": {
      "operationId": "getconversationscobrowsesessionparticipantwrapupcodes",
      "functionName": "getConversationsCobrowsesessionParticipantWrapupcodes",
      "signature": "getConversationsCobrowsesessionParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "GET /api/v2/conversations/cobrowsesessions": {
      "operationId": "getconversationscobrowsesessions",
      "functionName": "getConversationsCobrowsesessions",
      "signature": "getConversationsCobrowsesessions()",
      "return": "CobrowseConversationEntityListing"
    },
    "GET /api/v2/conversations/emails/{conversationId}": {
      "operationId": "getconversationsemail",
      "functionName": "getConversationsEmail",
      "signature": "getConversationsEmail(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EmailConversation"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages/{messageId}": {
      "operationId": "getconversationsemailmessage",
      "functionName": "getConversationsEmailMessage",
      "signature": "getConversationsEmailMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EmailMessage"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages": {
      "operationId": "getconversationsemailmessages",
      "functionName": "getConversationsEmailMessages",
      "signature": "getConversationsEmailMessages(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EmailMessageListing"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages/draft": {
      "operationId": "getconversationsemailmessagesdraft",
      "functionName": "getConversationsEmailMessagesDraft",
      "signature": "getConversationsEmailMessagesDraft(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EmailMessage"
    },
    "GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapup": {
      "operationId": "getconversationsemailparticipantwrapup",
      "functionName": "getConversationsEmailParticipantWrapup",
      "signature": "getConversationsEmailParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "provisional",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapupcodes": {
      "operationId": "getconversationsemailparticipantwrapupcodes",
      "functionName": "getConversationsEmailParticipantWrapupcodes",
      "signature": "getConversationsEmailParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "GET /api/v2/conversations/emails/{conversationId}/settings": {
      "operationId": "getconversationsemailsettings",
      "functionName": "getConversationsEmailSettings",
      "signature": "getConversationsEmailSettings(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EmailsSettings"
    },
    "GET /api/v2/conversations/emails": {
      "operationId": "getconversationsemails",
      "functionName": "getConversationsEmails",
      "signature": "getConversationsEmails()",
      "return": "EmailConversationEntityListing"
    },
    "GET /api/v2/conversations/messages/{conversationId}": {
      "operationId": "getconversationsmessage",
      "functionName": "getConversationsMessage",
      "signature": "getConversationsMessage(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessageConversation"
    },
    "GET /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media/{mediaId}": {
      "operationId": "getconversationsmessagecommunicationmessagesmediamediaid",
      "functionName": "getConversationsMessageCommunicationMessagesMediaMediaId",
      "signature": "getConversationsMessageCommunicationMessagesMediaMediaId(conversationId, communicationId, mediaId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "mediaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessageMediaData"
    },
    "GET /api/v2/conversations/messages/{messageId}/details": {
      "operationId": "getconversationsmessagedetails",
      "functionName": "getConversationsMessageDetails",
      "signature": "getConversationsMessageDetails(messageId)",
      "parameters": [
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessageData"
    },
    "GET /api/v2/conversations/messages/{conversationId}/messages/{messageId}": {
      "operationId": "getconversationsmessagemessage",
      "functionName": "getConversationsMessageMessage",
      "signature": "getConversationsMessageMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessageData"
    },
    "GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapup": {
      "operationId": "getconversationsmessageparticipantwrapup",
      "functionName": "getConversationsMessageParticipantWrapup",
      "signature": "getConversationsMessageParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "provisional",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapupcodes": {
      "operationId": "getconversationsmessageparticipantwrapupcodes",
      "functionName": "getConversationsMessageParticipantWrapupcodes",
      "signature": "getConversationsMessageParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "GET /api/v2/conversations/messages": {
      "operationId": "getconversationsmessages",
      "functionName": "getConversationsMessages",
      "signature": "getConversationsMessages()",
      "return": "MessageConversationEntityListing"
    },
    "GET /api/v2/conversations/messaging/facebook/app": {
      "operationId": "getconversationsmessagingfacebookapp",
      "functionName": "getConversationsMessagingFacebookApp",
      "signature": "getConversationsMessagingFacebookApp()",
      "return": "FacebookAppCredentials"
    },
    "GET /api/v2/conversations/messaging/integrations": {
      "operationId": "getconversationsmessagingintegrations",
      "functionName": "getConversationsMessagingIntegrations",
      "signature": "getConversationsMessagingIntegrations(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "MessagingIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/facebook": {
      "operationId": "getconversationsmessagingintegrationsfacebook",
      "functionName": "getConversationsMessagingIntegrationsFacebook",
      "signature": "getConversationsMessagingIntegrationsFacebook(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "FacebookIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "operationId": "getconversationsmessagingintegrationsfacebookintegrationid",
      "functionName": "getConversationsMessagingIntegrationsFacebookIntegrationId",
      "signature": "getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "FacebookIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/line": {
      "operationId": "getconversationsmessagingintegrationsline",
      "functionName": "getConversationsMessagingIntegrationsLine",
      "signature": "getConversationsMessagingIntegrationsLine(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LineIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "operationId": "getconversationsmessagingintegrationslineintegrationid",
      "functionName": "getConversationsMessagingIntegrationsLineIntegrationId",
      "signature": "getConversationsMessagingIntegrationsLineIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LineIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/open": {
      "operationId": "getconversationsmessagingintegrationsopen",
      "functionName": "getConversationsMessagingIntegrationsOpen",
      "signature": "getConversationsMessagingIntegrationsOpen(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OpenIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "operationId": "getconversationsmessagingintegrationsopenintegrationid",
      "functionName": "getConversationsMessagingIntegrationsOpenIntegrationId",
      "signature": "getConversationsMessagingIntegrationsOpenIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OpenIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/twitter": {
      "operationId": "getconversationsmessagingintegrationstwitter",
      "functionName": "getConversationsMessagingIntegrationsTwitter",
      "signature": "getConversationsMessagingIntegrationsTwitter(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TwitterIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "operationId": "getconversationsmessagingintegrationstwitterintegrationid",
      "functionName": "getConversationsMessagingIntegrationsTwitterIntegrationId",
      "signature": "getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TwitterIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/whatsapp": {
      "operationId": "getconversationsmessagingintegrationswhatsapp",
      "functionName": "getConversationsMessagingIntegrationsWhatsapp",
      "signature": "getConversationsMessagingIntegrationsWhatsapp(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WhatsAppIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "operationId": "getconversationsmessagingintegrationswhatsappintegrationid",
      "functionName": "getConversationsMessagingIntegrationsWhatsappIntegrationId",
      "signature": "getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "GET /api/v2/conversations/messaging/stickers/{messengerType}": {
      "operationId": "getconversationsmessagingsticker",
      "functionName": "getConversationsMessagingSticker",
      "signature": "getConversationsMessagingSticker(messengerType, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "messengerType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "MessagingStickerEntityListing"
    },
    "GET /api/v2/conversations/messaging/supportedcontent": {
      "operationId": "getconversationsmessagingsupportedcontent",
      "functionName": "getConversationsMessagingSupportedcontent",
      "signature": "getConversationsMessagingSupportedcontent(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "SupportedContentListing"
    },
    "GET /api/v2/conversations/messaging/supportedcontent/default": {
      "operationId": "getconversationsmessagingsupportedcontentdefault",
      "functionName": "getConversationsMessagingSupportedcontentDefault",
      "signature": "getConversationsMessagingSupportedcontentDefault()",
      "return": "SupportedContent"
    },
    "GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "operationId": "getconversationsmessagingsupportedcontentsupportedcontentid",
      "functionName": "getConversationsMessagingSupportedcontentSupportedContentId",
      "signature": "getConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SupportedContent"
    },
    "GET /api/v2/conversations/messaging/threadingtimeline": {
      "operationId": "getconversationsmessagingthreadingtimeline",
      "functionName": "getConversationsMessagingThreadingtimeline",
      "signature": "getConversationsMessagingThreadingtimeline()",
      "return": "ConversationThreadingWindow"
    },
    "PATCH /api/v2/conversations/{conversationId}/participants/{participantId}": {
      "operationId": "patchconversationparticipant",
      "functionName": "patchConversationParticipant",
      "signature": "patchConversationParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes": {
      "operationId": "patchconversationparticipantattributes",
      "functionName": "patchConversationParticipantAttributes",
      "signature": "patchConversationParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}": {
      "operationId": "patchconversationscall",
      "functionName": "patchConversationsCall",
      "signature": "patchConversationsCall(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}": {
      "operationId": "patchconversationscallparticipant",
      "functionName": "patchConversationsCallParticipant",
      "signature": "patchConversationsCallParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/attributes": {
      "operationId": "patchconversationscallparticipantattributes",
      "functionName": "patchConversationsCallParticipantAttributes",
      "signature": "patchConversationsCallParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "operationId": "patchconversationscallparticipantcommunication",
      "functionName": "patchConversationsCallParticipantCommunication",
      "signature": "patchConversationsCallParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "operationId": "patchconversationscallparticipantconsult",
      "functionName": "patchConversationsCallParticipantConsult",
      "signature": "patchConversationsCallParticipantConsult(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ConsultTransferResponse"
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}": {
      "operationId": "patchconversationscallback",
      "functionName": "patchConversationsCallback",
      "signature": "patchConversationsCallback(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}": {
      "operationId": "patchconversationscallbackparticipant",
      "functionName": "patchConversationsCallbackParticipant",
      "signature": "patchConversationsCallbackParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/attributes": {
      "operationId": "patchconversationscallbackparticipantattributes",
      "functionName": "patchConversationsCallbackParticipantAttributes",
      "signature": "patchConversationsCallbackParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "operationId": "patchconversationscallbackparticipantcommunication",
      "functionName": "patchConversationsCallbackParticipantCommunication",
      "signature": "patchConversationsCallbackParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/chats/{conversationId}": {
      "operationId": "patchconversationschat",
      "functionName": "patchConversationsChat",
      "signature": "patchConversationsChat(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}": {
      "operationId": "patchconversationschatparticipant",
      "functionName": "patchConversationsChatParticipant",
      "signature": "patchConversationsChatParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes": {
      "operationId": "patchconversationschatparticipantattributes",
      "functionName": "patchConversationsChatParticipantAttributes",
      "signature": "patchConversationsChatParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "operationId": "patchconversationschatparticipantcommunication",
      "functionName": "patchConversationsChatParticipantCommunication",
      "signature": "patchConversationsChatParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}": {
      "operationId": "patchconversationscobrowsesession",
      "functionName": "patchConversationsCobrowsesession",
      "signature": "patchConversationsCobrowsesession(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}": {
      "operationId": "patchconversationscobrowsesessionparticipant",
      "functionName": "patchConversationsCobrowsesessionParticipant",
      "signature": "patchConversationsCobrowsesessionParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes": {
      "operationId": "patchconversationscobrowsesessionparticipantattributes",
      "functionName": "patchConversationsCobrowsesessionParticipantAttributes",
      "signature": "patchConversationsCobrowsesessionParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "operationId": "patchconversationscobrowsesessionparticipantcommunication",
      "functionName": "patchConversationsCobrowsesessionParticipantCommunication",
      "signature": "patchConversationsCobrowsesessionParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/emails/{conversationId}": {
      "operationId": "patchconversationsemail",
      "functionName": "patchConversationsEmail",
      "signature": "patchConversationsEmail(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}": {
      "operationId": "patchconversationsemailparticipant",
      "functionName": "patchConversationsEmailParticipant",
      "signature": "patchConversationsEmailParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/attributes": {
      "operationId": "patchconversationsemailparticipantattributes",
      "functionName": "patchConversationsEmailParticipantAttributes",
      "signature": "patchConversationsEmailParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "operationId": "patchconversationsemailparticipantcommunication",
      "functionName": "patchConversationsEmailParticipantCommunication",
      "signature": "patchConversationsEmailParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/messages/{conversationId}": {
      "operationId": "patchconversationsmessage",
      "functionName": "patchConversationsMessage",
      "signature": "patchConversationsMessage(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}": {
      "operationId": "patchconversationsmessageparticipant",
      "functionName": "patchConversationsMessageParticipant",
      "signature": "patchConversationsMessageParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/attributes": {
      "operationId": "patchconversationsmessageparticipantattributes",
      "functionName": "patchConversationsMessageParticipantAttributes",
      "signature": "patchConversationsMessageParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "operationId": "patchconversationsmessageparticipantcommunication",
      "functionName": "patchConversationsMessageParticipantCommunication",
      "signature": "patchConversationsMessageParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "operationId": "patchconversationsmessagingintegrationsfacebookintegrationid",
      "functionName": "patchConversationsMessagingIntegrationsFacebookIntegrationId",
      "signature": "patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FacebookIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "operationId": "patchconversationsmessagingintegrationsopenintegrationid",
      "functionName": "patchConversationsMessagingIntegrationsOpenIntegrationId",
      "signature": "patchConversationsMessagingIntegrationsOpenIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OpenIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "operationId": "patchconversationsmessagingintegrationstwitterintegrationid",
      "functionName": "patchConversationsMessagingIntegrationsTwitterIntegrationId",
      "signature": "patchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TwitterIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "operationId": "patchconversationsmessagingintegrationswhatsappintegrationid",
      "functionName": "patchConversationsMessagingIntegrationsWhatsappIntegrationId",
      "signature": "patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "operationId": "patchconversationsmessagingsupportedcontentsupportedcontentid",
      "functionName": "patchConversationsMessagingSupportedcontentSupportedContentId",
      "signature": "patchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SupportedContent"
    },
    "POST /api/v2/analytics/conversations/{conversationId}/details/properties": {
      "operationId": "postanalyticsconversationdetailsproperties",
      "functionName": "postAnalyticsConversationDetailsProperties",
      "signature": "postAnalyticsConversationDetailsProperties(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "PropertyIndexRequest"
    },
    "POST /api/v2/analytics/conversations/aggregates/query": {
      "operationId": "postanalyticsconversationsaggregatesquery",
      "functionName": "postAnalyticsConversationsAggregatesQuery",
      "signature": "postAnalyticsConversationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ConversationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/jobs": {
      "operationId": "postanalyticsconversationsdetailsjobs",
      "functionName": "postAnalyticsConversationsDetailsJobs",
      "signature": "postAnalyticsConversationsDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/query": {
      "operationId": "postanalyticsconversationsdetailsquery",
      "functionName": "postAnalyticsConversationsDetailsQuery",
      "signature": "postAnalyticsConversationsDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AnalyticsConversationQueryResponse"
    },
    "POST /api/v2/conversations/{conversationId}/assign": {
      "operationId": "postconversationassign",
      "functionName": "postConversationAssign",
      "signature": "postConversationAssign(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "POST /api/v2/conversations/{conversationId}/disconnect": {
      "operationId": "postconversationdisconnect",
      "functionName": "postConversationDisconnect",
      "signature": "postConversationDisconnect(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/callbacks": {
      "operationId": "postconversationparticipantcallbacks",
      "functionName": "postConversationParticipantCallbacks",
      "signature": "postConversationParticipantCallbacks(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/digits": {
      "operationId": "postconversationparticipantdigits",
      "functionName": "postConversationParticipantDigits",
      "signature": "postConversationParticipantDigits(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace": {
      "operationId": "postconversationparticipantreplace",
      "functionName": "postConversationParticipantReplace",
      "signature": "postConversationParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions": {
      "operationId": "postconversationparticipantsecureivrsessions",
      "functionName": "postConversationParticipantSecureivrsessions",
      "signature": "postConversationParticipantSecureivrsessions(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "SecureSession"
    },
    "POST /api/v2/conversations/calls/{conversationId}": {
      "operationId": "postconversationscall",
      "functionName": "postConversationsCall",
      "signature": "postConversationsCall(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/coach": {
      "operationId": "postconversationscallparticipantcoach",
      "functionName": "postConversationsCallParticipantCoach",
      "signature": "postConversationsCallParticipantCoach(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "operationId": "postconversationscallparticipantconsult",
      "functionName": "postConversationsCallParticipantConsult",
      "signature": "postConversationsCallParticipantConsult(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ConsultTransferResponse"
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/monitor": {
      "operationId": "postconversationscallparticipantmonitor",
      "functionName": "postConversationsCallParticipantMonitor",
      "signature": "postConversationsCallParticipantMonitor(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/replace": {
      "operationId": "postconversationscallparticipantreplace",
      "functionName": "postConversationsCallParticipantReplace",
      "signature": "postConversationsCallParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants": {
      "operationId": "postconversationscallparticipants",
      "functionName": "postConversationsCallParticipants",
      "signature": "postConversationsCallParticipants(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Conversation"
    },
    "POST /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/replace": {
      "operationId": "postconversationscallbackparticipantreplace",
      "functionName": "postConversationsCallbackParticipantReplace",
      "signature": "postConversationsCallbackParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/callbacks": {
      "operationId": "postconversationscallbacks",
      "functionName": "postConversationsCallbacks",
      "signature": "postConversationsCallbacks(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CreateCallbackResponse"
    },
    "POST /api/v2/conversations/calls": {
      "operationId": "postconversationscalls",
      "functionName": "postConversationsCalls",
      "signature": "postConversationsCalls(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CreateCallResponse"
    },
    "POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/messages": {
      "operationId": "postconversationschatcommunicationmessages",
      "functionName": "postConversationsChatCommunicationMessages",
      "signature": "postConversationsChatCommunicationMessages(conversationId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebChatMessage"
    },
    "POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing": {
      "operationId": "postconversationschatcommunicationtyping",
      "functionName": "postConversationsChatCommunicationTyping",
      "signature": "postConversationsChatCommunicationTyping(conversationId, communicationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatTyping"
    },
    "POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/replace": {
      "operationId": "postconversationschatparticipantreplace",
      "functionName": "postConversationsChatParticipantReplace",
      "signature": "postConversationsChatParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/chats": {
      "operationId": "postconversationschats",
      "functionName": "postConversationsChats",
      "signature": "postConversationsChats(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ChatConversation"
    },
    "POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace": {
      "operationId": "postconversationscobrowsesessionparticipantreplace",
      "functionName": "postConversationsCobrowsesessionParticipantReplace",
      "signature": "postConversationsCobrowsesessionParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/conversations/emails/{conversationId}/inboundmessages": {
      "operationId": "postconversationsemailinboundmessages",
      "functionName": "postConversationsEmailInboundmessages",
      "signature": "postConversationsEmailInboundmessages(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmailConversation"
    },
    "POST /api/v2/conversations/emails/{conversationId}/messages": {
      "operationId": "postconversationsemailmessages",
      "functionName": "postConversationsEmailMessages",
      "signature": "postConversationsEmailMessages(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmailMessage"
    },
    "POST /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/copy": {
      "operationId": "postconversationsemailmessagesdraftattachmentscopy",
      "functionName": "postConversationsEmailMessagesDraftAttachmentsCopy",
      "signature": "postConversationsEmailMessagesDraftAttachmentsCopy(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmailMessage"
    },
    "POST /api/v2/conversations/emails/{conversationId}/participants/{participantId}/replace": {
      "operationId": "postconversationsemailparticipantreplace",
      "functionName": "postConversationsEmailParticipantReplace",
      "signature": "postConversationsEmailParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/emails": {
      "operationId": "postconversationsemails",
      "functionName": "postConversationsEmails",
      "signature": "postConversationsEmails(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmailConversation"
    },
    "POST /api/v2/conversations/faxes": {
      "operationId": "postconversationsfaxes",
      "functionName": "postConversationsFaxes",
      "signature": "postConversationsFaxes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FaxSendResponse"
    },
    "POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages": {
      "operationId": "postconversationsmessagecommunicationmessages",
      "functionName": "postConversationsMessageCommunicationMessages",
      "signature": "postConversationsMessageCommunicationMessages(conversationId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "MessageData"
    },
    "POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media": {
      "operationId": "postconversationsmessagecommunicationmessagesmedia",
      "functionName": "postConversationsMessageCommunicationMessagesMedia",
      "signature": "postConversationsMessageCommunicationMessagesMedia(conversationId, communicationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessageMediaData"
    },
    "POST /api/v2/conversations/messages/{conversationId}/messages/bulk": {
      "operationId": "postconversationsmessagemessagesbulk",
      "functionName": "postConversationsMessageMessagesBulk",
      "signature": "postConversationsMessageMessagesBulk(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TextMessageListing"
    },
    "POST /api/v2/conversations/messages/{conversationId}/participants/{participantId}/replace": {
      "operationId": "postconversationsmessageparticipantreplace",
      "functionName": "postConversationsMessageParticipantReplace",
      "signature": "postConversationsMessageParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/conversations/messages": {
      "operationId": "postconversationsmessages",
      "functionName": "postConversationsMessages",
      "signature": "postConversationsMessages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "MessageConversation"
    },
    "POST /api/v2/conversations/messages/agentless": {
      "operationId": "postconversationsmessagesagentless",
      "functionName": "postConversationsMessagesAgentless",
      "signature": "postConversationsMessagesAgentless(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SendAgentlessOutboundMessageResponse"
    },
    "POST /api/v2/conversations/messages/inbound/open": {
      "operationId": "postconversationsmessagesinboundopen",
      "functionName": "postConversationsMessagesInboundOpen",
      "signature": "postConversationsMessagesInboundOpen(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OpenNormalizedMessage"
    },
    "POST /api/v2/conversations/messaging/integrations/facebook": {
      "operationId": "postconversationsmessagingintegrationsfacebook",
      "functionName": "postConversationsMessagingIntegrationsFacebook",
      "signature": "postConversationsMessagingIntegrationsFacebook(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FacebookIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/line": {
      "operationId": "postconversationsmessagingintegrationsline",
      "functionName": "postConversationsMessagingIntegrationsLine",
      "signature": "postConversationsMessagingIntegrationsLine(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LineIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/open": {
      "operationId": "postconversationsmessagingintegrationsopen",
      "functionName": "postConversationsMessagingIntegrationsOpen",
      "signature": "postConversationsMessagingIntegrationsOpen(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OpenIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/twitter": {
      "operationId": "postconversationsmessagingintegrationstwitter",
      "functionName": "postConversationsMessagingIntegrationsTwitter",
      "signature": "postConversationsMessagingIntegrationsTwitter(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TwitterIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/whatsapp": {
      "operationId": "postconversationsmessagingintegrationswhatsapp",
      "functionName": "postConversationsMessagingIntegrationsWhatsapp",
      "signature": "postConversationsMessagingIntegrationsWhatsapp(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "POST /api/v2/conversations/messaging/supportedcontent": {
      "operationId": "postconversationsmessagingsupportedcontent",
      "functionName": "postConversationsMessagingSupportedcontent",
      "signature": "postConversationsMessagingSupportedcontent(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SupportedContent"
    },
    "PUT /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason": {
      "operationId": "putconversationparticipantflaggedreason",
      "functionName": "putConversationParticipantFlaggedreason",
      "signature": "putConversationParticipantFlaggedreason(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "PUT /api/v2/conversations/{conversationId}/tags": {
      "operationId": "putconversationtags",
      "functionName": "putConversationTags",
      "signature": "putConversationTags(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "PUT /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}/uuidata": {
      "operationId": "putconversationscallparticipantcommunicationuuidata",
      "functionName": "putConversationsCallParticipantCommunicationUuidata",
      "signature": "putConversationsCallParticipantCommunicationUuidata(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "participantId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "PUT /api/v2/conversations/emails/{conversationId}/messages/draft": {
      "operationId": "putconversationsemailmessagesdraft",
      "functionName": "putConversationsEmailMessagesDraft",
      "signature": "putConversationsEmailMessagesDraft(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmailMessage"
    },
    "PUT /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "operationId": "putconversationsmessagingintegrationslineintegrationid",
      "functionName": "putConversationsMessagingIntegrationsLineIntegrationId",
      "signature": "putConversationsMessagingIntegrationsLineIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LineIntegration"
    },
    "PUT /api/v2/conversations/messaging/supportedcontent/default": {
      "operationId": "putconversationsmessagingsupportedcontentdefault",
      "functionName": "putConversationsMessagingSupportedcontentDefault",
      "signature": "putConversationsMessagingSupportedcontentDefault(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SupportedContent"
    },
    "PUT /api/v2/conversations/messaging/threadingtimeline": {
      "operationId": "putconversationsmessagingthreadingtimeline",
      "functionName": "putConversationsMessagingThreadingtimeline",
      "signature": "putConversationsMessagingThreadingtimeline(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ConversationThreadingWindow"
    }
  },
  "dataextensions": {
    "GET /api/v2/dataextensions/coretypes/{coretypeName}": {
      "operationId": "getdataextensionscoretype",
      "functionName": "getDataextensionsCoretype",
      "signature": "getDataextensionsCoretype(coretypeName)",
      "parameters": [
        {
          "name": "coretypeName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Coretype"
    },
    "GET /api/v2/dataextensions/coretypes": {
      "operationId": "getdataextensionscoretypes",
      "functionName": "getDataextensionsCoretypes",
      "signature": "getDataextensionsCoretypes()",
      "return": "CoretypeListing"
    },
    "GET /api/v2/dataextensions/limits": {
      "operationId": "getdataextensionslimits",
      "functionName": "getDataextensionsLimits",
      "signature": "getDataextensionsLimits()",
      "return": "SchemaQuantityLimits"
    }
  },
  "externalcontacts": {
    "DELETE /api/v2/externalcontacts/contacts/{contactId}": {
      "operationId": "deleteexternalcontactscontact",
      "functionName": "deleteExternalcontactsContact",
      "signature": "deleteExternalcontactsContact(contactId)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "operationId": "deleteexternalcontactscontactnote",
      "functionName": "deleteExternalcontactsContactNote",
      "signature": "deleteExternalcontactsContactNote(contactId, noteId)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "noteId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "operationId": "deleteexternalcontactscontactsschema",
      "functionName": "deleteExternalcontactsContactsSchema",
      "signature": "deleteExternalcontactsContactsSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "operationId": "deleteexternalcontactsorganization",
      "functionName": "deleteExternalcontactsOrganization",
      "signature": "deleteExternalcontactsOrganization(externalOrganizationId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "operationId": "deleteexternalcontactsorganizationnote",
      "functionName": "deleteExternalcontactsOrganizationNote",
      "signature": "deleteExternalcontactsOrganizationNote(externalOrganizationId, noteId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "noteId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor": {
      "operationId": "deleteexternalcontactsorganizationtrustor",
      "functionName": "deleteExternalcontactsOrganizationTrustor",
      "signature": "deleteExternalcontactsOrganizationTrustor(externalOrganizationId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/externalcontacts/relationships/{relationshipId}": {
      "operationId": "deleteexternalcontactsrelationship",
      "functionName": "deleteExternalcontactsRelationship",
      "signature": "deleteExternalcontactsRelationship(relationshipId)",
      "parameters": [
        {
          "name": "relationshipId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}": {
      "operationId": "getexternalcontactscontact",
      "functionName": "getExternalcontactsContact",
      "signature": "getExternalcontactsContact(contactId, expand)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ExternalContact"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "operationId": "getexternalcontactscontactnote",
      "functionName": "getExternalcontactsContactNote",
      "signature": "getExternalcontactsContactNote(contactId, noteId, expand)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "noteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Note"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}/notes": {
      "operationId": "getexternalcontactscontactnotes",
      "functionName": "getExternalcontactsContactNotes",
      "signature": "getExternalcontactsContactNotes(contactId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "NoteListing"
    },
    "GET /api/v2/externalcontacts/contacts": {
      "operationId": "getexternalcontactscontacts",
      "functionName": "getExternalcontactsContacts",
      "signature": "getExternalcontactsContacts(pageSize, pageNumber, q, sortOrder, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "q",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ContactListing"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "operationId": "getexternalcontactscontactsschema",
      "functionName": "getExternalcontactsContactsSchema",
      "signature": "getExternalcontactsContactsSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}": {
      "operationId": "getexternalcontactscontactsschemaversion",
      "functionName": "getExternalcontactsContactsSchemaVersion",
      "signature": "getExternalcontactsContactsSchemaVersion(schemaId, versionId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "versionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions": {
      "operationId": "getexternalcontactscontactsschemaversions",
      "functionName": "getExternalcontactsContactsSchemaVersions",
      "signature": "getExternalcontactsContactsSchemaVersions(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas": {
      "operationId": "getexternalcontactscontactsschemas",
      "functionName": "getExternalcontactsContactsSchemas",
      "signature": "getExternalcontactsContactsSchemas()",
      "return": "DataSchemaListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "operationId": "getexternalcontactsorganization",
      "functionName": "getExternalcontactsOrganization",
      "signature": "getExternalcontactsOrganization(externalOrganizationId, expand, includeTrustors)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "includeTrustors",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "ExternalOrganization"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts": {
      "operationId": "getexternalcontactsorganizationcontacts",
      "functionName": "getExternalcontactsOrganizationContacts",
      "signature": "getExternalcontactsOrganizationContacts(externalOrganizationId, pageSize, pageNumber, q, sortOrder, expand)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "q",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ContactListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "operationId": "getexternalcontactsorganizationnote",
      "functionName": "getExternalcontactsOrganizationNote",
      "signature": "getExternalcontactsOrganizationNote(externalOrganizationId, noteId, expand)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "noteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Note"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes": {
      "operationId": "getexternalcontactsorganizationnotes",
      "functionName": "getExternalcontactsOrganizationNotes",
      "signature": "getExternalcontactsOrganizationNotes(externalOrganizationId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "NoteListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships": {
      "operationId": "getexternalcontactsorganizationrelationships",
      "functionName": "getExternalcontactsOrganizationRelationships",
      "signature": "getExternalcontactsOrganizationRelationships(externalOrganizationId, pageSize, pageNumber, expand, sortOrder)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "RelationshipListing"
    },
    "GET /api/v2/externalcontacts/organizations": {
      "operationId": "getexternalcontactsorganizations",
      "functionName": "getExternalcontactsOrganizations",
      "signature": "getExternalcontactsOrganizations(pageSize, pageNumber, q, trustorId, sortOrder, expand, includeTrustors)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "q",
          "type": "String",
          "required": "false"
        },
        {
          "name": "trustorId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "includeTrustors",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "ExternalOrganizationListing"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}": {
      "operationId": "getexternalcontactsorganizationsschema",
      "functionName": "getExternalcontactsOrganizationsSchema",
      "signature": "getExternalcontactsOrganizationsSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}": {
      "operationId": "getexternalcontactsorganizationsschemaversion",
      "functionName": "getExternalcontactsOrganizationsSchemaVersion",
      "signature": "getExternalcontactsOrganizationsSchemaVersion(schemaId, versionId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "versionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions": {
      "operationId": "getexternalcontactsorganizationsschemaversions",
      "functionName": "getExternalcontactsOrganizationsSchemaVersions",
      "signature": "getExternalcontactsOrganizationsSchemaVersions(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas": {
      "operationId": "getexternalcontactsorganizationsschemas",
      "functionName": "getExternalcontactsOrganizationsSchemas",
      "signature": "getExternalcontactsOrganizationsSchemas()",
      "return": "DataSchemaListing"
    },
    "GET /api/v2/externalcontacts/relationships/{relationshipId}": {
      "operationId": "getexternalcontactsrelationship",
      "functionName": "getExternalcontactsRelationship",
      "signature": "getExternalcontactsRelationship(relationshipId, expand)",
      "parameters": [
        {
          "name": "relationshipId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Relationship"
    },
    "GET /api/v2/externalcontacts/reversewhitepageslookup": {
      "operationId": "getexternalcontactsreversewhitepageslookup",
      "functionName": "getExternalcontactsReversewhitepageslookup",
      "signature": "getExternalcontactsReversewhitepageslookup(lookupVal, expand)",
      "parameters": [
        {
          "name": "lookupVal",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ReverseWhitepagesLookupResult"
    },
    "GET /api/v2/externalcontacts/scan/contacts": {
      "operationId": "getexternalcontactsscancontacts",
      "functionName": "getExternalcontactsScanContacts",
      "signature": "getExternalcontactsScanContacts(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CursorContactListing"
    },
    "GET /api/v2/externalcontacts/scan/notes": {
      "operationId": "getexternalcontactsscannotes",
      "functionName": "getExternalcontactsScanNotes",
      "signature": "getExternalcontactsScanNotes(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CursorNoteListing"
    },
    "GET /api/v2/externalcontacts/scan/organizations": {
      "operationId": "getexternalcontactsscanorganizations",
      "functionName": "getExternalcontactsScanOrganizations",
      "signature": "getExternalcontactsScanOrganizations(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CursorOrganizationListing"
    },
    "GET /api/v2/externalcontacts/scan/relationships": {
      "operationId": "getexternalcontactsscanrelationships",
      "functionName": "getExternalcontactsScanRelationships",
      "signature": "getExternalcontactsScanRelationships(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CursorRelationshipListing"
    },
    "POST /api/v2/externalcontacts/bulk/contacts": {
      "operationId": "postexternalcontactsbulkcontacts",
      "functionName": "postExternalcontactsBulkContacts",
      "signature": "postExternalcontactsBulkContacts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkFetchContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/add": {
      "operationId": "postexternalcontactsbulkcontactsadd",
      "functionName": "postExternalcontactsBulkContactsAdd",
      "signature": "postExternalcontactsBulkContactsAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/remove": {
      "operationId": "postexternalcontactsbulkcontactsremove",
      "functionName": "postExternalcontactsBulkContactsRemove",
      "signature": "postExternalcontactsBulkContactsRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/update": {
      "operationId": "postexternalcontactsbulkcontactsupdate",
      "functionName": "postExternalcontactsBulkContactsUpdate",
      "signature": "postExternalcontactsBulkContactsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes": {
      "operationId": "postexternalcontactsbulknotes",
      "functionName": "postExternalcontactsBulkNotes",
      "signature": "postExternalcontactsBulkNotes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkFetchNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/add": {
      "operationId": "postexternalcontactsbulknotesadd",
      "functionName": "postExternalcontactsBulkNotesAdd",
      "signature": "postExternalcontactsBulkNotesAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/remove": {
      "operationId": "postexternalcontactsbulknotesremove",
      "functionName": "postExternalcontactsBulkNotesRemove",
      "signature": "postExternalcontactsBulkNotesRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/update": {
      "operationId": "postexternalcontactsbulknotesupdate",
      "functionName": "postExternalcontactsBulkNotesUpdate",
      "signature": "postExternalcontactsBulkNotesUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations": {
      "operationId": "postexternalcontactsbulkorganizations",
      "functionName": "postExternalcontactsBulkOrganizations",
      "signature": "postExternalcontactsBulkOrganizations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkFetchOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/add": {
      "operationId": "postexternalcontactsbulkorganizationsadd",
      "functionName": "postExternalcontactsBulkOrganizationsAdd",
      "signature": "postExternalcontactsBulkOrganizationsAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/remove": {
      "operationId": "postexternalcontactsbulkorganizationsremove",
      "functionName": "postExternalcontactsBulkOrganizationsRemove",
      "signature": "postExternalcontactsBulkOrganizationsRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/update": {
      "operationId": "postexternalcontactsbulkorganizationsupdate",
      "functionName": "postExternalcontactsBulkOrganizationsUpdate",
      "signature": "postExternalcontactsBulkOrganizationsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships": {
      "operationId": "postexternalcontactsbulkrelationships",
      "functionName": "postExternalcontactsBulkRelationships",
      "signature": "postExternalcontactsBulkRelationships(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkFetchRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/add": {
      "operationId": "postexternalcontactsbulkrelationshipsadd",
      "functionName": "postExternalcontactsBulkRelationshipsAdd",
      "signature": "postExternalcontactsBulkRelationshipsAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/remove": {
      "operationId": "postexternalcontactsbulkrelationshipsremove",
      "functionName": "postExternalcontactsBulkRelationshipsRemove",
      "signature": "postExternalcontactsBulkRelationshipsRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/update": {
      "operationId": "postexternalcontactsbulkrelationshipsupdate",
      "functionName": "postExternalcontactsBulkRelationshipsUpdate",
      "signature": "postExternalcontactsBulkRelationshipsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BulkRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/contacts/{contactId}/notes": {
      "operationId": "postexternalcontactscontactnotes",
      "functionName": "postExternalcontactsContactNotes",
      "signature": "postExternalcontactsContactNotes(contactId, body)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Note"
    },
    "POST /api/v2/externalcontacts/contacts": {
      "operationId": "postexternalcontactscontacts",
      "functionName": "postExternalcontactsContacts",
      "signature": "postExternalcontactsContacts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ExternalContact"
    },
    "POST /api/v2/externalcontacts/contacts/schemas": {
      "operationId": "postexternalcontactscontactsschemas",
      "functionName": "postExternalcontactsContactsSchemas",
      "signature": "postExternalcontactsContactsSchemas(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "POST /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes": {
      "operationId": "postexternalcontactsorganizationnotes",
      "functionName": "postExternalcontactsOrganizationNotes",
      "signature": "postExternalcontactsOrganizationNotes(externalOrganizationId, body)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Note"
    },
    "POST /api/v2/externalcontacts/organizations": {
      "operationId": "postexternalcontactsorganizations",
      "functionName": "postExternalcontactsOrganizations",
      "signature": "postExternalcontactsOrganizations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ExternalOrganization"
    },
    "POST /api/v2/externalcontacts/organizations/schemas": {
      "operationId": "postexternalcontactsorganizationsschemas",
      "functionName": "postExternalcontactsOrganizationsSchemas",
      "signature": "postExternalcontactsOrganizationsSchemas(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "POST /api/v2/externalcontacts/relationships": {
      "operationId": "postexternalcontactsrelationships",
      "functionName": "postExternalcontactsRelationships",
      "signature": "postExternalcontactsRelationships(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Relationship"
    },
    "PUT /api/v2/externalcontacts/contacts/{contactId}": {
      "operationId": "putexternalcontactscontact",
      "functionName": "putExternalcontactsContact",
      "signature": "putExternalcontactsContact(contactId, body)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ExternalContact"
    },
    "PUT /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "operationId": "putexternalcontactscontactnote",
      "functionName": "putExternalcontactsContactNote",
      "signature": "putExternalcontactsContactNote(contactId, noteId, body)",
      "parameters": [
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "noteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Note"
    },
    "PUT /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "operationId": "putexternalcontactscontactsschema",
      "functionName": "putExternalcontactsContactsSchema",
      "signature": "putExternalcontactsContactsSchema(schemaId, body)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "PUT /api/v2/externalcontacts/conversations/{conversationId}": {
      "operationId": "putexternalcontactsconversation",
      "functionName": "putExternalcontactsConversation",
      "signature": "putExternalcontactsConversation(body, conversationId)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "operationId": "putexternalcontactsorganization",
      "functionName": "putExternalcontactsOrganization",
      "signature": "putExternalcontactsOrganization(externalOrganizationId, body)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ExternalOrganization"
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "operationId": "putexternalcontactsorganizationnote",
      "functionName": "putExternalcontactsOrganizationNote",
      "signature": "putExternalcontactsOrganizationNote(externalOrganizationId, noteId, body)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "noteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Note"
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}": {
      "operationId": "putexternalcontactsorganizationtrustortrustorid",
      "functionName": "putExternalcontactsOrganizationTrustorTrustorId",
      "signature": "putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trustorId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ExternalOrganizationTrustorLink"
    },
    "PUT /api/v2/externalcontacts/organizations/schemas/{schemaId}": {
      "operationId": "putexternalcontactsorganizationsschema",
      "functionName": "putExternalcontactsOrganizationsSchema",
      "signature": "putExternalcontactsOrganizationsSchema(schemaId, body)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DataSchema"
    },
    "PUT /api/v2/externalcontacts/relationships/{relationshipId}": {
      "operationId": "putexternalcontactsrelationship",
      "functionName": "putExternalcontactsRelationship",
      "signature": "putExternalcontactsRelationship(relationshipId, body)",
      "parameters": [
        {
          "name": "relationshipId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Relationship"
    }
  },
  "fax": {
    "DELETE /api/v2/fax/documents/{documentId}": {
      "operationId": "deletefaxdocument",
      "functionName": "deleteFaxDocument",
      "signature": "deleteFaxDocument(documentId)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/fax/documents/{documentId}": {
      "operationId": "getfaxdocument",
      "functionName": "getFaxDocument",
      "signature": "getFaxDocument(documentId)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "FaxDocument"
    },
    "GET /api/v2/fax/documents/{documentId}/content": {
      "operationId": "getfaxdocumentcontent",
      "functionName": "getFaxDocumentContent",
      "signature": "getFaxDocumentContent(documentId)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/fax/documents": {
      "operationId": "getfaxdocuments",
      "functionName": "getFaxDocuments",
      "signature": "getFaxDocuments(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "FaxDocumentEntityListing"
    },
    "GET /api/v2/fax/summary": {
      "operationId": "getfaxsummary",
      "functionName": "getFaxSummary",
      "signature": "getFaxSummary()",
      "return": "FaxSummary"
    },
    "PUT /api/v2/fax/documents/{documentId}": {
      "operationId": "putfaxdocument",
      "functionName": "putFaxDocument",
      "signature": "putFaxDocument(documentId, body)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FaxDocument"
    }
  },
  "flows": {
    "POST /api/v2/analytics/flows/aggregates/query": {
      "operationId": "postanalyticsflowsaggregatesquery",
      "functionName": "postAnalyticsFlowsAggregatesQuery",
      "signature": "postAnalyticsFlowsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FlowAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/observations/query": {
      "operationId": "postanalyticsflowsobservationsquery",
      "functionName": "postAnalyticsFlowsObservationsQuery",
      "signature": "postAnalyticsFlowsObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FlowObservationQueryResponse"
    }
  },
  "gamification": {
    "GET /api/v2/gamification/leaderboard": {
      "operationId": "getgamificationleaderboard",
      "functionName": "getGamificationLeaderboard",
      "signature": "getGamificationLeaderboard(startWorkday, endWorkday, metricId)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "metricId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Leaderboard"
    },
    "GET /api/v2/gamification/leaderboard/all": {
      "operationId": "getgamificationleaderboardall",
      "functionName": "getGamificationLeaderboardAll",
      "signature": "getGamificationLeaderboardAll(filterType, filterId, startWorkday, endWorkday, metricId)",
      "parameters": [
        {
          "name": "filterType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "filterId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "metricId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Leaderboard"
    },
    "GET /api/v2/gamification/leaderboard/all/bestpoints": {
      "operationId": "getgamificationleaderboardallbestpoints",
      "functionName": "getGamificationLeaderboardAllBestpoints",
      "signature": "getGamificationLeaderboardAllBestpoints(filterType, filterId)",
      "parameters": [
        {
          "name": "filterType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "filterId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OverallBestPoints"
    },
    "GET /api/v2/gamification/leaderboard/bestpoints": {
      "operationId": "getgamificationleaderboardbestpoints",
      "functionName": "getGamificationLeaderboardBestpoints",
      "signature": "getGamificationLeaderboardBestpoints()",
      "return": "OverallBestPoints"
    },
    "GET /api/v2/gamification/metrics/{metricId}": {
      "operationId": "getgamificationmetric",
      "functionName": "getGamificationMetric",
      "signature": "getGamificationMetric(metricId, workday, performanceProfileId)",
      "parameters": [
        {
          "name": "metricId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "false"
        },
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Metric"
    },
    "GET /api/v2/gamification/metricdefinitions/{metricDefinitionId}": {
      "operationId": "getgamificationmetricdefinition",
      "functionName": "getGamificationMetricdefinition",
      "signature": "getGamificationMetricdefinition(metricDefinitionId)",
      "parameters": [
        {
          "name": "metricDefinitionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MetricDefinition"
    },
    "GET /api/v2/gamification/metricdefinitions": {
      "operationId": "getgamificationmetricdefinitions",
      "functionName": "getGamificationMetricdefinitions",
      "signature": "getGamificationMetricdefinitions()",
      "return": "GetMetricDefinitionsResponse"
    },
    "GET /api/v2/gamification/metrics": {
      "operationId": "getgamificationmetrics",
      "functionName": "getGamificationMetrics",
      "signature": "getGamificationMetrics(performanceProfileId, workday)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GetMetricsResponse"
    },
    "GET /api/v2/gamification/profiles/{performanceProfileId}": {
      "operationId": "getgamificationprofile",
      "functionName": "getGamificationProfile",
      "signature": "getGamificationProfile(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/profiles/{performanceProfileId}/members": {
      "operationId": "getgamificationprofilemembers",
      "functionName": "getGamificationProfileMembers",
      "signature": "getGamificationProfileMembers(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MemberListing"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics/{metricId}": {
      "operationId": "getgamificationprofilemetric",
      "functionName": "getGamificationProfileMetric",
      "signature": "getGamificationProfileMetric(profileId, metricId, workday)",
      "parameters": [
        {
          "name": "profileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "metricId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Metric"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics": {
      "operationId": "getgamificationprofilemetrics",
      "functionName": "getGamificationProfileMetrics",
      "signature": "getGamificationProfileMetrics(profileId, expand, workday)",
      "parameters": [
        {
          "name": "profileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GetMetricResponse"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics/objectivedetails": {
      "operationId": "getgamificationprofilemetricsobjectivedetails",
      "functionName": "getGamificationProfileMetricsObjectivedetails",
      "signature": "getGamificationProfileMetricsObjectivedetails(profileId, workday)",
      "parameters": [
        {
          "name": "profileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GetMetricsResponse"
    },
    "GET /api/v2/gamification/profiles": {
      "operationId": "getgamificationprofiles",
      "functionName": "getGamificationProfiles",
      "signature": "getGamificationProfiles()",
      "return": "GetProfilesResponse"
    },
    "GET /api/v2/gamification/profiles/users/{userId}": {
      "operationId": "getgamificationprofilesuser",
      "functionName": "getGamificationProfilesUser",
      "signature": "getGamificationProfilesUser(userId, workday)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/profiles/users/me": {
      "operationId": "getgamificationprofilesusersme",
      "functionName": "getGamificationProfilesUsersMe",
      "signature": "getGamificationProfilesUsersMe(workday)",
      "parameters": [
        {
          "name": "workday",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/scorecards": {
      "operationId": "getgamificationscorecards",
      "functionName": "getGamificationScorecards",
      "signature": "getGamificationScorecards(workday, expand)",
      "parameters": [
        {
          "name": "workday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkdayMetricListing"
    },
    "GET /api/v2/gamification/scorecards/attendance": {
      "operationId": "getgamificationscorecardsattendance",
      "functionName": "getGamificationScorecardsAttendance",
      "signature": "getGamificationScorecardsAttendance(startWorkday, endWorkday)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AttendanceStatusListing"
    },
    "GET /api/v2/gamification/scorecards/bestpoints": {
      "operationId": "getgamificationscorecardsbestpoints",
      "functionName": "getGamificationScorecardsBestpoints",
      "signature": "getGamificationScorecardsBestpoints()",
      "return": "UserBestPoints"
    },
    "GET /api/v2/gamification/scorecards/points/alltime": {
      "operationId": "getgamificationscorecardspointsalltime",
      "functionName": "getGamificationScorecardsPointsAlltime",
      "signature": "getGamificationScorecardsPointsAlltime(endWorkday)",
      "parameters": [
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AllTimePoints"
    },
    "GET /api/v2/gamification/scorecards/points/average": {
      "operationId": "getgamificationscorecardspointsaverage",
      "functionName": "getGamificationScorecardsPointsAverage",
      "signature": "getGamificationScorecardsPointsAverage(workday)",
      "parameters": [
        {
          "name": "workday",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SingleWorkdayAveragePoints"
    },
    "GET /api/v2/gamification/scorecards/points/trends": {
      "operationId": "getgamificationscorecardspointstrends",
      "functionName": "getGamificationScorecardsPointsTrends",
      "signature": "getGamificationScorecardsPointsTrends(startWorkday, endWorkday, dayOfWeek)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "dayOfWeek",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WorkdayPointsTrend"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}": {
      "operationId": "getgamificationscorecardsuser",
      "functionName": "getGamificationScorecardsUser",
      "signature": "getGamificationScorecardsUser(userId, workday, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkdayMetricListing"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/attendance": {
      "operationId": "getgamificationscorecardsuserattendance",
      "functionName": "getGamificationScorecardsUserAttendance",
      "signature": "getGamificationScorecardsUserAttendance(userId, startWorkday, endWorkday)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AttendanceStatusListing"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/bestpoints": {
      "operationId": "getgamificationscorecardsuserbestpoints",
      "functionName": "getGamificationScorecardsUserBestpoints",
      "signature": "getGamificationScorecardsUserBestpoints(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserBestPoints"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/points/alltime": {
      "operationId": "getgamificationscorecardsuserpointsalltime",
      "functionName": "getGamificationScorecardsUserPointsAlltime",
      "signature": "getGamificationScorecardsUserPointsAlltime(userId, endWorkday)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AllTimePoints"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/points/trends": {
      "operationId": "getgamificationscorecardsuserpointstrends",
      "functionName": "getGamificationScorecardsUserPointsTrends",
      "signature": "getGamificationScorecardsUserPointsTrends(userId, startWorkday, endWorkday, dayOfWeek)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "dayOfWeek",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WorkdayPointsTrend"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/values/trends": {
      "operationId": "getgamificationscorecardsuservaluestrends",
      "functionName": "getGamificationScorecardsUserValuesTrends",
      "signature": "getGamificationScorecardsUserValuesTrends(userId, startWorkday, endWorkday, timeZone)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeZone",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/scorecards/users/points/average": {
      "operationId": "getgamificationscorecardsuserspointsaverage",
      "functionName": "getGamificationScorecardsUsersPointsAverage",
      "signature": "getGamificationScorecardsUsersPointsAverage(filterType, filterId, workday)",
      "parameters": [
        {
          "name": "filterType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "filterId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SingleWorkdayAveragePoints"
    },
    "GET /api/v2/gamification/scorecards/users/values/average": {
      "operationId": "getgamificationscorecardsusersvaluesaverage",
      "functionName": "getGamificationScorecardsUsersValuesAverage",
      "signature": "getGamificationScorecardsUsersValuesAverage(filterType, filterId, workday, timeZone)",
      "parameters": [
        {
          "name": "filterType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "filterId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeZone",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SingleWorkdayAverageValues"
    },
    "GET /api/v2/gamification/scorecards/users/values/trends": {
      "operationId": "getgamificationscorecardsusersvaluestrends",
      "functionName": "getGamificationScorecardsUsersValuesTrends",
      "signature": "getGamificationScorecardsUsersValuesTrends(filterType, filterId, startWorkday, endWorkday, timeZone)",
      "parameters": [
        {
          "name": "filterType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "filterId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeZone",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/scorecards/values/average": {
      "operationId": "getgamificationscorecardsvaluesaverage",
      "functionName": "getGamificationScorecardsValuesAverage",
      "signature": "getGamificationScorecardsValuesAverage(workday, timeZone)",
      "parameters": [
        {
          "name": "workday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeZone",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SingleWorkdayAverageValues"
    },
    "GET /api/v2/gamification/scorecards/values/trends": {
      "operationId": "getgamificationscorecardsvaluestrends",
      "functionName": "getGamificationScorecardsValuesTrends",
      "signature": "getGamificationScorecardsValuesTrends(startWorkday, endWorkday, filterType, referenceWorkday, timeZone)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "endWorkday",
          "type": "String",
          "required": "true"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "referenceWorkday",
          "type": "String",
          "required": "false"
        },
        {
          "name": "timeZone",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/status": {
      "operationId": "getgamificationstatus",
      "functionName": "getGamificationStatus",
      "signature": "getGamificationStatus()",
      "return": "GamificationStatus"
    },
    "GET /api/v2/gamification/templates/{templateId}": {
      "operationId": "getgamificationtemplate",
      "functionName": "getGamificationTemplate",
      "signature": "getGamificationTemplate(templateId)",
      "parameters": [
        {
          "name": "templateId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ObjectiveTemplate"
    },
    "GET /api/v2/gamification/templates": {
      "operationId": "getgamificationtemplates",
      "functionName": "getGamificationTemplates",
      "signature": "getGamificationTemplates()",
      "return": "GetTemplatesResponse"
    },
    "POST /api/v2/gamification/metrics": {
      "operationId": "postgamificationmetrics",
      "functionName": "postGamificationMetrics",
      "signature": "postGamificationMetrics(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/activate": {
      "operationId": "postgamificationprofileactivate",
      "functionName": "postGamificationProfileActivate",
      "signature": "postGamificationProfileActivate(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PerformanceProfile"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/deactivate": {
      "operationId": "postgamificationprofiledeactivate",
      "functionName": "postGamificationProfileDeactivate",
      "signature": "postGamificationProfileDeactivate(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PerformanceProfile"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/members": {
      "operationId": "postgamificationprofilemembers",
      "functionName": "postGamificationProfileMembers",
      "signature": "postGamificationProfileMembers(performanceProfileId, body)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Assignment"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/members/validate": {
      "operationId": "postgamificationprofilemembersvalidate",
      "functionName": "postGamificationProfileMembersValidate",
      "signature": "postGamificationProfileMembersValidate(performanceProfileId, body)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AssignmentValidation"
    },
    "POST /api/v2/gamification/profiles/{sourceProfileId}/metrics/{sourceMetricId}/link": {
      "operationId": "postgamificationprofilemetriclink",
      "functionName": "postGamificationProfileMetricLink",
      "signature": "postGamificationProfileMetricLink(sourceProfileId, sourceMetricId, body)",
      "parameters": [
        {
          "name": "sourceProfileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "sourceMetricId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles/{profileId}/metrics": {
      "operationId": "postgamificationprofilemetrics",
      "functionName": "postGamificationProfileMetrics",
      "signature": "postGamificationProfileMetrics(profileId, body)",
      "parameters": [
        {
          "name": "profileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles": {
      "operationId": "postgamificationprofiles",
      "functionName": "postGamificationProfiles",
      "signature": "postGamificationProfiles(body, copyMetrics)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "copyMetrics",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "PerformanceProfile"
    },
    "PUT /api/v2/gamification/metrics/{metricId}": {
      "operationId": "putgamificationmetric",
      "functionName": "putGamificationMetric",
      "signature": "putGamificationMetric(metricId, body, performanceProfileId)",
      "parameters": [
        {
          "name": "metricId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Metric"
    },
    "PUT /api/v2/gamification/profiles/{performanceProfileId}": {
      "operationId": "putgamificationprofile",
      "functionName": "putGamificationProfile",
      "signature": "putGamificationProfile(performanceProfileId, body)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "PerformanceProfile"
    },
    "PUT /api/v2/gamification/profiles/{profileId}/metrics/{metricId}": {
      "operationId": "putgamificationprofilemetric",
      "functionName": "putGamificationProfileMetric",
      "signature": "putGamificationProfileMetric(profileId, metricId, body)",
      "parameters": [
        {
          "name": "profileId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "metricId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Metric"
    },
    "PUT /api/v2/gamification/status": {
      "operationId": "putgamificationstatus",
      "functionName": "putGamificationStatus",
      "signature": "putGamificationStatus(status)",
      "parameters": [
        {
          "name": "status",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "GamificationStatus"
    }
  },
  "generaldataprotectionregulation": {
    "GET /api/v2/gdpr/requests/{requestId}": {
      "operationId": "getgdprrequest",
      "functionName": "getGdprRequest",
      "signature": "getGdprRequest(requestId)",
      "parameters": [
        {
          "name": "requestId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "GDPRRequest"
    },
    "GET /api/v2/gdpr/requests": {
      "operationId": "getgdprrequests",
      "functionName": "getGdprRequests",
      "signature": "getGdprRequests(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "GDPRRequestEntityListing"
    },
    "GET /api/v2/gdpr/subjects": {
      "operationId": "getgdprsubjects",
      "functionName": "getGdprSubjects",
      "signature": "getGdprSubjects(searchType, searchValue)",
      "parameters": [
        {
          "name": "searchType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "searchValue",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "GDPRSubjectEntityListing"
    },
    "POST /api/v2/gdpr/requests": {
      "operationId": "postgdprrequests",
      "functionName": "postGdprRequests",
      "signature": "postGdprRequests(body, deleteConfirmed)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "deleteConfirmed",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "GDPRRequest"
    }
  },
  "geolocation": {
    "GET /api/v2/geolocations/settings": {
      "operationId": "getgeolocationssettings",
      "functionName": "getGeolocationsSettings",
      "signature": "getGeolocationsSettings()",
      "return": "GeolocationSettings"
    },
    "GET /api/v2/users/{userId}/geolocations/{clientId}": {
      "operationId": "getusergeolocation",
      "functionName": "getUserGeolocation",
      "signature": "getUserGeolocation(userId, clientId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Geolocation"
    },
    "PATCH /api/v2/geolocations/settings": {
      "operationId": "patchgeolocationssettings",
      "functionName": "patchGeolocationsSettings",
      "signature": "patchGeolocationsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "GeolocationSettings"
    },
    "PATCH /api/v2/users/{userId}/geolocations/{clientId}": {
      "operationId": "patchusergeolocation",
      "functionName": "patchUserGeolocation",
      "signature": "patchUserGeolocation(userId, clientId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Geolocation"
    }
  },
  "greetings": {
    "DELETE /api/v2/greetings/{greetingId}": {
      "operationId": "deletegreeting",
      "functionName": "deleteGreeting",
      "signature": "deleteGreeting(greetingId)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/greetings/{greetingId}": {
      "operationId": "getgreeting",
      "functionName": "getGreeting",
      "signature": "getGreeting(greetingId)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Greeting"
    },
    "GET /api/v2/greetings/{greetingId}/media": {
      "operationId": "getgreetingmedia",
      "functionName": "getGreetingMedia",
      "signature": "getGreetingMedia(greetingId, formatId)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "formatId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GreetingMediaInfo"
    },
    "GET /api/v2/greetings": {
      "operationId": "getgreetings",
      "functionName": "getGreetings",
      "signature": "getGreetings(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DomainEntityListing"
    },
    "GET /api/v2/greetings/defaults": {
      "operationId": "getgreetingsdefaults",
      "functionName": "getGreetingsDefaults",
      "signature": "getGreetingsDefaults()",
      "return": "DefaultGreetingList"
    },
    "GET /api/v2/groups/{groupId}/greetings": {
      "operationId": "getgroupgreetings",
      "functionName": "getGroupGreetings",
      "signature": "getGroupGreetings(groupId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "GreetingListing"
    },
    "GET /api/v2/groups/{groupId}/greetings/defaults": {
      "operationId": "getgroupgreetingsdefaults",
      "functionName": "getGroupGreetingsDefaults",
      "signature": "getGroupGreetingsDefaults(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "GET /api/v2/users/{userId}/greetings": {
      "operationId": "getusergreetings",
      "functionName": "getUserGreetings",
      "signature": "getUserGreetings(userId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DomainEntityListing"
    },
    "GET /api/v2/users/{userId}/greetings/defaults": {
      "operationId": "getusergreetingsdefaults",
      "functionName": "getUserGreetingsDefaults",
      "signature": "getUserGreetingsDefaults(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "POST /api/v2/greetings": {
      "operationId": "postgreetings",
      "functionName": "postGreetings",
      "signature": "postGreetings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Greeting"
    },
    "POST /api/v2/groups/{groupId}/greetings": {
      "operationId": "postgroupgreetings",
      "functionName": "postGroupGreetings",
      "signature": "postGroupGreetings(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Greeting"
    },
    "POST /api/v2/users/{userId}/greetings": {
      "operationId": "postusergreetings",
      "functionName": "postUserGreetings",
      "signature": "postUserGreetings(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Greeting"
    },
    "PUT /api/v2/greetings/{greetingId}": {
      "operationId": "putgreeting",
      "functionName": "putGreeting",
      "signature": "putGreeting(greetingId, body)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Greeting"
    },
    "PUT /api/v2/greetings/defaults": {
      "operationId": "putgreetingsdefaults",
      "functionName": "putGreetingsDefaults",
      "signature": "putGreetingsDefaults(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "PUT /api/v2/groups/{groupId}/greetings/defaults": {
      "operationId": "putgroupgreetingsdefaults",
      "functionName": "putGroupGreetingsDefaults",
      "signature": "putGroupGreetingsDefaults(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "PUT /api/v2/users/{userId}/greetings/defaults": {
      "operationId": "putusergreetingsdefaults",
      "functionName": "putUserGreetingsDefaults",
      "signature": "putUserGreetingsDefaults(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DefaultGreetingList"
    }
  },
  "groups": {
    "DELETE /api/v2/groups/{groupId}": {
      "operationId": "deletegroup",
      "functionName": "deleteGroup",
      "signature": "deleteGroup(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/groups/{groupId}/members": {
      "operationId": "deletegroupmembers",
      "functionName": "deleteGroupMembers",
      "signature": "deleteGroupMembers(groupId, ids)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "ids",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/fieldconfig": {
      "operationId": "getfieldconfig",
      "functionName": "getFieldconfig",
      "signature": "getFieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/groups/{groupId}": {
      "operationId": "getgroup",
      "functionName": "getGroup",
      "signature": "getGroup(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Group"
    },
    "GET /api/v2/groups/{groupId}/individuals": {
      "operationId": "getgroupindividuals",
      "functionName": "getGroupIndividuals",
      "signature": "getGroupIndividuals(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/groups/{groupId}/members": {
      "operationId": "getgroupmembers",
      "functionName": "getGroupMembers",
      "signature": "getGroupMembers(groupId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/groups/{groupId}/profile": {
      "operationId": "getgroupprofile",
      "functionName": "getGroupProfile",
      "signature": "getGroupProfile(groupId, fields)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "fields",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GroupProfile"
    },
    "GET /api/v2/groups": {
      "operationId": "getgroups",
      "functionName": "getGroups",
      "signature": "getGroups(pageSize, pageNumber, id, jabberId, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "jabberId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GroupEntityListing"
    },
    "GET /api/v2/groups/search": {
      "operationId": "getgroupssearch",
      "functionName": "getGroupsSearch",
      "signature": "getGroupsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "GET /api/v2/profiles/groups": {
      "operationId": "getprofilesgroups",
      "functionName": "getProfilesGroups",
      "signature": "getProfilesGroups(pageSize, pageNumber, id, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GroupProfileEntityListing"
    },
    "POST /api/v2/groups/{groupId}/members": {
      "operationId": "postgroupmembers",
      "functionName": "postGroupMembers",
      "signature": "postGroupMembers(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "POST /api/v2/groups": {
      "operationId": "postgroups",
      "functionName": "postGroups",
      "signature": "postGroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Group"
    },
    "POST /api/v2/groups/search": {
      "operationId": "postgroupssearch",
      "functionName": "postGroupsSearch",
      "signature": "postGroupsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "PUT /api/v2/groups/{groupId}": {
      "operationId": "putgroup",
      "functionName": "putGroup",
      "signature": "putGroup(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Group"
    }
  },
  "identityprovider": {
    "DELETE /api/v2/identityproviders/adfs": {
      "operationId": "deleteidentityprovidersadfs",
      "functionName": "deleteIdentityprovidersAdfs",
      "signature": "deleteIdentityprovidersAdfs()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/cic": {
      "operationId": "deleteidentityproviderscic",
      "functionName": "deleteIdentityprovidersCic",
      "signature": "deleteIdentityprovidersCic()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/generic": {
      "operationId": "deleteidentityprovidersgeneric",
      "functionName": "deleteIdentityprovidersGeneric",
      "signature": "deleteIdentityprovidersGeneric()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/gsuite": {
      "operationId": "deleteidentityprovidersgsuite",
      "functionName": "deleteIdentityprovidersGsuite",
      "signature": "deleteIdentityprovidersGsuite()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/identitynow": {
      "operationId": "deleteidentityprovidersidentitynow",
      "functionName": "deleteIdentityprovidersIdentitynow",
      "signature": "deleteIdentityprovidersIdentitynow()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/okta": {
      "operationId": "deleteidentityprovidersokta",
      "functionName": "deleteIdentityprovidersOkta",
      "signature": "deleteIdentityprovidersOkta()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/onelogin": {
      "operationId": "deleteidentityprovidersonelogin",
      "functionName": "deleteIdentityprovidersOnelogin",
      "signature": "deleteIdentityprovidersOnelogin()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/ping": {
      "operationId": "deleteidentityprovidersping",
      "functionName": "deleteIdentityprovidersPing",
      "signature": "deleteIdentityprovidersPing()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/purecloud": {
      "operationId": "deleteidentityproviderspurecloud",
      "functionName": "deleteIdentityprovidersPurecloud",
      "signature": "deleteIdentityprovidersPurecloud()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/pureengage": {
      "operationId": "deleteidentityproviderspureengage",
      "functionName": "deleteIdentityprovidersPureengage",
      "signature": "deleteIdentityprovidersPureengage()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/salesforce": {
      "operationId": "deleteidentityproviderssalesforce",
      "functionName": "deleteIdentityprovidersSalesforce",
      "signature": "deleteIdentityprovidersSalesforce()",
      "return": "Empty"
    },
    "GET /api/v2/identityproviders": {
      "operationId": "getidentityproviders",
      "functionName": "getIdentityproviders",
      "signature": "getIdentityproviders()",
      "return": "OAuthProviderEntityListing"
    },
    "GET /api/v2/identityproviders/adfs": {
      "operationId": "getidentityprovidersadfs",
      "functionName": "getIdentityprovidersAdfs",
      "signature": "getIdentityprovidersAdfs()",
      "return": "ADFS"
    },
    "GET /api/v2/identityproviders/cic": {
      "operationId": "getidentityproviderscic",
      "functionName": "getIdentityprovidersCic",
      "signature": "getIdentityprovidersCic()",
      "return": "CustomerInteractionCenter"
    },
    "GET /api/v2/identityproviders/generic": {
      "operationId": "getidentityprovidersgeneric",
      "functionName": "getIdentityprovidersGeneric",
      "signature": "getIdentityprovidersGeneric()",
      "return": "GenericSAML"
    },
    "GET /api/v2/identityproviders/gsuite": {
      "operationId": "getidentityprovidersgsuite",
      "functionName": "getIdentityprovidersGsuite",
      "signature": "getIdentityprovidersGsuite()",
      "return": "GSuite"
    },
    "GET /api/v2/identityproviders/identitynow": {
      "operationId": "getidentityprovidersidentitynow",
      "functionName": "getIdentityprovidersIdentitynow",
      "signature": "getIdentityprovidersIdentitynow()",
      "return": "IdentityNow"
    },
    "GET /api/v2/identityproviders/okta": {
      "operationId": "getidentityprovidersokta",
      "functionName": "getIdentityprovidersOkta",
      "signature": "getIdentityprovidersOkta()",
      "return": "Okta"
    },
    "GET /api/v2/identityproviders/onelogin": {
      "operationId": "getidentityprovidersonelogin",
      "functionName": "getIdentityprovidersOnelogin",
      "signature": "getIdentityprovidersOnelogin()",
      "return": "OneLogin"
    },
    "GET /api/v2/identityproviders/ping": {
      "operationId": "getidentityprovidersping",
      "functionName": "getIdentityprovidersPing",
      "signature": "getIdentityprovidersPing()",
      "return": "PingIdentity"
    },
    "GET /api/v2/identityproviders/purecloud": {
      "operationId": "getidentityproviderspurecloud",
      "functionName": "getIdentityprovidersPurecloud",
      "signature": "getIdentityprovidersPurecloud()",
      "return": "PureCloud"
    },
    "GET /api/v2/identityproviders/pureengage": {
      "operationId": "getidentityproviderspureengage",
      "functionName": "getIdentityprovidersPureengage",
      "signature": "getIdentityprovidersPureengage()",
      "return": "PureEngage"
    },
    "GET /api/v2/identityproviders/salesforce": {
      "operationId": "getidentityproviderssalesforce",
      "functionName": "getIdentityprovidersSalesforce",
      "signature": "getIdentityprovidersSalesforce()",
      "return": "Salesforce"
    },
    "PUT /api/v2/identityproviders/adfs": {
      "operationId": "putidentityprovidersadfs",
      "functionName": "putIdentityprovidersAdfs",
      "signature": "putIdentityprovidersAdfs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/cic": {
      "operationId": "putidentityproviderscic",
      "functionName": "putIdentityprovidersCic",
      "signature": "putIdentityprovidersCic(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/generic": {
      "operationId": "putidentityprovidersgeneric",
      "functionName": "putIdentityprovidersGeneric",
      "signature": "putIdentityprovidersGeneric(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/gsuite": {
      "operationId": "putidentityprovidersgsuite",
      "functionName": "putIdentityprovidersGsuite",
      "signature": "putIdentityprovidersGsuite(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/identitynow": {
      "operationId": "putidentityprovidersidentitynow",
      "functionName": "putIdentityprovidersIdentitynow",
      "signature": "putIdentityprovidersIdentitynow(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "IdentityNow"
    },
    "PUT /api/v2/identityproviders/okta": {
      "operationId": "putidentityprovidersokta",
      "functionName": "putIdentityprovidersOkta",
      "signature": "putIdentityprovidersOkta(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/onelogin": {
      "operationId": "putidentityprovidersonelogin",
      "functionName": "putIdentityprovidersOnelogin",
      "signature": "putIdentityprovidersOnelogin(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/ping": {
      "operationId": "putidentityprovidersping",
      "functionName": "putIdentityprovidersPing",
      "signature": "putIdentityprovidersPing(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/purecloud": {
      "operationId": "putidentityproviderspurecloud",
      "functionName": "putIdentityprovidersPurecloud",
      "signature": "putIdentityprovidersPurecloud(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/pureengage": {
      "operationId": "putidentityproviderspureengage",
      "functionName": "putIdentityprovidersPureengage",
      "signature": "putIdentityprovidersPureengage(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/salesforce": {
      "operationId": "putidentityproviderssalesforce",
      "functionName": "putIdentityprovidersSalesforce",
      "signature": "putIdentityprovidersSalesforce(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthProvider"
    }
  },
  "integrations": {
    "DELETE /api/v2/integrations/{integrationId}": {
      "operationId": "deleteintegration",
      "functionName": "deleteIntegration",
      "signature": "deleteIntegration(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Integration"
    },
    "DELETE /api/v2/integrations/actions/{actionId}": {
      "operationId": "deleteintegrationsaction",
      "functionName": "deleteIntegrationsAction",
      "signature": "deleteIntegrationsAction(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/integrations/actions/{actionId}/draft": {
      "operationId": "deleteintegrationsactiondraft",
      "functionName": "deleteIntegrationsActionDraft",
      "signature": "deleteIntegrationsActionDraft(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/integrations/credentials/{credentialId}": {
      "operationId": "deleteintegrationscredential",
      "functionName": "deleteIntegrationsCredential",
      "signature": "deleteIntegrationsCredential(credentialId)",
      "parameters": [
        {
          "name": "credentialId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/integrations/{integrationId}": {
      "operationId": "getintegration",
      "functionName": "getIntegration",
      "signature": "getIntegration(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Integration"
    },
    "GET /api/v2/integrations/{integrationId}/config/current": {
      "operationId": "getintegrationconfigcurrent",
      "functionName": "getIntegrationConfigCurrent",
      "signature": "getIntegrationConfigCurrent(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "IntegrationConfiguration"
    },
    "GET /api/v2/integrations": {
      "operationId": "getintegrations",
      "functionName": "getIntegrations",
      "signature": "getIntegrations(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "IntegrationEntityListing"
    },
    "GET /api/v2/integrations/actions/{actionId}": {
      "operationId": "getintegrationsaction",
      "functionName": "getIntegrationsAction",
      "signature": "getIntegrationsAction(actionId, expand, includeConfig)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "includeConfig",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "Action"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft": {
      "operationId": "getintegrationsactiondraft",
      "functionName": "getIntegrationsActionDraft",
      "signature": "getIntegrationsActionDraft(actionId, expand, includeConfig)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "includeConfig",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "Action"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}": {
      "operationId": "getintegrationsactiondraftschema",
      "functionName": "getIntegrationsActionDraftSchema",
      "signature": "getIntegrationsActionDraftSchema(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "fileName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/templates/{fileName}": {
      "operationId": "getintegrationsactiondrafttemplate",
      "functionName": "getIntegrationsActionDraftTemplate",
      "signature": "getIntegrationsActionDraftTemplate(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "fileName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/validation": {
      "operationId": "getintegrationsactiondraftvalidation",
      "functionName": "getIntegrationsActionDraftValidation",
      "signature": "getIntegrationsActionDraftValidation(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DraftValidationResult"
    },
    "GET /api/v2/integrations/actions/{actionId}/schemas/{fileName}": {
      "operationId": "getintegrationsactionschema",
      "functionName": "getIntegrationsActionSchema",
      "signature": "getIntegrationsActionSchema(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "fileName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/actions/{actionId}/templates/{fileName}": {
      "operationId": "getintegrationsactiontemplate",
      "functionName": "getIntegrationsActionTemplate",
      "signature": "getIntegrationsActionTemplate(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "fileName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "GET /api/v2/integrations/actions": {
      "operationId": "getintegrationsactions",
      "functionName": "getIntegrationsActions",
      "signature": "getIntegrationsActions(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, secure, includeAuthActions)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "category",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "secure",
          "type": "String",
          "required": "false"
        },
        {
          "name": "includeAuthActions",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ActionEntityListing"
    },
    "GET /api/v2/integrations/actions/categories": {
      "operationId": "getintegrationsactionscategories",
      "functionName": "getIntegrationsActionsCategories",
      "signature": "getIntegrationsActionsCategories(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, secure)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "secure",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CategoryEntityListing"
    },
    "GET /api/v2/integrations/actions/drafts": {
      "operationId": "getintegrationsactionsdrafts",
      "functionName": "getIntegrationsActionsDrafts",
      "signature": "getIntegrationsActionsDrafts(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, secure, includeAuthActions)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "category",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "secure",
          "type": "String",
          "required": "false"
        },
        {
          "name": "includeAuthActions",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ActionEntityListing"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}": {
      "operationId": "getintegrationsbotconnectorintegrationidbot",
      "functionName": "getIntegrationsBotconnectorIntegrationIdBot",
      "signature": "getIntegrationsBotconnectorIntegrationIdBot(integrationId, botId, version)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "botId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "version",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "BotConnectorBot"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions": {
      "operationId": "getintegrationsbotconnectorintegrationidbotversions",
      "functionName": "getIntegrationsBotconnectorIntegrationIdBotVersions",
      "signature": "getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId, botId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "botId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "BotConnectorBotVersionSummaryEntityListing"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots": {
      "operationId": "getintegrationsbotconnectorintegrationidbots",
      "functionName": "getIntegrationsBotconnectorIntegrationIdBots",
      "signature": "getIntegrationsBotconnectorIntegrationIdBots(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BotList"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/summaries": {
      "operationId": "getintegrationsbotconnectorintegrationidbotssummaries",
      "functionName": "getIntegrationsBotconnectorIntegrationIdBotsSummaries",
      "signature": "getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "BotConnectorBotSummaryEntityListing"
    },
    "GET /api/v2/integrations/clientapps": {
      "operationId": "getintegrationsclientapps",
      "functionName": "getIntegrationsClientapps",
      "signature": "getIntegrationsClientapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ClientAppEntityListing"
    },
    "GET /api/v2/integrations/clientapps/unifiedcommunications": {
      "operationId": "getintegrationsclientappsunifiedcommunications",
      "functionName": "getIntegrationsClientappsUnifiedcommunications",
      "signature": "getIntegrationsClientappsUnifiedcommunications(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UCIntegrationListing"
    },
    "GET /api/v2/integrations/credentials/{credentialId}": {
      "operationId": "getintegrationscredential",
      "functionName": "getIntegrationsCredential",
      "signature": "getIntegrationsCredential(credentialId)",
      "parameters": [
        {
          "name": "credentialId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Credential"
    },
    "GET /api/v2/integrations/credentials": {
      "operationId": "getintegrationscredentials",
      "functionName": "getIntegrationsCredentials",
      "signature": "getIntegrationsCredentials(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "CredentialInfoListing"
    },
    "GET /api/v2/integrations/credentials/types": {
      "operationId": "getintegrationscredentialstypes",
      "functionName": "getIntegrationsCredentialsTypes",
      "signature": "getIntegrationsCredentialsTypes()",
      "return": "CredentialTypeListing"
    },
    "GET /api/v2/integrations/eventlog": {
      "operationId": "getintegrationseventlog",
      "functionName": "getIntegrationsEventlog",
      "signature": "getIntegrationsEventlog(pageSize, pageNumber, sortBy, sortOrder, entityId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "entityId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "IntegrationEventEntityListing"
    },
    "GET /api/v2/integrations/eventlog/{eventId}": {
      "operationId": "getintegrationseventlogeventid",
      "functionName": "getIntegrationsEventlogEventId",
      "signature": "getIntegrationsEventlogEventId(eventId)",
      "parameters": [
        {
          "name": "eventId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "IntegrationEvent"
    },
    "GET /api/v2/integrations/speech/dialogflow/agents/{agentId}": {
      "operationId": "getintegrationsspeechdialogflowagent",
      "functionName": "getIntegrationsSpeechDialogflowAgent",
      "signature": "getIntegrationsSpeechDialogflowAgent(agentId)",
      "parameters": [
        {
          "name": "agentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DialogflowAgent"
    },
    "GET /api/v2/integrations/speech/dialogflow/agents": {
      "operationId": "getintegrationsspeechdialogflowagents",
      "functionName": "getIntegrationsSpeechDialogflowAgents",
      "signature": "getIntegrationsSpeechDialogflowAgents(pageNumber, pageSize, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DialogflowAgentSummaryEntityListing"
    },
    "GET /api/v2/integrations/speech/lex/bot/alias/{aliasId}": {
      "operationId": "getintegrationsspeechlexbotalias",
      "functionName": "getIntegrationsSpeechLexBotAlias",
      "signature": "getIntegrationsSpeechLexBotAlias(aliasId)",
      "parameters": [
        {
          "name": "aliasId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LexBotAlias"
    },
    "GET /api/v2/integrations/speech/lex/bot/{botId}/aliases": {
      "operationId": "getintegrationsspeechlexbotbotidaliases",
      "functionName": "getIntegrationsSpeechLexBotBotIdAliases",
      "signature": "getIntegrationsSpeechLexBotBotIdAliases(botId, pageNumber, pageSize, status, name)",
      "parameters": [
        {
          "name": "botId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "status",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LexBotAliasEntityListing"
    },
    "GET /api/v2/integrations/speech/lex/bots": {
      "operationId": "getintegrationsspeechlexbots",
      "functionName": "getIntegrationsSpeechLexBots",
      "signature": "getIntegrationsSpeechLexBots(pageNumber, pageSize, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LexBotEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}": {
      "operationId": "getintegrationsspeechttsengine",
      "functionName": "getIntegrationsSpeechTtsEngine",
      "signature": "getIntegrationsSpeechTtsEngine(engineId, includeVoices)",
      "parameters": [
        {
          "name": "engineId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeVoices",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "TtsEngineEntity"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}": {
      "operationId": "getintegrationsspeechttsenginevoice",
      "functionName": "getIntegrationsSpeechTtsEngineVoice",
      "signature": "getIntegrationsSpeechTtsEngineVoice(engineId, voiceId)",
      "parameters": [
        {
          "name": "engineId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "voiceId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TtsVoiceEntity"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}/voices": {
      "operationId": "getintegrationsspeechttsenginevoices",
      "functionName": "getIntegrationsSpeechTtsEngineVoices",
      "signature": "getIntegrationsSpeechTtsEngineVoices(engineId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "engineId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TtsVoiceEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/engines": {
      "operationId": "getintegrationsspeechttsengines",
      "functionName": "getIntegrationsSpeechTtsEngines",
      "signature": "getIntegrationsSpeechTtsEngines(pageNumber, pageSize, includeVoices, name, language)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "includeVoices",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "language",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TtsEngineEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/settings": {
      "operationId": "getintegrationsspeechttssettings",
      "functionName": "getIntegrationsSpeechTtsSettings",
      "signature": "getIntegrationsSpeechTtsSettings()",
      "return": "TtsSettings"
    },
    "GET /api/v2/integrations/types/{typeId}": {
      "operationId": "getintegrationstype",
      "functionName": "getIntegrationsType",
      "signature": "getIntegrationsType(typeId)",
      "parameters": [
        {
          "name": "typeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "IntegrationType"
    },
    "GET /api/v2/integrations/types/{typeId}/configschemas/{configType}": {
      "operationId": "getintegrationstypeconfigschema",
      "functionName": "getIntegrationsTypeConfigschema",
      "signature": "getIntegrationsTypeConfigschema(typeId, configType)",
      "parameters": [
        {
          "name": "typeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "configType",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/types": {
      "operationId": "getintegrationstypes",
      "functionName": "getIntegrationsTypes",
      "signature": "getIntegrationsTypes(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "IntegrationTypeEntityListing"
    },
    "GET /api/v2/integrations/userapps": {
      "operationId": "getintegrationsuserapps",
      "functionName": "getIntegrationsUserapps",
      "signature": "getIntegrationsUserapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, appHost)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "appHost",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserAppEntityListing"
    },
    "PATCH /api/v2/integrations/{integrationId}": {
      "operationId": "patchintegration",
      "functionName": "patchIntegration",
      "signature": "patchIntegration(integrationId, body, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Integration"
    },
    "PATCH /api/v2/integrations/actions/{actionId}": {
      "operationId": "patchintegrationsaction",
      "functionName": "patchIntegrationsAction",
      "signature": "patchIntegrationsAction(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Action"
    },
    "PATCH /api/v2/integrations/actions/{actionId}/draft": {
      "operationId": "patchintegrationsactiondraft",
      "functionName": "patchIntegrationsActionDraft",
      "signature": "patchIntegrationsActionDraft(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations": {
      "operationId": "postintegrations",
      "functionName": "postIntegrations",
      "signature": "postIntegrations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Integration"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft": {
      "operationId": "postintegrationsactiondraft",
      "functionName": "postIntegrationsActionDraft",
      "signature": "postIntegrationsActionDraft(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft/publish": {
      "operationId": "postintegrationsactiondraftpublish",
      "functionName": "postIntegrationsActionDraftPublish",
      "signature": "postIntegrationsActionDraftPublish(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft/test": {
      "operationId": "postintegrationsactiondrafttest",
      "functionName": "postIntegrationsActionDraftTest",
      "signature": "postIntegrationsActionDraftTest(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TestExecutionResult"
    },
    "POST /api/v2/integrations/actions/{actionId}/execute": {
      "operationId": "postintegrationsactionexecute",
      "functionName": "postIntegrationsActionExecute",
      "signature": "postIntegrationsActionExecute(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Object"
    },
    "POST /api/v2/integrations/actions/{actionId}/test": {
      "operationId": "postintegrationsactiontest",
      "functionName": "postIntegrationsActionTest",
      "signature": "postIntegrationsActionTest(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TestExecutionResult"
    },
    "POST /api/v2/integrations/actions": {
      "operationId": "postintegrationsactions",
      "functionName": "postIntegrationsActions",
      "signature": "postIntegrationsActions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/actions/drafts": {
      "operationId": "postintegrationsactionsdrafts",
      "functionName": "postIntegrationsActionsDrafts",
      "signature": "postIntegrationsActionsDrafts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Action"
    },
    "POST /api/v2/integrations/credentials": {
      "operationId": "postintegrationscredentials",
      "functionName": "postIntegrationsCredentials",
      "signature": "postIntegrationsCredentials(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "CredentialInfo"
    },
    "POST /api/v2/integrations/workforcemanagement/vendorconnection": {
      "operationId": "postintegrationsworkforcemanagementvendorconnection",
      "functionName": "postIntegrationsWorkforcemanagementVendorconnection",
      "signature": "postIntegrationsWorkforcemanagementVendorconnection(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "UserActionCategoryEntityListing"
    },
    "PUT /api/v2/integrations/{integrationId}/config/current": {
      "operationId": "putintegrationconfigcurrent",
      "functionName": "putIntegrationConfigCurrent",
      "signature": "putIntegrationConfigCurrent(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "IntegrationConfiguration"
    },
    "PUT /api/v2/integrations/botconnector/{integrationId}/bots": {
      "operationId": "putintegrationsbotconnectorintegrationidbots",
      "functionName": "putIntegrationsBotconnectorIntegrationIdBots",
      "signature": "putIntegrationsBotconnectorIntegrationIdBots(integrationId, botList)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "botList",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PUT /api/v2/integrations/credentials/{credentialId}": {
      "operationId": "putintegrationscredential",
      "functionName": "putIntegrationsCredential",
      "signature": "putIntegrationsCredential(credentialId, body)",
      "parameters": [
        {
          "name": "credentialId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "CredentialInfo"
    },
    "PUT /api/v2/integrations/speech/tts/settings": {
      "operationId": "putintegrationsspeechttssettings",
      "functionName": "putIntegrationsSpeechTtsSettings",
      "signature": "putIntegrationsSpeechTtsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TtsSettings"
    }
  },
  "journey": {
    "DELETE /api/v2/journey/actionmaps/{actionMapId}": {
      "operationId": "deletejourneyactionmap",
      "functionName": "deleteJourneyActionmap",
      "signature": "deleteJourneyActionmap(actionMapId)",
      "parameters": [
        {
          "name": "actionMapId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "operationId": "deletejourneyactiontemplate",
      "functionName": "deleteJourneyActiontemplate",
      "signature": "deleteJourneyActiontemplate(actionTemplateId, hardDelete)",
      "parameters": [
        {
          "name": "actionTemplateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "hardDelete",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/journey/outcomes/{outcomeId}": {
      "operationId": "deletejourneyoutcome",
      "functionName": "deleteJourneyOutcome",
      "signature": "deleteJourneyOutcome(outcomeId)",
      "parameters": [
        {
          "name": "outcomeId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/journey/segments/{segmentId}": {
      "operationId": "deletejourneysegment",
      "functionName": "deleteJourneySegment",
      "signature": "deleteJourneySegment(segmentId)",
      "parameters": [
        {
          "name": "segmentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/journey/actionmaps/{actionMapId}": {
      "operationId": "getjourneyactionmap",
      "functionName": "getJourneyActionmap",
      "signature": "getJourneyActionmap(actionMapId)",
      "parameters": [
        {
          "name": "actionMapId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ActionMap"
    },
    "GET /api/v2/journey/actionmaps": {
      "operationId": "getjourneyactionmaps",
      "functionName": "getJourneyActionmaps",
      "signature": "getJourneyActionmaps(pageNumber, pageSize, sortBy, filterField, filterValue, actionMapIds, queryFields, queryValue)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "filterField",
          "type": "String",
          "required": "false"
        },
        {
          "name": "filterValue",
          "type": "String",
          "required": "false"
        },
        {
          "name": "actionMapIds",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "queryFields",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "queryValue",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ActionMapListing"
    },
    "GET /api/v2/journey/actiontargets/{actionTargetId}": {
      "operationId": "getjourneyactiontarget",
      "functionName": "getJourneyActiontarget",
      "signature": "getJourneyActiontarget(actionTargetId)",
      "parameters": [
        {
          "name": "actionTargetId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ActionTarget"
    },
    "GET /api/v2/journey/actiontargets": {
      "operationId": "getjourneyactiontargets",
      "functionName": "getJourneyActiontargets",
      "signature": "getJourneyActiontargets(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ActionTargetListing"
    },
    "GET /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "operationId": "getjourneyactiontemplate",
      "functionName": "getJourneyActiontemplate",
      "signature": "getJourneyActiontemplate(actionTemplateId)",
      "parameters": [
        {
          "name": "actionTemplateId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ActionTemplate"
    },
    "GET /api/v2/journey/actiontemplates": {
      "operationId": "getjourneyactiontemplates",
      "functionName": "getJourneyActiontemplates",
      "signature": "getJourneyActiontemplates(pageNumber, pageSize, sortBy, mediaType, state, queryFields, queryValue)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "mediaType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "state",
          "type": "String",
          "required": "false"
        },
        {
          "name": "queryFields",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "queryValue",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ActionTemplateListing"
    },
    "GET /api/v2/journey/outcomes/{outcomeId}": {
      "operationId": "getjourneyoutcome",
      "functionName": "getJourneyOutcome",
      "signature": "getJourneyOutcome(outcomeId)",
      "parameters": [
        {
          "name": "outcomeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Outcome"
    },
    "GET /api/v2/journey/outcomes": {
      "operationId": "getjourneyoutcomes",
      "functionName": "getJourneyOutcomes",
      "signature": "getJourneyOutcomes(pageNumber, pageSize, sortBy, outcomeIds, queryFields, queryValue)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "outcomeIds",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "queryFields",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "queryValue",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OutcomeListing"
    },
    "GET /api/v2/journey/segments/{segmentId}": {
      "operationId": "getjourneysegment",
      "functionName": "getJourneySegment",
      "signature": "getJourneySegment(segmentId)",
      "parameters": [
        {
          "name": "segmentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "JourneySegment"
    },
    "GET /api/v2/journey/segments": {
      "operationId": "getjourneysegments",
      "functionName": "getJourneySegments",
      "signature": "getJourneySegments(sortBy, pageSize, pageNumber, isActive, segmentIds, queryFields, queryValue)",
      "parameters": [
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "isActive",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "segmentIds",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "queryFields",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "queryValue",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SegmentListing"
    },
    "GET /api/v2/journey/sessions/{sessionId}": {
      "operationId": "getjourneysession",
      "functionName": "getJourneySession",
      "signature": "getJourneySession(sessionId)",
      "parameters": [
        {
          "name": "sessionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Session"
    },
    "GET /api/v2/journey/sessions/{sessionId}/outcomescores": {
      "operationId": "getjourneysessionoutcomescores",
      "functionName": "getJourneySessionOutcomescores",
      "signature": "getJourneySessionOutcomescores(sessionId)",
      "parameters": [
        {
          "name": "sessionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OutcomeScoresResult"
    },
    "PATCH /api/v2/journey/actionmaps/{actionMapId}": {
      "operationId": "patchjourneyactionmap",
      "functionName": "patchJourneyActionmap",
      "signature": "patchJourneyActionmap(actionMapId, body)",
      "parameters": [
        {
          "name": "actionMapId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ActionMap"
    },
    "PATCH /api/v2/journey/actiontargets/{actionTargetId}": {
      "operationId": "patchjourneyactiontarget",
      "functionName": "patchJourneyActiontarget",
      "signature": "patchJourneyActiontarget(actionTargetId, body)",
      "parameters": [
        {
          "name": "actionTargetId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ActionTarget"
    },
    "PATCH /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "operationId": "patchjourneyactiontemplate",
      "functionName": "patchJourneyActiontemplate",
      "signature": "patchJourneyActiontemplate(actionTemplateId, body)",
      "parameters": [
        {
          "name": "actionTemplateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ActionTemplate"
    },
    "PATCH /api/v2/journey/outcomes/{outcomeId}": {
      "operationId": "patchjourneyoutcome",
      "functionName": "patchJourneyOutcome",
      "signature": "patchJourneyOutcome(outcomeId, body)",
      "parameters": [
        {
          "name": "outcomeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Outcome"
    },
    "PATCH /api/v2/journey/segments/{segmentId}": {
      "operationId": "patchjourneysegment",
      "functionName": "patchJourneySegment",
      "signature": "patchJourneySegment(segmentId, body)",
      "parameters": [
        {
          "name": "segmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "JourneySegment"
    },
    "POST /api/v2/analytics/journeys/aggregates/query": {
      "operationId": "postanalyticsjourneysaggregatesquery",
      "functionName": "postAnalyticsJourneysAggregatesQuery",
      "signature": "postAnalyticsJourneysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "JourneyAggregateQueryResponse"
    },
    "POST /api/v2/journey/actionmaps": {
      "operationId": "postjourneyactionmaps",
      "functionName": "postJourneyActionmaps",
      "signature": "postJourneyActionmaps(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ActionMap"
    },
    "POST /api/v2/journey/actiontemplates": {
      "operationId": "postjourneyactiontemplates",
      "functionName": "postJourneyActiontemplates",
      "signature": "postJourneyActiontemplates(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ActionTemplate"
    },
    "POST /api/v2/journey/outcomes": {
      "operationId": "postjourneyoutcomes",
      "functionName": "postJourneyOutcomes",
      "signature": "postJourneyOutcomes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Outcome"
    },
    "POST /api/v2/journey/segments": {
      "operationId": "postjourneysegments",
      "functionName": "postJourneySegments",
      "signature": "postJourneySegments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "JourneySegment"
    }
  },
  "knowledge": {
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "operationId": "deleteknowledgeknowledgebase",
      "functionName": "deleteKnowledgeKnowledgebase",
      "signature": "deleteKnowledgeKnowledgebase(knowledgeBaseId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeBase"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "operationId": "deleteknowledgeknowledgebaselanguagecategory",
      "functionName": "deleteKnowledgeKnowledgebaseLanguageCategory",
      "signature": "deleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "categoryId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeCategory"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "operationId": "deleteknowledgeknowledgebaselanguagedocument",
      "functionName": "deleteKnowledgeKnowledgebaseLanguageDocument",
      "signature": "deleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "operationId": "deleteknowledgeknowledgebaselanguagedocumentsimport",
      "functionName": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport",
      "signature": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "importId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "operationId": "getknowledgeknowledgebase",
      "functionName": "getKnowledgeKnowledgebase",
      "signature": "getKnowledgeKnowledgebase(knowledgeBaseId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeBase"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories": {
      "operationId": "getknowledgeknowledgebaselanguagecategories",
      "functionName": "getKnowledgeKnowledgebaseLanguageCategories",
      "signature": "getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, before, after, limit, pageSize, name)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "limit",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CategoryListing"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "operationId": "getknowledgeknowledgebaselanguagecategory",
      "functionName": "getKnowledgeKnowledgebaseLanguageCategory",
      "signature": "getKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "categoryId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "operationId": "getknowledgeknowledgebaselanguagedocument",
      "functionName": "getKnowledgeKnowledgebaseLanguageDocument",
      "signature": "getKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "operationId": "getknowledgeknowledgebaselanguagedocuments",
      "functionName": "getKnowledgeKnowledgebaseLanguageDocuments",
      "signature": "getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, before, after, limit, pageSize, categories, title, sortBy, sortOrder, documentIds)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "limit",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "String",
          "required": "false"
        },
        {
          "name": "categories",
          "type": "String",
          "required": "false"
        },
        {
          "name": "title",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "documentIds",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DocumentListing"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "operationId": "getknowledgeknowledgebaselanguagedocumentsimport",
      "functionName": "getKnowledgeKnowledgebaseLanguageDocumentsImport",
      "signature": "getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "importId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeImport"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}": {
      "operationId": "getknowledgeknowledgebaselanguagetraining",
      "functionName": "getKnowledgeKnowledgebaseLanguageTraining",
      "signature": "getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trainingId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings": {
      "operationId": "getknowledgeknowledgebaselanguagetrainings",
      "functionName": "getKnowledgeKnowledgebaseLanguageTrainings",
      "signature": "getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, before, after, limit, pageSize, knowledgeDocumentsState)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "limit",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "String",
          "required": "false"
        },
        {
          "name": "knowledgeDocumentsState",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TrainingListing"
    },
    "GET /api/v2/knowledge/knowledgebases": {
      "operationId": "getknowledgeknowledgebases",
      "functionName": "getKnowledgeKnowledgebases",
      "signature": "getKnowledgeKnowledgebases(before, after, limit, pageSize, name, coreLanguage, published, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "limit",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "coreLanguage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "published",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "KnowledgeBaseListing"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "operationId": "patchknowledgeknowledgebase",
      "functionName": "patchKnowledgeKnowledgebase",
      "signature": "patchKnowledgeKnowledgebase(knowledgeBaseId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeBase"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "operationId": "patchknowledgeknowledgebaselanguagecategory",
      "functionName": "patchKnowledgeKnowledgebaseLanguageCategory",
      "signature": "patchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "categoryId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "operationId": "patchknowledgeknowledgebaselanguagedocument",
      "functionName": "patchKnowledgeKnowledgebaseLanguageDocument",
      "signature": "patchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "documentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "operationId": "patchknowledgeknowledgebaselanguagedocuments",
      "functionName": "patchKnowledgeKnowledgebaseLanguageDocuments",
      "signature": "patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DocumentListing"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "operationId": "patchknowledgeknowledgebaselanguagedocumentsimport",
      "functionName": "patchKnowledgeKnowledgebaseLanguageDocumentsImport",
      "signature": "patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "importId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeImport"
    },
    "POST /api/v2/knowledge/documentuploads": {
      "operationId": "postknowledgedocumentuploads",
      "functionName": "postKnowledgeDocumentuploads",
      "signature": "postKnowledgeDocumentuploads(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories": {
      "operationId": "postknowledgeknowledgebaselanguagecategories",
      "functionName": "postKnowledgeKnowledgebaseLanguageCategories",
      "signature": "postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "operationId": "postknowledgeknowledgebaselanguagedocuments",
      "functionName": "postKnowledgeKnowledgebaseLanguageDocuments",
      "signature": "postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports": {
      "operationId": "postknowledgeknowledgebaselanguagedocumentsimports",
      "functionName": "postKnowledgeKnowledgebaseLanguageDocumentsImports",
      "signature": "postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeImport"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote": {
      "operationId": "postknowledgeknowledgebaselanguagetrainingpromote",
      "functionName": "postKnowledgeKnowledgebaseLanguageTrainingPromote",
      "signature": "postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trainingId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings": {
      "operationId": "postknowledgeknowledgebaselanguagetrainings",
      "functionName": "postKnowledgeKnowledgebaseLanguageTrainings",
      "signature": "postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageCode",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search": {
      "operationId": "postknowledgeknowledgebasesearch",
      "functionName": "postKnowledgeKnowledgebaseSearch",
      "signature": "postKnowledgeKnowledgebaseSearch(knowledgeBaseId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "KnowledgeSearchResponse"
    },
    "POST /api/v2/knowledge/knowledgebases": {
      "operationId": "postknowledgeknowledgebases",
      "functionName": "postKnowledgeKnowledgebases",
      "signature": "postKnowledgeKnowledgebases(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KnowledgeBase"
    }
  },
  "languageunderstanding": {
    "DELETE /api/v2/languageunderstanding/domains/{domainId}": {
      "operationId": "deletelanguageunderstandingdomain",
      "functionName": "deleteLanguageunderstandingDomain",
      "signature": "deleteLanguageunderstandingDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}": {
      "operationId": "deletelanguageunderstandingdomainfeedbackfeedbackid",
      "functionName": "deleteLanguageunderstandingDomainFeedbackFeedbackId",
      "signature": "deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "feedbackId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "operationId": "deletelanguageunderstandingdomainversion",
      "functionName": "deleteLanguageunderstandingDomainVersion",
      "signature": "deleteLanguageunderstandingDomainVersion(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "domainVersionId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/miners/{minerId}": {
      "operationId": "deletelanguageunderstandingminer",
      "functionName": "deleteLanguageunderstandingMiner",
      "signature": "deleteLanguageunderstandingMiner(minerId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "operationId": "deletelanguageunderstandingminerdraft",
      "functionName": "deleteLanguageunderstandingMinerDraft",
      "signature": "deleteLanguageunderstandingMinerDraft(minerId, draftId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "draftId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}": {
      "operationId": "getlanguageunderstandingdomain",
      "functionName": "getLanguageunderstandingDomain",
      "signature": "getLanguageunderstandingDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "NluDomain"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/feedback": {
      "operationId": "getlanguageunderstandingdomainfeedback",
      "functionName": "getLanguageunderstandingDomainFeedback",
      "signature": "getLanguageunderstandingDomainFeedback(domainId, intentName, assessment, dateStart, dateEnd, includeDeleted, pageNumber, pageSize, enableCursorPagination, after, fields)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "intentName",
          "type": "String",
          "required": "false"
        },
        {
          "name": "assessment",
          "type": "String",
          "required": "false"
        },
        {
          "name": "dateStart",
          "type": "String",
          "required": "false"
        },
        {
          "name": "dateEnd",
          "type": "String",
          "required": "false"
        },
        {
          "name": "includeDeleted",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "enableCursorPagination",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "fields",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "NluFeedbackListing"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}": {
      "operationId": "getlanguageunderstandingdomainfeedbackfeedbackid",
      "functionName": "getLanguageunderstandingDomainFeedbackFeedbackId",
      "signature": "getLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, fields)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "feedbackId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "fields",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "NluFeedbackResponse"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "operationId": "getlanguageunderstandingdomainversion",
      "functionName": "getLanguageunderstandingDomainVersion",
      "signature": "getLanguageunderstandingDomainVersion(domainId, domainVersionId, includeUtterances)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "domainVersionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeUtterances",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "NluDomainVersion"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report": {
      "operationId": "getlanguageunderstandingdomainversionreport",
      "functionName": "getLanguageunderstandingDomainVersionReport",
      "signature": "getLanguageunderstandingDomainVersionReport(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "domainVersionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "NluDomainVersionQualityReport"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions": {
      "operationId": "getlanguageunderstandingdomainversions",
      "functionName": "getLanguageunderstandingDomainVersions",
      "signature": "getLanguageunderstandingDomainVersions(domainId, includeUtterances, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeUtterances",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "NluDomainVersionListing"
    },
    "GET /api/v2/languageunderstanding/domains": {
      "operationId": "getlanguageunderstandingdomains",
      "functionName": "getLanguageunderstandingDomains",
      "signature": "getLanguageunderstandingDomains(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "NluDomainListing"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}": {
      "operationId": "getlanguageunderstandingminer",
      "functionName": "getLanguageunderstandingMiner",
      "signature": "getLanguageunderstandingMiner(minerId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Miner"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "operationId": "getlanguageunderstandingminerdraft",
      "functionName": "getLanguageunderstandingMinerDraft",
      "signature": "getLanguageunderstandingMinerDraft(minerId, draftId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "draftId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Draft"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/drafts": {
      "operationId": "getlanguageunderstandingminerdrafts",
      "functionName": "getLanguageunderstandingMinerDrafts",
      "signature": "getLanguageunderstandingMinerDrafts(minerId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DraftListing"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/intents/{intentId}": {
      "operationId": "getlanguageunderstandingminerintent",
      "functionName": "getLanguageunderstandingMinerIntent",
      "signature": "getLanguageunderstandingMinerIntent(minerId, intentId, expand)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "intentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "MinerIntent"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/intents": {
      "operationId": "getlanguageunderstandingminerintents",
      "functionName": "getLanguageunderstandingMinerIntents",
      "signature": "getLanguageunderstandingMinerIntents(minerId, expand)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "MinedIntentsListing"
    },
    "GET /api/v2/languageunderstanding/miners": {
      "operationId": "getlanguageunderstandingminers",
      "functionName": "getLanguageunderstandingMiners",
      "signature": "getLanguageunderstandingMiners()",
      "return": "MinerListing"
    },
    "PATCH /api/v2/languageunderstanding/domains/{domainId}": {
      "operationId": "patchlanguageunderstandingdomain",
      "functionName": "patchLanguageunderstandingDomain",
      "signature": "patchLanguageunderstandingDomain(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "NluDomain"
    },
    "PATCH /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "operationId": "patchlanguageunderstandingminerdraft",
      "functionName": "patchLanguageunderstandingMinerDraft",
      "signature": "patchLanguageunderstandingMinerDraft(minerId, draftId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "draftId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Draft"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/feedback": {
      "operationId": "postlanguageunderstandingdomainfeedback",
      "functionName": "postLanguageunderstandingDomainFeedback",
      "signature": "postLanguageunderstandingDomainFeedback(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "NluFeedbackResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect": {
      "operationId": "postlanguageunderstandingdomainversiondetect",
      "functionName": "postLanguageunderstandingDomainVersionDetect",
      "signature": "postLanguageunderstandingDomainVersionDetect(domainId, domainVersionId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "domainVersionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "NluDetectionResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish": {
      "operationId": "postlanguageunderstandingdomainversionpublish",
      "functionName": "postLanguageunderstandingDomainVersionPublish",
      "signature": "postLanguageunderstandingDomainVersionPublish(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "domainVersionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "NluDomainVersion"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train": {
      "operationId": "postlanguageunderstandingdomainversiontrain",
      "functionName": "postLanguageunderstandingDomainVersionTrain",
      "signature": "postLanguageunderstandingDomainVersionTrain(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "domainVersionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "NluDomainVersionTrainingResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions": {
      "operationId": "postlanguageunderstandingdomainversions",
      "functionName": "postLanguageunderstandingDomainVersions",
      "signature": "postLanguageunderstandingDomainVersions(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "NluDomainVersion"
    },
    "POST /api/v2/languageunderstanding/domains": {
      "operationId": "postlanguageunderstandingdomains",
      "functionName": "postLanguageunderstandingDomains",
      "signature": "postLanguageunderstandingDomains(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "NluDomain"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/drafts": {
      "operationId": "postlanguageunderstandingminerdrafts",
      "functionName": "postLanguageunderstandingMinerDrafts",
      "signature": "postLanguageunderstandingMinerDrafts(minerId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Draft"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/execute": {
      "operationId": "postlanguageunderstandingminerexecute",
      "functionName": "postLanguageunderstandingMinerExecute",
      "signature": "postLanguageunderstandingMinerExecute(minerId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Miner"
    },
    "POST /api/v2/languageunderstanding/miners": {
      "operationId": "postlanguageunderstandingminers",
      "functionName": "postLanguageunderstandingMiners",
      "signature": "postLanguageunderstandingMiners(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Miner"
    },
    "PUT /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "operationId": "putlanguageunderstandingdomainversion",
      "functionName": "putLanguageunderstandingDomainVersion",
      "signature": "putLanguageunderstandingDomainVersion(domainId, domainVersionId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "domainVersionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "NluDomainVersion"
    }
  },
  "languages": {
    "DELETE /api/v2/languages/{languageId}": {
      "operationId": "deletelanguage",
      "functionName": "deleteLanguage",
      "signature": "deleteLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/languages/{languageId}": {
      "operationId": "deleteroutinglanguage",
      "functionName": "deleteRoutingLanguage",
      "signature": "deleteRoutingLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/languages/{languageId}": {
      "operationId": "getlanguage",
      "functionName": "getLanguage",
      "signature": "getLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Language"
    },
    "GET /api/v2/languages": {
      "operationId": "getlanguages",
      "functionName": "getLanguages",
      "signature": "getLanguages(pageSize, pageNumber, sortOrder, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LanguageEntityListing"
    },
    "GET /api/v2/languages/translations": {
      "operationId": "getlanguagestranslations",
      "functionName": "getLanguagesTranslations",
      "signature": "getLanguagesTranslations()",
      "return": "AvailableTranslations"
    },
    "GET /api/v2/languages/translations/builtin": {
      "operationId": "getlanguagestranslationsbuiltin",
      "functionName": "getLanguagesTranslationsBuiltin",
      "signature": "getLanguagesTranslationsBuiltin(language)",
      "parameters": [
        {
          "name": "language",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "{'String': Object}"
    },
    "GET /api/v2/languages/translations/organization": {
      "operationId": "getlanguagestranslationsorganization",
      "functionName": "getLanguagesTranslationsOrganization",
      "signature": "getLanguagesTranslationsOrganization(language)",
      "parameters": [
        {
          "name": "language",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "{'String': Object}"
    },
    "GET /api/v2/languages/translations/users/{userId}": {
      "operationId": "getlanguagestranslationsuser",
      "functionName": "getLanguagesTranslationsUser",
      "signature": "getLanguagesTranslationsUser(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "{'String': Object}"
    },
    "GET /api/v2/routing/languages/{languageId}": {
      "operationId": "getroutinglanguage",
      "functionName": "getRoutingLanguage",
      "signature": "getRoutingLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Language"
    },
    "POST /api/v2/languages": {
      "operationId": "postlanguages",
      "functionName": "postLanguages",
      "signature": "postLanguages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Language"
    }
  },
  "learning": {
    "DELETE /api/v2/learning/assignments/{assignmentId}": {
      "operationId": "deletelearningassignment",
      "functionName": "deleteLearningAssignment",
      "signature": "deleteLearningAssignment(assignmentId)",
      "parameters": [
        {
          "name": "assignmentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/learning/modules/{moduleId}": {
      "operationId": "deletelearningmodule",
      "functionName": "deleteLearningModule",
      "signature": "deleteLearningModule(moduleId)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/learning/assignments/{assignmentId}": {
      "operationId": "getlearningassignment",
      "functionName": "getLearningAssignment",
      "signature": "getLearningAssignment(assignmentId, expand)",
      "parameters": [
        {
          "name": "assignmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LearningAssignment"
    },
    "GET /api/v2/learning/assignments": {
      "operationId": "getlearningassignments",
      "functionName": "getLearningAssignments",
      "signature": "getLearningAssignments(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, userId, types, states, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "interval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "completionInterval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "overdue",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pass",
          "type": "String",
          "required": "false"
        },
        {
          "name": "minPercentageScore",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "maxPercentageScore",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "userId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "types",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "states",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LearningAssignmentsDomainEntity"
    },
    "GET /api/v2/learning/assignments/me": {
      "operationId": "getlearningassignmentsme",
      "functionName": "getLearningAssignmentsMe",
      "signature": "getLearningAssignmentsMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, types, states, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "interval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "completionInterval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "overdue",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pass",
          "type": "String",
          "required": "false"
        },
        {
          "name": "minPercentageScore",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "maxPercentageScore",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "types",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "states",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LearningAssignmentsDomainEntity"
    },
    "GET /api/v2/learning/modules/{moduleId}": {
      "operationId": "getlearningmodule",
      "functionName": "getLearningModule",
      "signature": "getLearningModule(moduleId, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LearningModule"
    },
    "GET /api/v2/learning/modules/{moduleId}/rule": {
      "operationId": "getlearningmodulerule",
      "functionName": "getLearningModuleRule",
      "signature": "getLearningModuleRule(moduleId)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LearningModuleRule"
    },
    "GET /api/v2/learning/modules/{moduleId}/versions/{versionId}": {
      "operationId": "getlearningmoduleversion",
      "functionName": "getLearningModuleVersion",
      "signature": "getLearningModuleVersion(moduleId, versionId, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "versionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LearningModule"
    },
    "GET /api/v2/learning/modules": {
      "operationId": "getlearningmodules",
      "functionName": "getLearningModules",
      "signature": "getLearningModules(isArchived, types, pageSize, pageNumber, sortOrder, sortBy, searchTerm, expand, isPublished)",
      "parameters": [
        {
          "name": "isArchived",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "types",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "searchTerm",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "isPublished",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LearningModulesDomainEntityListing"
    },
    "PATCH /api/v2/learning/assignments/{assignmentId}": {
      "operationId": "patchlearningassignment",
      "functionName": "patchLearningAssignment",
      "signature": "patchLearningAssignment(assignmentId, body)",
      "parameters": [
        {
          "name": "assignmentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "LearningAssignment"
    },
    "POST /api/v2/learning/assessments/scoring": {
      "operationId": "postlearningassessmentsscoring",
      "functionName": "postLearningAssessmentsScoring",
      "signature": "postLearningAssessmentsScoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AssessmentScoringSet"
    },
    "POST /api/v2/learning/assignments": {
      "operationId": "postlearningassignments",
      "functionName": "postLearningAssignments",
      "signature": "postLearningAssignments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "LearningAssignment"
    },
    "POST /api/v2/learning/assignments/aggregates/query": {
      "operationId": "postlearningassignmentsaggregatesquery",
      "functionName": "postLearningAssignmentsAggregatesQuery",
      "signature": "postLearningAssignmentsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LearningAssignmentAggregateResponse"
    },
    "POST /api/v2/learning/assignments/bulkadd": {
      "operationId": "postlearningassignmentsbulkadd",
      "functionName": "postLearningAssignmentsBulkadd",
      "signature": "postLearningAssignmentsBulkadd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "LearningAssignmentBulkAddResponse"
    },
    "POST /api/v2/learning/assignments/bulkremove": {
      "operationId": "postlearningassignmentsbulkremove",
      "functionName": "postLearningAssignmentsBulkremove",
      "signature": "postLearningAssignmentsBulkremove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "LearningAssignmentBulkRemoveResponse"
    },
    "POST /api/v2/learning/modules/{moduleId}/publish": {
      "operationId": "postlearningmodulepublish",
      "functionName": "postLearningModulePublish",
      "signature": "postLearningModulePublish(moduleId)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LearningModulePublishResponse"
    },
    "POST /api/v2/learning/modules": {
      "operationId": "postlearningmodules",
      "functionName": "postLearningModules",
      "signature": "postLearningModules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LearningModule"
    },
    "POST /api/v2/learning/rules/query": {
      "operationId": "postlearningrulesquery",
      "functionName": "postLearningRulesQuery",
      "signature": "postLearningRulesQuery(pageSize, pageNumber, body)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LearningAssignmentUserListing"
    },
    "PUT /api/v2/learning/modules/{moduleId}": {
      "operationId": "putlearningmodule",
      "functionName": "putLearningModule",
      "signature": "putLearningModule(moduleId, body)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LearningModule"
    },
    "PUT /api/v2/learning/modules/{moduleId}/rule": {
      "operationId": "putlearningmodulerule",
      "functionName": "putLearningModuleRule",
      "signature": "putLearningModuleRule(moduleId, body)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LearningModuleRule"
    }
  },
  "license": {
    "GET /api/v2/license/definitions/{licenseId}": {
      "operationId": "getlicensedefinition",
      "functionName": "getLicenseDefinition",
      "signature": "getLicenseDefinition(licenseId)",
      "parameters": [
        {
          "name": "licenseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LicenseDefinition"
    },
    "GET /api/v2/license/definitions": {
      "operationId": "getlicensedefinitions",
      "functionName": "getLicenseDefinitions",
      "signature": "getLicenseDefinitions()",
      "return": "[LicenseDefinition]"
    },
    "GET /api/v2/license/toggles/{featureName}": {
      "operationId": "getlicensetoggle",
      "functionName": "getLicenseToggle",
      "signature": "getLicenseToggle(featureName)",
      "parameters": [
        {
          "name": "featureName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LicenseOrgToggle"
    },
    "GET /api/v2/license/users/{userId}": {
      "operationId": "getlicenseuser",
      "functionName": "getLicenseUser",
      "signature": "getLicenseUser(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LicenseUser"
    },
    "GET /api/v2/license/users": {
      "operationId": "getlicenseusers",
      "functionName": "getLicenseUsers",
      "signature": "getLicenseUsers(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "UserLicensesEntityListing"
    },
    "POST /api/v2/license/infer": {
      "operationId": "postlicenseinfer",
      "functionName": "postLicenseInfer",
      "signature": "postLicenseInfer(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "['String']"
    },
    "POST /api/v2/license/organization": {
      "operationId": "postlicenseorganization",
      "functionName": "postLicenseOrganization",
      "signature": "postLicenseOrganization(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "[LicenseUpdateStatus]"
    },
    "POST /api/v2/license/toggles/{featureName}": {
      "operationId": "postlicensetoggle",
      "functionName": "postLicenseToggle",
      "signature": "postLicenseToggle(featureName)",
      "parameters": [
        {
          "name": "featureName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LicenseOrgToggle"
    },
    "POST /api/v2/license/users": {
      "operationId": "postlicenseusers",
      "functionName": "postLicenseUsers",
      "signature": "postLicenseUsers(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "{'String': Object}"
    }
  },
  "locations": {
    "DELETE /api/v2/locations/{locationId}": {
      "operationId": "deletelocation",
      "functionName": "deleteLocation",
      "signature": "deleteLocation(locationId)",
      "parameters": [
        {
          "name": "locationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/locations/{locationId}": {
      "operationId": "getlocation",
      "functionName": "getLocation",
      "signature": "getLocation(locationId, expand)",
      "parameters": [
        {
          "name": "locationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LocationDefinition"
    },
    "GET /api/v2/locations/{locationId}/sublocations": {
      "operationId": "getlocationsublocations",
      "functionName": "getLocationSublocations",
      "signature": "getLocationSublocations(locationId)",
      "parameters": [
        {
          "name": "locationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LocationEntityListing"
    },
    "GET /api/v2/locations": {
      "operationId": "getlocations",
      "functionName": "getLocations",
      "signature": "getLocations(pageSize, pageNumber, id, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LocationEntityListing"
    },
    "GET /api/v2/locations/search": {
      "operationId": "getlocationssearch",
      "functionName": "getLocationsSearch",
      "signature": "getLocationsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "PATCH /api/v2/locations/{locationId}": {
      "operationId": "patchlocation",
      "functionName": "patchLocation",
      "signature": "patchLocation(locationId, body)",
      "parameters": [
        {
          "name": "locationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LocationDefinition"
    },
    "POST /api/v2/locations": {
      "operationId": "postlocations",
      "functionName": "postLocations",
      "signature": "postLocations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LocationDefinition"
    },
    "POST /api/v2/locations/search": {
      "operationId": "postlocationssearch",
      "functionName": "postLocationsSearch",
      "signature": "postLocationsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LocationsSearchResponse"
    }
  },
  "messaging": {
    "DELETE /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "operationId": "deletemessagingsupportedcontentsupportedcontentid",
      "functionName": "deleteMessagingSupportedcontentSupportedContentId",
      "signature": "deleteMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/messaging/supportedcontent": {
      "operationId": "getmessagingsupportedcontent",
      "functionName": "getMessagingSupportedcontent",
      "signature": "getMessagingSupportedcontent(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "SupportedContentListing"
    },
    "GET /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "operationId": "getmessagingsupportedcontentsupportedcontentid",
      "functionName": "getMessagingSupportedcontentSupportedContentId",
      "signature": "getMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SupportedContent"
    },
    "PATCH /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "operationId": "patchmessagingsupportedcontentsupportedcontentid",
      "functionName": "patchMessagingSupportedcontentSupportedContentId",
      "signature": "patchMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SupportedContent"
    },
    "POST /api/v2/messaging/supportedcontent": {
      "operationId": "postmessagingsupportedcontent",
      "functionName": "postMessagingSupportedcontent",
      "signature": "postMessagingSupportedcontent(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SupportedContent"
    }
  },
  "mobiledevices": {
    "DELETE /api/v2/mobiledevices/{deviceId}": {
      "operationId": "deletemobiledevice",
      "functionName": "deleteMobiledevice",
      "signature": "deleteMobiledevice(deviceId)",
      "parameters": [
        {
          "name": "deviceId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/mobiledevices/{deviceId}": {
      "operationId": "getmobiledevice",
      "functionName": "getMobiledevice",
      "signature": "getMobiledevice(deviceId)",
      "parameters": [
        {
          "name": "deviceId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserDevice"
    },
    "GET /api/v2/mobiledevices": {
      "operationId": "getmobiledevices",
      "functionName": "getMobiledevices",
      "signature": "getMobiledevices(pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DirectoryUserDevicesListing"
    },
    "POST /api/v2/mobiledevices": {
      "operationId": "postmobiledevices",
      "functionName": "postMobiledevices",
      "signature": "postMobiledevices(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserDevice"
    },
    "PUT /api/v2/mobiledevices/{deviceId}": {
      "operationId": "putmobiledevice",
      "functionName": "putMobiledevice",
      "signature": "putMobiledevice(deviceId, body)",
      "parameters": [
        {
          "name": "deviceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "UserDevice"
    }
  },
  "notifications": {
    "DELETE /api/v2/notifications/channels/{channelId}/subscriptions": {
      "operationId": "deletenotificationschannelsubscriptions",
      "functionName": "deleteNotificationsChannelSubscriptions",
      "signature": "deleteNotificationsChannelSubscriptions(channelId)",
      "parameters": [
        {
          "name": "channelId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/notifications/availabletopics": {
      "operationId": "getnotificationsavailabletopics",
      "functionName": "getNotificationsAvailabletopics",
      "signature": "getNotificationsAvailabletopics(expand, includePreview)",
      "parameters": [
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "includePreview",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AvailableTopicEntityListing"
    },
    "GET /api/v2/notifications/channels/{channelId}/subscriptions": {
      "operationId": "getnotificationschannelsubscriptions",
      "functionName": "getNotificationsChannelSubscriptions",
      "signature": "getNotificationsChannelSubscriptions(channelId)",
      "parameters": [
        {
          "name": "channelId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ChannelTopicEntityListing"
    },
    "GET /api/v2/notifications/channels": {
      "operationId": "getnotificationschannels",
      "functionName": "getNotificationsChannels",
      "signature": "getNotificationsChannels(includechannels)",
      "parameters": [
        {
          "name": "includechannels",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ChannelEntityListing"
    },
    "HEAD /api/v2/notifications/channels/{channelId}": {
      "operationId": "headnotificationschannel",
      "functionName": "headNotificationsChannel",
      "signature": "headNotificationsChannel(channelId)",
      "parameters": [
        {
          "name": "channelId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/notifications/channels/{channelId}/subscriptions": {
      "operationId": "postnotificationschannelsubscriptions",
      "functionName": "postNotificationsChannelSubscriptions",
      "signature": "postNotificationsChannelSubscriptions(channelId, body)",
      "parameters": [
        {
          "name": "channelId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ChannelTopicEntityListing"
    },
    "POST /api/v2/notifications/channels": {
      "operationId": "postnotificationschannels",
      "functionName": "postNotificationsChannels",
      "signature": "postNotificationsChannels()",
      "return": "Channel"
    },
    "PUT /api/v2/notifications/channels/{channelId}/subscriptions": {
      "operationId": "putnotificationschannelsubscriptions",
      "functionName": "putNotificationsChannelSubscriptions",
      "signature": "putNotificationsChannelSubscriptions(channelId, body)",
      "parameters": [
        {
          "name": "channelId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ChannelTopicEntityListing"
    }
  },
  "oauth": {
    "DELETE /api/v2/oauth/clients/{clientId}": {
      "operationId": "deleteoauthclient",
      "functionName": "deleteOauthClient",
      "signature": "deleteOauthClient(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/oauth/authorizations/{clientId}": {
      "operationId": "getoauthauthorization",
      "functionName": "getOauthAuthorization",
      "signature": "getOauthAuthorization(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OAuthAuthorization"
    },
    "GET /api/v2/oauth/authorizations": {
      "operationId": "getoauthauthorizations",
      "functionName": "getOauthAuthorizations",
      "signature": "getOauthAuthorizations()",
      "return": "OAuthAuthorizationListing"
    },
    "GET /api/v2/oauth/clients/{clientId}": {
      "operationId": "getoauthclient",
      "functionName": "getOauthClient",
      "signature": "getOauthClient(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OAuthClient"
    },
    "GET /api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}": {
      "operationId": "getoauthclientusagequeryresult",
      "functionName": "getOauthClientUsageQueryResult",
      "signature": "getOauthClientUsageQueryResult(executionId, clientId)",
      "parameters": [
        {
          "name": "executionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ApiUsageQueryResult"
    },
    "GET /api/v2/oauth/clients/{clientId}/usage/summary": {
      "operationId": "getoauthclientusagesummary",
      "functionName": "getOauthClientUsageSummary",
      "signature": "getOauthClientUsageSummary(clientId, days)",
      "parameters": [
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "days",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UsageExecutionResult"
    },
    "GET /api/v2/oauth/clients": {
      "operationId": "getoauthclients",
      "functionName": "getOauthClients",
      "signature": "getOauthClients()",
      "return": "OAuthClientEntityListing"
    },
    "GET /api/v2/oauth/scopes/{scopeId}": {
      "operationId": "getoauthscope",
      "functionName": "getOauthScope",
      "signature": "getOauthScope(scopeId, acceptLanguage)",
      "parameters": [
        {
          "name": "scopeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "acceptLanguage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OAuthScope"
    },
    "GET /api/v2/oauth/scopes": {
      "operationId": "getoauthscopes",
      "functionName": "getOauthScopes",
      "signature": "getOauthScopes(acceptLanguage)",
      "parameters": [
        {
          "name": "acceptLanguage",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OAuthScopeListing"
    },
    "POST /api/v2/oauth/clients/{clientId}/secret": {
      "operationId": "postoauthclientsecret",
      "functionName": "postOauthClientSecret",
      "signature": "postOauthClientSecret(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OAuthClient"
    },
    "POST /api/v2/oauth/clients/{clientId}/usage/query": {
      "operationId": "postoauthclientusagequery",
      "functionName": "postOauthClientUsageQuery",
      "signature": "postOauthClientUsageQuery(clientId, body)",
      "parameters": [
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UsageExecutionResult"
    },
    "POST /api/v2/oauth/clients": {
      "operationId": "postoauthclients",
      "functionName": "postOauthClients",
      "signature": "postOauthClients(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthClient"
    },
    "PUT /api/v2/oauth/clients/{clientId}": {
      "operationId": "putoauthclient",
      "functionName": "putOauthClient",
      "signature": "putOauthClient(clientId, body)",
      "parameters": [
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OAuthClient"
    }
  },
  "objects": {
    "DELETE /api/v2/authorization/divisions/{divisionId}": {
      "operationId": "deleteauthorizationdivision",
      "functionName": "deleteAuthorizationDivision",
      "signature": "deleteAuthorizationDivision(divisionId, force)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "force",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "GET /api/v2/authorization/divisions/{divisionId}": {
      "operationId": "getauthorizationdivision",
      "functionName": "getAuthorizationDivision",
      "signature": "getAuthorizationDivision(divisionId, objectCount)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "objectCount",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions": {
      "operationId": "getauthorizationdivisions",
      "functionName": "getAuthorizationDivisions",
      "signature": "getAuthorizationDivisions(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, objectCount, id, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "objectCount",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "AuthzDivisionEntityListing"
    },
    "GET /api/v2/authorization/divisions/home": {
      "operationId": "getauthorizationdivisionshome",
      "functionName": "getAuthorizationDivisionsHome",
      "signature": "getAuthorizationDivisionsHome()",
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/limit": {
      "operationId": "getauthorizationdivisionslimit",
      "functionName": "getAuthorizationDivisionsLimit",
      "signature": "getAuthorizationDivisionsLimit()",
      "return": "'Number'"
    },
    "POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}": {
      "operationId": "postauthorizationdivisionobject",
      "functionName": "postAuthorizationDivisionObject",
      "signature": "postAuthorizationDivisionObject(divisionId, objectType, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "objectType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/authorization/divisions/{divisionId}/restore": {
      "operationId": "postauthorizationdivisionrestore",
      "functionName": "postAuthorizationDivisionRestore",
      "signature": "postAuthorizationDivisionRestore(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/divisions": {
      "operationId": "postauthorizationdivisions",
      "functionName": "postAuthorizationDivisions",
      "signature": "postAuthorizationDivisions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AuthzDivision"
    },
    "PUT /api/v2/authorization/divisions/{divisionId}": {
      "operationId": "putauthorizationdivision",
      "functionName": "putAuthorizationDivision",
      "signature": "putAuthorizationDivision(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AuthzDivision"
    }
  },
  "organization": {
    "GET /api/v2/fieldconfig": {
      "operationId": "getfieldconfig",
      "functionName": "getFieldconfig",
      "signature": "getFieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/organizations/embeddedintegration": {
      "operationId": "getorganizationsembeddedintegration",
      "functionName": "getOrganizationsEmbeddedintegration",
      "signature": "getOrganizationsEmbeddedintegration()",
      "return": "EmbeddedIntegration"
    },
    "GET /api/v2/organizations/ipaddressauthentication": {
      "operationId": "getorganizationsipaddressauthentication",
      "functionName": "getOrganizationsIpaddressauthentication",
      "signature": "getOrganizationsIpaddressauthentication()",
      "return": "IpAddressAuthentication"
    },
    "GET /api/v2/organizations/limits/changerequests/{requestId}": {
      "operationId": "getorganizationslimitschangerequest",
      "functionName": "getOrganizationsLimitsChangerequest",
      "signature": "getOrganizationsLimitsChangerequest(requestId)",
      "parameters": [
        {
          "name": "requestId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LimitChangeRequestDetails"
    },
    "GET /api/v2/organizations/limits/changerequests": {
      "operationId": "getorganizationslimitschangerequests",
      "functionName": "getOrganizationsLimitsChangerequests",
      "signature": "getOrganizationsLimitsChangerequests(after, before, status, pageSize, expand)",
      "parameters": [
        {
          "name": "after",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "before",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "status",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LimitChangeRequestsEntityListing"
    },
    "GET /api/v2/organizations/limits/docs": {
      "operationId": "getorganizationslimitsdocs",
      "functionName": "getOrganizationsLimitsDocs",
      "signature": "getOrganizationsLimitsDocs()",
      "return": "UrlResponse"
    },
    "GET /api/v2/organizations/limits/namespaces/{namespaceName}": {
      "operationId": "getorganizationslimitsnamespace",
      "functionName": "getOrganizationsLimitsNamespace",
      "signature": "getOrganizationsLimitsNamespace(namespaceName)",
      "parameters": [
        {
          "name": "namespaceName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LimitsEntityListing"
    },
    "GET /api/v2/organizations/limits/namespaces/{namespaceName}/defaults": {
      "operationId": "getorganizationslimitsnamespacedefaults",
      "functionName": "getOrganizationsLimitsNamespaceDefaults",
      "signature": "getOrganizationsLimitsNamespaceDefaults(namespaceName)",
      "parameters": [
        {
          "name": "namespaceName",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LimitsEntityListing"
    },
    "GET /api/v2/organizations/limits/namespaces": {
      "operationId": "getorganizationslimitsnamespaces",
      "functionName": "getOrganizationsLimitsNamespaces",
      "signature": "getOrganizationsLimitsNamespaces(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "PagedNamespaceListing"
    },
    "GET /api/v2/organizations/me": {
      "operationId": "getorganizationsme",
      "functionName": "getOrganizationsMe",
      "signature": "getOrganizationsMe()",
      "return": "Organization"
    },
    "GET /api/v2/organizations/whitelist": {
      "operationId": "getorganizationswhitelist",
      "functionName": "getOrganizationsWhitelist",
      "signature": "getOrganizationsWhitelist()",
      "return": "OrgWhitelistSettings"
    },
    "PATCH /api/v2/organizations/features/{featureName}": {
      "operationId": "patchorganizationsfeature",
      "functionName": "patchOrganizationsFeature",
      "signature": "patchOrganizationsFeature(featureName, enabled)",
      "parameters": [
        {
          "name": "featureName",
          "type": "String",
          "required": "true"
        },
        {
          "name": "enabled",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OrganizationFeatures"
    },
    "PUT /api/v2/organizations/embeddedintegration": {
      "operationId": "putorganizationsembeddedintegration",
      "functionName": "putOrganizationsEmbeddedintegration",
      "signature": "putOrganizationsEmbeddedintegration(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EmbeddedIntegration"
    },
    "PUT /api/v2/organizations/ipaddressauthentication": {
      "operationId": "putorganizationsipaddressauthentication",
      "functionName": "putOrganizationsIpaddressauthentication",
      "signature": "putOrganizationsIpaddressauthentication(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "IpAddressAuthentication"
    },
    "PUT /api/v2/organizations/me": {
      "operationId": "putorganizationsme",
      "functionName": "putOrganizationsMe",
      "signature": "putOrganizationsMe(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Organization"
    },
    "PUT /api/v2/organizations/whitelist": {
      "operationId": "putorganizationswhitelist",
      "functionName": "putOrganizationsWhitelist",
      "signature": "putOrganizationsWhitelist(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OrgWhitelistSettings"
    }
  },
  "organizationauthorization": {
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "operationId": "deleteorgauthorizationtrustee",
      "functionName": "deleteOrgauthorizationTrustee",
      "signature": "deleteOrgauthorizationTrustee(trusteeOrgId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/clonedusers/{trusteeUserId}": {
      "operationId": "deleteorgauthorizationtrusteecloneduser",
      "functionName": "deleteOrgauthorizationTrusteeCloneduser",
      "signature": "deleteOrgauthorizationTrusteeCloneduser(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}": {
      "operationId": "deleteorgauthorizationtrusteeuser",
      "functionName": "deleteOrgauthorizationTrusteeUser",
      "signature": "deleteOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "operationId": "deleteorgauthorizationtrusteeuserroles",
      "functionName": "deleteOrgauthorizationTrusteeUserRoles",
      "signature": "deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}": {
      "operationId": "deleteorgauthorizationtrustor",
      "functionName": "deleteOrgauthorizationTrustor",
      "signature": "deleteOrgauthorizationTrustor(trustorOrgId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "operationId": "deleteorgauthorizationtrustorcloneduser",
      "functionName": "deleteOrgauthorizationTrustorCloneduser",
      "signature": "deleteOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "operationId": "deleteorgauthorizationtrustoruser",
      "functionName": "deleteOrgauthorizationTrustorUser",
      "signature": "deleteOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/orgauthorization/pairings/{pairingId}": {
      "operationId": "getorgauthorizationpairing",
      "functionName": "getOrgauthorizationPairing",
      "signature": "getOrgauthorizationPairing(pairingId)",
      "parameters": [
        {
          "name": "pairingId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TrustRequest"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "operationId": "getorgauthorizationtrustee",
      "functionName": "getOrgauthorizationTrustee",
      "signature": "getOrgauthorizationTrustee(trusteeOrgId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Trustee"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/clonedusers": {
      "operationId": "getorgauthorizationtrusteeclonedusers",
      "functionName": "getOrgauthorizationTrusteeClonedusers",
      "signature": "getOrgauthorizationTrusteeClonedusers(trusteeOrgId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ClonedUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}": {
      "operationId": "getorgauthorizationtrusteeuser",
      "functionName": "getOrgauthorizationTrusteeUser",
      "signature": "getOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TrustUser"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "operationId": "getorgauthorizationtrusteeuserroles",
      "functionName": "getOrgauthorizationTrusteeUserRoles",
      "signature": "getOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserAuthorization"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users": {
      "operationId": "getorgauthorizationtrusteeusers",
      "functionName": "getOrgauthorizationTrusteeUsers",
      "signature": "getOrgauthorizationTrusteeUsers(trusteeOrgId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TrustUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees": {
      "operationId": "getorgauthorizationtrustees",
      "functionName": "getOrgauthorizationTrustees",
      "signature": "getOrgauthorizationTrustees(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TrustEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees/default": {
      "operationId": "getorgauthorizationtrusteesdefault",
      "functionName": "getOrgauthorizationTrusteesDefault",
      "signature": "getOrgauthorizationTrusteesDefault()",
      "return": "Trustee"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}": {
      "operationId": "getorgauthorizationtrustor",
      "functionName": "getOrgauthorizationTrustor",
      "signature": "getOrgauthorizationTrustor(trustorOrgId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Trustor"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "operationId": "getorgauthorizationtrustorcloneduser",
      "functionName": "getOrgauthorizationTrustorCloneduser",
      "signature": "getOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ClonedUser"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers": {
      "operationId": "getorgauthorizationtrustorclonedusers",
      "functionName": "getOrgauthorizationTrustorClonedusers",
      "signature": "getOrgauthorizationTrustorClonedusers(trustorOrgId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ClonedUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "operationId": "getorgauthorizationtrustoruser",
      "functionName": "getOrgauthorizationTrustorUser",
      "signature": "getOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TrustUser"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users": {
      "operationId": "getorgauthorizationtrustorusers",
      "functionName": "getOrgauthorizationTrustorUsers",
      "signature": "getOrgauthorizationTrustorUsers(trustorOrgId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TrustUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustors": {
      "operationId": "getorgauthorizationtrustors",
      "functionName": "getOrgauthorizationTrustors",
      "signature": "getOrgauthorizationTrustors(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TrustorEntityListing"
    },
    "POST /api/v2/orgauthorization/pairings": {
      "operationId": "postorgauthorizationpairings",
      "functionName": "postOrgauthorizationPairings",
      "signature": "postOrgauthorizationPairings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TrustRequest"
    },
    "POST /api/v2/orgauthorization/trustees/{trusteeOrgId}/users": {
      "operationId": "postorgauthorizationtrusteeusers",
      "functionName": "postOrgauthorizationTrusteeUsers",
      "signature": "postOrgauthorizationTrusteeUsers(trusteeOrgId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TrustUser"
    },
    "POST /api/v2/orgauthorization/trustees": {
      "operationId": "postorgauthorizationtrustees",
      "functionName": "postOrgauthorizationTrustees",
      "signature": "postOrgauthorizationTrustees(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Trustee"
    },
    "POST /api/v2/orgauthorization/trustees/audits": {
      "operationId": "postorgauthorizationtrusteesaudits",
      "functionName": "postOrgauthorizationTrusteesAudits",
      "signature": "postOrgauthorizationTrusteesAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "AuditQueryResponse"
    },
    "POST /api/v2/orgauthorization/trustees/default": {
      "operationId": "postorgauthorizationtrusteesdefault",
      "functionName": "postOrgauthorizationTrusteesDefault",
      "signature": "postOrgauthorizationTrusteesDefault(assignDefaultRole, autoExpire)",
      "parameters": [
        {
          "name": "assignDefaultRole",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "autoExpire",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "Trustee"
    },
    "POST /api/v2/orgauthorization/trustor/audits": {
      "operationId": "postorgauthorizationtrustoraudits",
      "functionName": "postOrgauthorizationTrustorAudits",
      "signature": "postOrgauthorizationTrustorAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "AuditQueryResponse"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "operationId": "putorgauthorizationtrustee",
      "functionName": "putOrgauthorizationTrustee",
      "signature": "putOrgauthorizationTrustee(trusteeOrgId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Trustee"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roledivisions": {
      "operationId": "putorgauthorizationtrusteeuserroledivisions",
      "functionName": "putOrgauthorizationTrusteeUserRoledivisions",
      "signature": "putOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId, trusteeUserId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "operationId": "putorgauthorizationtrusteeuserroles",
      "functionName": "putOrgauthorizationTrusteeUserRoles",
      "signature": "putOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "operationId": "putorgauthorizationtrustorcloneduser",
      "functionName": "putOrgauthorizationTrustorCloneduser",
      "signature": "putOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ClonedUser"
    },
    "PUT /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "operationId": "putorgauthorizationtrustoruser",
      "functionName": "putOrgauthorizationTrustorUser",
      "signature": "putOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "trusteeUserId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TrustUser"
    }
  },
  "outbound": {
    "DELETE /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "operationId": "deleteoutboundattemptlimit",
      "functionName": "deleteOutboundAttemptlimit",
      "signature": "deleteOutboundAttemptlimit(attemptLimitsId)",
      "parameters": [
        {
          "name": "attemptLimitsId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "operationId": "deleteoutboundcallabletimeset",
      "functionName": "deleteOutboundCallabletimeset",
      "signature": "deleteOutboundCallabletimeset(callableTimeSetId)",
      "parameters": [
        {
          "name": "callableTimeSetId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "operationId": "deleteoutboundcallanalysisresponseset",
      "functionName": "deleteOutboundCallanalysisresponseset",
      "signature": "deleteOutboundCallanalysisresponseset(callAnalysisSetId)",
      "parameters": [
        {
          "name": "callAnalysisSetId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/campaigns/{campaignId}": {
      "operationId": "deleteoutboundcampaign",
      "functionName": "deleteOutboundCampaign",
      "signature": "deleteOutboundCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Campaign"
    },
    "DELETE /api/v2/outbound/campaigns/{campaignId}/progress": {
      "operationId": "deleteoutboundcampaignprogress",
      "functionName": "deleteOutboundCampaignProgress",
      "signature": "deleteOutboundCampaignProgress(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "operationId": "deleteoutboundcampaignrule",
      "functionName": "deleteOutboundCampaignrule",
      "signature": "deleteOutboundCampaignrule(campaignRuleId)",
      "parameters": [
        {
          "name": "campaignRuleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}": {
      "operationId": "deleteoutboundcontactlist",
      "functionName": "deleteOutboundContactlist",
      "signature": "deleteOutboundContactlist(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "operationId": "deleteoutboundcontactlistcontact",
      "functionName": "deleteOutboundContactlistContact",
      "signature": "deleteOutboundContactlistContact(contactListId, contactId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}/contacts": {
      "operationId": "deleteoutboundcontactlistcontacts",
      "functionName": "deleteOutboundContactlistContacts",
      "signature": "deleteOutboundContactlistContacts(contactListId, contactIds)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "contactIds",
          "type": "[String]",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "operationId": "deleteoutboundcontactlistfilter",
      "functionName": "deleteOutboundContactlistfilter",
      "signature": "deleteOutboundContactlistfilter(contactListFilterId)",
      "parameters": [
        {
          "name": "contactListFilterId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists": {
      "operationId": "deleteoutboundcontactlists",
      "functionName": "deleteOutboundContactlists",
      "signature": "deleteOutboundContactlists(id)",
      "parameters": [
        {
          "name": "id",
          "type": "[String]",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/dnclists/{dncListId}": {
      "operationId": "deleteoutbounddnclist",
      "functionName": "deleteOutboundDnclist",
      "signature": "deleteOutboundDnclist(dncListId)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "operationId": "deleteoutboundmessagingcampaign",
      "functionName": "deleteOutboundMessagingcampaign",
      "signature": "deleteOutboundMessagingcampaign(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessagingCampaign"
    },
    "DELETE /api/v2/outbound/rulesets/{ruleSetId}": {
      "operationId": "deleteoutboundruleset",
      "functionName": "deleteOutboundRuleset",
      "signature": "deleteOutboundRuleset(ruleSetId)",
      "parameters": [
        {
          "name": "ruleSetId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "operationId": "deleteoutboundschedulescampaign",
      "functionName": "deleteOutboundSchedulesCampaign",
      "signature": "deleteOutboundSchedulesCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "operationId": "deleteoutboundschedulessequence",
      "functionName": "deleteOutboundSchedulesSequence",
      "signature": "deleteOutboundSchedulesSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/outbound/sequences/{sequenceId}": {
      "operationId": "deleteoutboundsequence",
      "functionName": "deleteOutboundSequence",
      "signature": "deleteOutboundSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "operationId": "getoutboundattemptlimit",
      "functionName": "getOutboundAttemptlimit",
      "signature": "getOutboundAttemptlimit(attemptLimitsId)",
      "parameters": [
        {
          "name": "attemptLimitsId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AttemptLimits"
    },
    "GET /api/v2/outbound/attemptlimits": {
      "operationId": "getoutboundattemptlimits",
      "functionName": "getOutboundAttemptlimits",
      "signature": "getOutboundAttemptlimits(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "AttemptLimitsEntityListing"
    },
    "GET /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "operationId": "getoutboundcallabletimeset",
      "functionName": "getOutboundCallabletimeset",
      "signature": "getOutboundCallabletimeset(callableTimeSetId)",
      "parameters": [
        {
          "name": "callableTimeSetId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CallableTimeSet"
    },
    "GET /api/v2/outbound/callabletimesets": {
      "operationId": "getoutboundcallabletimesets",
      "functionName": "getOutboundCallabletimesets",
      "signature": "getOutboundCallabletimesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CallableTimeSetEntityListing"
    },
    "GET /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "operationId": "getoutboundcallanalysisresponseset",
      "functionName": "getOutboundCallanalysisresponseset",
      "signature": "getOutboundCallanalysisresponseset(callAnalysisSetId)",
      "parameters": [
        {
          "name": "callAnalysisSetId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ResponseSet"
    },
    "GET /api/v2/outbound/callanalysisresponsesets": {
      "operationId": "getoutboundcallanalysisresponsesets",
      "functionName": "getOutboundCallanalysisresponsesets",
      "signature": "getOutboundCallanalysisresponsesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ResponseSetEntityListing"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}": {
      "operationId": "getoutboundcampaign",
      "functionName": "getOutboundCampaign",
      "signature": "getOutboundCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Campaign"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview/results": {
      "operationId": "getoutboundcampaignagentownedmappingpreviewresults",
      "functionName": "getOutboundCampaignAgentownedmappingpreviewResults",
      "signature": "getOutboundCampaignAgentownedmappingpreviewResults(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AgentOwnedMappingPreviewListing"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/diagnostics": {
      "operationId": "getoutboundcampaigndiagnostics",
      "functionName": "getOutboundCampaignDiagnostics",
      "signature": "getOutboundCampaignDiagnostics(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignDiagnostics"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/interactions": {
      "operationId": "getoutboundcampaigninteractions",
      "functionName": "getOutboundCampaignInteractions",
      "signature": "getOutboundCampaignInteractions(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignInteractions"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/progress": {
      "operationId": "getoutboundcampaignprogress",
      "functionName": "getOutboundCampaignProgress",
      "signature": "getOutboundCampaignProgress(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignProgress"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/stats": {
      "operationId": "getoutboundcampaignstats",
      "functionName": "getOutboundCampaignStats",
      "signature": "getOutboundCampaignStats(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignStats"
    },
    "GET /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "operationId": "getoutboundcampaignrule",
      "functionName": "getOutboundCampaignrule",
      "signature": "getOutboundCampaignrule(campaignRuleId)",
      "parameters": [
        {
          "name": "campaignRuleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignRule"
    },
    "GET /api/v2/outbound/campaignrules": {
      "operationId": "getoutboundcampaignrules",
      "functionName": "getOutboundCampaignrules",
      "signature": "getOutboundCampaignrules(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CampaignRuleEntityListing"
    },
    "GET /api/v2/outbound/campaigns": {
      "operationId": "getoutboundcampaigns",
      "functionName": "getOutboundCampaigns",
      "signature": "getOutboundCampaigns(pageSize, pageNumber, filterType, name, id, contactListId, dncListIds, distributionQueueId, edgeGroupId, callAnalysisResponseSetId, divisionId, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "contactListId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "dncListIds",
          "type": "String",
          "required": "false"
        },
        {
          "name": "distributionQueueId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "edgeGroupId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "callAnalysisResponseSetId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CampaignEntityListing"
    },
    "GET /api/v2/outbound/campaigns/all": {
      "operationId": "getoutboundcampaignsall",
      "functionName": "getOutboundCampaignsAll",
      "signature": "getOutboundCampaignsAll(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "mediaType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CommonCampaignEntityListing"
    },
    "GET /api/v2/outbound/campaigns/all/divisionviews": {
      "operationId": "getoutboundcampaignsalldivisionviews",
      "functionName": "getOutboundCampaignsAllDivisionviews",
      "signature": "getOutboundCampaignsAllDivisionviews(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "mediaType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CommonCampaignDivisionViewEntityListing"
    },
    "GET /api/v2/outbound/campaigns/divisionviews/{campaignId}": {
      "operationId": "getoutboundcampaignsdivisionview",
      "functionName": "getOutboundCampaignsDivisionview",
      "signature": "getOutboundCampaignsDivisionview(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignDivisionView"
    },
    "GET /api/v2/outbound/campaigns/divisionviews": {
      "operationId": "getoutboundcampaignsdivisionviews",
      "functionName": "getOutboundCampaignsDivisionviews",
      "signature": "getOutboundCampaignsDivisionviews(pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CampaignDivisionViewListing"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}": {
      "operationId": "getoutboundcontactlist",
      "functionName": "getOutboundContactlist",
      "signature": "getOutboundContactlist(contactListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "ContactList"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "operationId": "getoutboundcontactlistcontact",
      "functionName": "getOutboundContactlistContact",
      "signature": "getOutboundContactlistContact(contactListId, contactId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DialerContact"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/export": {
      "operationId": "getoutboundcontactlistexport",
      "functionName": "getOutboundContactlistExport",
      "signature": "getOutboundContactlistExport(contactListId, download)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "download",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ExportUri"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/importstatus": {
      "operationId": "getoutboundcontactlistimportstatus",
      "functionName": "getOutboundContactlistImportstatus",
      "signature": "getOutboundContactlistImportstatus(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ImportStatus"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview": {
      "operationId": "getoutboundcontactlisttimezonemappingpreview",
      "functionName": "getOutboundContactlistTimezonemappingpreview",
      "signature": "getOutboundContactlistTimezonemappingpreview(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TimeZoneMappingPreview"
    },
    "GET /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "operationId": "getoutboundcontactlistfilter",
      "functionName": "getOutboundContactlistfilter",
      "signature": "getOutboundContactlistfilter(contactListFilterId)",
      "parameters": [
        {
          "name": "contactListFilterId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ContactListFilter"
    },
    "GET /api/v2/outbound/contactlistfilters": {
      "operationId": "getoutboundcontactlistfilters",
      "functionName": "getOutboundContactlistfilters",
      "signature": "getOutboundContactlistfilters(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder, contactListId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "contactListId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ContactListFilterEntityListing"
    },
    "GET /api/v2/outbound/contactlists": {
      "operationId": "getoutboundcontactlists",
      "functionName": "getOutboundContactlists",
      "signature": "getOutboundContactlists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, id, divisionId, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ContactListEntityListing"
    },
    "GET /api/v2/outbound/contactlists/divisionviews/{contactListId}": {
      "operationId": "getoutboundcontactlistsdivisionview",
      "functionName": "getOutboundContactlistsDivisionview",
      "signature": "getOutboundContactlistsDivisionview(contactListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "ContactListDivisionView"
    },
    "GET /api/v2/outbound/contactlists/divisionviews": {
      "operationId": "getoutboundcontactlistsdivisionviews",
      "functionName": "getOutboundContactlistsDivisionviews",
      "signature": "getOutboundContactlistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ContactListDivisionViewListing"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}": {
      "operationId": "getoutbounddnclist",
      "functionName": "getOutboundDnclist",
      "signature": "getOutboundDnclist(dncListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "DncList"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}/export": {
      "operationId": "getoutbounddnclistexport",
      "functionName": "getOutboundDnclistExport",
      "signature": "getOutboundDnclistExport(dncListId, download)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "download",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ExportUri"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}/importstatus": {
      "operationId": "getoutbounddnclistimportstatus",
      "functionName": "getOutboundDnclistImportstatus",
      "signature": "getOutboundDnclistImportstatus(dncListId)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ImportStatus"
    },
    "GET /api/v2/outbound/dnclists": {
      "operationId": "getoutbounddnclists",
      "functionName": "getOutboundDnclists",
      "signature": "getOutboundDnclists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, dncSourceType, divisionId, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "dncSourceType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DncListEntityListing"
    },
    "GET /api/v2/outbound/dnclists/divisionviews/{dncListId}": {
      "operationId": "getoutbounddnclistsdivisionview",
      "functionName": "getOutboundDnclistsDivisionview",
      "signature": "getOutboundDnclistsDivisionview(dncListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "DncListDivisionView"
    },
    "GET /api/v2/outbound/dnclists/divisionviews": {
      "operationId": "getoutbounddnclistsdivisionviews",
      "functionName": "getOutboundDnclistsDivisionviews",
      "signature": "getOutboundDnclistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, dncSourceType, id, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "includeSize",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "dncSourceType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DncListDivisionViewListing"
    },
    "GET /api/v2/outbound/events/{eventId}": {
      "operationId": "getoutboundevent",
      "functionName": "getOutboundEvent",
      "signature": "getOutboundEvent(eventId)",
      "parameters": [
        {
          "name": "eventId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EventLog"
    },
    "GET /api/v2/outbound/events": {
      "operationId": "getoutboundevents",
      "functionName": "getOutboundEvents",
      "signature": "getOutboundEvents(pageSize, pageNumber, filterType, category, level, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "category",
          "type": "String",
          "required": "false"
        },
        {
          "name": "level",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DialerEventEntityListing"
    },
    "GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "operationId": "getoutboundmessagingcampaign",
      "functionName": "getOutboundMessagingcampaign",
      "signature": "getOutboundMessagingcampaign(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessagingCampaign"
    },
    "GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress": {
      "operationId": "getoutboundmessagingcampaignprogress",
      "functionName": "getOutboundMessagingcampaignProgress",
      "signature": "getOutboundMessagingcampaignProgress(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignProgress"
    },
    "GET /api/v2/outbound/messagingcampaigns": {
      "operationId": "getoutboundmessagingcampaigns",
      "functionName": "getOutboundMessagingcampaigns",
      "signature": "getOutboundMessagingcampaigns(pageSize, pageNumber, sortBy, sortOrder, name, contactListId, divisionId, type, senderSmsPhoneNumber, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "contactListId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "type",
          "type": "String",
          "required": "false"
        },
        {
          "name": "senderSmsPhoneNumber",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "MessagingCampaignEntityListing"
    },
    "GET /api/v2/outbound/messagingcampaigns/divisionviews/{messagingCampaignId}": {
      "operationId": "getoutboundmessagingcampaignsdivisionview",
      "functionName": "getOutboundMessagingcampaignsDivisionview",
      "signature": "getOutboundMessagingcampaignsDivisionview(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MessagingCampaignDivisionView"
    },
    "GET /api/v2/outbound/messagingcampaigns/divisionviews": {
      "operationId": "getoutboundmessagingcampaignsdivisionviews",
      "functionName": "getOutboundMessagingcampaignsDivisionviews",
      "signature": "getOutboundMessagingcampaignsDivisionviews(pageSize, pageNumber, sortOrder, name, type, id, senderSmsPhoneNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "type",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "senderSmsPhoneNumber",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "MessagingCampaignDivisionViewEntityListing"
    },
    "GET /api/v2/outbound/rulesets/{ruleSetId}": {
      "operationId": "getoutboundruleset",
      "functionName": "getOutboundRuleset",
      "signature": "getOutboundRuleset(ruleSetId)",
      "parameters": [
        {
          "name": "ruleSetId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "RuleSet"
    },
    "GET /api/v2/outbound/rulesets": {
      "operationId": "getoutboundrulesets",
      "functionName": "getOutboundRulesets",
      "signature": "getOutboundRulesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "RuleSetEntityListing"
    },
    "GET /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "operationId": "getoutboundschedulescampaign",
      "functionName": "getOutboundSchedulesCampaign",
      "signature": "getOutboundSchedulesCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignSchedule"
    },
    "GET /api/v2/outbound/schedules/campaigns": {
      "operationId": "getoutboundschedulescampaigns",
      "functionName": "getOutboundSchedulesCampaigns",
      "signature": "getOutboundSchedulesCampaigns()",
      "return": "[CampaignSchedule]"
    },
    "GET /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "operationId": "getoutboundschedulessequence",
      "functionName": "getOutboundSchedulesSequence",
      "signature": "getOutboundSchedulesSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SequenceSchedule"
    },
    "GET /api/v2/outbound/schedules/sequences": {
      "operationId": "getoutboundschedulessequences",
      "functionName": "getOutboundSchedulesSequences",
      "signature": "getOutboundSchedulesSequences()",
      "return": "[SequenceSchedule]"
    },
    "GET /api/v2/outbound/sequences/{sequenceId}": {
      "operationId": "getoutboundsequence",
      "functionName": "getOutboundSequence",
      "signature": "getOutboundSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CampaignSequence"
    },
    "GET /api/v2/outbound/sequences": {
      "operationId": "getoutboundsequences",
      "functionName": "getOutboundSequences",
      "signature": "getOutboundSequences(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "allowEmptyResult",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "filterType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CampaignSequenceEntityListing"
    },
    "GET /api/v2/outbound/settings": {
      "operationId": "getoutboundsettings",
      "functionName": "getOutboundSettings",
      "signature": "getOutboundSettings()",
      "return": "OutboundSettings"
    },
    "GET /api/v2/outbound/wrapupcodemappings": {
      "operationId": "getoutboundwrapupcodemappings",
      "functionName": "getOutboundWrapupcodemappings",
      "signature": "getOutboundWrapupcodemappings()",
      "return": "WrapUpCodeMapping"
    },
    "PATCH /api/v2/outbound/settings": {
      "operationId": "patchoutboundsettings",
      "functionName": "patchOutboundSettings",
      "signature": "patchOutboundSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/outbound/attemptlimits": {
      "operationId": "postoutboundattemptlimits",
      "functionName": "postOutboundAttemptlimits",
      "signature": "postOutboundAttemptlimits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AttemptLimits"
    },
    "POST /api/v2/outbound/audits": {
      "operationId": "postoutboundaudits",
      "functionName": "postOutboundAudits",
      "signature": "postOutboundAudits(body, pageSize, pageNumber, sortBy, sortOrder, facetsOnly)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "facetsOnly",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AuditSearchResult"
    },
    "POST /api/v2/outbound/callabletimesets": {
      "operationId": "postoutboundcallabletimesets",
      "functionName": "postOutboundCallabletimesets",
      "signature": "postOutboundCallabletimesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CallableTimeSet"
    },
    "POST /api/v2/outbound/callanalysisresponsesets": {
      "operationId": "postoutboundcallanalysisresponsesets",
      "functionName": "postOutboundCallanalysisresponsesets",
      "signature": "postOutboundCallanalysisresponsesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ResponseSet"
    },
    "POST /api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview": {
      "operationId": "postoutboundcampaignagentownedmappingpreview",
      "functionName": "postOutboundCampaignAgentownedmappingpreview",
      "signature": "postOutboundCampaignAgentownedmappingpreview(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "POST /api/v2/outbound/campaigns/{campaignId}/callback/schedule": {
      "operationId": "postoutboundcampaigncallbackschedule",
      "functionName": "postOutboundCampaignCallbackSchedule",
      "signature": "postOutboundCampaignCallbackSchedule(campaignId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ContactCallbackRequest"
    },
    "POST /api/v2/outbound/campaignrules": {
      "operationId": "postoutboundcampaignrules",
      "functionName": "postOutboundCampaignrules",
      "signature": "postOutboundCampaignrules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CampaignRule"
    },
    "POST /api/v2/outbound/campaigns": {
      "operationId": "postoutboundcampaigns",
      "functionName": "postOutboundCampaigns",
      "signature": "postOutboundCampaigns(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Campaign"
    },
    "POST /api/v2/outbound/campaigns/progress": {
      "operationId": "postoutboundcampaignsprogress",
      "functionName": "postOutboundCampaignsProgress",
      "signature": "postOutboundCampaignsProgress(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "[CampaignProgress]"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/clear": {
      "operationId": "postoutboundcontactlistclear",
      "functionName": "postOutboundContactlistClear",
      "signature": "postOutboundContactlistClear(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/contacts": {
      "operationId": "postoutboundcontactlistcontacts",
      "functionName": "postOutboundContactlistContacts",
      "signature": "postOutboundContactlistContacts(contactListId, body, priority, clearSystemData, doNotQueue)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "priority",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "clearSystemData",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "doNotQueue",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "[DialerContact]"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/contacts/bulk": {
      "operationId": "postoutboundcontactlistcontactsbulk",
      "functionName": "postOutboundContactlistContactsBulk",
      "signature": "postOutboundContactlistContactsBulk(contactListId, body)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "[DialerContact]"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/export": {
      "operationId": "postoutboundcontactlistexport",
      "functionName": "postOutboundContactlistExport",
      "signature": "postOutboundContactlistExport(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DomainEntityRef"
    },
    "POST /api/v2/outbound/contactlistfilters": {
      "operationId": "postoutboundcontactlistfilters",
      "functionName": "postOutboundContactlistfilters",
      "signature": "postOutboundContactlistfilters(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ContactListFilter"
    },
    "POST /api/v2/outbound/contactlistfilters/preview": {
      "operationId": "postoutboundcontactlistfilterspreview",
      "functionName": "postOutboundContactlistfiltersPreview",
      "signature": "postOutboundContactlistfiltersPreview(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "FilterPreviewResponse"
    },
    "POST /api/v2/outbound/contactlists": {
      "operationId": "postoutboundcontactlists",
      "functionName": "postOutboundContactlists",
      "signature": "postOutboundContactlists(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ContactList"
    },
    "POST /api/v2/outbound/conversations/{conversationId}/dnc": {
      "operationId": "postoutboundconversationdnc",
      "functionName": "postOutboundConversationDnc",
      "signature": "postOutboundConversationDnc(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/outbound/dnclists/{dncListId}/export": {
      "operationId": "postoutbounddnclistexport",
      "functionName": "postOutboundDnclistExport",
      "signature": "postOutboundDnclistExport(dncListId)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DomainEntityRef"
    },
    "POST /api/v2/outbound/dnclists/{dncListId}/phonenumbers": {
      "operationId": "postoutbounddnclistphonenumbers",
      "functionName": "postOutboundDnclistPhonenumbers",
      "signature": "postOutboundDnclistPhonenumbers(dncListId, body, expirationDateTime)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expirationDateTime",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/outbound/dnclists": {
      "operationId": "postoutbounddnclists",
      "functionName": "postOutboundDnclists",
      "signature": "postOutboundDnclists(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DncList"
    },
    "POST /api/v2/outbound/messagingcampaigns": {
      "operationId": "postoutboundmessagingcampaigns",
      "functionName": "postOutboundMessagingcampaigns",
      "signature": "postOutboundMessagingcampaigns(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "MessagingCampaign"
    },
    "POST /api/v2/outbound/messagingcampaigns/progress": {
      "operationId": "postoutboundmessagingcampaignsprogress",
      "functionName": "postOutboundMessagingcampaignsProgress",
      "signature": "postOutboundMessagingcampaignsProgress(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "[CampaignProgress]"
    },
    "POST /api/v2/outbound/rulesets": {
      "operationId": "postoutboundrulesets",
      "functionName": "postOutboundRulesets",
      "signature": "postOutboundRulesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RuleSet"
    },
    "POST /api/v2/outbound/sequences": {
      "operationId": "postoutboundsequences",
      "functionName": "postOutboundSequences",
      "signature": "postOutboundSequences(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CampaignSequence"
    },
    "PUT /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "operationId": "putoutboundattemptlimit",
      "functionName": "putOutboundAttemptlimit",
      "signature": "putOutboundAttemptlimit(attemptLimitsId, body)",
      "parameters": [
        {
          "name": "attemptLimitsId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AttemptLimits"
    },
    "PUT /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "operationId": "putoutboundcallabletimeset",
      "functionName": "putOutboundCallabletimeset",
      "signature": "putOutboundCallabletimeset(callableTimeSetId, body)",
      "parameters": [
        {
          "name": "callableTimeSetId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CallableTimeSet"
    },
    "PUT /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "operationId": "putoutboundcallanalysisresponseset",
      "functionName": "putOutboundCallanalysisresponseset",
      "signature": "putOutboundCallanalysisresponseset(callAnalysisSetId, body)",
      "parameters": [
        {
          "name": "callAnalysisSetId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ResponseSet"
    },
    "PUT /api/v2/outbound/campaigns/{campaignId}": {
      "operationId": "putoutboundcampaign",
      "functionName": "putOutboundCampaign",
      "signature": "putOutboundCampaign(campaignId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Campaign"
    },
    "PUT /api/v2/outbound/campaigns/{campaignId}/agents/{userId}": {
      "operationId": "putoutboundcampaignagent",
      "functionName": "putOutboundCampaignAgent",
      "signature": "putOutboundCampaignAgent(campaignId, userId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "PUT /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "operationId": "putoutboundcampaignrule",
      "functionName": "putOutboundCampaignrule",
      "signature": "putOutboundCampaignrule(campaignRuleId, body)",
      "parameters": [
        {
          "name": "campaignRuleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CampaignRule"
    },
    "PUT /api/v2/outbound/contactlists/{contactListId}": {
      "operationId": "putoutboundcontactlist",
      "functionName": "putOutboundContactlist",
      "signature": "putOutboundContactlist(contactListId, body)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ContactList"
    },
    "PUT /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "operationId": "putoutboundcontactlistcontact",
      "functionName": "putOutboundContactlistContact",
      "signature": "putOutboundContactlistContact(contactListId, contactId, body)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "contactId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DialerContact"
    },
    "PUT /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "operationId": "putoutboundcontactlistfilter",
      "functionName": "putOutboundContactlistfilter",
      "signature": "putOutboundContactlistfilter(contactListFilterId, body)",
      "parameters": [
        {
          "name": "contactListFilterId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ContactListFilter"
    },
    "PUT /api/v2/outbound/dnclists/{dncListId}": {
      "operationId": "putoutbounddnclist",
      "functionName": "putOutboundDnclist",
      "signature": "putOutboundDnclist(dncListId, body)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DncList"
    },
    "PUT /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "operationId": "putoutboundmessagingcampaign",
      "functionName": "putOutboundMessagingcampaign",
      "signature": "putOutboundMessagingcampaign(messagingCampaignId, body)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "MessagingCampaign"
    },
    "PUT /api/v2/outbound/rulesets/{ruleSetId}": {
      "operationId": "putoutboundruleset",
      "functionName": "putOutboundRuleset",
      "signature": "putOutboundRuleset(ruleSetId, body)",
      "parameters": [
        {
          "name": "ruleSetId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RuleSet"
    },
    "PUT /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "operationId": "putoutboundschedulescampaign",
      "functionName": "putOutboundSchedulesCampaign",
      "signature": "putOutboundSchedulesCampaign(campaignId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CampaignSchedule"
    },
    "PUT /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "operationId": "putoutboundschedulessequence",
      "functionName": "putOutboundSchedulesSequence",
      "signature": "putOutboundSchedulesSequence(sequenceId, body)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SequenceSchedule"
    },
    "PUT /api/v2/outbound/sequences/{sequenceId}": {
      "operationId": "putoutboundsequence",
      "functionName": "putOutboundSequence",
      "signature": "putOutboundSequence(sequenceId, body)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CampaignSequence"
    },
    "PUT /api/v2/outbound/wrapupcodemappings": {
      "operationId": "putoutboundwrapupcodemappings",
      "functionName": "putOutboundWrapupcodemappings",
      "signature": "putOutboundWrapupcodemappings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WrapUpCodeMapping"
    }
  },
  "presence": {
    "DELETE /api/v2/presencedefinitions/{presenceId}": {
      "operationId": "deletepresencedefinition",
      "functionName": "deletePresencedefinition",
      "signature": "deletePresencedefinition(presenceId)",
      "parameters": [
        {
          "name": "presenceId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/presencedefinitions/{presenceId}": {
      "operationId": "getpresencedefinition",
      "functionName": "getPresencedefinition",
      "signature": "getPresencedefinition(presenceId, localeCode)",
      "parameters": [
        {
          "name": "presenceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "localeCode",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OrganizationPresence"
    },
    "GET /api/v2/presencedefinitions": {
      "operationId": "getpresencedefinitions",
      "functionName": "getPresencedefinitions",
      "signature": "getPresencedefinitions(pageNumber, pageSize, deleted, localeCode)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "deleted",
          "type": "String",
          "required": "false"
        },
        {
          "name": "localeCode",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OrganizationPresenceEntityListing"
    },
    "GET /api/v2/systempresences": {
      "operationId": "getsystempresences",
      "functionName": "getSystempresences",
      "signature": "getSystempresences()",
      "return": "[SystemPresence]"
    },
    "GET /api/v2/users/{userId}/presences/{sourceId}": {
      "operationId": "getuserpresence",
      "functionName": "getUserPresence",
      "signature": "getUserPresence(userId, sourceId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "sourceId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserPresence"
    },
    "GET /api/v2/users/{userId}/presences/microsoftteams": {
      "operationId": "getuserpresencesmicrosoftteams",
      "functionName": "getUserPresencesMicrosoftteams",
      "signature": "getUserPresencesMicrosoftteams(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PresenceExpand"
    },
    "GET /api/v2/users/{userId}/presences/purecloud": {
      "operationId": "getuserpresencespurecloud",
      "functionName": "getUserPresencesPurecloud",
      "signature": "getUserPresencesPurecloud(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserPresence"
    },
    "GET /api/v2/users/{userId}/presences/zoomphone": {
      "operationId": "getuserpresenceszoomphone",
      "functionName": "getUserPresencesZoomphone",
      "signature": "getUserPresencesZoomphone(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PresenceExpand"
    },
    "PATCH /api/v2/users/{userId}/presences/{sourceId}": {
      "operationId": "patchuserpresence",
      "functionName": "patchUserPresence",
      "signature": "patchUserPresence(userId, sourceId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "sourceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserPresence"
    },
    "PATCH /api/v2/users/{userId}/presences/purecloud": {
      "operationId": "patchuserpresencespurecloud",
      "functionName": "patchUserPresencesPurecloud",
      "signature": "patchUserPresencesPurecloud(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserPresence"
    },
    "POST /api/v2/presencedefinitions": {
      "operationId": "postpresencedefinitions",
      "functionName": "postPresencedefinitions",
      "signature": "postPresencedefinitions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OrganizationPresence"
    },
    "PUT /api/v2/presencedefinitions/{presenceId}": {
      "operationId": "putpresencedefinition",
      "functionName": "putPresencedefinition",
      "signature": "putPresencedefinition(presenceId, body)",
      "parameters": [
        {
          "name": "presenceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OrganizationPresence"
    },
    "PUT /api/v2/users/presences/bulk": {
      "operationId": "putuserspresencesbulk",
      "functionName": "putUsersPresencesBulk",
      "signature": "putUsersPresencesBulk(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "[UserPresence]"
    }
  },
  "quality": {
    "DELETE /api/v2/quality/calibrations/{calibrationId}": {
      "operationId": "deletequalitycalibration",
      "functionName": "deleteQualityCalibration",
      "signature": "deleteQualityCalibration(calibrationId, calibratorId)",
      "parameters": [
        {
          "name": "calibrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "calibratorId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Calibration"
    },
    "DELETE /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "operationId": "deletequalityconversationevaluation",
      "functionName": "deleteQualityConversationEvaluation",
      "signature": "deleteQualityConversationEvaluation(conversationId, evaluationId, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "evaluationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Evaluation"
    },
    "DELETE /api/v2/quality/forms/{formId}": {
      "operationId": "deletequalityform",
      "functionName": "deleteQualityForm",
      "signature": "deleteQualityForm(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/quality/forms/evaluations/{formId}": {
      "operationId": "deletequalityformsevaluation",
      "functionName": "deleteQualityFormsEvaluation",
      "signature": "deleteQualityFormsEvaluation(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/quality/forms/surveys/{formId}": {
      "operationId": "deletequalityformssurvey",
      "functionName": "deleteQualityFormsSurvey",
      "signature": "deleteQualityFormsSurvey(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/quality/agents/activity": {
      "operationId": "getqualityagentsactivity",
      "functionName": "getQualityAgentsActivity",
      "signature": "getQualityAgentsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, agentUserId, evaluatorUserId, name, group)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "startTime",
          "type": "Date",
          "required": "false"
        },
        {
          "name": "endTime",
          "type": "Date",
          "required": "false"
        },
        {
          "name": "agentUserId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "evaluatorUserId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "group",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "AgentActivityEntityListing"
    },
    "GET /api/v2/quality/calibrations/{calibrationId}": {
      "operationId": "getqualitycalibration",
      "functionName": "getQualityCalibration",
      "signature": "getQualityCalibration(calibrationId, calibratorId, conversationId)",
      "parameters": [
        {
          "name": "calibrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "calibratorId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "conversationId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Calibration"
    },
    "GET /api/v2/quality/calibrations": {
      "operationId": "getqualitycalibrations",
      "functionName": "getQualityCalibrations",
      "signature": "getQualityCalibrations(calibratorId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, startTime, endTime)",
      "parameters": [
        {
          "name": "calibratorId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "conversationId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "startTime",
          "type": "Date",
          "required": "false"
        },
        {
          "name": "endTime",
          "type": "Date",
          "required": "false"
        }
      ],
      "return": "CalibrationEntityListing"
    },
    "GET /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "operationId": "getqualityconversationevaluation",
      "functionName": "getQualityConversationEvaluation",
      "signature": "getQualityConversationEvaluation(conversationId, evaluationId, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "evaluationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Evaluation"
    },
    "GET /api/v2/quality/conversations/{conversationId}/surveys": {
      "operationId": "getqualityconversationsurveys",
      "functionName": "getQualityConversationSurveys",
      "signature": "getQualityConversationSurveys(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[Survey]"
    },
    "GET /api/v2/quality/conversations/audits/query/{transactionId}": {
      "operationId": "getqualityconversationsauditsquerytransactionid",
      "functionName": "getQualityConversationsAuditsQueryTransactionId",
      "signature": "getQualityConversationsAuditsQueryTransactionId(transactionId)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "QualityAuditQueryExecutionStatusResponse"
    },
    "GET /api/v2/quality/conversations/audits/query/{transactionId}/results": {
      "operationId": "getqualityconversationsauditsquerytransactionidresults",
      "functionName": "getQualityConversationsAuditsQueryTransactionIdResults",
      "signature": "getQualityConversationsAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "QualityAuditQueryExecutionResultsResponse"
    },
    "GET /api/v2/quality/evaluations/query": {
      "operationId": "getqualityevaluationsquery",
      "functionName": "getQualityEvaluationsQuery",
      "signature": "getQualityEvaluationsQuery(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, agentUserId, evaluatorUserId, queueId, startTime, endTime, evaluationState, isReleased, agentHasRead, expandAnswerTotalScores, maximum, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "conversationId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "agentUserId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "evaluatorUserId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "queueId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "startTime",
          "type": "String",
          "required": "false"
        },
        {
          "name": "endTime",
          "type": "String",
          "required": "false"
        },
        {
          "name": "evaluationState",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "isReleased",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "agentHasRead",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "expandAnswerTotalScores",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "maximum",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "EvaluationEntityListing"
    },
    "GET /api/v2/quality/evaluators/activity": {
      "operationId": "getqualityevaluatorsactivity",
      "functionName": "getQualityEvaluatorsActivity",
      "signature": "getQualityEvaluatorsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, name, permission, group)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "startTime",
          "type": "Date",
          "required": "false"
        },
        {
          "name": "endTime",
          "type": "Date",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "permission",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "group",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "EvaluatorActivityEntityListing"
    },
    "GET /api/v2/quality/forms/{formId}": {
      "operationId": "getqualityform",
      "functionName": "getQualityForm",
      "signature": "getQualityForm(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/forms/{formId}/versions": {
      "operationId": "getqualityformversions",
      "functionName": "getQualityFormVersions",
      "signature": "getQualityFormVersions(formId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms": {
      "operationId": "getqualityforms",
      "functionName": "getQualityForms",
      "signature": "getQualityForms(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations/{formId}": {
      "operationId": "getqualityformsevaluation",
      "functionName": "getQualityFormsEvaluation",
      "signature": "getQualityFormsEvaluation(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/forms/evaluations/{formId}/versions": {
      "operationId": "getqualityformsevaluationversions",
      "functionName": "getQualityFormsEvaluationVersions",
      "signature": "getQualityFormsEvaluationVersions(formId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations": {
      "operationId": "getqualityformsevaluations",
      "functionName": "getQualityFormsEvaluations",
      "signature": "getQualityFormsEvaluations(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations/bulk/contexts": {
      "operationId": "getqualityformsevaluationsbulkcontexts",
      "functionName": "getQualityFormsEvaluationsBulkContexts",
      "signature": "getQualityFormsEvaluationsBulkContexts(contextId)",
      "parameters": [
        {
          "name": "contextId",
          "type": "[String]",
          "required": "true"
        }
      ],
      "return": "[EvaluationForm]"
    },
    "GET /api/v2/quality/forms/surveys/{formId}": {
      "operationId": "getqualityformssurvey",
      "functionName": "getQualityFormsSurvey",
      "signature": "getQualityFormsSurvey(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SurveyForm"
    },
    "GET /api/v2/quality/forms/surveys/{formId}/versions": {
      "operationId": "getqualityformssurveyversions",
      "functionName": "getQualityFormsSurveyVersions",
      "signature": "getQualityFormsSurveyVersions(formId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys": {
      "operationId": "getqualityformssurveys",
      "functionName": "getQualityFormsSurveys",
      "signature": "getQualityFormsSurveys(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys/bulk": {
      "operationId": "getqualityformssurveysbulk",
      "functionName": "getQualityFormsSurveysBulk",
      "signature": "getQualityFormsSurveysBulk(id)",
      "parameters": [
        {
          "name": "id",
          "type": "[String]",
          "required": "true"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys/bulk/contexts": {
      "operationId": "getqualityformssurveysbulkcontexts",
      "functionName": "getQualityFormsSurveysBulkContexts",
      "signature": "getQualityFormsSurveysBulkContexts(contextId, published)",
      "parameters": [
        {
          "name": "contextId",
          "type": "[String]",
          "required": "true"
        },
        {
          "name": "published",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "[SurveyForm]"
    },
    "GET /api/v2/quality/publishedforms/{formId}": {
      "operationId": "getqualitypublishedform",
      "functionName": "getQualityPublishedform",
      "signature": "getQualityPublishedform(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/publishedforms": {
      "operationId": "getqualitypublishedforms",
      "functionName": "getQualityPublishedforms",
      "signature": "getQualityPublishedforms(pageSize, pageNumber, name, onlyLatestPerContext)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "onlyLatestPerContext",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/publishedforms/evaluations/{formId}": {
      "operationId": "getqualitypublishedformsevaluation",
      "functionName": "getQualityPublishedformsEvaluation",
      "signature": "getQualityPublishedformsEvaluation(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/publishedforms/evaluations": {
      "operationId": "getqualitypublishedformsevaluations",
      "functionName": "getQualityPublishedformsEvaluations",
      "signature": "getQualityPublishedformsEvaluations(pageSize, pageNumber, name, onlyLatestPerContext)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "onlyLatestPerContext",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/publishedforms/surveys/{formId}": {
      "operationId": "getqualitypublishedformssurvey",
      "functionName": "getQualityPublishedformsSurvey",
      "signature": "getQualityPublishedformsSurvey(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SurveyForm"
    },
    "GET /api/v2/quality/publishedforms/surveys": {
      "operationId": "getqualitypublishedformssurveys",
      "functionName": "getQualityPublishedformsSurveys",
      "signature": "getQualityPublishedformsSurveys(pageSize, pageNumber, name, onlyLatestEnabledPerContext)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "onlyLatestEnabledPerContext",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/surveys/{surveyId}": {
      "operationId": "getqualitysurvey",
      "functionName": "getQualitySurvey",
      "signature": "getQualitySurvey(surveyId)",
      "parameters": [
        {
          "name": "surveyId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Survey"
    },
    "GET /api/v2/quality/surveys/scorable": {
      "operationId": "getqualitysurveysscorable",
      "functionName": "getQualitySurveysScorable",
      "signature": "getQualitySurveysScorable(customerSurveyUrl)",
      "parameters": [
        {
          "name": "customerSurveyUrl",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScorableSurvey"
    },
    "PATCH /api/v2/quality/forms/surveys/{formId}": {
      "operationId": "patchqualityformssurvey",
      "functionName": "patchQualityFormsSurvey",
      "signature": "patchQualityFormsSurvey(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/analytics/evaluations/aggregates/query": {
      "operationId": "postanalyticsevaluationsaggregatesquery",
      "functionName": "postAnalyticsEvaluationsAggregatesQuery",
      "signature": "postAnalyticsEvaluationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/surveys/aggregates/query": {
      "operationId": "postanalyticssurveysaggregatesquery",
      "functionName": "postAnalyticsSurveysAggregatesQuery",
      "signature": "postAnalyticsSurveysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SurveyAggregateQueryResponse"
    },
    "POST /api/v2/quality/calibrations": {
      "operationId": "postqualitycalibrations",
      "functionName": "postQualityCalibrations",
      "signature": "postQualityCalibrations(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Calibration"
    },
    "POST /api/v2/quality/conversations/{conversationId}/evaluations": {
      "operationId": "postqualityconversationevaluations",
      "functionName": "postQualityConversationEvaluations",
      "signature": "postQualityConversationEvaluations(conversationId, body, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Evaluation"
    },
    "POST /api/v2/quality/conversations/audits/query": {
      "operationId": "postqualityconversationsauditsquery",
      "functionName": "postQualityConversationsAuditsQuery",
      "signature": "postQualityConversationsAuditsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "QualityAuditQueryExecutionStatusResponse"
    },
    "POST /api/v2/quality/evaluations/aggregates/query/me": {
      "operationId": "postqualityevaluationsaggregatesqueryme",
      "functionName": "postQualityEvaluationsAggregatesQueryMe",
      "signature": "postQualityEvaluationsAggregatesQueryMe(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/quality/evaluations/scoring": {
      "operationId": "postqualityevaluationsscoring",
      "functionName": "postQualityEvaluationsScoring",
      "signature": "postQualityEvaluationsScoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationScoringSet"
    },
    "POST /api/v2/quality/forms": {
      "operationId": "postqualityforms",
      "functionName": "postQualityForms",
      "signature": "postQualityForms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/forms/evaluations": {
      "operationId": "postqualityformsevaluations",
      "functionName": "postQualityFormsEvaluations",
      "signature": "postQualityFormsEvaluations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/forms/surveys": {
      "operationId": "postqualityformssurveys",
      "functionName": "postQualityFormsSurveys",
      "signature": "postQualityFormsSurveys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/quality/publishedforms": {
      "operationId": "postqualitypublishedforms",
      "functionName": "postQualityPublishedforms",
      "signature": "postQualityPublishedforms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/publishedforms/evaluations": {
      "operationId": "postqualitypublishedformsevaluations",
      "functionName": "postQualityPublishedformsEvaluations",
      "signature": "postQualityPublishedformsEvaluations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/publishedforms/surveys": {
      "operationId": "postqualitypublishedformssurveys",
      "functionName": "postQualityPublishedformsSurveys",
      "signature": "postQualityPublishedformsSurveys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/quality/surveys/scoring": {
      "operationId": "postqualitysurveysscoring",
      "functionName": "postQualitySurveysScoring",
      "signature": "postQualitySurveysScoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SurveyScoringSet"
    },
    "PUT /api/v2/quality/calibrations/{calibrationId}": {
      "operationId": "putqualitycalibration",
      "functionName": "putQualityCalibration",
      "signature": "putQualityCalibration(calibrationId, body)",
      "parameters": [
        {
          "name": "calibrationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Calibration"
    },
    "PUT /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "operationId": "putqualityconversationevaluation",
      "functionName": "putQualityConversationEvaluation",
      "signature": "putQualityConversationEvaluation(conversationId, evaluationId, body, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "evaluationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Evaluation"
    },
    "PUT /api/v2/quality/forms/{formId}": {
      "operationId": "putqualityform",
      "functionName": "putQualityForm",
      "signature": "putQualityForm(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "PUT /api/v2/quality/forms/evaluations/{formId}": {
      "operationId": "putqualityformsevaluation",
      "functionName": "putQualityFormsEvaluation",
      "signature": "putQualityFormsEvaluation(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EvaluationForm"
    },
    "PUT /api/v2/quality/forms/surveys/{formId}": {
      "operationId": "putqualityformssurvey",
      "functionName": "putQualityFormsSurvey",
      "signature": "putQualityFormsSurvey(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SurveyForm"
    },
    "PUT /api/v2/quality/surveys/scorable": {
      "operationId": "putqualitysurveysscorable",
      "functionName": "putQualitySurveysScorable",
      "signature": "putQualitySurveysScorable(body, customerSurveyUrl)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "customerSurveyUrl",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScorableSurvey"
    }
  },
  "recording": {
    "DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "operationId": "deleteconversationrecordingannotation",
      "functionName": "deleteConversationRecordingAnnotation",
      "signature": "deleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "annotationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/orphanrecordings/{orphanId}": {
      "operationId": "deleteorphanrecording",
      "functionName": "deleteOrphanrecording",
      "signature": "deleteOrphanrecording(orphanId)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OrphanRecording"
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "operationId": "deleterecordingcrossplatformmediaretentionpolicies",
      "functionName": "deleteRecordingCrossplatformMediaretentionpolicies",
      "signature": "deleteRecordingCrossplatformMediaretentionpolicies(ids)",
      "parameters": [
        {
          "name": "ids",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "operationId": "deleterecordingcrossplatformmediaretentionpolicy",
      "functionName": "deleteRecordingCrossplatformMediaretentionpolicy",
      "signature": "deleteRecordingCrossplatformMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/recording/jobs/{jobId}": {
      "operationId": "deleterecordingjob",
      "functionName": "deleteRecordingJob",
      "signature": "deleteRecordingJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies": {
      "operationId": "deleterecordingmediaretentionpolicies",
      "functionName": "deleteRecordingMediaretentionpolicies",
      "signature": "deleteRecordingMediaretentionpolicies(ids)",
      "parameters": [
        {
          "name": "ids",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "operationId": "deleterecordingmediaretentionpolicy",
      "functionName": "deleteRecordingMediaretentionpolicy",
      "signature": "deleteRecordingMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
      "operationId": "getconversationrecording",
      "functionName": "getConversationRecording",
      "signature": "getConversationRecording(conversationId, recordingId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "formatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "emailFormatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "chatFormatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "messageFormatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "download",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "fileName",
          "type": "String",
          "required": "false"
        },
        {
          "name": "locale",
          "type": "String",
          "required": "false"
        },
        {
          "name": "mediaFormats",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Recording"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "operationId": "getconversationrecordingannotation",
      "functionName": "getConversationRecordingAnnotation",
      "signature": "getConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "annotationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Annotation"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
      "operationId": "getconversationrecordingannotations",
      "functionName": "getConversationRecordingAnnotations",
      "signature": "getConversationRecordingAnnotations(conversationId, recordingId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[Annotation]"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata": {
      "operationId": "getconversationrecordingmetadata",
      "functionName": "getConversationRecordingmetadata",
      "signature": "getConversationRecordingmetadata(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[RecordingMetadata]"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata/{recordingId}": {
      "operationId": "getconversationrecordingmetadatarecordingid",
      "functionName": "getConversationRecordingmetadataRecordingId",
      "signature": "getConversationRecordingmetadataRecordingId(conversationId, recordingId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "RecordingMetadata"
    },
    "GET /api/v2/conversations/{conversationId}/recordings": {
      "operationId": "getconversationrecordings",
      "functionName": "getConversationRecordings",
      "signature": "getConversationRecordings(conversationId, maxWaitMs, formatId, mediaFormats)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "maxWaitMs",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "formatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "mediaFormats",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "[Recording]"
    },
    "GET /api/v2/orphanrecordings/{orphanId}": {
      "operationId": "getorphanrecording",
      "functionName": "getOrphanrecording",
      "signature": "getOrphanrecording(orphanId)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OrphanRecording"
    },
    "GET /api/v2/orphanrecordings/{orphanId}/media": {
      "operationId": "getorphanrecordingmedia",
      "functionName": "getOrphanrecordingMedia",
      "signature": "getOrphanrecordingMedia(orphanId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "formatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "emailFormatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "chatFormatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "messageFormatId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "download",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "fileName",
          "type": "String",
          "required": "false"
        },
        {
          "name": "locale",
          "type": "String",
          "required": "false"
        },
        {
          "name": "mediaFormats",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Recording"
    },
    "GET /api/v2/orphanrecordings": {
      "operationId": "getorphanrecordings",
      "functionName": "getOrphanrecordings",
      "signature": "getOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, hasConversation, media)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "hasConversation",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "media",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OrphanRecordingListing"
    },
    "GET /api/v2/recording/batchrequests/{jobId}": {
      "operationId": "getrecordingbatchrequest",
      "functionName": "getRecordingBatchrequest",
      "signature": "getRecordingBatchrequest(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BatchDownloadJobStatusResult"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "operationId": "getrecordingcrossplatformmediaretentionpolicies",
      "functionName": "getRecordingCrossplatformMediaretentionpolicies",
      "signature": "getRecordingCrossplatformMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "enabled",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "summary",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "hasErrors",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "operationId": "getrecordingcrossplatformmediaretentionpolicy",
      "functionName": "getRecordingCrossplatformMediaretentionpolicy",
      "signature": "getRecordingCrossplatformMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "GET /api/v2/recording/jobs/{jobId}": {
      "operationId": "getrecordingjob",
      "functionName": "getRecordingJob",
      "signature": "getRecordingJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "RecordingJob"
    },
    "GET /api/v2/recording/jobs/{jobId}/failedrecordings": {
      "operationId": "getrecordingjobfailedrecordings",
      "functionName": "getRecordingJobFailedrecordings",
      "signature": "getRecordingJobFailedrecordings(jobId, pageSize, pageNumber, includeTotal, cursor)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "includeTotal",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "FailedRecordingEntityListing"
    },
    "GET /api/v2/recording/jobs": {
      "operationId": "getrecordingjobs",
      "functionName": "getRecordingJobs",
      "signature": "getRecordingJobs(pageSize, pageNumber, sortBy, state, showOnlyMyJobs, jobType, includeTotal, cursor)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "state",
          "type": "String",
          "required": "false"
        },
        {
          "name": "showOnlyMyJobs",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "jobType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "includeTotal",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "RecordingJobEntityListing"
    },
    "GET /api/v2/recording/localkeys/settings/{settingsId}": {
      "operationId": "getrecordinglocalkeyssetting",
      "functionName": "getRecordingLocalkeysSetting",
      "signature": "getRecordingLocalkeysSetting(settingsId)",
      "parameters": [
        {
          "name": "settingsId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "GET /api/v2/recording/localkeys/settings": {
      "operationId": "getrecordinglocalkeyssettings",
      "functionName": "getRecordingLocalkeysSettings",
      "signature": "getRecordingLocalkeysSettings()",
      "return": "LocalEncryptionConfigurationListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies": {
      "operationId": "getrecordingmediaretentionpolicies",
      "functionName": "getRecordingMediaretentionpolicies",
      "signature": "getRecordingMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "previousPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "enabled",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "summary",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "hasErrors",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "operationId": "getrecordingmediaretentionpolicy",
      "functionName": "getRecordingMediaretentionpolicy",
      "signature": "getRecordingMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Policy"
    },
    "GET /api/v2/recording/recordingkeys": {
      "operationId": "getrecordingrecordingkeys",
      "functionName": "getRecordingRecordingkeys",
      "signature": "getRecordingRecordingkeys(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "EncryptionKeyEntityListing"
    },
    "GET /api/v2/recording/recordingkeys/rotationschedule": {
      "operationId": "getrecordingrecordingkeysrotationschedule",
      "functionName": "getRecordingRecordingkeysRotationschedule",
      "signature": "getRecordingRecordingkeysRotationschedule()",
      "return": "KeyRotationSchedule"
    },
    "GET /api/v2/recording/settings": {
      "operationId": "getrecordingsettings",
      "functionName": "getRecordingSettings",
      "signature": "getRecordingSettings(createDefault)",
      "parameters": [
        {
          "name": "createDefault",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "RecordingSettings"
    },
    "GET /api/v2/recordings/screensessions": {
      "operationId": "getrecordingsscreensessions",
      "functionName": "getRecordingsScreensessions",
      "signature": "getRecordingsScreensessions(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ScreenRecordingSessionListing"
    },
    "PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "operationId": "patchrecordingcrossplatformmediaretentionpolicy",
      "functionName": "patchRecordingCrossplatformMediaretentionpolicy",
      "signature": "patchRecordingCrossplatformMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "PATCH /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "operationId": "patchrecordingmediaretentionpolicy",
      "functionName": "patchRecordingMediaretentionpolicy",
      "signature": "patchRecordingMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Policy"
    },
    "PATCH /api/v2/recordings/screensessions/{recordingSessionId}": {
      "operationId": "patchrecordingsscreensession",
      "functionName": "patchRecordingsScreensession",
      "signature": "patchRecordingsScreensession(recordingSessionId, body)",
      "parameters": [
        {
          "name": "recordingSessionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
      "operationId": "postconversationrecordingannotations",
      "functionName": "postConversationRecordingAnnotations",
      "signature": "postConversationRecordingAnnotations(conversationId, recordingId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Annotation"
    },
    "POST /api/v2/recording/batchrequests": {
      "operationId": "postrecordingbatchrequests",
      "functionName": "postRecordingBatchrequests",
      "signature": "postRecordingBatchrequests(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BatchDownloadJobSubmissionResult"
    },
    "POST /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "operationId": "postrecordingcrossplatformmediaretentionpolicies",
      "functionName": "postRecordingCrossplatformMediaretentionpolicies",
      "signature": "postRecordingCrossplatformMediaretentionpolicies(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "POST /api/v2/recording/jobs": {
      "operationId": "postrecordingjobs",
      "functionName": "postRecordingJobs",
      "signature": "postRecordingJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RecordingJob"
    },
    "POST /api/v2/recording/localkeys": {
      "operationId": "postrecordinglocalkeys",
      "functionName": "postRecordingLocalkeys",
      "signature": "postRecordingLocalkeys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EncryptionKey"
    },
    "POST /api/v2/recording/localkeys/settings": {
      "operationId": "postrecordinglocalkeyssettings",
      "functionName": "postRecordingLocalkeysSettings",
      "signature": "postRecordingLocalkeysSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "POST /api/v2/recording/mediaretentionpolicies": {
      "operationId": "postrecordingmediaretentionpolicies",
      "functionName": "postRecordingMediaretentionpolicies",
      "signature": "postRecordingMediaretentionpolicies(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Policy"
    },
    "POST /api/v2/recording/recordingkeys": {
      "operationId": "postrecordingrecordingkeys",
      "functionName": "postRecordingRecordingkeys",
      "signature": "postRecordingRecordingkeys()",
      "return": "EncryptionKey"
    },
    "POST /api/v2/recordings/deletionprotection": {
      "operationId": "postrecordingsdeletionprotection",
      "functionName": "postRecordingsDeletionprotection",
      "signature": "postRecordingsDeletionprotection(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "[AddressableEntityRef]"
    },
    "POST /api/v2/recordings/screensessions/acknowledge": {
      "operationId": "postrecordingsscreensessionsacknowledge",
      "functionName": "postRecordingsScreensessionsAcknowledge",
      "signature": "postRecordingsScreensessionsAcknowledge(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/recordings/screensessions/metadata": {
      "operationId": "postrecordingsscreensessionsmetadata",
      "functionName": "postRecordingsScreensessionsMetadata",
      "signature": "postRecordingsScreensessionsMetadata(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
      "operationId": "putconversationrecording",
      "functionName": "putConversationRecording",
      "signature": "putConversationRecording(conversationId, recordingId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Recording"
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "operationId": "putconversationrecordingannotation",
      "functionName": "putConversationRecordingAnnotation",
      "signature": "putConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "annotationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Annotation"
    },
    "PUT /api/v2/orphanrecordings/{orphanId}": {
      "operationId": "putorphanrecording",
      "functionName": "putOrphanrecording",
      "signature": "putOrphanrecording(orphanId, body)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Recording"
    },
    "PUT /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "operationId": "putrecordingcrossplatformmediaretentionpolicy",
      "functionName": "putRecordingCrossplatformMediaretentionpolicy",
      "signature": "putRecordingCrossplatformMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "PUT /api/v2/recording/jobs/{jobId}": {
      "operationId": "putrecordingjob",
      "functionName": "putRecordingJob",
      "signature": "putRecordingJob(jobId, body)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RecordingJob"
    },
    "PUT /api/v2/recording/localkeys/settings/{settingsId}": {
      "operationId": "putrecordinglocalkeyssetting",
      "functionName": "putRecordingLocalkeysSetting",
      "signature": "putRecordingLocalkeysSetting(settingsId, body)",
      "parameters": [
        {
          "name": "settingsId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "PUT /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "operationId": "putrecordingmediaretentionpolicy",
      "functionName": "putRecordingMediaretentionpolicy",
      "signature": "putRecordingMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Policy"
    },
    "PUT /api/v2/recording/recordingkeys/rotationschedule": {
      "operationId": "putrecordingrecordingkeysrotationschedule",
      "functionName": "putRecordingRecordingkeysRotationschedule",
      "signature": "putRecordingRecordingkeysRotationschedule(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "KeyRotationSchedule"
    },
    "PUT /api/v2/recording/settings": {
      "operationId": "putrecordingsettings",
      "functionName": "putRecordingSettings",
      "signature": "putRecordingSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RecordingSettings"
    },
    "PUT /api/v2/recordings/deletionprotection": {
      "operationId": "putrecordingsdeletionprotection",
      "functionName": "putRecordingsDeletionprotection",
      "signature": "putRecordingsDeletionprotection(protect, body)",
      "parameters": [
        {
          "name": "protect",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    }
  },
  "responsemanagement": {
    "DELETE /api/v2/responsemanagement/libraries/{libraryId}": {
      "operationId": "deleteresponsemanagementlibrary",
      "functionName": "deleteResponsemanagementLibrary",
      "signature": "deleteResponsemanagementLibrary(libraryId)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/responsemanagement/responses/{responseId}": {
      "operationId": "deleteresponsemanagementresponse",
      "functionName": "deleteResponsemanagementResponse",
      "signature": "deleteResponsemanagementResponse(responseId)",
      "parameters": [
        {
          "name": "responseId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/responsemanagement/libraries": {
      "operationId": "getresponsemanagementlibraries",
      "functionName": "getResponsemanagementLibraries",
      "signature": "getResponsemanagementLibraries(pageNumber, pageSize, messagingTemplateFilter)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "messagingTemplateFilter",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "LibraryEntityListing"
    },
    "GET /api/v2/responsemanagement/libraries/{libraryId}": {
      "operationId": "getresponsemanagementlibrary",
      "functionName": "getResponsemanagementLibrary",
      "signature": "getResponsemanagementLibrary(libraryId)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Library"
    },
    "GET /api/v2/responsemanagement/responses/{responseId}": {
      "operationId": "getresponsemanagementresponse",
      "functionName": "getResponsemanagementResponse",
      "signature": "getResponsemanagementResponse(responseId, expand)",
      "parameters": [
        {
          "name": "responseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Response"
    },
    "GET /api/v2/responsemanagement/responses": {
      "operationId": "getresponsemanagementresponses",
      "functionName": "getResponsemanagementResponses",
      "signature": "getResponsemanagementResponses(libraryId, pageNumber, pageSize, expand)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ResponseEntityListing"
    },
    "POST /api/v2/responsemanagement/libraries": {
      "operationId": "postresponsemanagementlibraries",
      "functionName": "postResponsemanagementLibraries",
      "signature": "postResponsemanagementLibraries(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Library"
    },
    "POST /api/v2/responsemanagement/responses": {
      "operationId": "postresponsemanagementresponses",
      "functionName": "postResponsemanagementResponses",
      "signature": "postResponsemanagementResponses(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Response"
    },
    "POST /api/v2/responsemanagement/responses/query": {
      "operationId": "postresponsemanagementresponsesquery",
      "functionName": "postResponsemanagementResponsesQuery",
      "signature": "postResponsemanagementResponsesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ResponseQueryResults"
    },
    "PUT /api/v2/responsemanagement/libraries/{libraryId}": {
      "operationId": "putresponsemanagementlibrary",
      "functionName": "putResponsemanagementLibrary",
      "signature": "putResponsemanagementLibrary(libraryId, body)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Library"
    },
    "PUT /api/v2/responsemanagement/responses/{responseId}": {
      "operationId": "putresponsemanagementresponse",
      "functionName": "putResponsemanagementResponse",
      "signature": "putResponsemanagementResponse(responseId, body, expand)",
      "parameters": [
        {
          "name": "responseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Response"
    }
  },
  "routing": {
    "DELETE /api/v2/routing/assessments/{assessmentId}": {
      "operationId": "deleteroutingassessment",
      "functionName": "deleteRoutingAssessment",
      "signature": "deleteRoutingAssessment(assessmentId)",
      "parameters": [
        {
          "name": "assessmentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/email/domains/{domainId}": {
      "operationId": "deleteroutingemaildomain",
      "functionName": "deleteRoutingEmailDomain",
      "signature": "deleteRoutingEmailDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "operationId": "deleteroutingemaildomainroute",
      "functionName": "deleteRoutingEmailDomainRoute",
      "signature": "deleteRoutingEmailDomainRoute(domainName, routeId)",
      "parameters": [
        {
          "name": "domainName",
          "type": "String",
          "required": "true"
        },
        {
          "name": "routeId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/predictors/{predictorId}": {
      "operationId": "deleteroutingpredictor",
      "functionName": "deleteRoutingPredictor",
      "signature": "deleteRoutingPredictor(predictorId)",
      "parameters": [
        {
          "name": "predictorId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}": {
      "operationId": "deleteroutingqueue",
      "functionName": "deleteRoutingQueue",
      "signature": "deleteRoutingQueue(queueId, forceDelete)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forceDelete",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/members/{memberId}": {
      "operationId": "deleteroutingqueuemember",
      "functionName": "deleteRoutingQueueMember",
      "signature": "deleteRoutingQueueMember(queueId, memberId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/users/{memberId}": {
      "operationId": "deleteroutingqueueuser",
      "functionName": "deleteRoutingQueueUser",
      "signature": "deleteRoutingQueueUser(queueId, memberId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}": {
      "operationId": "deleteroutingqueuewrapupcode",
      "functionName": "deleteRoutingQueueWrapupcode",
      "signature": "deleteRoutingQueueWrapupcode(queueId, codeId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "codeId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/settings": {
      "operationId": "deleteroutingsettings",
      "functionName": "deleteRoutingSettings",
      "signature": "deleteRoutingSettings()"
    },
    "DELETE /api/v2/routing/skills/{skillId}": {
      "operationId": "deleteroutingskill",
      "functionName": "deleteRoutingSkill",
      "signature": "deleteRoutingSkill(skillId)",
      "parameters": [
        {
          "name": "skillId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/sms/addresses/{addressId}": {
      "operationId": "deleteroutingsmsaddress",
      "functionName": "deleteRoutingSmsAddress",
      "signature": "deleteRoutingSmsAddress(addressId)",
      "parameters": [
        {
          "name": "addressId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/sms/phonenumbers/{addressId}": {
      "operationId": "deleteroutingsmsphonenumber",
      "functionName": "deleteRoutingSmsPhonenumber",
      "signature": "deleteRoutingSmsPhonenumber(addressId, async)",
      "parameters": [
        {
          "name": "addressId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "async",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/routing/users/{userId}/utilization": {
      "operationId": "deleteroutinguserutilization",
      "functionName": "deleteRoutingUserUtilization",
      "signature": "deleteRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/utilization": {
      "operationId": "deleteroutingutilization",
      "functionName": "deleteRoutingUtilization",
      "signature": "deleteRoutingUtilization()"
    },
    "DELETE /api/v2/routing/wrapupcodes/{codeId}": {
      "operationId": "deleteroutingwrapupcode",
      "functionName": "deleteRoutingWrapupcode",
      "signature": "deleteRoutingWrapupcode(codeId)",
      "parameters": [
        {
          "name": "codeId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "operationId": "deleteuserroutinglanguage",
      "functionName": "deleteUserRoutinglanguage",
      "signature": "deleteUserRoutinglanguage(userId, languageId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routingskills/{skillId}": {
      "operationId": "deleteuserroutingskill",
      "functionName": "deleteUserRoutingskill",
      "signature": "deleteUserRoutingskill(userId, skillId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "skillId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/routing/assessments/{assessmentId}": {
      "operationId": "getroutingassessment",
      "functionName": "getRoutingAssessment",
      "signature": "getRoutingAssessment(assessmentId)",
      "parameters": [
        {
          "name": "assessmentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BenefitAssessment"
    },
    "GET /api/v2/routing/assessments": {
      "operationId": "getroutingassessments",
      "functionName": "getRoutingAssessments",
      "signature": "getRoutingAssessments(before, after, limit, pageSize, queueId)",
      "parameters": [
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "limit",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "String",
          "required": "false"
        },
        {
          "name": "queueId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "AssessmentListing"
    },
    "GET /api/v2/routing/assessments/jobs/{jobId}": {
      "operationId": "getroutingassessmentsjob",
      "functionName": "getRoutingAssessmentsJob",
      "signature": "getRoutingAssessmentsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BenefitAssessmentJob"
    },
    "GET /api/v2/routing/assessments/jobs": {
      "operationId": "getroutingassessmentsjobs",
      "functionName": "getRoutingAssessmentsJobs",
      "signature": "getRoutingAssessmentsJobs(divisionId)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "AssessmentJobListing"
    },
    "GET /api/v2/routing/email/domains/{domainId}": {
      "operationId": "getroutingemaildomain",
      "functionName": "getRoutingEmailDomain",
      "signature": "getRoutingEmailDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "InboundDomain"
    },
    "GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "operationId": "getroutingemaildomainroute",
      "functionName": "getRoutingEmailDomainRoute",
      "signature": "getRoutingEmailDomainRoute(domainName, routeId)",
      "parameters": [
        {
          "name": "domainName",
          "type": "String",
          "required": "true"
        },
        {
          "name": "routeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "InboundRoute"
    },
    "GET /api/v2/routing/email/domains/{domainName}/routes": {
      "operationId": "getroutingemaildomainroutes",
      "functionName": "getRoutingEmailDomainRoutes",
      "signature": "getRoutingEmailDomainRoutes(domainName, pageSize, pageNumber, pattern)",
      "parameters": [
        {
          "name": "domainName",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pattern",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "InboundRouteEntityListing"
    },
    "GET /api/v2/routing/email/domains": {
      "operationId": "getroutingemaildomains",
      "functionName": "getRoutingEmailDomains",
      "signature": "getRoutingEmailDomains()",
      "return": "InboundDomainEntityListing"
    },
    "GET /api/v2/routing/email/setup": {
      "operationId": "getroutingemailsetup",
      "functionName": "getRoutingEmailSetup",
      "signature": "getRoutingEmailSetup()",
      "return": "EmailSetup"
    },
    "GET /api/v2/routing/languages": {
      "operationId": "getroutinglanguages",
      "functionName": "getRoutingLanguages",
      "signature": "getRoutingLanguages(pageSize, pageNumber, sortOrder, name, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LanguageEntityListing"
    },
    "GET /api/v2/routing/message/recipients/{recipientId}": {
      "operationId": "getroutingmessagerecipient",
      "functionName": "getRoutingMessageRecipient",
      "signature": "getRoutingMessageRecipient(recipientId)",
      "parameters": [
        {
          "name": "recipientId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Recipient"
    },
    "GET /api/v2/routing/message/recipients": {
      "operationId": "getroutingmessagerecipients",
      "functionName": "getRoutingMessageRecipients",
      "signature": "getRoutingMessageRecipients(messengerType, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "messengerType",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "RecipientListing"
    },
    "GET /api/v2/routing/predictors/{predictorId}": {
      "operationId": "getroutingpredictor",
      "functionName": "getRoutingPredictor",
      "signature": "getRoutingPredictor(predictorId)",
      "parameters": [
        {
          "name": "predictorId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Predictor"
    },
    "GET /api/v2/routing/predictors": {
      "operationId": "getroutingpredictors",
      "functionName": "getRoutingPredictors",
      "signature": "getRoutingPredictors(before, after, limit, pageSize, queueId)",
      "parameters": [
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "limit",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "String",
          "required": "false"
        },
        {
          "name": "queueId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "PredictorListing"
    },
    "GET /api/v2/routing/predictors/keyperformanceindicators": {
      "operationId": "getroutingpredictorskeyperformanceindicators",
      "functionName": "getRoutingPredictorsKeyperformanceindicators",
      "signature": "getRoutingPredictorsKeyperformanceindicators()",
      "return": "[KeyPerformanceIndicator]"
    },
    "GET /api/v2/routing/queues/{queueId}": {
      "operationId": "getroutingqueue",
      "functionName": "getRoutingQueue",
      "signature": "getRoutingQueue(queueId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Queue"
    },
    "GET /api/v2/routing/queues/{queueId}/comparisonperiods/{comparisonPeriodId}": {
      "operationId": "getroutingqueuecomparisonperiod",
      "functionName": "getRoutingQueueComparisonperiod",
      "signature": "getRoutingQueueComparisonperiod(queueId, comparisonPeriodId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "comparisonPeriodId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ComparisonPeriod"
    },
    "GET /api/v2/routing/queues/{queueId}/comparisonperiods": {
      "operationId": "getroutingqueuecomparisonperiods",
      "functionName": "getRoutingQueueComparisonperiods",
      "signature": "getRoutingQueueComparisonperiods(queueId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ComparisonPeriodListing"
    },
    "GET /api/v2/routing/queues/{queueId}/estimatedwaittime": {
      "operationId": "getroutingqueueestimatedwaittime",
      "functionName": "getRoutingQueueEstimatedwaittime",
      "signature": "getRoutingQueueEstimatedwaittime(queueId, conversationId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "conversationId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "EstimatedWaitTimePredictions"
    },
    "GET /api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime": {
      "operationId": "getroutingqueuemediatypeestimatedwaittime",
      "functionName": "getRoutingQueueMediatypeEstimatedwaittime",
      "signature": "getRoutingQueueMediatypeEstimatedwaittime(queueId, mediaType)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "mediaType",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EstimatedWaitTimePredictions"
    },
    "GET /api/v2/routing/queues/{queueId}/members": {
      "operationId": "getroutingqueuemembers",
      "functionName": "getRoutingQueueMembers",
      "signature": "getRoutingQueueMembers(queueId, pageNumber, pageSize, sortOrder, expand, name, profileSkills, skills, languages, routingStatus, presence, memberBy, joined)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "profileSkills",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "skills",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "languages",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "routingStatus",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "presence",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "memberBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "joined",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "QueueMemberEntityListing"
    },
    "GET /api/v2/routing/queues/{queueId}/users": {
      "operationId": "getroutingqueueusers",
      "functionName": "getRoutingQueueUsers",
      "signature": "getRoutingQueueUsers(queueId, pageNumber, pageSize, sortOrder, expand, joined, name, profileSkills, skills, languages, routingStatus, presence)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "joined",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "profileSkills",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "skills",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "languages",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "routingStatus",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "presence",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "QueueMemberEntityListingV1"
    },
    "GET /api/v2/routing/queues/{queueId}/wrapupcodes": {
      "operationId": "getroutingqueuewrapupcodes",
      "functionName": "getRoutingQueueWrapupcodes",
      "signature": "getRoutingQueueWrapupcodes(queueId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "WrapupCodeEntityListing"
    },
    "GET /api/v2/routing/queues": {
      "operationId": "getroutingqueues",
      "functionName": "getRoutingQueues",
      "signature": "getRoutingQueues(pageNumber, pageSize, sortOrder, name, id, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/divisionviews": {
      "operationId": "getroutingqueuesdivisionviews",
      "functionName": "getRoutingQueuesDivisionviews",
      "signature": "getRoutingQueuesDivisionviews(pageSize, pageNumber, sortBy, sortOrder, name, id, divisionId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/divisionviews/all": {
      "operationId": "getroutingqueuesdivisionviewsall",
      "functionName": "getRoutingQueuesDivisionviewsAll",
      "signature": "getRoutingQueuesDivisionviewsAll(pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/me": {
      "operationId": "getroutingqueuesme",
      "functionName": "getRoutingQueuesMe",
      "signature": "getRoutingQueuesMe(pageNumber, pageSize, joined, sortOrder)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "joined",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/routing/settings": {
      "operationId": "getroutingsettings",
      "functionName": "getRoutingSettings",
      "signature": "getRoutingSettings()",
      "return": "RoutingSettings"
    },
    "GET /api/v2/routing/settings/contactcenter": {
      "operationId": "getroutingsettingscontactcenter",
      "functionName": "getRoutingSettingsContactcenter",
      "signature": "getRoutingSettingsContactcenter()",
      "return": "ContactCenterSettings"
    },
    "GET /api/v2/routing/settings/transcription": {
      "operationId": "getroutingsettingstranscription",
      "functionName": "getRoutingSettingsTranscription",
      "signature": "getRoutingSettingsTranscription()",
      "return": "TranscriptionSettings"
    },
    "GET /api/v2/routing/skills/{skillId}": {
      "operationId": "getroutingskill",
      "functionName": "getRoutingSkill",
      "signature": "getRoutingSkill(skillId)",
      "parameters": [
        {
          "name": "skillId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "RoutingSkill"
    },
    "GET /api/v2/routing/skills": {
      "operationId": "getroutingskills",
      "functionName": "getRoutingSkills",
      "signature": "getRoutingSkills(pageSize, pageNumber, name, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "SkillEntityListing"
    },
    "GET /api/v2/routing/sms/addresses/{addressId}": {
      "operationId": "getroutingsmsaddress",
      "functionName": "getRoutingSmsAddress",
      "signature": "getRoutingSmsAddress(addressId)",
      "parameters": [
        {
          "name": "addressId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SmsAddress"
    },
    "GET /api/v2/routing/sms/addresses": {
      "operationId": "getroutingsmsaddresses",
      "functionName": "getRoutingSmsAddresses",
      "signature": "getRoutingSmsAddresses(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "SmsAddressEntityListing"
    },
    "GET /api/v2/routing/sms/availablephonenumbers": {
      "operationId": "getroutingsmsavailablephonenumbers",
      "functionName": "getRoutingSmsAvailablephonenumbers",
      "signature": "getRoutingSmsAvailablephonenumbers(countryCode, phoneNumberType, region, city, areaCode, pattern, addressRequirement)",
      "parameters": [
        {
          "name": "countryCode",
          "type": "String",
          "required": "true"
        },
        {
          "name": "phoneNumberType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "region",
          "type": "String",
          "required": "false"
        },
        {
          "name": "city",
          "type": "String",
          "required": "false"
        },
        {
          "name": "areaCode",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pattern",
          "type": "String",
          "required": "false"
        },
        {
          "name": "addressRequirement",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SMSAvailablePhoneNumberEntityListing"
    },
    "GET /api/v2/routing/sms/phonenumbers/{addressId}": {
      "operationId": "getroutingsmsphonenumber",
      "functionName": "getRoutingSmsPhonenumber",
      "signature": "getRoutingSmsPhonenumber(addressId)",
      "parameters": [
        {
          "name": "addressId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "GET /api/v2/routing/sms/phonenumbers": {
      "operationId": "getroutingsmsphonenumbers",
      "functionName": "getRoutingSmsPhonenumbers",
      "signature": "getRoutingSmsPhonenumbers(phoneNumber, phoneNumberType, phoneNumberStatus, countryCode, pageSize, pageNumber, sortBy, sortOrder, language)",
      "parameters": [
        {
          "name": "phoneNumber",
          "type": "String",
          "required": "false"
        },
        {
          "name": "phoneNumberType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "phoneNumberStatus",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "countryCode",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "language",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SmsPhoneNumberEntityListing"
    },
    "GET /api/v2/routing/users/{userId}/utilization": {
      "operationId": "getroutinguserutilization",
      "functionName": "getRoutingUserUtilization",
      "signature": "getRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "GET /api/v2/routing/utilization": {
      "operationId": "getroutingutilization",
      "functionName": "getRoutingUtilization",
      "signature": "getRoutingUtilization()",
      "return": "Utilization"
    },
    "GET /api/v2/routing/wrapupcodes/{codeId}": {
      "operationId": "getroutingwrapupcode",
      "functionName": "getRoutingWrapupcode",
      "signature": "getRoutingWrapupcode(codeId)",
      "parameters": [
        {
          "name": "codeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WrapupCode"
    },
    "GET /api/v2/routing/wrapupcodes": {
      "operationId": "getroutingwrapupcodes",
      "functionName": "getRoutingWrapupcodes",
      "signature": "getRoutingWrapupcodes(pageSize, pageNumber, sortBy, sortOrder, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WrapupCodeEntityListing"
    },
    "GET /api/v2/users/{userId}/queues": {
      "operationId": "getuserqueues",
      "functionName": "getUserQueues",
      "signature": "getUserQueues(userId, pageSize, pageNumber, joined, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "joined",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/users/{userId}/routinglanguages": {
      "operationId": "getuserroutinglanguages",
      "functionName": "getUserRoutinglanguages",
      "signature": "getUserRoutinglanguages(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "GET /api/v2/users/{userId}/routingskills": {
      "operationId": "getuserroutingskills",
      "functionName": "getUserRoutingskills",
      "signature": "getUserRoutingskills(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PATCH /api/v2/routing/conversations/{conversationId}": {
      "operationId": "patchroutingconversation",
      "functionName": "patchRoutingConversation",
      "signature": "patchRoutingConversation(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RoutingConversationAttributesResponse"
    },
    "PATCH /api/v2/routing/email/domains/{domainId}": {
      "operationId": "patchroutingemaildomain",
      "functionName": "patchRoutingEmailDomain",
      "signature": "patchRoutingEmailDomain(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "InboundDomain"
    },
    "PATCH /api/v2/routing/email/domains/{domainId}/validate": {
      "operationId": "patchroutingemaildomainvalidate",
      "functionName": "patchRoutingEmailDomainValidate",
      "signature": "patchRoutingEmailDomainValidate(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "InboundDomain"
    },
    "PATCH /api/v2/routing/predictors/{predictorId}": {
      "operationId": "patchroutingpredictor",
      "functionName": "patchRoutingPredictor",
      "signature": "patchRoutingPredictor(predictorId, body)",
      "parameters": [
        {
          "name": "predictorId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Predictor"
    },
    "PATCH /api/v2/routing/queues/{queueId}/members/{memberId}": {
      "operationId": "patchroutingqueuemember",
      "functionName": "patchRoutingQueueMember",
      "signature": "patchRoutingQueueMember(queueId, memberId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/routing/queues/{queueId}/members": {
      "operationId": "patchroutingqueuemembers",
      "functionName": "patchRoutingQueueMembers",
      "signature": "patchRoutingQueueMembers(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "QueueMemberEntityListing"
    },
    "PATCH /api/v2/routing/queues/{queueId}/users/{memberId}": {
      "operationId": "patchroutingqueueuser",
      "functionName": "patchRoutingQueueUser",
      "signature": "patchRoutingQueueUser(queueId, memberId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/routing/queues/{queueId}/users": {
      "operationId": "patchroutingqueueusers",
      "functionName": "patchRoutingQueueUsers",
      "signature": "patchRoutingQueueUsers(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "QueueMemberEntityListingV1"
    },
    "PATCH /api/v2/routing/settings/contactcenter": {
      "operationId": "patchroutingsettingscontactcenter",
      "functionName": "patchRoutingSettingsContactcenter",
      "signature": "patchRoutingSettingsContactcenter(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "PATCH /api/v2/users/{userId}/queues/{queueId}": {
      "operationId": "patchuserqueue",
      "functionName": "patchUserQueue",
      "signature": "patchUserQueue(queueId, userId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserQueue"
    },
    "PATCH /api/v2/users/{userId}/queues": {
      "operationId": "patchuserqueues",
      "functionName": "patchUserQueues",
      "signature": "patchUserQueues(userId, body, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "operationId": "patchuserroutinglanguage",
      "functionName": "patchUserRoutinglanguage",
      "signature": "patchUserRoutinglanguage(userId, languageId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/bulk": {
      "operationId": "patchuserroutinglanguagesbulk",
      "functionName": "patchUserRoutinglanguagesBulk",
      "signature": "patchUserRoutinglanguagesBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routingskills/bulk": {
      "operationId": "patchuserroutingskillsbulk",
      "functionName": "patchUserRoutingskillsBulk",
      "signature": "patchUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "POST /api/v2/analytics/queues/observations/query": {
      "operationId": "postanalyticsqueuesobservationsquery",
      "functionName": "postAnalyticsQueuesObservationsQuery",
      "signature": "postAnalyticsQueuesObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "QueueObservationQueryResponse"
    },
    "POST /api/v2/routing/assessments": {
      "operationId": "postroutingassessments",
      "functionName": "postRoutingAssessments",
      "signature": "postRoutingAssessments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "BenefitAssessment"
    },
    "POST /api/v2/routing/assessments/jobs": {
      "operationId": "postroutingassessmentsjobs",
      "functionName": "postRoutingAssessmentsJobs",
      "signature": "postRoutingAssessmentsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "BenefitAssessmentJob"
    },
    "POST /api/v2/routing/email/domains/{domainName}/routes": {
      "operationId": "postroutingemaildomainroutes",
      "functionName": "postRoutingEmailDomainRoutes",
      "signature": "postRoutingEmailDomainRoutes(domainName, body)",
      "parameters": [
        {
          "name": "domainName",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "InboundRoute"
    },
    "POST /api/v2/routing/email/domains/{domainId}/testconnection": {
      "operationId": "postroutingemaildomaintestconnection",
      "functionName": "postRoutingEmailDomainTestconnection",
      "signature": "postRoutingEmailDomainTestconnection(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TestMessage"
    },
    "POST /api/v2/routing/email/domains": {
      "operationId": "postroutingemaildomains",
      "functionName": "postRoutingEmailDomains",
      "signature": "postRoutingEmailDomains(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "InboundDomain"
    },
    "POST /api/v2/routing/languages": {
      "operationId": "postroutinglanguages",
      "functionName": "postRoutingLanguages",
      "signature": "postRoutingLanguages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Language"
    },
    "POST /api/v2/routing/predictors": {
      "operationId": "postroutingpredictors",
      "functionName": "postRoutingPredictors",
      "signature": "postRoutingPredictors(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "Predictor"
    },
    "POST /api/v2/routing/queues/{queueId}/members": {
      "operationId": "postroutingqueuemembers",
      "functionName": "postRoutingQueueMembers",
      "signature": "postRoutingQueueMembers(queueId, body, _delete)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "_delete",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/routing/queues/{queueId}/users": {
      "operationId": "postroutingqueueusers",
      "functionName": "postRoutingQueueUsers",
      "signature": "postRoutingQueueUsers(queueId, body, _delete)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "_delete",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/routing/queues/{queueId}/wrapupcodes": {
      "operationId": "postroutingqueuewrapupcodes",
      "functionName": "postRoutingQueueWrapupcodes",
      "signature": "postRoutingQueueWrapupcodes(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "[WrapupCode]"
    },
    "POST /api/v2/routing/queues": {
      "operationId": "postroutingqueues",
      "functionName": "postRoutingQueues",
      "signature": "postRoutingQueues(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Queue"
    },
    "POST /api/v2/routing/skills": {
      "operationId": "postroutingskills",
      "functionName": "postRoutingSkills",
      "signature": "postRoutingSkills(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RoutingSkill"
    },
    "POST /api/v2/routing/sms/addresses": {
      "operationId": "postroutingsmsaddresses",
      "functionName": "postRoutingSmsAddresses",
      "signature": "postRoutingSmsAddresses(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SmsAddress"
    },
    "POST /api/v2/routing/sms/phonenumbers": {
      "operationId": "postroutingsmsphonenumbers",
      "functionName": "postRoutingSmsPhonenumbers",
      "signature": "postRoutingSmsPhonenumbers(body, async)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "async",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "POST /api/v2/routing/wrapupcodes": {
      "operationId": "postroutingwrapupcodes",
      "functionName": "postRoutingWrapupcodes",
      "signature": "postRoutingWrapupcodes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WrapupCode"
    },
    "POST /api/v2/users/{userId}/routinglanguages": {
      "operationId": "postuserroutinglanguages",
      "functionName": "postUserRoutinglanguages",
      "signature": "postUserRoutinglanguages(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "POST /api/v2/users/{userId}/routingskills": {
      "operationId": "postuserroutingskills",
      "functionName": "postUserRoutingskills",
      "signature": "postUserRoutingskills(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "operationId": "putroutingemaildomainroute",
      "functionName": "putRoutingEmailDomainRoute",
      "signature": "putRoutingEmailDomainRoute(domainName, routeId, body)",
      "parameters": [
        {
          "name": "domainName",
          "type": "String",
          "required": "true"
        },
        {
          "name": "routeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "InboundRoute"
    },
    "PUT /api/v2/routing/message/recipients/{recipientId}": {
      "operationId": "putroutingmessagerecipient",
      "functionName": "putRoutingMessageRecipient",
      "signature": "putRoutingMessageRecipient(recipientId, body)",
      "parameters": [
        {
          "name": "recipientId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Recipient"
    },
    "PUT /api/v2/routing/queues/{queueId}": {
      "operationId": "putroutingqueue",
      "functionName": "putRoutingQueue",
      "signature": "putRoutingQueue(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Queue"
    },
    "PUT /api/v2/routing/settings": {
      "operationId": "putroutingsettings",
      "functionName": "putRoutingSettings",
      "signature": "putRoutingSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RoutingSettings"
    },
    "PUT /api/v2/routing/settings/transcription": {
      "operationId": "putroutingsettingstranscription",
      "functionName": "putRoutingSettingsTranscription",
      "signature": "putRoutingSettingsTranscription(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TranscriptionSettings"
    },
    "PUT /api/v2/routing/sms/phonenumbers/{addressId}": {
      "operationId": "putroutingsmsphonenumber",
      "functionName": "putRoutingSmsPhonenumber",
      "signature": "putRoutingSmsPhonenumber(addressId, body, async)",
      "parameters": [
        {
          "name": "addressId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "async",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "PUT /api/v2/routing/users/{userId}/utilization": {
      "operationId": "putroutinguserutilization",
      "functionName": "putRoutingUserUtilization",
      "signature": "putRoutingUserUtilization(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "PUT /api/v2/routing/utilization": {
      "operationId": "putroutingutilization",
      "functionName": "putRoutingUtilization",
      "signature": "putRoutingUtilization(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Utilization"
    },
    "PUT /api/v2/routing/wrapupcodes/{codeId}": {
      "operationId": "putroutingwrapupcode",
      "functionName": "putRoutingWrapupcode",
      "signature": "putRoutingWrapupcode(codeId, body)",
      "parameters": [
        {
          "name": "codeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WrapupCode"
    },
    "PUT /api/v2/users/{userId}/routingskills/{skillId}": {
      "operationId": "putuserroutingskill",
      "functionName": "putUserRoutingskill",
      "signature": "putUserRoutingskill(userId, skillId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "skillId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/users/{userId}/routingskills/bulk": {
      "operationId": "putuserroutingskillsbulk",
      "functionName": "putUserRoutingskillsBulk",
      "signature": "putUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserSkillEntityListing"
    }
  },
  "scim": {
    "DELETE /api/v2/scim/users/{userId}": {
      "operationId": "deletescimuser",
      "functionName": "deleteScimUser",
      "signature": "deleteScimUser(userId, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/scim/v2/users/{userId}": {
      "operationId": "deletescimv2user",
      "functionName": "deleteScimV2User",
      "signature": "deleteScimV2User(userId, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/scim/groups/{groupId}": {
      "operationId": "getscimgroup",
      "functionName": "getScimGroup",
      "signature": "getScimGroup(groupId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "ifNoneMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2Group"
    },
    "GET /api/v2/scim/groups": {
      "operationId": "getscimgroups",
      "functionName": "getScimGroups",
      "signature": "getScimGroups(startIndex, count, attributes, excludedAttributes, filter)",
      "parameters": [
        {
          "name": "startIndex",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "count",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "filter",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimGroupListResponse"
    },
    "GET /api/v2/scim/resourcetypes/{resourceType}": {
      "operationId": "getscimresourcetype",
      "functionName": "getScimResourcetype",
      "signature": "getScimResourcetype(resourceType)",
      "parameters": [
        {
          "name": "resourceType",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScimConfigResourceType"
    },
    "GET /api/v2/scim/resourcetypes": {
      "operationId": "getscimresourcetypes",
      "functionName": "getScimResourcetypes",
      "signature": "getScimResourcetypes()",
      "return": "ScimConfigResourceTypesListResponse"
    },
    "GET /api/v2/scim/schemas/{schemaId}": {
      "operationId": "getscimschema",
      "functionName": "getScimSchema",
      "signature": "getScimSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScimV2SchemaDefinition"
    },
    "GET /api/v2/scim/schemas": {
      "operationId": "getscimschemas",
      "functionName": "getScimSchemas",
      "signature": "getScimSchemas(filter)",
      "parameters": [
        {
          "name": "filter",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2SchemaListResponse"
    },
    "GET /api/v2/scim/serviceproviderconfig": {
      "operationId": "getscimserviceproviderconfig",
      "functionName": "getScimServiceproviderconfig",
      "signature": "getScimServiceproviderconfig(ifNoneMatch)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimServiceProviderConfig"
    },
    "GET /api/v2/scim/users/{userId}": {
      "operationId": "getscimuser",
      "functionName": "getScimUser",
      "signature": "getScimUser(userId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "ifNoneMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2User"
    },
    "GET /api/v2/scim/users": {
      "operationId": "getscimusers",
      "functionName": "getScimUsers",
      "signature": "getScimUsers(startIndex, count, attributes, excludedAttributes, filter)",
      "parameters": [
        {
          "name": "startIndex",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "count",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "filter",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimUserListResponse"
    },
    "GET /api/v2/scim/v2/groups/{groupId}": {
      "operationId": "getscimv2group",
      "functionName": "getScimV2Group",
      "signature": "getScimV2Group(groupId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "ifNoneMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2Group"
    },
    "GET /api/v2/scim/v2/groups": {
      "operationId": "getscimv2groups",
      "functionName": "getScimV2Groups",
      "signature": "getScimV2Groups(filter, startIndex, count, attributes, excludedAttributes)",
      "parameters": [
        {
          "name": "filter",
          "type": "String",
          "required": "true"
        },
        {
          "name": "startIndex",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "count",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ScimGroupListResponse"
    },
    "GET /api/v2/scim/v2/resourcetypes/{resourceType}": {
      "operationId": "getscimv2resourcetype",
      "functionName": "getScimV2Resourcetype",
      "signature": "getScimV2Resourcetype(resourceType)",
      "parameters": [
        {
          "name": "resourceType",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScimConfigResourceType"
    },
    "GET /api/v2/scim/v2/resourcetypes": {
      "operationId": "getscimv2resourcetypes",
      "functionName": "getScimV2Resourcetypes",
      "signature": "getScimV2Resourcetypes()",
      "return": "ScimConfigResourceTypesListResponse"
    },
    "GET /api/v2/scim/v2/schemas/{schemaId}": {
      "operationId": "getscimv2schema",
      "functionName": "getScimV2Schema",
      "signature": "getScimV2Schema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScimV2SchemaDefinition"
    },
    "GET /api/v2/scim/v2/schemas": {
      "operationId": "getscimv2schemas",
      "functionName": "getScimV2Schemas",
      "signature": "getScimV2Schemas(filter)",
      "parameters": [
        {
          "name": "filter",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2SchemaListResponse"
    },
    "GET /api/v2/scim/v2/serviceproviderconfig": {
      "operationId": "getscimv2serviceproviderconfig",
      "functionName": "getScimV2Serviceproviderconfig",
      "signature": "getScimV2Serviceproviderconfig(ifNoneMatch)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimServiceProviderConfig"
    },
    "GET /api/v2/scim/v2/users/{userId}": {
      "operationId": "getscimv2user",
      "functionName": "getScimV2User",
      "signature": "getScimV2User(userId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "ifNoneMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2User"
    },
    "GET /api/v2/scim/v2/users": {
      "operationId": "getscimv2users",
      "functionName": "getScimV2Users",
      "signature": "getScimV2Users(startIndex, count, attributes, excludedAttributes, filter)",
      "parameters": [
        {
          "name": "startIndex",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "count",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "attributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "excludedAttributes",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "filter",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimUserListResponse"
    },
    "PATCH /api/v2/scim/groups/{groupId}": {
      "operationId": "patchscimgroup",
      "functionName": "patchScimGroup",
      "signature": "patchScimGroup(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2Group"
    },
    "PATCH /api/v2/scim/users/{userId}": {
      "operationId": "patchscimuser",
      "functionName": "patchScimUser",
      "signature": "patchScimUser(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2User"
    },
    "PATCH /api/v2/scim/v2/groups/{groupId}": {
      "operationId": "patchscimv2group",
      "functionName": "patchScimV2Group",
      "signature": "patchScimV2Group(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2Group"
    },
    "PATCH /api/v2/scim/v2/users/{userId}": {
      "operationId": "patchscimv2user",
      "functionName": "patchScimV2User",
      "signature": "patchScimV2User(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2User"
    },
    "POST /api/v2/scim/users": {
      "operationId": "postscimusers",
      "functionName": "postScimUsers",
      "signature": "postScimUsers(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ScimV2User"
    },
    "POST /api/v2/scim/v2/users": {
      "operationId": "postscimv2users",
      "functionName": "postScimV2Users",
      "signature": "postScimV2Users(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ScimV2User"
    },
    "PUT /api/v2/scim/groups/{groupId}": {
      "operationId": "putscimgroup",
      "functionName": "putScimGroup",
      "signature": "putScimGroup(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2Group"
    },
    "PUT /api/v2/scim/users/{userId}": {
      "operationId": "putscimuser",
      "functionName": "putScimUser",
      "signature": "putScimUser(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2User"
    },
    "PUT /api/v2/scim/v2/groups/{groupId}": {
      "operationId": "putscimv2group",
      "functionName": "putScimV2Group",
      "signature": "putScimV2Group(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2Group"
    },
    "PUT /api/v2/scim/v2/users/{userId}": {
      "operationId": "putscimv2user",
      "functionName": "putScimV2User",
      "signature": "putScimV2User(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "ifMatch",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScimV2User"
    }
  },
  "scripts": {
    "GET /api/v2/scripts/{scriptId}": {
      "operationId": "getscript",
      "functionName": "getScript",
      "signature": "getScript(scriptId)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Script"
    },
    "GET /api/v2/scripts/{scriptId}/pages/{pageId}": {
      "operationId": "getscriptpage",
      "functionName": "getScriptPage",
      "signature": "getScriptPage(scriptId, pageId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Page"
    },
    "GET /api/v2/scripts/{scriptId}/pages": {
      "operationId": "getscriptpages",
      "functionName": "getScriptPages",
      "signature": "getScriptPages(scriptId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "[Page]"
    },
    "GET /api/v2/scripts": {
      "operationId": "getscripts",
      "functionName": "getScripts",
      "signature": "getScripts(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder, scriptDataVersion)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "feature",
          "type": "String",
          "required": "false"
        },
        {
          "name": "flowId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScriptEntityListing"
    },
    "GET /api/v2/scripts/published": {
      "operationId": "getscriptspublished",
      "functionName": "getScriptsPublished",
      "signature": "getScriptsPublished(pageSize, pageNumber, expand, name, feature, flowId, scriptDataVersion)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "feature",
          "type": "String",
          "required": "false"
        },
        {
          "name": "flowId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ScriptEntityListing"
    },
    "GET /api/v2/scripts/published/{scriptId}": {
      "operationId": "getscriptspublishedscriptid",
      "functionName": "getScriptsPublishedScriptId",
      "signature": "getScriptsPublishedScriptId(scriptId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Script"
    },
    "GET /api/v2/scripts/published/{scriptId}/pages/{pageId}": {
      "operationId": "getscriptspublishedscriptidpage",
      "functionName": "getScriptsPublishedScriptIdPage",
      "signature": "getScriptsPublishedScriptIdPage(scriptId, pageId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Page"
    },
    "GET /api/v2/scripts/published/{scriptId}/pages": {
      "operationId": "getscriptspublishedscriptidpages",
      "functionName": "getScriptsPublishedScriptIdPages",
      "signature": "getScriptsPublishedScriptIdPages(scriptId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "[Page]"
    },
    "GET /api/v2/scripts/published/{scriptId}/variables": {
      "operationId": "getscriptspublishedscriptidvariables",
      "functionName": "getScriptsPublishedScriptIdVariables",
      "signature": "getScriptsPublishedScriptIdVariables(scriptId, input, output, type, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "input",
          "type": "String",
          "required": "false"
        },
        {
          "name": "output",
          "type": "String",
          "required": "false"
        },
        {
          "name": "type",
          "type": "String",
          "required": "false"
        },
        {
          "name": "scriptDataVersion",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Object"
    },
    "GET /api/v2/scripts/uploads/{uploadId}/status": {
      "operationId": "getscriptsuploadstatus",
      "functionName": "getScriptsUploadStatus",
      "signature": "getScriptsUploadStatus(uploadId, longPoll)",
      "parameters": [
        {
          "name": "uploadId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "longPoll",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "ImportScriptStatusResponse"
    },
    "POST /api/v2/scripts/{scriptId}/export": {
      "operationId": "postscriptexport",
      "functionName": "postScriptExport",
      "signature": "postScriptExport(scriptId, body)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ExportScriptResponse"
    }
  },
  "search": {
    "GET /api/v2/documentation/gkn/search": {
      "operationId": "getdocumentationgknsearch",
      "functionName": "getDocumentationGknSearch",
      "signature": "getDocumentationGknSearch(q64)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "GKNDocumentationSearchResponse"
    },
    "GET /api/v2/documentation/search": {
      "operationId": "getdocumentationsearch",
      "functionName": "getDocumentationSearch",
      "signature": "getDocumentationSearch(q64)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DocumentationSearchResponse"
    },
    "GET /api/v2/groups/search": {
      "operationId": "getgroupssearch",
      "functionName": "getGroupsSearch",
      "signature": "getGroupsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "GET /api/v2/locations/search": {
      "operationId": "getlocationssearch",
      "functionName": "getLocationsSearch",
      "signature": "getLocationsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "GET /api/v2/search": {
      "operationId": "getsearch",
      "functionName": "getSearch",
      "signature": "getSearch(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/search/suggest": {
      "operationId": "getsearchsuggest",
      "functionName": "getSearchSuggest",
      "signature": "getSearchSuggest(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/users/search": {
      "operationId": "getuserssearch",
      "functionName": "getUsersSearch",
      "signature": "getUsersSearch(q64, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "integrationPresenceSource",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "GET /api/v2/voicemail/search": {
      "operationId": "getvoicemailsearch",
      "functionName": "getVoicemailSearch",
      "signature": "getVoicemailSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "POST /api/v2/analytics/conversations/transcripts/query": {
      "operationId": "postanalyticsconversationstranscriptsquery",
      "functionName": "postAnalyticsConversationsTranscriptsQuery",
      "signature": "postAnalyticsConversationsTranscriptsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "POST /api/v2/documentation/gkn/search": {
      "operationId": "postdocumentationgknsearch",
      "functionName": "postDocumentationGknSearch",
      "signature": "postDocumentationGknSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "GKNDocumentationSearchResponse"
    },
    "POST /api/v2/documentation/search": {
      "operationId": "postdocumentationsearch",
      "functionName": "postDocumentationSearch",
      "signature": "postDocumentationSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DocumentationSearchResponse"
    },
    "POST /api/v2/groups/search": {
      "operationId": "postgroupssearch",
      "functionName": "postGroupsSearch",
      "signature": "postGroupsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search": {
      "operationId": "postknowledgeknowledgebasesearch",
      "functionName": "postKnowledgeKnowledgebaseSearch",
      "signature": "postKnowledgeKnowledgebaseSearch(knowledgeBaseId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "KnowledgeSearchResponse"
    },
    "POST /api/v2/locations/search": {
      "operationId": "postlocationssearch",
      "functionName": "postLocationsSearch",
      "signature": "postLocationsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "POST /api/v2/search": {
      "operationId": "postsearch",
      "functionName": "postSearch",
      "signature": "postSearch(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search/suggest": {
      "operationId": "postsearchsuggest",
      "functionName": "postSearchSuggest",
      "signature": "postSearchSuggest(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/speechandtextanalytics/transcripts/search": {
      "operationId": "postspeechandtextanalyticstranscriptssearch",
      "functionName": "postSpeechandtextanalyticsTranscriptsSearch",
      "signature": "postSpeechandtextanalyticsTranscriptsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "JsonSearchResponse"
    },
    "POST /api/v2/users/search": {
      "operationId": "postuserssearch",
      "functionName": "postUsersSearch",
      "signature": "postUsersSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "POST /api/v2/voicemail/search": {
      "operationId": "postvoicemailsearch",
      "functionName": "postVoicemailSearch",
      "signature": "postVoicemailSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailsSearchResponse"
    }
  },
  "speechtextanalytics": {
    "DELETE /api/v2/speechandtextanalytics/programs/{programId}": {
      "operationId": "deletespeechandtextanalyticsprogram",
      "functionName": "deleteSpeechandtextanalyticsProgram",
      "signature": "deleteSpeechandtextanalyticsProgram(programId, forceDelete)",
      "parameters": [
        {
          "name": "programId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forceDelete",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "DELETE /api/v2/speechandtextanalytics/sentimentfeedback": {
      "operationId": "deletespeechandtextanalyticssentimentfeedback",
      "functionName": "deleteSpeechandtextanalyticsSentimentfeedback",
      "signature": "deleteSpeechandtextanalyticsSentimentfeedback()"
    },
    "DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}": {
      "operationId": "deletespeechandtextanalyticssentimentfeedbacksentimentfeedbackid",
      "functionName": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId",
      "signature": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId)",
      "parameters": [
        {
          "name": "sentimentFeedbackId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/speechandtextanalytics/topics/{topicId}": {
      "operationId": "deletespeechandtextanalyticstopic",
      "functionName": "deleteSpeechandtextanalyticsTopic",
      "signature": "deleteSpeechandtextanalyticsTopic(topicId)",
      "parameters": [
        {
          "name": "topicId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/speechandtextanalytics/conversations/{conversationId}": {
      "operationId": "getspeechandtextanalyticsconversation",
      "functionName": "getSpeechandtextanalyticsConversation",
      "signature": "getSpeechandtextanalyticsConversation(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ConversationMetrics"
    },
    "GET /api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturl": {
      "operationId": "getspeechandtextanalyticsconversationcommunicationtranscripturl",
      "functionName": "getSpeechandtextanalyticsConversationCommunicationTranscripturl",
      "signature": "getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId, communicationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "communicationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TranscriptUrl"
    },
    "GET /api/v2/speechandtextanalytics/programs/{programId}": {
      "operationId": "getspeechandtextanalyticsprogram",
      "functionName": "getSpeechandtextanalyticsProgram",
      "signature": "getSpeechandtextanalyticsProgram(programId)",
      "parameters": [
        {
          "name": "programId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Program"
    },
    "GET /api/v2/speechandtextanalytics/programs/{programId}/mappings": {
      "operationId": "getspeechandtextanalyticsprogrammappings",
      "functionName": "getSpeechandtextanalyticsProgramMappings",
      "signature": "getSpeechandtextanalyticsProgramMappings(programId)",
      "parameters": [
        {
          "name": "programId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ProgramMappings"
    },
    "GET /api/v2/speechandtextanalytics/programs": {
      "operationId": "getspeechandtextanalyticsprograms",
      "functionName": "getSpeechandtextanalyticsPrograms",
      "signature": "getSpeechandtextanalyticsPrograms(nextPage, pageSize)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ProgramsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/programs/general/jobs/{jobId}": {
      "operationId": "getspeechandtextanalyticsprogramsgeneraljob",
      "functionName": "getSpeechandtextanalyticsProgramsGeneralJob",
      "signature": "getSpeechandtextanalyticsProgramsGeneralJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "GeneralProgramJob"
    },
    "GET /api/v2/speechandtextanalytics/programs/mappings": {
      "operationId": "getspeechandtextanalyticsprogramsmappings",
      "functionName": "getSpeechandtextanalyticsProgramsMappings",
      "signature": "getSpeechandtextanalyticsProgramsMappings(nextPage, pageSize)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "ProgramsMappingsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/programs/publishjobs/{jobId}": {
      "operationId": "getspeechandtextanalyticsprogramspublishjob",
      "functionName": "getSpeechandtextanalyticsProgramsPublishjob",
      "signature": "getSpeechandtextanalyticsProgramsPublishjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ProgramJob"
    },
    "GET /api/v2/speechandtextanalytics/programs/unpublished": {
      "operationId": "getspeechandtextanalyticsprogramsunpublished",
      "functionName": "getSpeechandtextanalyticsProgramsUnpublished",
      "signature": "getSpeechandtextanalyticsProgramsUnpublished(nextPage, pageSize)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "UnpublishedProgramsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/sentiment/dialects": {
      "operationId": "getspeechandtextanalyticssentimentdialects",
      "functionName": "getSpeechandtextanalyticsSentimentDialects",
      "signature": "getSpeechandtextanalyticsSentimentDialects()",
      "return": "EntityListing"
    },
    "GET /api/v2/speechandtextanalytics/sentimentfeedback": {
      "operationId": "getspeechandtextanalyticssentimentfeedback",
      "functionName": "getSpeechandtextanalyticsSentimentfeedback",
      "signature": "getSpeechandtextanalyticsSentimentfeedback(dialect)",
      "parameters": [
        {
          "name": "dialect",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SentimentFeedbackEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/settings": {
      "operationId": "getspeechandtextanalyticssettings",
      "functionName": "getSpeechandtextanalyticsSettings",
      "signature": "getSpeechandtextanalyticsSettings()",
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "GET /api/v2/speechandtextanalytics/topics/{topicId}": {
      "operationId": "getspeechandtextanalyticstopic",
      "functionName": "getSpeechandtextanalyticsTopic",
      "signature": "getSpeechandtextanalyticsTopic(topicId)",
      "parameters": [
        {
          "name": "topicId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Topic"
    },
    "GET /api/v2/speechandtextanalytics/topics": {
      "operationId": "getspeechandtextanalyticstopics",
      "functionName": "getSpeechandtextanalyticsTopics",
      "signature": "getSpeechandtextanalyticsTopics(nextPage, pageSize, state, name, ids, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "state",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "ids",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TopicsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/dialects": {
      "operationId": "getspeechandtextanalyticstopicsdialects",
      "functionName": "getSpeechandtextanalyticsTopicsDialects",
      "signature": "getSpeechandtextanalyticsTopicsDialects()",
      "return": "EntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/general": {
      "operationId": "getspeechandtextanalyticstopicsgeneral",
      "functionName": "getSpeechandtextanalyticsTopicsGeneral",
      "signature": "getSpeechandtextanalyticsTopicsGeneral(dialect)",
      "parameters": [
        {
          "name": "dialect",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "GeneralTopicsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/publishjobs/{jobId}": {
      "operationId": "getspeechandtextanalyticstopicspublishjob",
      "functionName": "getSpeechandtextanalyticsTopicsPublishjob",
      "signature": "getSpeechandtextanalyticsTopicsPublishjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TopicJob"
    },
    "PATCH /api/v2/speechandtextanalytics/settings": {
      "operationId": "patchspeechandtextanalyticssettings",
      "functionName": "patchSpeechandtextanalyticsSettings",
      "signature": "patchSpeechandtextanalyticsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "POST /api/v2/speechandtextanalytics/programs": {
      "operationId": "postspeechandtextanalyticsprograms",
      "functionName": "postSpeechandtextanalyticsPrograms",
      "signature": "postSpeechandtextanalyticsPrograms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Program"
    },
    "POST /api/v2/speechandtextanalytics/programs/general/jobs": {
      "operationId": "postspeechandtextanalyticsprogramsgeneraljobs",
      "functionName": "postSpeechandtextanalyticsProgramsGeneralJobs",
      "signature": "postSpeechandtextanalyticsProgramsGeneralJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "GeneralProgramJob"
    },
    "POST /api/v2/speechandtextanalytics/programs/publishjobs": {
      "operationId": "postspeechandtextanalyticsprogramspublishjobs",
      "functionName": "postSpeechandtextanalyticsProgramsPublishjobs",
      "signature": "postSpeechandtextanalyticsProgramsPublishjobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ProgramJob"
    },
    "POST /api/v2/speechandtextanalytics/sentimentfeedback": {
      "operationId": "postspeechandtextanalyticssentimentfeedback",
      "functionName": "postSpeechandtextanalyticsSentimentfeedback",
      "signature": "postSpeechandtextanalyticsSentimentfeedback(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SentimentFeedback"
    },
    "POST /api/v2/speechandtextanalytics/topics": {
      "operationId": "postspeechandtextanalyticstopics",
      "functionName": "postSpeechandtextanalyticsTopics",
      "signature": "postSpeechandtextanalyticsTopics(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Topic"
    },
    "POST /api/v2/speechandtextanalytics/topics/publishjobs": {
      "operationId": "postspeechandtextanalyticstopicspublishjobs",
      "functionName": "postSpeechandtextanalyticsTopicsPublishjobs",
      "signature": "postSpeechandtextanalyticsTopicsPublishjobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TopicJob"
    },
    "POST /api/v2/speechandtextanalytics/transcripts/search": {
      "operationId": "postspeechandtextanalyticstranscriptssearch",
      "functionName": "postSpeechandtextanalyticsTranscriptsSearch",
      "signature": "postSpeechandtextanalyticsTranscriptsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "JsonSearchResponse"
    },
    "PUT /api/v2/speechandtextanalytics/programs/{programId}": {
      "operationId": "putspeechandtextanalyticsprogram",
      "functionName": "putSpeechandtextanalyticsProgram",
      "signature": "putSpeechandtextanalyticsProgram(programId, body)",
      "parameters": [
        {
          "name": "programId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Program"
    },
    "PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings": {
      "operationId": "putspeechandtextanalyticsprogrammappings",
      "functionName": "putSpeechandtextanalyticsProgramMappings",
      "signature": "putSpeechandtextanalyticsProgramMappings(programId, body)",
      "parameters": [
        {
          "name": "programId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ProgramMappings"
    },
    "PUT /api/v2/speechandtextanalytics/settings": {
      "operationId": "putspeechandtextanalyticssettings",
      "functionName": "putSpeechandtextanalyticsSettings",
      "signature": "putSpeechandtextanalyticsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "PUT /api/v2/speechandtextanalytics/topics/{topicId}": {
      "operationId": "putspeechandtextanalyticstopic",
      "functionName": "putSpeechandtextanalyticsTopic",
      "signature": "putSpeechandtextanalyticsTopic(topicId, body)",
      "parameters": [
        {
          "name": "topicId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Topic"
    }
  },
  "stations": {
    "DELETE /api/v2/stations/{stationId}/associateduser": {
      "operationId": "deletestationassociateduser",
      "functionName": "deleteStationAssociateduser",
      "signature": "deleteStationAssociateduser(stationId)",
      "parameters": [
        {
          "name": "stationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/stations/{stationId}": {
      "operationId": "getstation",
      "functionName": "getStation",
      "signature": "getStation(stationId)",
      "parameters": [
        {
          "name": "stationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Station"
    },
    "GET /api/v2/stations": {
      "operationId": "getstations",
      "functionName": "getStations",
      "signature": "getStations(pageSize, pageNumber, sortBy, name, userSelectable, webRtcUserId, id, lineAppearanceId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "userSelectable",
          "type": "String",
          "required": "false"
        },
        {
          "name": "webRtcUserId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "String",
          "required": "false"
        },
        {
          "name": "lineAppearanceId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "StationEntityListing"
    },
    "GET /api/v2/stations/settings": {
      "operationId": "getstationssettings",
      "functionName": "getStationsSettings",
      "signature": "getStationsSettings()",
      "return": "StationSettings"
    },
    "PATCH /api/v2/stations/settings": {
      "operationId": "patchstationssettings",
      "functionName": "patchStationsSettings",
      "signature": "patchStationsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "StationSettings"
    }
  },
  "suggest": {
    "GET /api/v2/search": {
      "operationId": "getsearch",
      "functionName": "getSearch",
      "signature": "getSearch(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/search/suggest": {
      "operationId": "getsearchsuggest",
      "functionName": "getSearchSuggest",
      "signature": "getSearchSuggest(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search": {
      "operationId": "postsearch",
      "functionName": "postSearch",
      "signature": "postSearch(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search/suggest": {
      "operationId": "postsearchsuggest",
      "functionName": "postSearchSuggest",
      "signature": "postSearchSuggest(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "profile",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "JsonNodeSearchResponse"
    }
  },
  "telephony": {
    "GET /api/v2/telephony/siptraces": {
      "operationId": "gettelephonysiptraces",
      "functionName": "getTelephonySiptraces",
      "signature": "getTelephonySiptraces(dateStart, dateEnd, callId, toUser, fromUser, conversationId)",
      "parameters": [
        {
          "name": "dateStart",
          "type": "Date",
          "required": "true"
        },
        {
          "name": "dateEnd",
          "type": "Date",
          "required": "true"
        },
        {
          "name": "callId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "toUser",
          "type": "String",
          "required": "false"
        },
        {
          "name": "fromUser",
          "type": "String",
          "required": "false"
        },
        {
          "name": "conversationId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "SipSearchResult"
    },
    "GET /api/v2/telephony/siptraces/download/{downloadId}": {
      "operationId": "gettelephonysiptracesdownloaddownloadid",
      "functionName": "getTelephonySiptracesDownloadDownloadId",
      "signature": "getTelephonySiptracesDownloadDownloadId(downloadId)",
      "parameters": [
        {
          "name": "downloadId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SignedUrlResponse"
    },
    "POST /api/v2/telephony/siptraces/download": {
      "operationId": "posttelephonysiptracesdownload",
      "functionName": "postTelephonySiptracesDownload",
      "signature": "postTelephonySiptracesDownload(sIPSearchPublicRequest)",
      "parameters": [
        {
          "name": "sIPSearchPublicRequest",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SipDownloadResponse"
    }
  },
  "telephonyprovidersedge": {
    "DELETE /api/v2/telephony/providers/edges/{edgeId}": {
      "operationId": "deletetelephonyprovidersedge",
      "functionName": "deleteTelephonyProvidersEdge",
      "signature": "deleteTelephonyProvidersEdge(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "operationId": "deletetelephonyprovidersedgelogicalinterface",
      "functionName": "deleteTelephonyProvidersEdgeLogicalinterface",
      "signature": "deleteTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "interfaceId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "operationId": "deletetelephonyprovidersedgesoftwareupdate",
      "functionName": "deleteTelephonyProvidersEdgeSoftwareupdate",
      "signature": "deleteTelephonyProvidersEdgeSoftwareupdate(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "operationId": "deletetelephonyprovidersedgescertificateauthority",
      "functionName": "deleteTelephonyProvidersEdgesCertificateauthority",
      "signature": "deleteTelephonyProvidersEdgesCertificateauthority(certificateId)",
      "parameters": [
        {
          "name": "certificateId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "operationId": "deletetelephonyprovidersedgesdidpool",
      "functionName": "deleteTelephonyProvidersEdgesDidpool",
      "signature": "deleteTelephonyProvidersEdgesDidpool(didPoolId)",
      "parameters": [
        {
          "name": "didPoolId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "operationId": "deletetelephonyprovidersedgesedgegroup",
      "functionName": "deleteTelephonyProvidersEdgesEdgegroup",
      "signature": "deleteTelephonyProvidersEdgesEdgegroup(edgeGroupId)",
      "parameters": [
        {
          "name": "edgeGroupId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "operationId": "deletetelephonyprovidersedgesextensionpool",
      "functionName": "deleteTelephonyProvidersEdgesExtensionpool",
      "signature": "deleteTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
      "parameters": [
        {
          "name": "extensionPoolId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "operationId": "deletetelephonyprovidersedgesoutboundroute",
      "functionName": "deleteTelephonyProvidersEdgesOutboundroute",
      "signature": "deleteTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
      "parameters": [
        {
          "name": "outboundRouteId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "operationId": "deletetelephonyprovidersedgesphone",
      "functionName": "deleteTelephonyProvidersEdgesPhone",
      "signature": "deleteTelephonyProvidersEdgesPhone(phoneId)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "operationId": "deletetelephonyprovidersedgesphonebasesetting",
      "functionName": "deleteTelephonyProvidersEdgesPhonebasesetting",
      "signature": "deleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
      "parameters": [
        {
          "name": "phoneBaseId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/sites/{siteId}": {
      "operationId": "deletetelephonyprovidersedgessite",
      "functionName": "deleteTelephonyProvidersEdgesSite",
      "signature": "deleteTelephonyProvidersEdgesSite(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "operationId": "deletetelephonyprovidersedgessiteoutboundroute",
      "functionName": "deleteTelephonyProvidersEdgesSiteOutboundroute",
      "signature": "deleteTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "outboundRouteId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "operationId": "deletetelephonyprovidersedgestrunkbasesetting",
      "functionName": "deleteTelephonyProvidersEdgesTrunkbasesetting",
      "signature": "deleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId)",
      "parameters": [
        {
          "name": "trunkBaseSettingsId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/configuration/schemas/edges/vnext": {
      "operationId": "getconfigurationschemasedgesvnext",
      "functionName": "getConfigurationSchemasEdgesVnext",
      "signature": "getConfigurationSchemasEdgesVnext(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "SchemaCategoryEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}": {
      "operationId": "getconfigurationschemasedgesvnextschemacategory",
      "functionName": "getConfigurationSchemasEdgesVnextSchemaCategory",
      "signature": "getConfigurationSchemasEdgesVnextSchemaCategory(schemaCategory, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "SchemaReferenceEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}": {
      "operationId": "getconfigurationschemasedgesvnextschemacategoryschematype",
      "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaType",
      "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaType(schemaCategory, schemaType, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "String",
          "required": "true"
        },
        {
          "name": "schemaType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "SchemaReferenceEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}": {
      "operationId": "getconfigurationschemasedgesvnextschemacategoryschematypeschemaid",
      "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId",
      "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId(schemaCategory, schemaType, schemaId)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "String",
          "required": "true"
        },
        {
          "name": "schemaType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Organization"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}/{extensionType}/{metadataId}": {
      "operationId": "getconfigurationschemasedgesvnextschemacategoryschematypeschemaidextensiontypemetadataid",
      "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId",
      "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId(schemaCategory, schemaType, schemaId, extensionType, metadataId, type)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "String",
          "required": "true"
        },
        {
          "name": "schemaType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "schemaId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "extensionType",
          "type": "String",
          "required": "true"
        },
        {
          "name": "metadataId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "type",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "Organization"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}": {
      "operationId": "gettelephonyprovidersedge",
      "functionName": "getTelephonyProvidersEdge",
      "signature": "getTelephonyProvidersEdge(edgeId, expand)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Edge"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup": {
      "operationId": "gettelephonyprovidersedgediagnosticnslookup",
      "functionName": "getTelephonyProvidersEdgeDiagnosticNslookup",
      "signature": "getTelephonyProvidersEdgeDiagnosticNslookup(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping": {
      "operationId": "gettelephonyprovidersedgediagnosticping",
      "functionName": "getTelephonyProvidersEdgeDiagnosticPing",
      "signature": "getTelephonyProvidersEdgeDiagnosticPing(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/route": {
      "operationId": "gettelephonyprovidersedgediagnosticroute",
      "functionName": "getTelephonyProvidersEdgeDiagnosticRoute",
      "signature": "getTelephonyProvidersEdgeDiagnosticRoute(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath": {
      "operationId": "gettelephonyprovidersedgediagnostictracepath",
      "functionName": "getTelephonyProvidersEdgeDiagnosticTracepath",
      "signature": "getTelephonyProvidersEdgeDiagnosticTracepath(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}": {
      "operationId": "gettelephonyprovidersedgeline",
      "functionName": "getTelephonyProvidersEdgeLine",
      "signature": "getTelephonyProvidersEdgeLine(edgeId, lineId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "lineId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeLine"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/lines": {
      "operationId": "gettelephonyprovidersedgelines",
      "functionName": "getTelephonyProvidersEdgeLines",
      "signature": "getTelephonyProvidersEdgeLines(edgeId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "EdgeLineEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "operationId": "gettelephonyprovidersedgelogicalinterface",
      "functionName": "getTelephonyProvidersEdgeLogicalinterface",
      "signature": "getTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, expand)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "interfaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces": {
      "operationId": "gettelephonyprovidersedgelogicalinterfaces",
      "functionName": "getTelephonyProvidersEdgeLogicalinterfaces",
      "signature": "getTelephonyProvidersEdgeLogicalinterfaces(edgeId, expand)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LogicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}": {
      "operationId": "gettelephonyprovidersedgelogsjob",
      "functionName": "getTelephonyProvidersEdgeLogsJob",
      "signature": "getTelephonyProvidersEdgeLogsJob(edgeId, jobId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeLogsJob"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/metrics": {
      "operationId": "gettelephonyprovidersedgemetrics",
      "functionName": "getTelephonyProvidersEdgeMetrics",
      "signature": "getTelephonyProvidersEdgeMetrics(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeMetrics"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces/{interfaceId}": {
      "operationId": "gettelephonyprovidersedgephysicalinterface",
      "functionName": "getTelephonyProvidersEdgePhysicalinterface",
      "signature": "getTelephonyProvidersEdgePhysicalinterface(edgeId, interfaceId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "interfaceId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DomainPhysicalInterface"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces": {
      "operationId": "gettelephonyprovidersedgephysicalinterfaces",
      "functionName": "getTelephonyProvidersEdgePhysicalinterfaces",
      "signature": "getTelephonyProvidersEdgePhysicalinterfaces(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PhysicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/setuppackage": {
      "operationId": "gettelephonyprovidersedgesetuppackage",
      "functionName": "getTelephonyProvidersEdgeSetuppackage",
      "signature": "getTelephonyProvidersEdgeSetuppackage(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "VmPairingInfo"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "operationId": "gettelephonyprovidersedgesoftwareupdate",
      "functionName": "getTelephonyProvidersEdgeSoftwareupdate",
      "signature": "getTelephonyProvidersEdgeSoftwareupdate(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DomainEdgeSoftwareUpdateDto"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/softwareversions": {
      "operationId": "gettelephonyprovidersedgesoftwareversions",
      "functionName": "getTelephonyProvidersEdgeSoftwareversions",
      "signature": "getTelephonyProvidersEdgeSoftwareversions(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DomainEdgeSoftwareVersionDtoEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/trunks": {
      "operationId": "gettelephonyprovidersedgetrunks",
      "functionName": "getTelephonyProvidersEdgeTrunks",
      "signature": "getTelephonyProvidersEdgeTrunks(edgeId, pageNumber, pageSize, sortBy, sortOrder, trunkBaseId, trunkType)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "trunkBaseId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "trunkType",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TrunkEntityListing"
    },
    "GET /api/v2/telephony/providers/edges": {
      "operationId": "gettelephonyprovidersedges",
      "functionName": "getTelephonyProvidersEdges",
      "signature": "getTelephonyProvidersEdges(pageSize, pageNumber, name, siteId, edgeGroupId, sortBy, managed)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "siteId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "edgeGroupId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "managed",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "EdgeEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/availablelanguages": {
      "operationId": "gettelephonyprovidersedgesavailablelanguages",
      "functionName": "getTelephonyProvidersEdgesAvailablelanguages",
      "signature": "getTelephonyProvidersEdgesAvailablelanguages()",
      "return": "AvailableLanguageList"
    },
    "GET /api/v2/telephony/providers/edges/certificateauthorities": {
      "operationId": "gettelephonyprovidersedgescertificateauthorities",
      "functionName": "getTelephonyProvidersEdgesCertificateauthorities",
      "signature": "getTelephonyProvidersEdgesCertificateauthorities()",
      "return": "CertificateAuthorityEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "operationId": "gettelephonyprovidersedgescertificateauthority",
      "functionName": "getTelephonyProvidersEdgesCertificateauthority",
      "signature": "getTelephonyProvidersEdgesCertificateauthority(certificateId)",
      "parameters": [
        {
          "name": "certificateId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "GET /api/v2/telephony/providers/edges/dids/{didId}": {
      "operationId": "gettelephonyprovidersedgesdid",
      "functionName": "getTelephonyProvidersEdgesDid",
      "signature": "getTelephonyProvidersEdgesDid(didId)",
      "parameters": [
        {
          "name": "didId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DID"
    },
    "GET /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "operationId": "gettelephonyprovidersedgesdidpool",
      "functionName": "getTelephonyProvidersEdgesDidpool",
      "signature": "getTelephonyProvidersEdgesDidpool(didPoolId)",
      "parameters": [
        {
          "name": "didPoolId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DIDPool"
    },
    "GET /api/v2/telephony/providers/edges/didpools": {
      "operationId": "gettelephonyprovidersedgesdidpools",
      "functionName": "getTelephonyProvidersEdgesDidpools",
      "signature": "getTelephonyProvidersEdgesDidpools(pageSize, pageNumber, sortBy, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DIDPoolEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/didpools/dids": {
      "operationId": "gettelephonyprovidersedgesdidpoolsdids",
      "functionName": "getTelephonyProvidersEdgesDidpoolsDids",
      "signature": "getTelephonyProvidersEdgesDidpoolsDids(type, id, numberMatch, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "type",
          "type": "String",
          "required": "true"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "numberMatch",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DIDNumberEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/dids": {
      "operationId": "gettelephonyprovidersedgesdids",
      "functionName": "getTelephonyProvidersEdgesDids",
      "signature": "getTelephonyProvidersEdgesDids(pageSize, pageNumber, sortBy, sortOrder, phoneNumber, ownerId, didPoolId, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "phoneNumber",
          "type": "String",
          "required": "false"
        },
        {
          "name": "ownerId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "didPoolId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DIDEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "operationId": "gettelephonyprovidersedgesedgegroup",
      "functionName": "getTelephonyProvidersEdgesEdgegroup",
      "signature": "getTelephonyProvidersEdgesEdgegroup(edgeGroupId, expand)",
      "parameters": [
        {
          "name": "edgeGroupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "EdgeGroup"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}": {
      "operationId": "gettelephonyprovidersedgesedgegroupedgetrunkbase",
      "functionName": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
      "signature": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId)",
      "parameters": [
        {
          "name": "edgegroupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "edgetrunkbaseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "EdgeTrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups": {
      "operationId": "gettelephonyprovidersedgesedgegroups",
      "functionName": "getTelephonyProvidersEdgesEdgegroups",
      "signature": "getTelephonyProvidersEdgesEdgegroups(pageSize, pageNumber, name, sortBy, managed)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "managed",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "EdgeGroupEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/edgeversionreport": {
      "operationId": "gettelephonyprovidersedgesedgeversionreport",
      "functionName": "getTelephonyProvidersEdgesEdgeversionreport",
      "signature": "getTelephonyProvidersEdgesEdgeversionreport()",
      "return": "EdgeVersionReport"
    },
    "GET /api/v2/telephony/providers/edges/expired": {
      "operationId": "gettelephonyprovidersedgesexpired",
      "functionName": "getTelephonyProvidersEdgesExpired",
      "signature": "getTelephonyProvidersEdgesExpired()",
      "return": "ExpiredEdgeListing"
    },
    "GET /api/v2/telephony/providers/edges/extensions/{extensionId}": {
      "operationId": "gettelephonyprovidersedgesextension",
      "functionName": "getTelephonyProvidersEdgesExtension",
      "signature": "getTelephonyProvidersEdgesExtension(extensionId)",
      "parameters": [
        {
          "name": "extensionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Extension"
    },
    "GET /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "operationId": "gettelephonyprovidersedgesextensionpool",
      "functionName": "getTelephonyProvidersEdgesExtensionpool",
      "signature": "getTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
      "parameters": [
        {
          "name": "extensionPoolId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ExtensionPool"
    },
    "GET /api/v2/telephony/providers/edges/extensionpools": {
      "operationId": "gettelephonyprovidersedgesextensionpools",
      "functionName": "getTelephonyProvidersEdgesExtensionpools",
      "signature": "getTelephonyProvidersEdgesExtensionpools(pageSize, pageNumber, sortBy, _number)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "_number",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ExtensionPoolEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/extensions": {
      "operationId": "gettelephonyprovidersedgesextensions",
      "functionName": "getTelephonyProvidersEdgesExtensions",
      "signature": "getTelephonyProvidersEdgesExtensions(pageSize, pageNumber, sortBy, sortOrder, _number)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "_number",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ExtensionEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines/{lineId}": {
      "operationId": "gettelephonyprovidersedgesline",
      "functionName": "getTelephonyProvidersEdgesLine",
      "signature": "getTelephonyProvidersEdgesLine(lineId)",
      "parameters": [
        {
          "name": "lineId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Line"
    },
    "GET /api/v2/telephony/providers/edges/linebasesettings/{lineBaseId}": {
      "operationId": "gettelephonyprovidersedgeslinebasesetting",
      "functionName": "getTelephonyProvidersEdgesLinebasesetting",
      "signature": "getTelephonyProvidersEdgesLinebasesetting(lineBaseId)",
      "parameters": [
        {
          "name": "lineBaseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "LineBase"
    },
    "GET /api/v2/telephony/providers/edges/linebasesettings": {
      "operationId": "gettelephonyprovidersedgeslinebasesettings",
      "functionName": "getTelephonyProvidersEdgesLinebasesettings",
      "signature": "getTelephonyProvidersEdgesLinebasesettings(pageNumber, pageSize, sortBy, sortOrder, expand)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LineBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines": {
      "operationId": "gettelephonyprovidersedgeslines",
      "functionName": "getTelephonyProvidersEdgesLines",
      "signature": "getTelephonyProvidersEdgesLines(pageSize, pageNumber, name, sortBy, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LineEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines/template": {
      "operationId": "gettelephonyprovidersedgeslinestemplate",
      "functionName": "getTelephonyProvidersEdgesLinesTemplate",
      "signature": "getTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId)",
      "parameters": [
        {
          "name": "lineBaseSettingsId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Line"
    },
    "GET /api/v2/telephony/providers/edges/logicalinterfaces": {
      "operationId": "gettelephonyprovidersedgeslogicalinterfaces",
      "functionName": "getTelephonyProvidersEdgesLogicalinterfaces",
      "signature": "getTelephonyProvidersEdgesLogicalinterfaces(edgeIds, expand)",
      "parameters": [
        {
          "name": "edgeIds",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "LogicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/metrics": {
      "operationId": "gettelephonyprovidersedgesmetrics",
      "functionName": "getTelephonyProvidersEdgesMetrics",
      "signature": "getTelephonyProvidersEdgesMetrics(edgeIds)",
      "parameters": [
        {
          "name": "edgeIds",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[EdgeMetrics]"
    },
    "GET /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "operationId": "gettelephonyprovidersedgesoutboundroute",
      "functionName": "getTelephonyProvidersEdgesOutboundroute",
      "signature": "getTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
      "parameters": [
        {
          "name": "outboundRouteId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OutboundRoute"
    },
    "GET /api/v2/telephony/providers/edges/outboundroutes": {
      "operationId": "gettelephonyprovidersedgesoutboundroutes",
      "functionName": "getTelephonyProvidersEdgesOutboundroutes",
      "signature": "getTelephonyProvidersEdgesOutboundroutes(pageSize, pageNumber, name, siteId, externalTrunkBasesIds, sortBy)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "siteId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "externalTrunkBasesIds",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OutboundRouteEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "operationId": "gettelephonyprovidersedgesphone",
      "functionName": "getTelephonyProvidersEdgesPhone",
      "signature": "getTelephonyProvidersEdgesPhone(phoneId)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Phone"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "operationId": "gettelephonyprovidersedgesphonebasesetting",
      "functionName": "getTelephonyProvidersEdgesPhonebasesetting",
      "signature": "getTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
      "parameters": [
        {
          "name": "phoneBaseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PhoneBase"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings": {
      "operationId": "gettelephonyprovidersedgesphonebasesettings",
      "functionName": "getTelephonyProvidersEdgesPhonebasesettings",
      "signature": "getTelephonyProvidersEdgesPhonebasesettings(pageSize, pageNumber, sortBy, sortOrder, expand, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "PhoneBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/availablemetabases": {
      "operationId": "gettelephonyprovidersedgesphonebasesettingsavailablemetabases",
      "functionName": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases",
      "signature": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "PhoneMetaBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/template": {
      "operationId": "gettelephonyprovidersedgesphonebasesettingstemplate",
      "functionName": "getTelephonyProvidersEdgesPhonebasesettingsTemplate",
      "signature": "getTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId)",
      "parameters": [
        {
          "name": "phoneMetabaseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PhoneBase"
    },
    "GET /api/v2/telephony/providers/edges/phones": {
      "operationId": "gettelephonyprovidersedgesphones",
      "functionName": "getTelephonyProvidersEdgesPhones",
      "signature": "getTelephonyProvidersEdgesPhones(pageNumber, pageSize, sortBy, sortOrder, siteId, webRtcUserId, phoneBaseSettingsId, linesLoggedInUserId, linesDefaultForUserId, phoneHardwareId, linesId, linesName, name, statusOperationalStatus, secondaryStatusOperationalStatus, expand, fields)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "siteId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "webRtcUserId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "phoneBaseSettingsId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "linesLoggedInUserId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "linesDefaultForUserId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "phoneHardwareId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "linesId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "linesName",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "statusOperationalStatus",
          "type": "String",
          "required": "false"
        },
        {
          "name": "secondaryStatusOperationalStatus",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "fields",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "PhoneEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phones/template": {
      "operationId": "gettelephonyprovidersedgesphonestemplate",
      "functionName": "getTelephonyProvidersEdgesPhonesTemplate",
      "signature": "getTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId)",
      "parameters": [
        {
          "name": "phoneBaseSettingsId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Phone"
    },
    "GET /api/v2/telephony/providers/edges/physicalinterfaces": {
      "operationId": "gettelephonyprovidersedgesphysicalinterfaces",
      "functionName": "getTelephonyProvidersEdgesPhysicalinterfaces",
      "signature": "getTelephonyProvidersEdgesPhysicalinterfaces(edgeIds)",
      "parameters": [
        {
          "name": "edgeIds",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PhysicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}": {
      "operationId": "gettelephonyprovidersedgessite",
      "functionName": "getTelephonyProvidersEdgesSite",
      "signature": "getTelephonyProvidersEdgesSite(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Site"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans/{numberPlanId}": {
      "operationId": "gettelephonyprovidersedgessitenumberplan",
      "functionName": "getTelephonyProvidersEdgesSiteNumberplan",
      "signature": "getTelephonyProvidersEdgesSiteNumberplan(siteId, numberPlanId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "numberPlanId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "NumberPlan"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans": {
      "operationId": "gettelephonyprovidersedgessitenumberplans",
      "functionName": "getTelephonyProvidersEdgesSiteNumberplans",
      "signature": "getTelephonyProvidersEdgesSiteNumberplans(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[NumberPlan]"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans/classifications": {
      "operationId": "gettelephonyprovidersedgessitenumberplansclassifications",
      "functionName": "getTelephonyProvidersEdgesSiteNumberplansClassifications",
      "signature": "getTelephonyProvidersEdgesSiteNumberplansClassifications(siteId, classification)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "classification",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "['String']"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "operationId": "gettelephonyprovidersedgessiteoutboundroute",
      "functionName": "getTelephonyProvidersEdgesSiteOutboundroute",
      "signature": "getTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "outboundRouteId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes": {
      "operationId": "gettelephonyprovidersedgessiteoutboundroutes",
      "functionName": "getTelephonyProvidersEdgesSiteOutboundroutes",
      "signature": "getTelephonyProvidersEdgesSiteOutboundroutes(siteId, pageSize, pageNumber, name, externalTrunkBasesIds, sortBy)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "externalTrunkBasesIds",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "OutboundRouteBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/sites": {
      "operationId": "gettelephonyprovidersedgessites",
      "functionName": "getTelephonyProvidersEdgesSites",
      "signature": "getTelephonyProvidersEdgesSites(pageSize, pageNumber, sortBy, sortOrder, name, locationId, managed)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        },
        {
          "name": "locationId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "managed",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "SiteEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/timezones": {
      "operationId": "gettelephonyprovidersedgestimezones",
      "functionName": "getTelephonyProvidersEdgesTimezones",
      "signature": "getTelephonyProvidersEdgesTimezones(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TimeZoneEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunks/{trunkId}": {
      "operationId": "gettelephonyprovidersedgestrunk",
      "functionName": "getTelephonyProvidersEdgesTrunk",
      "signature": "getTelephonyProvidersEdgesTrunk(trunkId)",
      "parameters": [
        {
          "name": "trunkId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Trunk"
    },
    "GET /api/v2/telephony/providers/edges/trunks/{trunkId}/metrics": {
      "operationId": "gettelephonyprovidersedgestrunkmetrics",
      "functionName": "getTelephonyProvidersEdgesTrunkMetrics",
      "signature": "getTelephonyProvidersEdgesTrunkMetrics(trunkId)",
      "parameters": [
        {
          "name": "trunkId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TrunkMetrics"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "operationId": "gettelephonyprovidersedgestrunkbasesetting",
      "functionName": "getTelephonyProvidersEdgesTrunkbasesetting",
      "signature": "getTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, ignoreHidden)",
      "parameters": [
        {
          "name": "trunkBaseSettingsId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "ignoreHidden",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "TrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings": {
      "operationId": "gettelephonyprovidersedgestrunkbasesettings",
      "functionName": "getTelephonyProvidersEdgesTrunkbasesettings",
      "signature": "getTelephonyProvidersEdgesTrunkbasesettings(pageNumber, pageSize, sortBy, sortOrder, recordingEnabled, ignoreHidden, managed, expand, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "recordingEnabled",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "ignoreHidden",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "managed",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TrunkBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/availablemetabases": {
      "operationId": "gettelephonyprovidersedgestrunkbasesettingsavailablemetabases",
      "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases",
      "signature": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(type, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "type",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TrunkMetabaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/template": {
      "operationId": "gettelephonyprovidersedgestrunkbasesettingstemplate",
      "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate",
      "signature": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId)",
      "parameters": [
        {
          "name": "trunkMetabaseId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/trunks": {
      "operationId": "gettelephonyprovidersedgestrunks",
      "functionName": "getTelephonyProvidersEdgesTrunks",
      "signature": "getTelephonyProvidersEdgesTrunks(pageNumber, pageSize, sortBy, sortOrder, edgeId, trunkBaseId, trunkType)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortBy",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "edgeId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "trunkBaseId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "trunkType",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TrunkEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunks/metrics": {
      "operationId": "gettelephonyprovidersedgestrunksmetrics",
      "functionName": "getTelephonyProvidersEdgesTrunksMetrics",
      "signature": "getTelephonyProvidersEdgesTrunksMetrics(trunkIds)",
      "parameters": [
        {
          "name": "trunkIds",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "[TrunkMetrics]"
    },
    "GET /api/v2/telephony/providers/edges/trunkswithrecording": {
      "operationId": "gettelephonyprovidersedgestrunkswithrecording",
      "functionName": "getTelephonyProvidersEdgesTrunkswithrecording",
      "signature": "getTelephonyProvidersEdgesTrunkswithrecording(trunkType)",
      "parameters": [
        {
          "name": "trunkType",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "TrunkRecordingEnabledCount"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup": {
      "operationId": "posttelephonyprovidersedgediagnosticnslookup",
      "functionName": "postTelephonyProvidersEdgeDiagnosticNslookup",
      "signature": "postTelephonyProvidersEdgeDiagnosticNslookup(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping": {
      "operationId": "posttelephonyprovidersedgediagnosticping",
      "functionName": "postTelephonyProvidersEdgeDiagnosticPing",
      "signature": "postTelephonyProvidersEdgeDiagnosticPing(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/route": {
      "operationId": "posttelephonyprovidersedgediagnosticroute",
      "functionName": "postTelephonyProvidersEdgeDiagnosticRoute",
      "signature": "postTelephonyProvidersEdgeDiagnosticRoute(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath": {
      "operationId": "posttelephonyprovidersedgediagnostictracepath",
      "functionName": "postTelephonyProvidersEdgeDiagnosticTracepath",
      "signature": "postTelephonyProvidersEdgeDiagnosticTracepath(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces": {
      "operationId": "posttelephonyprovidersedgelogicalinterfaces",
      "functionName": "postTelephonyProvidersEdgeLogicalinterfaces",
      "signature": "postTelephonyProvidersEdgeLogicalinterfaces(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}/upload": {
      "operationId": "posttelephonyprovidersedgelogsjobupload",
      "functionName": "postTelephonyProvidersEdgeLogsJobUpload",
      "signature": "postTelephonyProvidersEdgeLogsJobUpload(edgeId, jobId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logs/jobs": {
      "operationId": "posttelephonyprovidersedgelogsjobs",
      "functionName": "postTelephonyProvidersEdgeLogsJobs",
      "signature": "postTelephonyProvidersEdgeLogsJobs(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeLogsJobResponse"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/reboot": {
      "operationId": "posttelephonyprovidersedgereboot",
      "functionName": "postTelephonyProvidersEdgeReboot",
      "signature": "postTelephonyProvidersEdgeReboot(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "'String'"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "operationId": "posttelephonyprovidersedgesoftwareupdate",
      "functionName": "postTelephonyProvidersEdgeSoftwareupdate",
      "signature": "postTelephonyProvidersEdgeSoftwareupdate(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainEdgeSoftwareUpdateDto"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/statuscode": {
      "operationId": "posttelephonyprovidersedgestatuscode",
      "functionName": "postTelephonyProvidersEdgeStatuscode",
      "signature": "postTelephonyProvidersEdgeStatuscode(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "'String'"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/unpair": {
      "operationId": "posttelephonyprovidersedgeunpair",
      "functionName": "postTelephonyProvidersEdgeUnpair",
      "signature": "postTelephonyProvidersEdgeUnpair(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "POST /api/v2/telephony/providers/edges": {
      "operationId": "posttelephonyprovidersedges",
      "functionName": "postTelephonyProvidersEdges",
      "signature": "postTelephonyProvidersEdges(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Edge"
    },
    "POST /api/v2/telephony/providers/edges/addressvalidation": {
      "operationId": "posttelephonyprovidersedgesaddressvalidation",
      "functionName": "postTelephonyProvidersEdgesAddressvalidation",
      "signature": "postTelephonyProvidersEdgesAddressvalidation(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ValidateAddressResponse"
    },
    "POST /api/v2/telephony/providers/edges/certificateauthorities": {
      "operationId": "posttelephonyprovidersedgescertificateauthorities",
      "functionName": "postTelephonyProvidersEdgesCertificateauthorities",
      "signature": "postTelephonyProvidersEdgesCertificateauthorities(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "POST /api/v2/telephony/providers/edges/didpools": {
      "operationId": "posttelephonyprovidersedgesdidpools",
      "functionName": "postTelephonyProvidersEdgesDidpools",
      "signature": "postTelephonyProvidersEdgesDidpools(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DIDPool"
    },
    "POST /api/v2/telephony/providers/edges/edgegroups": {
      "operationId": "posttelephonyprovidersedgesedgegroups",
      "functionName": "postTelephonyProvidersEdgesEdgegroups",
      "signature": "postTelephonyProvidersEdgesEdgegroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeGroup"
    },
    "POST /api/v2/telephony/providers/edges/extensionpools": {
      "operationId": "posttelephonyprovidersedgesextensionpools",
      "functionName": "postTelephonyProvidersEdgesExtensionpools",
      "signature": "postTelephonyProvidersEdgesExtensionpools(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ExtensionPool"
    },
    "POST /api/v2/telephony/providers/edges/outboundroutes": {
      "operationId": "posttelephonyprovidersedgesoutboundroutes",
      "functionName": "postTelephonyProvidersEdgesOutboundroutes",
      "signature": "postTelephonyProvidersEdgesOutboundroutes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OutboundRoute"
    },
    "POST /api/v2/telephony/providers/edges/phones/{phoneId}/reboot": {
      "operationId": "posttelephonyprovidersedgesphonereboot",
      "functionName": "postTelephonyProvidersEdgesPhoneReboot",
      "signature": "postTelephonyProvidersEdgesPhoneReboot(phoneId)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/phonebasesettings": {
      "operationId": "posttelephonyprovidersedgesphonebasesettings",
      "functionName": "postTelephonyProvidersEdgesPhonebasesettings",
      "signature": "postTelephonyProvidersEdgesPhonebasesettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "PhoneBase"
    },
    "POST /api/v2/telephony/providers/edges/phones": {
      "operationId": "posttelephonyprovidersedgesphones",
      "functionName": "postTelephonyProvidersEdgesPhones",
      "signature": "postTelephonyProvidersEdgesPhones(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Phone"
    },
    "POST /api/v2/telephony/providers/edges/phones/reboot": {
      "operationId": "posttelephonyprovidersedgesphonesreboot",
      "functionName": "postTelephonyProvidersEdgesPhonesReboot",
      "signature": "postTelephonyProvidersEdgesPhonesReboot(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes": {
      "operationId": "posttelephonyprovidersedgessiteoutboundroutes",
      "functionName": "postTelephonyProvidersEdgesSiteOutboundroutes",
      "signature": "postTelephonyProvidersEdgesSiteOutboundroutes(siteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "POST /api/v2/telephony/providers/edges/sites/{siteId}/rebalance": {
      "operationId": "posttelephonyprovidersedgessiterebalance",
      "functionName": "postTelephonyProvidersEdgesSiteRebalance",
      "signature": "postTelephonyProvidersEdgesSiteRebalance(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/sites": {
      "operationId": "posttelephonyprovidersedgessites",
      "functionName": "postTelephonyProvidersEdgesSites",
      "signature": "postTelephonyProvidersEdgesSites(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Site"
    },
    "POST /api/v2/telephony/providers/edges/trunkbasesettings": {
      "operationId": "posttelephonyprovidersedgestrunkbasesettings",
      "functionName": "postTelephonyProvidersEdgesTrunkbasesettings",
      "signature": "postTelephonyProvidersEdgesTrunkbasesettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TrunkBase"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}": {
      "operationId": "puttelephonyprovidersedge",
      "functionName": "putTelephonyProvidersEdge",
      "signature": "putTelephonyProvidersEdge(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Edge"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}": {
      "operationId": "puttelephonyprovidersedgeline",
      "functionName": "putTelephonyProvidersEdgeLine",
      "signature": "putTelephonyProvidersEdgeLine(edgeId, lineId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "lineId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeLine"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "operationId": "puttelephonyprovidersedgelogicalinterface",
      "functionName": "putTelephonyProvidersEdgeLogicalinterface",
      "signature": "putTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "interfaceId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "PUT /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "operationId": "puttelephonyprovidersedgescertificateauthority",
      "functionName": "putTelephonyProvidersEdgesCertificateauthority",
      "signature": "putTelephonyProvidersEdgesCertificateauthority(certificateId, body)",
      "parameters": [
        {
          "name": "certificateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "PUT /api/v2/telephony/providers/edges/dids/{didId}": {
      "operationId": "puttelephonyprovidersedgesdid",
      "functionName": "putTelephonyProvidersEdgesDid",
      "signature": "putTelephonyProvidersEdgesDid(didId, body)",
      "parameters": [
        {
          "name": "didId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DID"
    },
    "PUT /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "operationId": "puttelephonyprovidersedgesdidpool",
      "functionName": "putTelephonyProvidersEdgesDidpool",
      "signature": "putTelephonyProvidersEdgesDidpool(didPoolId, body)",
      "parameters": [
        {
          "name": "didPoolId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DIDPool"
    },
    "PUT /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "operationId": "puttelephonyprovidersedgesedgegroup",
      "functionName": "putTelephonyProvidersEdgesEdgegroup",
      "signature": "putTelephonyProvidersEdgesEdgegroup(edgeGroupId, body)",
      "parameters": [
        {
          "name": "edgeGroupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeGroup"
    },
    "PUT /api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}": {
      "operationId": "puttelephonyprovidersedgesedgegroupedgetrunkbase",
      "functionName": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
      "signature": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, body)",
      "parameters": [
        {
          "name": "edgegroupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "edgetrunkbaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "EdgeTrunkBase"
    },
    "PUT /api/v2/telephony/providers/edges/extensions/{extensionId}": {
      "operationId": "puttelephonyprovidersedgesextension",
      "functionName": "putTelephonyProvidersEdgesExtension",
      "signature": "putTelephonyProvidersEdgesExtension(extensionId, body)",
      "parameters": [
        {
          "name": "extensionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Extension"
    },
    "PUT /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "operationId": "puttelephonyprovidersedgesextensionpool",
      "functionName": "putTelephonyProvidersEdgesExtensionpool",
      "signature": "putTelephonyProvidersEdgesExtensionpool(extensionPoolId, body)",
      "parameters": [
        {
          "name": "extensionPoolId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ExtensionPool"
    },
    "PUT /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "operationId": "puttelephonyprovidersedgesoutboundroute",
      "functionName": "putTelephonyProvidersEdgesOutboundroute",
      "signature": "putTelephonyProvidersEdgesOutboundroute(outboundRouteId, body)",
      "parameters": [
        {
          "name": "outboundRouteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OutboundRoute"
    },
    "PUT /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "operationId": "puttelephonyprovidersedgesphone",
      "functionName": "putTelephonyProvidersEdgesPhone",
      "signature": "putTelephonyProvidersEdgesPhone(phoneId, body)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Phone"
    },
    "PUT /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "operationId": "puttelephonyprovidersedgesphonebasesetting",
      "functionName": "putTelephonyProvidersEdgesPhonebasesetting",
      "signature": "putTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, body)",
      "parameters": [
        {
          "name": "phoneBaseId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "PhoneBase"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}": {
      "operationId": "puttelephonyprovidersedgessite",
      "functionName": "putTelephonyProvidersEdgesSite",
      "signature": "putTelephonyProvidersEdgesSite(siteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Site"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}/numberplans": {
      "operationId": "puttelephonyprovidersedgessitenumberplans",
      "functionName": "putTelephonyProvidersEdgesSiteNumberplans",
      "signature": "putTelephonyProvidersEdgesSiteNumberplans(siteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "[NumberPlan]"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "operationId": "puttelephonyprovidersedgessiteoutboundroute",
      "functionName": "putTelephonyProvidersEdgesSiteOutboundroute",
      "signature": "putTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "outboundRouteId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "PUT /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "operationId": "puttelephonyprovidersedgestrunkbasesetting",
      "functionName": "putTelephonyProvidersEdgesTrunkbasesetting",
      "signature": "putTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body)",
      "parameters": [
        {
          "name": "trunkBaseSettingsId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TrunkBase"
    }
  },
  "textbots": {
    "GET /api/v2/textbots/bots/search": {
      "operationId": "gettextbotsbotssearch",
      "functionName": "getTextbotsBotsSearch",
      "signature": "getTextbotsBotsSearch(botType, botName, botId, pageSize)",
      "parameters": [
        {
          "name": "botType",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "botName",
          "type": "String",
          "required": "false"
        },
        {
          "name": "botId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "BotSearchResponseEntityListing"
    },
    "POST /api/v2/textbots/botflows/sessions/{sessionId}/turns": {
      "operationId": "posttextbotsbotflowssessionturns",
      "functionName": "postTextbotsBotflowsSessionTurns",
      "signature": "postTextbotsBotflowsSessionTurns(sessionId, turnRequest)",
      "parameters": [
        {
          "name": "sessionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "turnRequest",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TextBotFlowTurnResponse"
    },
    "POST /api/v2/textbots/botflows/sessions": {
      "operationId": "posttextbotsbotflowssessions",
      "functionName": "postTextbotsBotflowsSessions",
      "signature": "postTextbotsBotflowsSessions(launchRequest)",
      "parameters": [
        {
          "name": "launchRequest",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "TextBotFlowLaunchResponse"
    },
    "POST /api/v2/textbots/bots/execute": {
      "operationId": "posttextbotsbotsexecute",
      "functionName": "postTextbotsBotsExecute",
      "signature": "postTextbotsBotsExecute(postTextRequest)",
      "parameters": [
        {
          "name": "postTextRequest",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "PostTextResponse"
    }
  },
  "tokens": {
    "DELETE /api/v2/tokens/{userId}": {
      "operationId": "deletetoken",
      "functionName": "deleteToken",
      "signature": "deleteToken(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/tokens/me": {
      "operationId": "deletetokensme",
      "functionName": "deleteTokensMe",
      "signature": "deleteTokensMe()"
    },
    "GET /api/v2/tokens/me": {
      "operationId": "gettokensme",
      "functionName": "getTokensMe",
      "signature": "getTokensMe()",
      "return": "TokenInfo"
    },
    "HEAD /api/v2/tokens/me": {
      "operationId": "headtokensme",
      "functionName": "headTokensMe",
      "signature": "headTokensMe()"
    }
  },
  "uploads": {
    "POST /api/v2/knowledge/documentuploads": {
      "operationId": "postknowledgedocumentuploads",
      "functionName": "postKnowledgeDocumentuploads",
      "signature": "postKnowledgeDocumentuploads(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/uploads": {
      "operationId": "postlanguageunderstandingmineruploads",
      "functionName": "postLanguageunderstandingMinerUploads",
      "signature": "postLanguageunderstandingMinerUploads(minerId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/publicassets/images": {
      "operationId": "postuploadspublicassetsimages",
      "functionName": "postUploadsPublicassetsImages",
      "signature": "postUploadsPublicassetsImages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/recordings": {
      "operationId": "postuploadsrecordings",
      "functionName": "postUploadsRecordings",
      "signature": "postUploadsRecordings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/workforcemanagement/historicaldata/csv": {
      "operationId": "postuploadsworkforcemanagementhistoricaldatacsv",
      "functionName": "postUploadsWorkforcemanagementHistoricaldataCsv",
      "signature": "postUploadsWorkforcemanagementHistoricaldataCsv(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/workforcemanagement/historicaldata/json": {
      "operationId": "postuploadsworkforcemanagementhistoricaldatajson",
      "functionName": "postUploadsWorkforcemanagementHistoricaldataJson",
      "signature": "postUploadsWorkforcemanagementHistoricaldataJson(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UploadUrlResponse"
    }
  },
  "usage": {
    "GET /api/v2/usage/query/{executionId}/results": {
      "operationId": "getusagequeryexecutionidresults",
      "functionName": "getUsageQueryExecutionIdResults",
      "signature": "getUsageQueryExecutionIdResults(executionId)",
      "parameters": [
        {
          "name": "executionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ApiUsageQueryResult"
    },
    "POST /api/v2/usage/query": {
      "operationId": "postusagequery",
      "functionName": "postUsageQuery",
      "signature": "postUsageQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UsageExecutionResult"
    }
  },
  "userrecordings": {
    "DELETE /api/v2/userrecordings/{recordingId}": {
      "operationId": "deleteuserrecording",
      "functionName": "deleteUserrecording",
      "signature": "deleteUserrecording(recordingId)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/userrecordings/{recordingId}": {
      "operationId": "getuserrecording",
      "functionName": "getUserrecording",
      "signature": "getUserrecording(recordingId, expand)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserRecording"
    },
    "GET /api/v2/userrecordings/{recordingId}/media": {
      "operationId": "getuserrecordingmedia",
      "functionName": "getUserrecordingMedia",
      "signature": "getUserrecordingMedia(recordingId, formatId)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "formatId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/userrecordings": {
      "operationId": "getuserrecordings",
      "functionName": "getUserrecordings",
      "signature": "getUserrecordings(pageSize, pageNumber, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserRecordingEntityListing"
    },
    "GET /api/v2/userrecordings/summary": {
      "operationId": "getuserrecordingssummary",
      "functionName": "getUserrecordingsSummary",
      "signature": "getUserrecordingsSummary()",
      "return": "FaxSummary"
    },
    "PUT /api/v2/userrecordings/{recordingId}": {
      "operationId": "putuserrecording",
      "functionName": "putUserrecording",
      "signature": "putUserrecording(recordingId, body, expand)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserRecording"
    }
  },
  "users": {
    "DELETE /api/v2/analytics/users/details/jobs/{jobId}": {
      "operationId": "deleteanalyticsusersdetailsjob",
      "functionName": "deleteAnalyticsUsersDetailsJob",
      "signature": "deleteAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "operationId": "deleteauthorizationsubjectdivisionrole",
      "functionName": "deleteAuthorizationSubjectDivisionRole",
      "signature": "deleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/routing/users/{userId}/utilization": {
      "operationId": "deleteroutinguserutilization",
      "functionName": "deleteRoutingUserUtilization",
      "signature": "deleteRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}": {
      "operationId": "deleteuser",
      "functionName": "deleteUser",
      "signature": "deleteUser(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "operationId": "deleteuserroutinglanguage",
      "functionName": "deleteUserRoutinglanguage",
      "signature": "deleteUserRoutinglanguage(userId, languageId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routingskills/{skillId}": {
      "operationId": "deleteuserroutingskill",
      "functionName": "deleteUserRoutingskill",
      "signature": "deleteUserRoutingskill(userId, skillId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "skillId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/station/associatedstation": {
      "operationId": "deleteuserstationassociatedstation",
      "functionName": "deleteUserStationAssociatedstation",
      "signature": "deleteUserStationAssociatedstation(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/station/defaultstation": {
      "operationId": "deleteuserstationdefaultstation",
      "functionName": "deleteUserStationDefaultstation",
      "signature": "deleteUserStationDefaultstation(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}": {
      "operationId": "getanalyticsusersdetailsjob",
      "functionName": "getAnalyticsUsersDetailsJob",
      "signature": "getAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}/results": {
      "operationId": "getanalyticsusersdetailsjobresults",
      "functionName": "getAnalyticsUsersDetailsJobResults",
      "signature": "getAnalyticsUsersDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "cursor",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "AnalyticsUserDetailsAsyncQueryResponse"
    },
    "GET /api/v2/analytics/users/details/jobs/availability": {
      "operationId": "getanalyticsusersdetailsjobsavailability",
      "functionName": "getAnalyticsUsersDetailsJobsAvailability",
      "signature": "getAnalyticsUsersDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/authorization/divisionspermitted/me": {
      "operationId": "getauthorizationdivisionspermittedme",
      "functionName": "getAuthorizationDivisionspermittedMe",
      "signature": "getAuthorizationDivisionspermittedMe(permission, name)",
      "parameters": [
        {
          "name": "permission",
          "type": "String",
          "required": "true"
        },
        {
          "name": "name",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "[AuthzDivision]"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/me": {
      "operationId": "getauthorizationdivisionspermittedpagedme",
      "functionName": "getAuthorizationDivisionspermittedPagedMe",
      "signature": "getAuthorizationDivisionspermittedPagedMe(permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "permission",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/{subjectId}": {
      "operationId": "getauthorizationdivisionspermittedpagedsubjectid",
      "functionName": "getAuthorizationDivisionspermittedPagedSubjectId",
      "signature": "getAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "permission",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/subjects/{subjectId}": {
      "operationId": "getauthorizationsubject",
      "functionName": "getAuthorizationSubject",
      "signature": "getAuthorizationSubject(subjectId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/me": {
      "operationId": "getauthorizationsubjectsme",
      "functionName": "getAuthorizationSubjectsMe",
      "signature": "getAuthorizationSubjectsMe()",
      "return": "AuthzSubject"
    },
    "GET /api/v2/fieldconfig": {
      "operationId": "getfieldconfig",
      "functionName": "getFieldconfig",
      "signature": "getFieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/profiles/users": {
      "operationId": "getprofilesusers",
      "functionName": "getProfilesUsers",
      "signature": "getProfilesUsers(pageSize, pageNumber, id, jid, sortOrder, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "jid",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "integrationPresenceSource",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserProfileEntityListing"
    },
    "GET /api/v2/routing/users/{userId}/utilization": {
      "operationId": "getroutinguserutilization",
      "functionName": "getRoutingUserUtilization",
      "signature": "getRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "GET /api/v2/users/{userId}": {
      "operationId": "getuser",
      "functionName": "getUser",
      "signature": "getUser(userId, expand, integrationPresenceSource, state)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "integrationPresenceSource",
          "type": "String",
          "required": "false"
        },
        {
          "name": "state",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "User"
    },
    "GET /api/v2/users/{userId}/adjacents": {
      "operationId": "getuseradjacents",
      "functionName": "getUserAdjacents",
      "signature": "getUserAdjacents(userId, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "Adjacents"
    },
    "GET /api/v2/users/{userId}/callforwarding": {
      "operationId": "getusercallforwarding",
      "functionName": "getUserCallforwarding",
      "signature": "getUserCallforwarding(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "CallForwarding"
    },
    "GET /api/v2/users/{userId}/directreports": {
      "operationId": "getuserdirectreports",
      "functionName": "getUserDirectreports",
      "signature": "getUserDirectreports(userId, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "[User]"
    },
    "GET /api/v2/users/{userId}/favorites": {
      "operationId": "getuserfavorites",
      "functionName": "getUserFavorites",
      "signature": "getUserFavorites(userId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/users/{userId}/geolocations/{clientId}": {
      "operationId": "getusergeolocation",
      "functionName": "getUserGeolocation",
      "signature": "getUserGeolocation(userId, clientId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "Geolocation"
    },
    "GET /api/v2/users/{userId}/outofoffice": {
      "operationId": "getuseroutofoffice",
      "functionName": "getUserOutofoffice",
      "signature": "getUserOutofoffice(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "OutOfOffice"
    },
    "GET /api/v2/users/{userId}/profile": {
      "operationId": "getuserprofile",
      "functionName": "getUserProfile",
      "signature": "getUserProfile(userId, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "integrationPresenceSource",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserProfile"
    },
    "GET /api/v2/users/{userId}/profileskills": {
      "operationId": "getuserprofileskills",
      "functionName": "getUserProfileskills",
      "signature": "getUserProfileskills(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "['String']"
    },
    "GET /api/v2/users/{userId}/queues": {
      "operationId": "getuserqueues",
      "functionName": "getUserQueues",
      "signature": "getUserQueues(userId, pageSize, pageNumber, joined, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "joined",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/users/{userId}/roles": {
      "operationId": "getuserroles",
      "functionName": "getUserRoles",
      "signature": "getUserRoles(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserAuthorization"
    },
    "GET /api/v2/users/{userId}/routinglanguages": {
      "operationId": "getuserroutinglanguages",
      "functionName": "getUserRoutinglanguages",
      "signature": "getUserRoutinglanguages(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "GET /api/v2/users/{userId}/routingskills": {
      "operationId": "getuserroutingskills",
      "functionName": "getUserRoutingskills",
      "signature": "getUserRoutingskills(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "GET /api/v2/users/{userId}/routingstatus": {
      "operationId": "getuserroutingstatus",
      "functionName": "getUserRoutingstatus",
      "signature": "getUserRoutingstatus(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "RoutingStatus"
    },
    "GET /api/v2/users/{userId}/state": {
      "operationId": "getuserstate",
      "functionName": "getUserState",
      "signature": "getUserState(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserState"
    },
    "GET /api/v2/users/{userId}/station": {
      "operationId": "getuserstation",
      "functionName": "getUserStation",
      "signature": "getUserStation(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "UserStations"
    },
    "GET /api/v2/users/{userId}/superiors": {
      "operationId": "getusersuperiors",
      "functionName": "getUserSuperiors",
      "signature": "getUserSuperiors(userId, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "[User]"
    },
    "GET /api/v2/users/{userId}/trustors": {
      "operationId": "getusertrustors",
      "functionName": "getUserTrustors",
      "signature": "getUserTrustors(userId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TrustorEntityListing"
    },
    "GET /api/v2/users": {
      "operationId": "getusers",
      "functionName": "getUsers",
      "signature": "getUsers(pageSize, pageNumber, id, jabberId, sortOrder, expand, integrationPresenceSource, state)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "id",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "jabberId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "integrationPresenceSource",
          "type": "String",
          "required": "false"
        },
        {
          "name": "state",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/users/development/activities": {
      "operationId": "getusersdevelopmentactivities",
      "functionName": "getUsersDevelopmentActivities",
      "signature": "getUsersDevelopmentActivities(userId, moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
      "parameters": [
        {
          "name": "userId",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "moduleId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "interval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "completionInterval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "overdue",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "types",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "statuses",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "relationship",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DevelopmentActivityListing"
    },
    "GET /api/v2/users/development/activities/me": {
      "operationId": "getusersdevelopmentactivitiesme",
      "functionName": "getUsersDevelopmentActivitiesMe",
      "signature": "getUsersDevelopmentActivitiesMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "String",
          "required": "false"
        },
        {
          "name": "interval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "completionInterval",
          "type": "String",
          "required": "false"
        },
        {
          "name": "overdue",
          "type": "String",
          "required": "false"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "types",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "statuses",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "relationship",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "DevelopmentActivityListing"
    },
    "GET /api/v2/users/development/activities/{activityId}": {
      "operationId": "getusersdevelopmentactivity",
      "functionName": "getUsersDevelopmentActivity",
      "signature": "getUsersDevelopmentActivity(activityId, type)",
      "parameters": [
        {
          "name": "activityId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "type",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "DevelopmentActivity"
    },
    "GET /api/v2/users/me": {
      "operationId": "getusersme",
      "functionName": "getUsersMe",
      "signature": "getUsersMe(expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "integrationPresenceSource",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UserMe"
    },
    "GET /api/v2/users/search": {
      "operationId": "getuserssearch",
      "functionName": "getUsersSearch",
      "signature": "getUsersSearch(q64, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        },
        {
          "name": "integrationPresenceSource",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "PATCH /api/v2/users/{userId}": {
      "operationId": "patchuser",
      "functionName": "patchUser",
      "signature": "patchUser(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "User"
    },
    "PATCH /api/v2/users/{userId}/callforwarding": {
      "operationId": "patchusercallforwarding",
      "functionName": "patchUserCallforwarding",
      "signature": "patchUserCallforwarding(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CallForwarding"
    },
    "PATCH /api/v2/users/{userId}/geolocations/{clientId}": {
      "operationId": "patchusergeolocation",
      "functionName": "patchUserGeolocation",
      "signature": "patchUserGeolocation(userId, clientId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "clientId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "Geolocation"
    },
    "PATCH /api/v2/users/{userId}/queues/{queueId}": {
      "operationId": "patchuserqueue",
      "functionName": "patchUserQueue",
      "signature": "patchUserQueue(queueId, userId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserQueue"
    },
    "PATCH /api/v2/users/{userId}/queues": {
      "operationId": "patchuserqueues",
      "functionName": "patchUserQueues",
      "signature": "patchUserQueues(userId, body, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "operationId": "patchuserroutinglanguage",
      "functionName": "patchUserRoutinglanguage",
      "signature": "patchUserRoutinglanguage(userId, languageId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "languageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/bulk": {
      "operationId": "patchuserroutinglanguagesbulk",
      "functionName": "patchUserRoutinglanguagesBulk",
      "signature": "patchUserRoutinglanguagesBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routingskills/bulk": {
      "operationId": "patchuserroutingskillsbulk",
      "functionName": "patchUserRoutingskillsBulk",
      "signature": "patchUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PATCH /api/v2/users/bulk": {
      "operationId": "patchusersbulk",
      "functionName": "patchUsersBulk",
      "signature": "patchUsersBulk(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserEntityListing"
    },
    "POST /api/v2/analytics/users/aggregates/query": {
      "operationId": "postanalyticsusersaggregatesquery",
      "functionName": "postAnalyticsUsersAggregatesQuery",
      "signature": "postAnalyticsUsersAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/details/jobs": {
      "operationId": "postanalyticsusersdetailsjobs",
      "functionName": "postAnalyticsUsersDetailsJobs",
      "signature": "postAnalyticsUsersDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/users/details/query": {
      "operationId": "postanalyticsusersdetailsquery",
      "functionName": "postAnalyticsUsersDetailsQuery",
      "signature": "postAnalyticsUsersDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AnalyticsUserDetailsQueryResponse"
    },
    "POST /api/v2/analytics/users/observations/query": {
      "operationId": "postanalyticsusersobservationsquery",
      "functionName": "postAnalyticsUsersObservationsQuery",
      "signature": "postAnalyticsUsersObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserObservationQueryResponse"
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkadd": {
      "operationId": "postauthorizationsubjectbulkadd",
      "functionName": "postAuthorizationSubjectBulkadd",
      "signature": "postAuthorizationSubjectBulkadd(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "subjectType",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkremove": {
      "operationId": "postauthorizationsubjectbulkremove",
      "functionName": "postAuthorizationSubjectBulkremove",
      "signature": "postAuthorizationSubjectBulkremove(subjectId, body)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkreplace": {
      "operationId": "postauthorizationsubjectbulkreplace",
      "functionName": "postAuthorizationSubjectBulkreplace",
      "signature": "postAuthorizationSubjectBulkreplace(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "subjectType",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "operationId": "postauthorizationsubjectdivisionrole",
      "functionName": "postAuthorizationSubjectDivisionRole",
      "signature": "postAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "divisionId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "roleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "subjectType",
          "type": "String",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/users/{userId}/invite": {
      "operationId": "postuserinvite",
      "functionName": "postUserInvite",
      "signature": "postUserInvite(userId, force)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "force",
          "type": "Boolean",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/users/{userId}/password": {
      "operationId": "postuserpassword",
      "functionName": "postUserPassword",
      "signature": "postUserPassword(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/users/{userId}/routinglanguages": {
      "operationId": "postuserroutinglanguages",
      "functionName": "postUserRoutinglanguages",
      "signature": "postUserRoutinglanguages(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "POST /api/v2/users/{userId}/routingskills": {
      "operationId": "postuserroutingskills",
      "functionName": "postUserRoutingskills",
      "signature": "postUserRoutingskills(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "POST /api/v2/users": {
      "operationId": "postusers",
      "functionName": "postUsers",
      "signature": "postUsers(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "User"
    },
    "POST /api/v2/users/development/activities/aggregates/query": {
      "operationId": "postusersdevelopmentactivitiesaggregatesquery",
      "functionName": "postUsersDevelopmentActivitiesAggregatesQuery",
      "signature": "postUsersDevelopmentActivitiesAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "DevelopmentActivityAggregateResponse"
    },
    "POST /api/v2/users/me/password": {
      "operationId": "postusersmepassword",
      "functionName": "postUsersMePassword",
      "signature": "postUsersMePassword(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ]
    },
    "POST /api/v2/users/search": {
      "operationId": "postuserssearch",
      "functionName": "postUsersSearch",
      "signature": "postUsersSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "PUT /api/v2/routing/users/{userId}/utilization": {
      "operationId": "putroutinguserutilization",
      "functionName": "putRoutingUserUtilization",
      "signature": "putRoutingUserUtilization(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "PUT /api/v2/users/{userId}/callforwarding": {
      "operationId": "putusercallforwarding",
      "functionName": "putUserCallforwarding",
      "signature": "putUserCallforwarding(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CallForwarding"
    },
    "PUT /api/v2/users/{userId}/outofoffice": {
      "operationId": "putuseroutofoffice",
      "functionName": "putUserOutofoffice",
      "signature": "putUserOutofoffice(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "OutOfOffice"
    },
    "PUT /api/v2/users/{userId}/profileskills": {
      "operationId": "putuserprofileskills",
      "functionName": "putUserProfileskills",
      "signature": "putUserProfileskills(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "['String']"
    },
    "PUT /api/v2/users/{userId}/roles": {
      "operationId": "putuserroles",
      "functionName": "putUserRoles",
      "signature": "putUserRoles(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/users/{userId}/routingskills/{skillId}": {
      "operationId": "putuserroutingskill",
      "functionName": "putUserRoutingskill",
      "signature": "putUserRoutingskill(userId, skillId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "skillId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/users/{userId}/routingskills/bulk": {
      "operationId": "putuserroutingskillsbulk",
      "functionName": "putUserRoutingskillsBulk",
      "signature": "putUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PUT /api/v2/users/{userId}/routingstatus": {
      "operationId": "putuserroutingstatus",
      "functionName": "putUserRoutingstatus",
      "signature": "putUserRoutingstatus(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "RoutingStatus"
    },
    "PUT /api/v2/users/{userId}/state": {
      "operationId": "putuserstate",
      "functionName": "putUserState",
      "signature": "putUserState(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "UserState"
    },
    "PUT /api/v2/users/{userId}/station/associatedstation/{stationId}": {
      "operationId": "putuserstationassociatedstationstationid",
      "functionName": "putUserStationAssociatedstationStationId",
      "signature": "putUserStationAssociatedstationStationId(userId, stationId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "stationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "PUT /api/v2/users/{userId}/station/defaultstation/{stationId}": {
      "operationId": "putuserstationdefaultstationstationid",
      "functionName": "putUserStationDefaultstationStationId",
      "signature": "putUserStationDefaultstationStationId(userId, stationId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "stationId",
          "type": "String",
          "required": "true"
        }
      ]
    }
  },
  "utilities": {
    "GET /api/v2/date": {
      "operationId": "getdate",
      "functionName": "getDate",
      "signature": "getDate()",
      "return": "ServerDate"
    },
    "GET /api/v2/ipranges": {
      "operationId": "getipranges",
      "functionName": "getIpranges",
      "signature": "getIpranges()",
      "return": "IpAddressRangeListing"
    },
    "GET /api/v2/timezones": {
      "operationId": "gettimezones",
      "functionName": "getTimezones",
      "signature": "getTimezones(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "TimeZoneEntityListing"
    },
    "POST /api/v2/certificate/details": {
      "operationId": "postcertificatedetails",
      "functionName": "postCertificateDetails",
      "signature": "postCertificateDetails(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ParsedCertificate"
    }
  },
  "voicemail": {
    "DELETE /api/v2/voicemail/messages/{messageId}": {
      "operationId": "deletevoicemailmessage",
      "functionName": "deleteVoicemailMessage",
      "signature": "deleteVoicemailMessage(messageId)",
      "parameters": [
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/voicemail/messages": {
      "operationId": "deletevoicemailmessages",
      "functionName": "deleteVoicemailMessages",
      "signature": "deleteVoicemailMessages()"
    },
    "GET /api/v2/voicemail/groups/{groupId}/mailbox": {
      "operationId": "getvoicemailgroupmailbox",
      "functionName": "getVoicemailGroupMailbox",
      "signature": "getVoicemailGroupMailbox(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/groups/{groupId}/messages": {
      "operationId": "getvoicemailgroupmessages",
      "functionName": "getVoicemailGroupMessages",
      "signature": "getVoicemailGroupMessages(groupId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/groups/{groupId}/policy": {
      "operationId": "getvoicemailgrouppolicy",
      "functionName": "getVoicemailGroupPolicy",
      "signature": "getVoicemailGroupPolicy(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "VoicemailGroupPolicy"
    },
    "GET /api/v2/voicemail/mailbox": {
      "operationId": "getvoicemailmailbox",
      "functionName": "getVoicemailMailbox",
      "signature": "getVoicemailMailbox()",
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/me/mailbox": {
      "operationId": "getvoicemailmemailbox",
      "functionName": "getVoicemailMeMailbox",
      "signature": "getVoicemailMeMailbox()",
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/me/messages": {
      "operationId": "getvoicemailmemessages",
      "functionName": "getVoicemailMeMessages",
      "signature": "getVoicemailMeMessages(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/me/policy": {
      "operationId": "getvoicemailmepolicy",
      "functionName": "getVoicemailMePolicy",
      "signature": "getVoicemailMePolicy()",
      "return": "VoicemailUserPolicy"
    },
    "GET /api/v2/voicemail/messages/{messageId}": {
      "operationId": "getvoicemailmessage",
      "functionName": "getVoicemailMessage",
      "signature": "getVoicemailMessage(messageId, expand)",
      "parameters": [
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "VoicemailMessage"
    },
    "GET /api/v2/voicemail/messages/{messageId}/media": {
      "operationId": "getvoicemailmessagemedia",
      "functionName": "getVoicemailMessageMedia",
      "signature": "getVoicemailMessageMedia(messageId, formatId)",
      "parameters": [
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "formatId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "VoicemailMediaInfo"
    },
    "GET /api/v2/voicemail/messages": {
      "operationId": "getvoicemailmessages",
      "functionName": "getVoicemailMessages",
      "signature": "getVoicemailMessages(ids, expand)",
      "parameters": [
        {
          "name": "ids",
          "type": "String",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/policy": {
      "operationId": "getvoicemailpolicy",
      "functionName": "getVoicemailPolicy",
      "signature": "getVoicemailPolicy()",
      "return": "VoicemailOrganizationPolicy"
    },
    "GET /api/v2/voicemail/queues/{queueId}/messages": {
      "operationId": "getvoicemailqueuemessages",
      "functionName": "getVoicemailQueueMessages",
      "signature": "getVoicemailQueueMessages(queueId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "queueId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/search": {
      "operationId": "getvoicemailsearch",
      "functionName": "getVoicemailSearch",
      "signature": "getVoicemailSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "GET /api/v2/voicemail/userpolicies/{userId}": {
      "operationId": "getvoicemailuserpolicy",
      "functionName": "getVoicemailUserpolicy",
      "signature": "getVoicemailUserpolicy(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "PATCH /api/v2/voicemail/groups/{groupId}/policy": {
      "operationId": "patchvoicemailgrouppolicy",
      "functionName": "patchVoicemailGroupPolicy",
      "signature": "patchVoicemailGroupPolicy(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailGroupPolicy"
    },
    "PATCH /api/v2/voicemail/me/policy": {
      "operationId": "patchvoicemailmepolicy",
      "functionName": "patchVoicemailMePolicy",
      "signature": "patchVoicemailMePolicy(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "PATCH /api/v2/voicemail/messages/{messageId}": {
      "operationId": "patchvoicemailmessage",
      "functionName": "patchVoicemailMessage",
      "signature": "patchVoicemailMessage(messageId, body)",
      "parameters": [
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailMessage"
    },
    "PATCH /api/v2/voicemail/userpolicies/{userId}": {
      "operationId": "patchvoicemailuserpolicy",
      "functionName": "patchVoicemailUserpolicy",
      "signature": "patchVoicemailUserpolicy(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "POST /api/v2/voicemail/messages": {
      "operationId": "postvoicemailmessages",
      "functionName": "postVoicemailMessages",
      "signature": "postVoicemailMessages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "VoicemailMessage"
    },
    "POST /api/v2/voicemail/search": {
      "operationId": "postvoicemailsearch",
      "functionName": "postVoicemailSearch",
      "signature": "postVoicemailSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "PUT /api/v2/voicemail/messages/{messageId}": {
      "operationId": "putvoicemailmessage",
      "functionName": "putVoicemailMessage",
      "signature": "putVoicemailMessage(messageId, body)",
      "parameters": [
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailMessage"
    },
    "PUT /api/v2/voicemail/policy": {
      "operationId": "putvoicemailpolicy",
      "functionName": "putVoicemailPolicy",
      "signature": "putVoicemailPolicy(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailOrganizationPolicy"
    },
    "PUT /api/v2/voicemail/userpolicies/{userId}": {
      "operationId": "putvoicemailuserpolicy",
      "functionName": "putVoicemailUserpolicy",
      "signature": "putVoicemailUserpolicy(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "VoicemailUserPolicy"
    }
  },
  "webchat": {
    "DELETE /api/v2/webchat/deployments/{deploymentId}": {
      "operationId": "deletewebchatdeployment",
      "functionName": "deleteWebchatDeployment",
      "signature": "deleteWebchatDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}": {
      "operationId": "deletewebchatguestconversationmember",
      "functionName": "deleteWebchatGuestConversationMember",
      "signature": "deleteWebchatGuestConversationMember(conversationId, memberId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/webchat/settings": {
      "operationId": "deletewebchatsettings",
      "functionName": "deleteWebchatSettings",
      "signature": "deleteWebchatSettings()"
    },
    "GET /api/v2/webchat/deployments/{deploymentId}": {
      "operationId": "getwebchatdeployment",
      "functionName": "getWebchatDeployment",
      "signature": "getWebchatDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatDeployment"
    },
    "GET /api/v2/webchat/deployments": {
      "operationId": "getwebchatdeployments",
      "functionName": "getWebchatDeployments",
      "signature": "getWebchatDeployments()",
      "return": "WebChatDeploymentEntityListing"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}": {
      "operationId": "getwebchatguestconversationmediarequest",
      "functionName": "getWebchatGuestConversationMediarequest",
      "signature": "getWebchatGuestConversationMediarequest(conversationId, mediaRequestId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "mediaRequestId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatGuestMediaRequest"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests": {
      "operationId": "getwebchatguestconversationmediarequests",
      "functionName": "getWebchatGuestConversationMediarequests",
      "signature": "getWebchatGuestConversationMediarequests(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatGuestMediaRequestEntityList"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}": {
      "operationId": "getwebchatguestconversationmember",
      "functionName": "getWebchatGuestConversationMember",
      "signature": "getWebchatGuestConversationMember(conversationId, memberId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatMemberInfo"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/members": {
      "operationId": "getwebchatguestconversationmembers",
      "functionName": "getWebchatGuestConversationMembers",
      "signature": "getWebchatGuestConversationMembers(conversationId, pageSize, pageNumber, excludeDisconnectedMembers)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "excludeDisconnectedMembers",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "WebChatMemberInfoEntityList"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}": {
      "operationId": "getwebchatguestconversationmessage",
      "functionName": "getWebchatGuestConversationMessage",
      "signature": "getWebchatGuestConversationMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "messageId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatMessage"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/messages": {
      "operationId": "getwebchatguestconversationmessages",
      "functionName": "getWebchatGuestConversationMessages",
      "signature": "getWebchatGuestConversationMessages(conversationId, after, before, sortOrder, maxResults)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "after",
          "type": "String",
          "required": "false"
        },
        {
          "name": "before",
          "type": "String",
          "required": "false"
        },
        {
          "name": "sortOrder",
          "type": "String",
          "required": "false"
        },
        {
          "name": "maxResults",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "WebChatMessageEntityList"
    },
    "GET /api/v2/webchat/settings": {
      "operationId": "getwebchatsettings",
      "functionName": "getWebchatSettings",
      "signature": "getWebchatSettings()",
      "return": "WebChatSettings"
    },
    "PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}": {
      "operationId": "patchwebchatguestconversationmediarequest",
      "functionName": "patchWebchatGuestConversationMediarequest",
      "signature": "patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "mediaRequestId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebChatGuestMediaRequest"
    },
    "POST /api/v2/webchat/deployments": {
      "operationId": "postwebchatdeployments",
      "functionName": "postWebchatDeployments",
      "signature": "postWebchatDeployments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebChatDeployment"
    },
    "POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages": {
      "operationId": "postwebchatguestconversationmembermessages",
      "functionName": "postWebchatGuestConversationMemberMessages",
      "signature": "postWebchatGuestConversationMemberMessages(conversationId, memberId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebChatMessage"
    },
    "POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing": {
      "operationId": "postwebchatguestconversationmembertyping",
      "functionName": "postWebchatGuestConversationMemberTyping",
      "signature": "postWebchatGuestConversationMemberTyping(conversationId, memberId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "memberId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebChatTyping"
    },
    "POST /api/v2/webchat/guest/conversations": {
      "operationId": "postwebchatguestconversations",
      "functionName": "postWebchatGuestConversations",
      "signature": "postWebchatGuestConversations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "CreateWebChatConversationResponse"
    },
    "PUT /api/v2/webchat/deployments/{deploymentId}": {
      "operationId": "putwebchatdeployment",
      "functionName": "putWebchatDeployment",
      "signature": "putWebchatDeployment(deploymentId, body)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebChatDeployment"
    },
    "PUT /api/v2/webchat/settings": {
      "operationId": "putwebchatsettings",
      "functionName": "putWebchatSettings",
      "signature": "putWebchatSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebChatSettings"
    }
  },
  "webdeployments": {
    "DELETE /api/v2/webdeployments/configurations/{configurationId}": {
      "operationId": "deletewebdeploymentsconfiguration",
      "functionName": "deleteWebdeploymentsConfiguration",
      "signature": "deleteWebdeploymentsConfiguration(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/webdeployments/deployments/{deploymentId}": {
      "operationId": "deletewebdeploymentsdeployment",
      "functionName": "deleteWebdeploymentsDeployment",
      "signature": "deleteWebdeploymentsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions/{versionId}": {
      "operationId": "getwebdeploymentsconfigurationversion",
      "functionName": "getWebdeploymentsConfigurationVersion",
      "signature": "getWebdeploymentsConfigurationVersion(configurationId, versionId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "versionId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions": {
      "operationId": "getwebdeploymentsconfigurationversions",
      "functionName": "getWebdeploymentsConfigurationVersions",
      "signature": "getWebdeploymentsConfigurationVersions(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebDeploymentConfigurationVersionEntityListing"
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions/draft": {
      "operationId": "getwebdeploymentsconfigurationversionsdraft",
      "functionName": "getWebdeploymentsConfigurationVersionsDraft",
      "signature": "getWebdeploymentsConfigurationVersionsDraft(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "GET /api/v2/webdeployments/configurations": {
      "operationId": "getwebdeploymentsconfigurations",
      "functionName": "getWebdeploymentsConfigurations",
      "signature": "getWebdeploymentsConfigurations(showOnlyPublished)",
      "parameters": [
        {
          "name": "showOnlyPublished",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "WebDeploymentConfigurationVersionEntityListing"
    },
    "GET /api/v2/webdeployments/deployments/{deploymentId}": {
      "operationId": "getwebdeploymentsdeployment",
      "functionName": "getWebdeploymentsDeployment",
      "signature": "getWebdeploymentsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebDeployment"
    },
    "GET /api/v2/webdeployments/deployments": {
      "operationId": "getwebdeploymentsdeployments",
      "functionName": "getWebdeploymentsDeployments",
      "signature": "getWebdeploymentsDeployments()",
      "return": "WebDeploymentEntityListing"
    },
    "POST /api/v2/webdeployments/configurations/{configurationId}/versions/draft/publish": {
      "operationId": "postwebdeploymentsconfigurationversionsdraftpublish",
      "functionName": "postWebdeploymentsConfigurationVersionsDraftPublish",
      "signature": "postWebdeploymentsConfigurationVersionsDraftPublish(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "POST /api/v2/webdeployments/configurations": {
      "operationId": "postwebdeploymentsconfigurations",
      "functionName": "postWebdeploymentsConfigurations",
      "signature": "postWebdeploymentsConfigurations(configurationVersion)",
      "parameters": [
        {
          "name": "configurationVersion",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "POST /api/v2/webdeployments/deployments": {
      "operationId": "postwebdeploymentsdeployments",
      "functionName": "postWebdeploymentsDeployments",
      "signature": "postWebdeploymentsDeployments(deployment)",
      "parameters": [
        {
          "name": "deployment",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebDeployment"
    },
    "PUT /api/v2/webdeployments/configurations/{configurationId}/versions/draft": {
      "operationId": "putwebdeploymentsconfigurationversionsdraft",
      "functionName": "putWebdeploymentsConfigurationVersionsDraft",
      "signature": "putWebdeploymentsConfigurationVersionsDraft(configurationId, configurationVersion)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "configurationVersion",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "PUT /api/v2/webdeployments/deployments/{deploymentId}": {
      "operationId": "putwebdeploymentsdeployment",
      "functionName": "putWebdeploymentsDeployment",
      "signature": "putWebdeploymentsDeployment(deploymentId, deployment)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "deployment",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WebDeployment"
    }
  },
  "webmessaging": {
    "GET /api/v2/webmessaging/messages": {
      "operationId": "getwebmessagingmessages",
      "functionName": "getWebmessagingMessages",
      "signature": "getWebmessagingMessages(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        }
      ],
      "return": "WebMessagingMessageEntityList"
    }
  },
  "widgets": {
    "DELETE /api/v2/widgets/deployments/{deploymentId}": {
      "operationId": "deletewidgetsdeployment",
      "functionName": "deleteWidgetsDeployment",
      "signature": "deleteWidgetsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/widgets/deployments/{deploymentId}": {
      "operationId": "getwidgetsdeployment",
      "functionName": "getWidgetsDeployment",
      "signature": "getWidgetsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WidgetDeployment"
    },
    "GET /api/v2/widgets/deployments": {
      "operationId": "getwidgetsdeployments",
      "functionName": "getWidgetsDeployments",
      "signature": "getWidgetsDeployments()",
      "return": "WidgetDeploymentEntityListing"
    },
    "POST /api/v2/widgets/deployments": {
      "operationId": "postwidgetsdeployments",
      "functionName": "postWidgetsDeployments",
      "signature": "postWidgetsDeployments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WidgetDeployment"
    },
    "PUT /api/v2/widgets/deployments/{deploymentId}": {
      "operationId": "putwidgetsdeployment",
      "functionName": "putWidgetsDeployment",
      "signature": "putWidgetsDeployment(deploymentId, body)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "WidgetDeployment"
    }
  },
  "workforcemanagement": {
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "operationId": "deleteworkforcemanagementbusinessunit",
      "functionName": "deleteWorkforcemanagementBusinessunit",
      "signature": "deleteWorkforcemanagementBusinessunit(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "operationId": "deleteworkforcemanagementbusinessunitactivitycode",
      "functionName": "deleteWorkforcemanagementBusinessunitActivitycode",
      "signature": "deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "activityCodeId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "operationId": "deleteworkforcemanagementbusinessunitplanninggroup",
      "functionName": "deleteWorkforcemanagementBusinessunitPlanninggroup",
      "signature": "deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "planningGroupId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "operationId": "deleteworkforcemanagementbusinessunitschedulingrun",
      "functionName": "deleteWorkforcemanagementBusinessunitSchedulingRun",
      "signature": "deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "runId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "operationId": "deleteworkforcemanagementbusinessunitservicegoaltemplate",
      "functionName": "deleteWorkforcemanagementBusinessunitServicegoaltemplate",
      "signature": "deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "serviceGoalTemplateId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "operationId": "deleteworkforcemanagementbusinessunitweekschedule",
      "functionName": "deleteWorkforcemanagementBusinessunitWeekSchedule",
      "signature": "deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BuAsyncScheduleResponse"
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}": {
      "operationId": "deleteworkforcemanagementbusinessunitweekshorttermforecast",
      "functionName": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast",
      "signature": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forecastId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/calendar/url/ics": {
      "operationId": "deleteworkforcemanagementcalendarurlics",
      "functionName": "deleteWorkforcemanagementCalendarUrlIcs",
      "signature": "deleteWorkforcemanagementCalendarUrlIcs()"
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "operationId": "deleteworkforcemanagementmanagementunit",
      "functionName": "deleteWorkforcemanagementManagementunit",
      "signature": "deleteWorkforcemanagementManagementunit(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "operationId": "deleteworkforcemanagementmanagementunittimeofflimit",
      "functionName": "deleteWorkforcemanagementManagementunitTimeofflimit",
      "signature": "deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffLimitId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "operationId": "deleteworkforcemanagementmanagementunittimeoffplan",
      "functionName": "deleteWorkforcemanagementManagementunitTimeoffplan",
      "signature": "deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffPlanId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "operationId": "deleteworkforcemanagementmanagementunitworkplan",
      "functionName": "deleteWorkforcemanagementManagementunitWorkplan",
      "signature": "deleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "operationId": "deleteworkforcemanagementmanagementunitworkplanrotation",
      "functionName": "deleteWorkforcemanagementManagementunitWorkplanrotation",
      "signature": "deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanRotationId",
          "type": "String",
          "required": "true"
        }
      ]
    },
    "GET /api/v2/workforcemanagement/adherence": {
      "operationId": "getworkforcemanagementadherence",
      "functionName": "getWorkforcemanagementAdherence",
      "signature": "getWorkforcemanagementAdherence(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "[String]",
          "required": "true"
        }
      ],
      "return": "[UserScheduleAdherence]"
    },
    "GET /api/v2/workforcemanagement/adhocmodelingjobs/{jobId}": {
      "operationId": "getworkforcemanagementadhocmodelingjob",
      "functionName": "getWorkforcemanagementAdhocmodelingjob",
      "signature": "getWorkforcemanagementAdhocmodelingjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ModelingStatusResponse"
    },
    "GET /api/v2/workforcemanagement/agents/{agentId}/managementunit": {
      "operationId": "getworkforcemanagementagentmanagementunit",
      "functionName": "getWorkforcemanagementAgentManagementunit",
      "signature": "getWorkforcemanagementAgentManagementunit(agentId)",
      "parameters": [
        {
          "name": "agentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "AgentManagementUnitReference"
    },
    "GET /api/v2/workforcemanagement/agents/me/managementunit": {
      "operationId": "getworkforcemanagementagentsmemanagementunit",
      "functionName": "getWorkforcemanagementAgentsMeManagementunit",
      "signature": "getWorkforcemanagementAgentsMeManagementunit()",
      "return": "AgentManagementUnitReference"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "operationId": "getworkforcemanagementbusinessunit",
      "functionName": "getWorkforcemanagementBusinessunit",
      "signature": "getWorkforcemanagementBusinessunit(businessUnitId, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "BusinessUnit"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "operationId": "getworkforcemanagementbusinessunitactivitycode",
      "functionName": "getWorkforcemanagementBusinessunitActivitycode",
      "signature": "getWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "activityCodeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes": {
      "operationId": "getworkforcemanagementbusinessunitactivitycodes",
      "functionName": "getWorkforcemanagementBusinessunitActivitycodes",
      "signature": "getWorkforcemanagementBusinessunitActivitycodes(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BusinessUnitActivityCodeListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups": {
      "operationId": "getworkforcemanagementbusinessunitintradayplanninggroups",
      "functionName": "getWorkforcemanagementBusinessunitIntradayPlanninggroups",
      "signature": "getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, _date)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "_date",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WfmIntradayPlanningGroupListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits": {
      "operationId": "getworkforcemanagementbusinessunitmanagementunits",
      "functionName": "getWorkforcemanagementBusinessunitManagementunits",
      "signature": "getWorkforcemanagementBusinessunitManagementunits(businessUnitId, feature, divisionId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "feature",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "operationId": "getworkforcemanagementbusinessunitplanninggroup",
      "functionName": "getWorkforcemanagementBusinessunitPlanninggroup",
      "signature": "getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "planningGroupId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PlanningGroup"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups": {
      "operationId": "getworkforcemanagementbusinessunitplanninggroups",
      "functionName": "getWorkforcemanagementBusinessunitPlanninggroups",
      "signature": "getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "PlanningGroupList"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "operationId": "getworkforcemanagementbusinessunitschedulingrun",
      "functionName": "getWorkforcemanagementBusinessunitSchedulingRun",
      "signature": "getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "runId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BuScheduleRun"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result": {
      "operationId": "getworkforcemanagementbusinessunitschedulingrunresult",
      "functionName": "getWorkforcemanagementBusinessunitSchedulingRunResult",
      "signature": "getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, managementUnitIds, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "runId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "managementUnitIds",
          "type": "[String]",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "true"
        }
      ],
      "return": "BuRescheduleResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs": {
      "operationId": "getworkforcemanagementbusinessunitschedulingruns",
      "functionName": "getWorkforcemanagementBusinessunitSchedulingRuns",
      "signature": "getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BuScheduleRunListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "operationId": "getworkforcemanagementbusinessunitservicegoaltemplate",
      "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplate",
      "signature": "getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "serviceGoalTemplateId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates": {
      "operationId": "getworkforcemanagementbusinessunitservicegoaltemplates",
      "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplates",
      "signature": "getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ServiceGoalTemplateList"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "operationId": "getworkforcemanagementbusinessunitweekschedule",
      "functionName": "getWorkforcemanagementBusinessunitWeekSchedule",
      "signature": "getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "BuScheduleMetadata"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults": {
      "operationId": "getworkforcemanagementbusinessunitweekschedulegenerationresults",
      "functionName": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults",
      "signature": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ScheduleGenerationResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast": {
      "operationId": "getworkforcemanagementbusinessunitweekscheduleheadcountforecast",
      "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast",
      "signature": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, forceDownload)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forceDownload",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "BuHeadcountForecastResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}": {
      "operationId": "getworkforcemanagementbusinessunitweekschedulehistoryagent",
      "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent",
      "signature": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "agentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BuAgentScheduleHistoryResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules": {
      "operationId": "getworkforcemanagementbusinessunitweekschedules",
      "functionName": "getWorkforcemanagementBusinessunitWeekSchedules",
      "signature": "getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, includeOnlyPublished, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeOnlyPublished",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "BuScheduleListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}": {
      "operationId": "getworkforcemanagementbusinessunitweekshorttermforecast",
      "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecast",
      "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forecastId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "BuShortTermForecast"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data": {
      "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastdata",
      "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastData",
      "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, weekNumber, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forecastId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "forceDownloadService",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "BuForecastResultResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults": {
      "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastgenerationresults",
      "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults",
      "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forecastId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BuForecastGenerationResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/longtermforecastdata": {
      "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastlongtermforecastdata",
      "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata",
      "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forecastId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forceDownloadService",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "LongTermForecastResultResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups": {
      "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastplanninggroups",
      "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups",
      "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forecastId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ForecastPlanningGroupsResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts": {
      "operationId": "getworkforcemanagementbusinessunitweekshorttermforecasts",
      "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecasts",
      "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "BuShortTermForecastListing"
    },
    "GET /api/v2/workforcemanagement/businessunits": {
      "operationId": "getworkforcemanagementbusinessunits",
      "functionName": "getWorkforcemanagementBusinessunits",
      "signature": "getWorkforcemanagementBusinessunits(feature, divisionId)",
      "parameters": [
        {
          "name": "feature",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "BusinessUnitListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/divisionviews": {
      "operationId": "getworkforcemanagementbusinessunitsdivisionviews",
      "functionName": "getWorkforcemanagementBusinessunitsDivisionviews",
      "signature": "getWorkforcemanagementBusinessunitsDivisionviews(divisionId)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "BusinessUnitListing"
    },
    "GET /api/v2/workforcemanagement/calendar/data/ics": {
      "operationId": "getworkforcemanagementcalendardataics",
      "functionName": "getWorkforcemanagementCalendarDataIcs",
      "signature": "getWorkforcemanagementCalendarDataIcs(calendarId)",
      "parameters": [
        {
          "name": "calendarId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "'String'"
    },
    "GET /api/v2/workforcemanagement/calendar/url/ics": {
      "operationId": "getworkforcemanagementcalendarurlics",
      "functionName": "getWorkforcemanagementCalendarUrlIcs",
      "signature": "getWorkforcemanagementCalendarUrlIcs()",
      "return": "CalendarUrlResponse"
    },
    "GET /api/v2/workforcemanagement/historicaldata/deletejob": {
      "operationId": "getworkforcemanagementhistoricaldatadeletejob",
      "functionName": "getWorkforcemanagementHistoricaldataDeletejob",
      "signature": "getWorkforcemanagementHistoricaldataDeletejob()",
      "return": "HistoricalImportDeleteJobResponse"
    },
    "GET /api/v2/workforcemanagement/historicaldata/importstatus": {
      "operationId": "getworkforcemanagementhistoricaldataimportstatus",
      "functionName": "getWorkforcemanagementHistoricaldataImportstatus",
      "signature": "getWorkforcemanagementHistoricaldataImportstatus()",
      "return": "HistoricalImportStatusListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "operationId": "getworkforcemanagementmanagementunit",
      "functionName": "getWorkforcemanagementManagementunit",
      "signature": "getWorkforcemanagementManagementunit(managementUnitId, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ManagementUnit"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes": {
      "operationId": "getworkforcemanagementmanagementunitactivitycodes",
      "functionName": "getWorkforcemanagementManagementunitActivitycodes",
      "signature": "getWorkforcemanagementManagementunitActivitycodes(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ActivityCodeContainer"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence": {
      "operationId": "getworkforcemanagementmanagementunitadherence",
      "functionName": "getWorkforcemanagementManagementunitAdherence",
      "signature": "getWorkforcemanagementManagementunitAdherence(managementUnitId, forceDownloadService)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forceDownloadService",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "UserScheduleAdherenceListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}": {
      "operationId": "getworkforcemanagementmanagementunitagent",
      "functionName": "getWorkforcemanagementManagementunitAgent",
      "signature": "getWorkforcemanagementManagementunitAgent(managementUnitId, agentId, excludeCapabilities)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "agentId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "excludeCapabilities",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "WfmAgent"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades": {
      "operationId": "getworkforcemanagementmanagementunitagentshifttrades",
      "functionName": "getWorkforcemanagementManagementunitAgentShifttrades",
      "signature": "getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "agentId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched": {
      "operationId": "getworkforcemanagementmanagementunitshifttradesmatched",
      "functionName": "getWorkforcemanagementManagementunitShifttradesMatched",
      "signature": "getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ShiftTradeMatchesSummaryResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users": {
      "operationId": "getworkforcemanagementmanagementunitshifttradesusers",
      "functionName": "getWorkforcemanagementManagementunitShifttradesUsers",
      "signature": "getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WfmUserEntityListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "operationId": "getworkforcemanagementmanagementunittimeofflimit",
      "functionName": "getWorkforcemanagementManagementunitTimeofflimit",
      "signature": "getWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffLimitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TimeOffLimit"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits": {
      "operationId": "getworkforcemanagementmanagementunittimeofflimits",
      "functionName": "getWorkforcemanagementManagementunitTimeofflimits",
      "signature": "getWorkforcemanagementManagementunitTimeofflimits(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TimeOffLimitListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "operationId": "getworkforcemanagementmanagementunittimeoffplan",
      "functionName": "getWorkforcemanagementManagementunitTimeoffplan",
      "signature": "getWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffPlanId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TimeOffPlan"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans": {
      "operationId": "getworkforcemanagementmanagementunittimeoffplans",
      "functionName": "getWorkforcemanagementManagementunitTimeoffplans",
      "signature": "getWorkforcemanagementManagementunitTimeoffplans(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TimeOffPlanListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}": {
      "operationId": "getworkforcemanagementmanagementunitusertimeoffrequest",
      "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequest",
      "signature": "getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffRequestId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeofflimits": {
      "operationId": "getworkforcemanagementmanagementunitusertimeoffrequesttimeofflimits",
      "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits",
      "signature": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffRequestId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "QueryTimeOffLimitValuesResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests": {
      "operationId": "getworkforcemanagementmanagementunitusertimeoffrequests",
      "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequests",
      "signature": "getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId, recentlyReviewed)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "recentlyReviewed",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users": {
      "operationId": "getworkforcemanagementmanagementunitusers",
      "functionName": "getWorkforcemanagementManagementunitUsers",
      "signature": "getWorkforcemanagementManagementunitUsers(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WfmUserEntityListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "operationId": "getworkforcemanagementmanagementunitweekschedule",
      "functionName": "getWorkforcemanagementManagementunitWeekSchedule",
      "signature": "getWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, expand, forceDownloadService)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "forceDownloadService",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "WeekScheduleResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules": {
      "operationId": "getworkforcemanagementmanagementunitweekschedules",
      "functionName": "getWorkforcemanagementManagementunitWeekSchedules",
      "signature": "getWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, includeOnlyPublished, earliestWeekDate, latestWeekDate)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeOnlyPublished",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "earliestWeekDate",
          "type": "String",
          "required": "false"
        },
        {
          "name": "latestWeekDate",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WeekScheduleListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades": {
      "operationId": "getworkforcemanagementmanagementunitweekshifttrades",
      "functionName": "getWorkforcemanagementManagementunitWeekShifttrades",
      "signature": "getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, evaluateMatches)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "evaluateMatches",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "WeekShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "operationId": "getworkforcemanagementmanagementunitworkplan",
      "functionName": "getWorkforcemanagementManagementunitWorkplan",
      "signature": "getWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, includeOnly)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "includeOnly",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkPlan"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "operationId": "getworkforcemanagementmanagementunitworkplanrotation",
      "functionName": "getWorkforcemanagementManagementunitWorkplanrotation",
      "signature": "getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanRotationId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations": {
      "operationId": "getworkforcemanagementmanagementunitworkplanrotations",
      "functionName": "getWorkforcemanagementManagementunitWorkplanrotations",
      "signature": "getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkPlanRotationListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans": {
      "operationId": "getworkforcemanagementmanagementunitworkplans",
      "functionName": "getWorkforcemanagementManagementunitWorkplans",
      "signature": "getWorkforcemanagementManagementunitWorkplans(managementUnitId, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "WorkPlanListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits": {
      "operationId": "getworkforcemanagementmanagementunits",
      "functionName": "getWorkforcemanagementManagementunits",
      "signature": "getWorkforcemanagementManagementunits(pageSize, pageNumber, expand, feature, divisionId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "pageNumber",
          "type": "Number",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "String",
          "required": "false"
        },
        {
          "name": "feature",
          "type": "String",
          "required": "false"
        },
        {
          "name": "divisionId",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/divisionviews": {
      "operationId": "getworkforcemanagementmanagementunitsdivisionviews",
      "functionName": "getWorkforcemanagementManagementunitsDivisionviews",
      "signature": "getWorkforcemanagementManagementunitsDivisionviews(divisionId)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/notifications": {
      "operationId": "getworkforcemanagementnotifications",
      "functionName": "getWorkforcemanagementNotifications",
      "signature": "getWorkforcemanagementNotifications()",
      "return": "NotificationsResponse"
    },
    "GET /api/v2/workforcemanagement/schedulingjobs/{jobId}": {
      "operationId": "getworkforcemanagementschedulingjob",
      "functionName": "getWorkforcemanagementSchedulingjob",
      "signature": "getWorkforcemanagementSchedulingjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "SchedulingStatusResponse"
    },
    "GET /api/v2/workforcemanagement/shifttrades": {
      "operationId": "getworkforcemanagementshifttrades",
      "functionName": "getWorkforcemanagementShifttrades",
      "signature": "getWorkforcemanagementShifttrades()",
      "return": "ShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}": {
      "operationId": "getworkforcemanagementtimeoffrequest",
      "functionName": "getWorkforcemanagementTimeoffrequest",
      "signature": "getWorkforcemanagementTimeoffrequest(timeOffRequestId)",
      "parameters": [
        {
          "name": "timeOffRequestId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}/waitlistpositions": {
      "operationId": "getworkforcemanagementtimeoffrequestwaitlistpositions",
      "functionName": "getWorkforcemanagementTimeoffrequestWaitlistpositions",
      "signature": "getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId)",
      "parameters": [
        {
          "name": "timeOffRequestId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "WaitlistPositionListing"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests": {
      "operationId": "getworkforcemanagementtimeoffrequests",
      "functionName": "getWorkforcemanagementTimeoffrequests",
      "signature": "getWorkforcemanagementTimeoffrequests(recentlyReviewed)",
      "parameters": [
        {
          "name": "recentlyReviewed",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "operationId": "patchworkforcemanagementbusinessunit",
      "functionName": "patchWorkforcemanagementBusinessunit",
      "signature": "patchWorkforcemanagementBusinessunit(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "BusinessUnit"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "operationId": "patchworkforcemanagementbusinessunitactivitycode",
      "functionName": "patchWorkforcemanagementBusinessunitActivitycode",
      "signature": "patchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "activityCodeId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "operationId": "patchworkforcemanagementbusinessunitplanninggroup",
      "functionName": "patchWorkforcemanagementBusinessunitPlanninggroup",
      "signature": "patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "planningGroupId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "PlanningGroup"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "operationId": "patchworkforcemanagementbusinessunitschedulingrun",
      "functionName": "patchWorkforcemanagementBusinessunitSchedulingRun",
      "signature": "patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "runId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "operationId": "patchworkforcemanagementbusinessunitservicegoaltemplate",
      "functionName": "patchWorkforcemanagementBusinessunitServicegoaltemplate",
      "signature": "patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "serviceGoalTemplateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "operationId": "patchworkforcemanagementmanagementunit",
      "functionName": "patchWorkforcemanagementManagementunit",
      "signature": "patchWorkforcemanagementManagementunit(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ManagementUnit"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "operationId": "patchworkforcemanagementmanagementunittimeofflimit",
      "functionName": "patchWorkforcemanagementManagementunitTimeofflimit",
      "signature": "patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffLimitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffLimit"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "operationId": "patchworkforcemanagementmanagementunittimeoffplan",
      "functionName": "patchWorkforcemanagementManagementunitTimeoffplan",
      "signature": "patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffPlanId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffPlan"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}": {
      "operationId": "patchworkforcemanagementmanagementunitusertimeoffrequest",
      "functionName": "patchWorkforcemanagementManagementunitUserTimeoffrequest",
      "signature": "patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "userId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffRequestId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}": {
      "operationId": "patchworkforcemanagementmanagementunitweekshifttrade",
      "functionName": "patchWorkforcemanagementManagementunitWeekShifttrade",
      "signature": "patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, body, tradeId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "tradeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "ShiftTradeResponse"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "operationId": "patchworkforcemanagementmanagementunitworkplan",
      "functionName": "patchWorkforcemanagementManagementunitWorkplan",
      "signature": "patchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, body, validationMode)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        },
        {
          "name": "validationMode",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WorkPlan"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "operationId": "patchworkforcemanagementmanagementunitworkplanrotation",
      "functionName": "patchWorkforcemanagementManagementunitWorkplanrotation",
      "signature": "patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanRotationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "PATCH /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}": {
      "operationId": "patchworkforcemanagementtimeoffrequest",
      "functionName": "patchWorkforcemanagementTimeoffrequest",
      "signature": "patchWorkforcemanagementTimeoffrequest(timeOffRequestId, body)",
      "parameters": [
        {
          "name": "timeOffRequestId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "POST /api/v2/workforcemanagement/adherence/historical": {
      "operationId": "postworkforcemanagementadherencehistorical",
      "functionName": "postWorkforcemanagementAdherenceHistorical",
      "signature": "postWorkforcemanagementAdherenceHistorical(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "WfmHistoricalAdherenceResponse"
    },
    "POST /api/v2/workforcemanagement/agentschedules/mine": {
      "operationId": "postworkforcemanagementagentschedulesmine",
      "functionName": "postWorkforcemanagementAgentschedulesMine",
      "signature": "postWorkforcemanagementAgentschedulesMine(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "BuCurrentAgentScheduleSearchResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes": {
      "operationId": "postworkforcemanagementbusinessunitactivitycodes",
      "functionName": "postWorkforcemanagementBusinessunitActivitycodes",
      "signature": "postWorkforcemanagementBusinessunitActivitycodes(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search": {
      "operationId": "postworkforcemanagementbusinessunitagentschedulessearch",
      "functionName": "postWorkforcemanagementBusinessunitAgentschedulesSearch",
      "signature": "postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, body, forceAsync, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        },
        {
          "name": "forceAsync",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "forceDownloadService",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "BuAsyncAgentSchedulesSearchResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday": {
      "operationId": "postworkforcemanagementbusinessunitintraday",
      "functionName": "postWorkforcemanagementBusinessunitIntraday",
      "signature": "postWorkforcemanagementBusinessunitIntraday(businessUnitId, forceAsync, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forceAsync",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "AsyncIntradayResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups": {
      "operationId": "postworkforcemanagementbusinessunitplanninggroups",
      "functionName": "postWorkforcemanagementBusinessunitPlanninggroups",
      "signature": "postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "PlanningGroup"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates": {
      "operationId": "postworkforcemanagementbusinessunitservicegoaltemplates",
      "functionName": "postWorkforcemanagementBusinessunitServicegoaltemplates",
      "signature": "postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query": {
      "operationId": "postworkforcemanagementbusinessunitweekscheduleagentschedulesquery",
      "functionName": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery",
      "signature": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, body, forceAsync, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "forceAsync",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "forceDownloadService",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "BuAsyncAgentSchedulesQueryResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy": {
      "operationId": "postworkforcemanagementbusinessunitweekschedulecopy",
      "functionName": "postWorkforcemanagementBusinessunitWeekScheduleCopy",
      "signature": "postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BuAsyncScheduleResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule": {
      "operationId": "postworkforcemanagementbusinessunitweekschedulereschedule",
      "functionName": "postWorkforcemanagementBusinessunitWeekScheduleReschedule",
      "signature": "postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "scheduleId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BuAsyncScheduleRunResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules": {
      "operationId": "postworkforcemanagementbusinessunitweekschedules",
      "functionName": "postWorkforcemanagementBusinessunitWeekSchedules",
      "signature": "postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BuScheduleMetadata"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate": {
      "operationId": "postworkforcemanagementbusinessunitweekschedulesgenerate",
      "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate",
      "signature": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "BuAsyncScheduleRunResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy": {
      "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastcopy",
      "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy",
      "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, body, forceAsync)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "forecastId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "forceAsync",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AsyncForecastOperationResult"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate": {
      "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsgenerate",
      "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate",
      "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, body, forceAsync)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "forceAsync",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "AsyncForecastOperationResult"
    },
    "POST /api/v2/workforcemanagement/businessunits": {
      "operationId": "postworkforcemanagementbusinessunits",
      "functionName": "postWorkforcemanagementBusinessunits",
      "signature": "postWorkforcemanagementBusinessunits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "BusinessUnit"
    },
    "POST /api/v2/workforcemanagement/calendar/url/ics": {
      "operationId": "postworkforcemanagementcalendarurlics",
      "functionName": "postWorkforcemanagementCalendarUrlIcs",
      "signature": "postWorkforcemanagementCalendarUrlIcs(language)",
      "parameters": [
        {
          "name": "language",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "CalendarUrlResponse"
    },
    "POST /api/v2/workforcemanagement/historicaldata/deletejob": {
      "operationId": "postworkforcemanagementhistoricaldatadeletejob",
      "functionName": "postWorkforcemanagementHistoricaldataDeletejob",
      "signature": "postWorkforcemanagementHistoricaldataDeletejob()",
      "return": "HistoricalImportDeleteJobResponse"
    },
    "POST /api/v2/workforcemanagement/historicaldata/validate": {
      "operationId": "postworkforcemanagementhistoricaldatavalidate",
      "functionName": "postWorkforcemanagementHistoricaldataValidate",
      "signature": "postWorkforcemanagementHistoricaldataValidate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ]
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search": {
      "operationId": "postworkforcemanagementmanagementunitagentschedulessearch",
      "functionName": "postWorkforcemanagementManagementunitAgentschedulesSearch",
      "signature": "postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, body, forceAsync, forceDownloadService)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        },
        {
          "name": "forceAsync",
          "type": "Boolean",
          "required": "false"
        },
        {
          "name": "forceDownloadService",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "BuAsyncAgentSchedulesSearchResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery": {
      "operationId": "postworkforcemanagementmanagementunithistoricaladherencequery",
      "functionName": "postWorkforcemanagementManagementunitHistoricaladherencequery",
      "signature": "postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "WfmHistoricalAdherenceResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/move": {
      "operationId": "postworkforcemanagementmanagementunitmove",
      "functionName": "postWorkforcemanagementManagementunitMove",
      "signature": "postWorkforcemanagementManagementunitMove(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "MoveManagementUnitResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search": {
      "operationId": "postworkforcemanagementmanagementunitschedulessearch",
      "functionName": "postWorkforcemanagementManagementunitSchedulesSearch",
      "signature": "postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "UserScheduleContainer"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits": {
      "operationId": "postworkforcemanagementmanagementunittimeofflimits",
      "functionName": "postWorkforcemanagementManagementunitTimeofflimits",
      "signature": "postWorkforcemanagementManagementunitTimeofflimits(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffLimit"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/values/query": {
      "operationId": "postworkforcemanagementmanagementunittimeofflimitsvaluesquery",
      "functionName": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery",
      "signature": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "QueryTimeOffLimitValuesResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans": {
      "operationId": "postworkforcemanagementmanagementunittimeoffplans",
      "functionName": "postWorkforcemanagementManagementunitTimeoffplans",
      "signature": "postWorkforcemanagementManagementunitTimeoffplans(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests": {
      "operationId": "postworkforcemanagementmanagementunittimeoffrequests",
      "functionName": "postWorkforcemanagementManagementunitTimeoffrequests",
      "signature": "postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query": {
      "operationId": "postworkforcemanagementmanagementunittimeoffrequestsquery",
      "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsQuery",
      "signature": "postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffRequestListing"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/waitlistpositions/query": {
      "operationId": "postworkforcemanagementmanagementunittimeoffrequestswaitlistpositionsquery",
      "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery",
      "signature": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "WaitlistPositionListing"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match": {
      "operationId": "postworkforcemanagementmanagementunitweekshifttradematch",
      "functionName": "postWorkforcemanagementManagementunitWeekShifttradeMatch",
      "signature": "postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, body, tradeId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "tradeId",
          "type": "String",
          "required": "true"
        }
      ],
      "return": "MatchShiftTradeResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades": {
      "operationId": "postworkforcemanagementmanagementunitweekshifttrades",
      "functionName": "postWorkforcemanagementManagementunitWeekShifttrades",
      "signature": "postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "ShiftTradeResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search": {
      "operationId": "postworkforcemanagementmanagementunitweekshifttradessearch",
      "functionName": "postWorkforcemanagementManagementunitWeekShifttradesSearch",
      "signature": "postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        }
      ],
      "return": "SearchShiftTradesResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk": {
      "operationId": "postworkforcemanagementmanagementunitweekshifttradesstatebulk",
      "functionName": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk",
      "signature": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, body, forceAsync)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "weekDateId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "true"
        },
        {
          "name": "forceAsync",
          "type": "Boolean",
          "required": "false"
        }
      ],
      "return": "BulkUpdateShiftTradeStateResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy": {
      "operationId": "postworkforcemanagementmanagementunitworkplancopy",
      "functionName": "postWorkforcemanagementManagementunitWorkplanCopy",
      "signature": "postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "WorkPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate": {
      "operationId": "postworkforcemanagementmanagementunitworkplanvalidate",
      "functionName": "postWorkforcemanagementManagementunitWorkplanValidate",
      "signature": "postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, body, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        },
        {
          "name": "expand",
          "type": "[String]",
          "required": "false"
        }
      ],
      "return": "ValidateWorkPlanResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy": {
      "operationId": "postworkforcemanagementmanagementunitworkplanrotationcopy",
      "functionName": "postWorkforcemanagementManagementunitWorkplanrotationCopy",
      "signature": "postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "workPlanRotationId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations": {
      "operationId": "postworkforcemanagementmanagementunitworkplanrotations",
      "functionName": "postWorkforcemanagementManagementunitWorkplanrotations",
      "signature": "postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans": {
      "operationId": "postworkforcemanagementmanagementunitworkplans",
      "functionName": "postWorkforcemanagementManagementunitWorkplans",
      "signature": "postWorkforcemanagementManagementunitWorkplans(managementUnitId, body, validationMode)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        },
        {
          "name": "validationMode",
          "type": "String",
          "required": "false"
        }
      ],
      "return": "WorkPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits": {
      "operationId": "postworkforcemanagementmanagementunits",
      "functionName": "postWorkforcemanagementManagementunits",
      "signature": "postWorkforcemanagementManagementunits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "ManagementUnit"
    },
    "POST /api/v2/workforcemanagement/notifications/update": {
      "operationId": "postworkforcemanagementnotificationsupdate",
      "functionName": "postWorkforcemanagementNotificationsUpdate",
      "signature": "postWorkforcemanagementNotificationsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "UpdateNotificationsResponse"
    },
    "POST /api/v2/workforcemanagement/schedules": {
      "operationId": "postworkforcemanagementschedules",
      "functionName": "postWorkforcemanagementSchedules",
      "signature": "postWorkforcemanagementSchedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "UserScheduleContainer"
    },
    "POST /api/v2/workforcemanagement/timeofflimits/available/query": {
      "operationId": "postworkforcemanagementtimeofflimitsavailablequery",
      "functionName": "postWorkforcemanagementTimeofflimitsAvailableQuery",
      "signature": "postWorkforcemanagementTimeofflimitsAvailableQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "AvailableTimeOffResponse"
    },
    "POST /api/v2/workforcemanagement/timeoffrequests": {
      "operationId": "postworkforcemanagementtimeoffrequests",
      "functionName": "postWorkforcemanagementTimeoffrequests",
      "signature": "postWorkforcemanagementTimeoffrequests(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "PUT /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}/values": {
      "operationId": "putworkforcemanagementmanagementunittimeofflimitvalues",
      "functionName": "putWorkforcemanagementManagementunitTimeofflimitValues",
      "signature": "putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "timeOffLimitId",
          "type": "String",
          "required": "true"
        },
        {
          "name": "body",
          "type": "Object",
          "required": "false"
        }
      ],
      "return": "TimeOffLimit"
    }
  }
}