{
    "DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
        "operationId": "deleteconversationrecordingannotation",
        "functionName": "deleteConversationRecordingAnnotation",
        "signature": "deleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "annotationId",
                "type": "String",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/orphanrecordings/{orphanId}": {
        "operationId": "deleteorphanrecording",
        "functionName": "deleteOrphanrecording",
        "signature": "deleteOrphanrecording(orphanId)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "OrphanRecording"
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies": {
        "operationId": "deleterecordingcrossplatformmediaretentionpolicies",
        "functionName": "deleteRecordingCrossplatformMediaretentionpolicies",
        "signature": "deleteRecordingCrossplatformMediaretentionpolicies(ids)",
        "parameters": [
            {
                "name": "ids",
                "type": "String",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "deleterecordingcrossplatformmediaretentionpolicy",
        "functionName": "deleteRecordingCrossplatformMediaretentionpolicy",
        "signature": "deleteRecordingCrossplatformMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/jobs/{jobId}": {
        "operationId": "deleterecordingjob",
        "functionName": "deleteRecordingJob",
        "signature": "deleteRecordingJob(jobId)",
        "parameters": [
            {
                "name": "jobId",
                "type": "String",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies": {
        "operationId": "deleterecordingmediaretentionpolicies",
        "functionName": "deleteRecordingMediaretentionpolicies",
        "signature": "deleteRecordingMediaretentionpolicies(ids)",
        "parameters": [
            {
                "name": "ids",
                "type": "String",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "deleterecordingmediaretentionpolicy",
        "functionName": "deleteRecordingMediaretentionpolicy",
        "signature": "deleteRecordingMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            }
        ]
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
        "operationId": "getconversationrecording",
        "functionName": "getConversationRecording",
        "signature": "getConversationRecording(conversationId, recordingId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "formatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "emailFormatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "chatFormatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "messageFormatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "download",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "fileName",
                "type": "String",
                "required": "false"
            },
            {
                "name": "locale",
                "type": "String",
                "required": "false"
            },
            {
                "name": "mediaFormats",
                "type": "[String]",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
        "operationId": "getconversationrecordingannotation",
        "functionName": "getConversationRecordingAnnotation",
        "signature": "getConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "annotationId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "Annotation"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
        "operationId": "getconversationrecordingannotations",
        "functionName": "getConversationRecordingAnnotations",
        "signature": "getConversationRecordingAnnotations(conversationId, recordingId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "[Annotation]"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata": {
        "operationId": "getconversationrecordingmetadata",
        "functionName": "getConversationRecordingmetadata",
        "signature": "getConversationRecordingmetadata(conversationId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "[RecordingMetadata]"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata/{recordingId}": {
        "operationId": "getconversationrecordingmetadatarecordingid",
        "functionName": "getConversationRecordingmetadataRecordingId",
        "signature": "getConversationRecordingmetadataRecordingId(conversationId, recordingId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "RecordingMetadata"
    },
    "GET /api/v2/conversations/{conversationId}/recordings": {
        "operationId": "getconversationrecordings",
        "functionName": "getConversationRecordings",
        "signature": "getConversationRecordings(conversationId, maxWaitMs, formatId, mediaFormats)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "maxWaitMs",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "formatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "mediaFormats",
                "type": "[String]",
                "required": "false"
            }
        ],
        "return": "[Recording]"
    },
    "GET /api/v2/orphanrecordings/{orphanId}": {
        "operationId": "getorphanrecording",
        "functionName": "getOrphanrecording",
        "signature": "getOrphanrecording(orphanId)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "OrphanRecording"
    },
    "GET /api/v2/orphanrecordings/{orphanId}/media": {
        "operationId": "getorphanrecordingmedia",
        "functionName": "getOrphanrecordingMedia",
        "signature": "getOrphanrecordingMedia(orphanId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "formatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "emailFormatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "chatFormatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "messageFormatId",
                "type": "String",
                "required": "false"
            },
            {
                "name": "download",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "fileName",
                "type": "String",
                "required": "false"
            },
            {
                "name": "locale",
                "type": "String",
                "required": "false"
            },
            {
                "name": "mediaFormats",
                "type": "[String]",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "GET /api/v2/orphanrecordings": {
        "operationId": "getorphanrecordings",
        "functionName": "getOrphanrecordings",
        "signature": "getOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, hasConversation, media)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "String",
                "required": "false"
            },
            {
                "name": "expand",
                "type": "[String]",
                "required": "false"
            },
            {
                "name": "nextPage",
                "type": "String",
                "required": "false"
            },
            {
                "name": "previousPage",
                "type": "String",
                "required": "false"
            },
            {
                "name": "hasConversation",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "media",
                "type": "String",
                "required": "false"
            }
        ],
        "return": "OrphanRecordingListing"
    },
    "GET /api/v2/recording/batchrequests/{jobId}": {
        "operationId": "getrecordingbatchrequest",
        "functionName": "getRecordingBatchrequest",
        "signature": "getRecordingBatchrequest(jobId)",
        "parameters": [
            {
                "name": "jobId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "BatchDownloadJobStatusResult"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies": {
        "operationId": "getrecordingcrossplatformmediaretentionpolicies",
        "functionName": "getRecordingCrossplatformMediaretentionpolicies",
        "signature": "getRecordingCrossplatformMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "String",
                "required": "false"
            },
            {
                "name": "expand",
                "type": "[String]",
                "required": "false"
            },
            {
                "name": "nextPage",
                "type": "String",
                "required": "false"
            },
            {
                "name": "previousPage",
                "type": "String",
                "required": "false"
            },
            {
                "name": "name",
                "type": "String",
                "required": "false"
            },
            {
                "name": "enabled",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "summary",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "hasErrors",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "deleteDaysThreshold",
                "type": "Number",
                "required": "false"
            }
        ],
        "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "getrecordingcrossplatformmediaretentionpolicy",
        "functionName": "getRecordingCrossplatformMediaretentionpolicy",
        "signature": "getRecordingCrossplatformMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "CrossPlatformPolicy"
    },
    "GET /api/v2/recording/jobs/{jobId}": {
        "operationId": "getrecordingjob",
        "functionName": "getRecordingJob",
        "signature": "getRecordingJob(jobId)",
        "parameters": [
            {
                "name": "jobId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "RecordingJob"
    },
    "GET /api/v2/recording/jobs/{jobId}/failedrecordings": {
        "operationId": "getrecordingjobfailedrecordings",
        "functionName": "getRecordingJobFailedrecordings",
        "signature": "getRecordingJobFailedrecordings(jobId, pageSize, pageNumber, includeTotal, cursor)",
        "parameters": [
            {
                "name": "jobId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "includeTotal",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "cursor",
                "type": "String",
                "required": "false"
            }
        ],
        "return": "FailedRecordingEntityListing"
    },
    "GET /api/v2/recording/jobs": {
        "operationId": "getrecordingjobs",
        "functionName": "getRecordingJobs",
        "signature": "getRecordingJobs(pageSize, pageNumber, sortBy, state, showOnlyMyJobs, jobType, includeTotal, cursor)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "String",
                "required": "false"
            },
            {
                "name": "state",
                "type": "String",
                "required": "false"
            },
            {
                "name": "showOnlyMyJobs",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "jobType",
                "type": "String",
                "required": "false"
            },
            {
                "name": "includeTotal",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "cursor",
                "type": "String",
                "required": "false"
            }
        ],
        "return": "RecordingJobEntityListing"
    },
    "GET /api/v2/recording/keyconfigurations/{keyConfigurationId}": {
        "operationId": "getrecordingkeyconfiguration",
        "functionName": "getRecordingKeyconfiguration",
        "signature": "getRecordingKeyconfiguration(keyConfigurationId)",
        "parameters": [
            {
                "name": "keyConfigurationId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "RecordingEncryptionConfiguration"
    },
    "GET /api/v2/recording/keyconfigurations": {
        "operationId": "getrecordingkeyconfigurations",
        "functionName": "getRecordingKeyconfigurations",
        "signature": "getRecordingKeyconfigurations()",
        
        "return": "RecordingEncryptionConfigurationListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies": {
        "operationId": "getrecordingmediaretentionpolicies",
        "functionName": "getRecordingMediaretentionpolicies",
        "signature": "getRecordingMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "String",
                "required": "false"
            },
            {
                "name": "expand",
                "type": "[String]",
                "required": "false"
            },
            {
                "name": "nextPage",
                "type": "String",
                "required": "false"
            },
            {
                "name": "previousPage",
                "type": "String",
                "required": "false"
            },
            {
                "name": "name",
                "type": "String",
                "required": "false"
            },
            {
                "name": "enabled",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "summary",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "hasErrors",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "deleteDaysThreshold",
                "type": "Number",
                "required": "false"
            }
        ],
        "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "getrecordingmediaretentionpolicy",
        "functionName": "getRecordingMediaretentionpolicy",
        "signature": "getRecordingMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "GET /api/v2/recording/recordingkeys": {
        "operationId": "getrecordingrecordingkeys",
        "functionName": "getRecordingRecordingkeys",
        "signature": "getRecordingRecordingkeys(pageSize, pageNumber)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "Number",
                "required": "false"
            }
        ],
        "return": "EncryptionKeyEntityListing"
    },
    "GET /api/v2/recording/recordingkeys/rotationschedule": {
        "operationId": "getrecordingrecordingkeysrotationschedule",
        "functionName": "getRecordingRecordingkeysRotationschedule",
        "signature": "getRecordingRecordingkeysRotationschedule()",
        
        "return": "KeyRotationSchedule"
    },
    "GET /api/v2/recording/settings": {
        "operationId": "getrecordingsettings",
        "functionName": "getRecordingSettings",
        "signature": "getRecordingSettings(createDefault)",
        "parameters": [
            {
                "name": "createDefault",
                "type": "Boolean",
                "required": "false"
            }
        ],
        "return": "RecordingSettings"
    },
    "GET /api/v2/recording/uploads/reports/{reportId}": {
        "operationId": "getrecordinguploadsreport",
        "functionName": "getRecordingUploadsReport",
        "signature": "getRecordingUploadsReport(reportId)",
        "parameters": [
            {
                "name": "reportId",
                "type": "String",
                "required": "true"
            }
        ],
        "return": "RecordingUploadReport"
    },
    "GET /api/v2/recordings/retention/query": {
        "operationId": "getrecordingsretentionquery",
        "functionName": "getRecordingsRetentionQuery",
        "signature": "getRecordingsRetentionQuery(retentionThresholdDays, cursor, pageSize)",
        "parameters": [
            {
                "name": "retentionThresholdDays",
                "type": "Number",
                "required": "true"
            },
            {
                "name": "cursor",
                "type": "String",
                "required": "false"
            },
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            }
        ],
        "return": "RecordingRetentionCursorEntityListing"
    },
    "GET /api/v2/recordings/screensessions": {
        "operationId": "getrecordingsscreensessions",
        "functionName": "getRecordingsScreensessions",
        "signature": "getRecordingsScreensessions(pageSize, pageNumber)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "Number",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "Number",
                "required": "false"
            }
        ],
        "return": "ScreenRecordingSessionListing"
    },
    "PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "patchrecordingcrossplatformmediaretentionpolicy",
        "functionName": "patchRecordingCrossplatformMediaretentionpolicy",
        "signature": "patchRecordingCrossplatformMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "CrossPlatformPolicy"
    },
    "PATCH /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "patchrecordingmediaretentionpolicy",
        "functionName": "patchRecordingMediaretentionpolicy",
        "signature": "patchRecordingMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "PATCH /api/v2/recordings/screensessions/{recordingSessionId}": {
        "operationId": "patchrecordingsscreensession",
        "functionName": "patchRecordingsScreensession",
        "signature": "patchRecordingsScreensession(recordingSessionId, body)",
        "parameters": [
            {
                "name": "recordingSessionId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "false"
            }
        ]
    },
    "POST /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
        "operationId": "postconversationrecordingannotations",
        "functionName": "postConversationRecordingAnnotations",
        "signature": "postConversationRecordingAnnotations(conversationId, recordingId, body)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "Annotation"
    },
    "POST /api/v2/recording/batchrequests": {
        "operationId": "postrecordingbatchrequests",
        "functionName": "postRecordingBatchrequests",
        "signature": "postRecordingBatchrequests(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "BatchDownloadJobSubmissionResult"
    },
    "POST /api/v2/recording/crossplatform/mediaretentionpolicies": {
        "operationId": "postrecordingcrossplatformmediaretentionpolicies",
        "functionName": "postRecordingCrossplatformMediaretentionpolicies",
        "signature": "postRecordingCrossplatformMediaretentionpolicies(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "CrossPlatformPolicy"
    },
    "POST /api/v2/recording/jobs": {
        "operationId": "postrecordingjobs",
        "functionName": "postRecordingJobs",
        "signature": "postRecordingJobs(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "RecordingJob"
    },
    "POST /api/v2/recording/keyconfigurations": {
        "operationId": "postrecordingkeyconfigurations",
        "functionName": "postRecordingKeyconfigurations",
        "signature": "postRecordingKeyconfigurations(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "RecordingEncryptionConfiguration"
    },
    "POST /api/v2/recording/keyconfigurations/validate": {
        "operationId": "postrecordingkeyconfigurationsvalidate",
        "functionName": "postRecordingKeyconfigurationsValidate",
        "signature": "postRecordingKeyconfigurationsValidate(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "RecordingEncryptionConfiguration"
    },
    "POST /api/v2/recording/localkeys": {
        "operationId": "postrecordinglocalkeys",
        "functionName": "postRecordingLocalkeys",
        "signature": "postRecordingLocalkeys(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "EncryptionKey"
    },
    "POST /api/v2/recording/mediaretentionpolicies": {
        "operationId": "postrecordingmediaretentionpolicies",
        "functionName": "postRecordingMediaretentionpolicies",
        "signature": "postRecordingMediaretentionpolicies(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "POST /api/v2/recording/recordingkeys": {
        "operationId": "postrecordingrecordingkeys",
        "functionName": "postRecordingRecordingkeys",
        "signature": "postRecordingRecordingkeys()",
        
        "return": "EncryptionKey"
    },
    "POST /api/v2/recording/uploads/reports": {
        "operationId": "postrecordinguploadsreports",
        "functionName": "postRecordingUploadsReports",
        "signature": "postRecordingUploadsReports(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "RecordingUploadReport"
    },
    "POST /api/v2/recordings/deletionprotection": {
        "operationId": "postrecordingsdeletionprotection",
        "functionName": "postRecordingsDeletionprotection",
        "signature": "postRecordingsDeletionprotection(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "[AddressableEntityRef]"
    },
    "POST /api/v2/recordings/screensessions/acknowledge": {
        "operationId": "postrecordingsscreensessionsacknowledge",
        "functionName": "postRecordingsScreensessionsAcknowledge",
        "signature": "postRecordingsScreensessionsAcknowledge(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ]
    },
    "POST /api/v2/recordings/screensessions/metadata": {
        "operationId": "postrecordingsscreensessionsmetadata",
        "functionName": "postRecordingsScreensessionsMetadata",
        "signature": "postRecordingsScreensessionsMetadata(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ]
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
        "operationId": "putconversationrecording",
        "functionName": "putConversationRecording",
        "signature": "putConversationRecording(conversationId, recordingId, body, clearExport)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            },
            {
                "name": "clearExport",
                "type": "Boolean",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
        "operationId": "putconversationrecordingannotation",
        "functionName": "putConversationRecordingAnnotation",
        "signature": "putConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "annotationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "Annotation"
    },
    "PUT /api/v2/orphanrecordings/{orphanId}": {
        "operationId": "putorphanrecording",
        "functionName": "putOrphanrecording",
        "signature": "putOrphanrecording(orphanId, body)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "PUT /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "putrecordingcrossplatformmediaretentionpolicy",
        "functionName": "putRecordingCrossplatformMediaretentionpolicy",
        "signature": "putRecordingCrossplatformMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "CrossPlatformPolicy"
    },
    "PUT /api/v2/recording/jobs/{jobId}": {
        "operationId": "putrecordingjob",
        "functionName": "putRecordingJob",
        "signature": "putRecordingJob(jobId, body)",
        "parameters": [
            {
                "name": "jobId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "RecordingJob"
    },
    "PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}": {
        "operationId": "putrecordingkeyconfiguration",
        "functionName": "putRecordingKeyconfiguration",
        "signature": "putRecordingKeyconfiguration(keyConfigurationId, body)",
        "parameters": [
            {
                "name": "keyConfigurationId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "RecordingEncryptionConfiguration"
    },
    "PUT /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "putrecordingmediaretentionpolicy",
        "functionName": "putRecordingMediaretentionpolicy",
        "signature": "putRecordingMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "String",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "PUT /api/v2/recording/recordingkeys/rotationschedule": {
        "operationId": "putrecordingrecordingkeysrotationschedule",
        "functionName": "putRecordingRecordingkeysRotationschedule",
        "signature": "putRecordingRecordingkeysRotationschedule(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "KeyRotationSchedule"
    },
    "PUT /api/v2/recording/settings": {
        "operationId": "putrecordingsettings",
        "functionName": "putRecordingSettings",
        "signature": "putRecordingSettings(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Object",
                "required": "true"
            }
        ],
        "return": "RecordingSettings"
    },
    "PUT /api/v2/recordings/deletionprotection": {
        "operationId": "putrecordingsdeletionprotection",
        "functionName": "putRecordingsDeletionprotection",
        "signature": "putRecordingsDeletionprotection(protect, body)",
        "parameters": [
            {
                "name": "protect",
                "type": "Boolean",
                "required": "false"
            },
            {
                "name": "body",
                "type": "Object",
                "required": "false"
            }
        ]
    }
    
}